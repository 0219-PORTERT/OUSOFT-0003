
ousoft0003dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ec8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001500  080110c8  080110c8  000210c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000027c  080125c8  080125c8  000225c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000328  08012844  08012844  00022844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b6c  08012b6c  000309c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08012b6c  08012b6c  00022b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b78  08012b78  00022b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c0  20000000  08012b7c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  200009c0  0801353c  000309c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f14  0801353c  00030f14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000309c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011963  00000000  00000000  000309ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b59  00000000  00000000  00042351  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc0  00000000  00000000  00044eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00045c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002babd  00000000  00000000  000468b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3f7  00000000  00000000  00072375  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdaa0  00000000  00000000  0007f76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d20c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c38  00000000  00000000  0017d288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200009c0 	.word	0x200009c0
 800021c:	00000000 	.word	0x00000000
 8000220:	080110b0 	.word	0x080110b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200009c4 	.word	0x200009c4
 800023c:	080110b0 	.word	0x080110b0

08000240 <d_make_comp>:
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	1e4c      	subs	r4, r1, #1
 8000244:	4605      	mov	r5, r0
 8000246:	2c4e      	cmp	r4, #78	; 0x4e
 8000248:	d83f      	bhi.n	80002ca <d_make_comp+0x8a>
 800024a:	e8df f004 	tbb	[pc, r4]
 800024e:	3b3b      	.short	0x3b3b
 8000250:	3e3e3b3b 	.word	0x3e3e3b3b
 8000254:	28283e3e 	.word	0x28283e3e
 8000258:	2828283b 	.word	0x2828283b
 800025c:	28282828 	.word	0x28282828
 8000260:	28282828 	.word	0x28282828
 8000264:	29293e28 	.word	0x29293e28
 8000268:	29292929 	.word	0x29292929
 800026c:	283b2929 	.word	0x283b2929
 8000270:	28282828 	.word	0x28282828
 8000274:	3c29283e 	.word	0x3c29283e
 8000278:	293b3e3b 	.word	0x293b3e3b
 800027c:	3e3e3c29 	.word	0x3e3e3c29
 8000280:	3b282828 	.word	0x3b282828
 8000284:	3b3b3b3b 	.word	0x3b3b3b3b
 8000288:	283b3b28 	.word	0x283b3b28
 800028c:	283e3e3b 	.word	0x283e3e3b
 8000290:	3e3e2828 	.word	0x3e3e2828
 8000294:	2828283e 	.word	0x2828283e
 8000298:	293b293b 	.word	0x293b293b
 800029c:	29          	.byte	0x29
 800029d:	00          	.byte	0x00
 800029e:	b1a2      	cbz	r2, 80002ca <d_make_comp+0x8a>
 80002a0:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
 80002a4:	4284      	cmp	r4, r0
 80002a6:	da10      	bge.n	80002ca <d_make_comp+0x8a>
 80002a8:	692f      	ldr	r7, [r5, #16]
 80002aa:	0126      	lsls	r6, r4, #4
 80002ac:	19b8      	adds	r0, r7, r6
 80002ae:	3401      	adds	r4, #1
 80002b0:	f04f 0c00 	mov.w	ip, #0
 80002b4:	f8c0 c004 	str.w	ip, [r0, #4]
 80002b8:	616c      	str	r4, [r5, #20]
 80002ba:	55b9      	strb	r1, [r7, r6]
 80002bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80002c0:	bcf0      	pop	{r4, r5, r6, r7}
 80002c2:	4770      	bx	lr
 80002c4:	b10a      	cbz	r2, 80002ca <d_make_comp+0x8a>
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1ea      	bne.n	80002a0 <d_make_comp+0x60>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
 80002ce:	4770      	bx	lr

080002d0 <d_ref_qualifier>:
 80002d0:	b410      	push	{r4}
 80002d2:	68c3      	ldr	r3, [r0, #12]
 80002d4:	781c      	ldrb	r4, [r3, #0]
 80002d6:	2c52      	cmp	r4, #82	; 0x52
 80002d8:	460a      	mov	r2, r1
 80002da:	d00f      	beq.n	80002fc <d_ref_qualifier+0x2c>
 80002dc:	2c4f      	cmp	r4, #79	; 0x4f
 80002de:	d003      	beq.n	80002e8 <d_ref_qualifier+0x18>
 80002e0:	4608      	mov	r0, r1
 80002e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ea:	3103      	adds	r1, #3
 80002ec:	6301      	str	r1, [r0, #48]	; 0x30
 80002ee:	2120      	movs	r1, #32
 80002f0:	3301      	adds	r3, #1
 80002f2:	60c3      	str	r3, [r0, #12]
 80002f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002f8:	2300      	movs	r3, #0
 80002fa:	e7a1      	b.n	8000240 <d_make_comp>
 80002fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002fe:	3102      	adds	r1, #2
 8000300:	6301      	str	r1, [r0, #48]	; 0x30
 8000302:	211f      	movs	r1, #31
 8000304:	e7f4      	b.n	80002f0 <d_ref_qualifier+0x20>
 8000306:	bf00      	nop

08000308 <d_count_templates_scopes>:
 8000308:	2a00      	cmp	r2, #0
 800030a:	d04e      	beq.n	80003aa <d_count_templates_scopes+0xa2>
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4605      	mov	r5, r0
 8000310:	460e      	mov	r6, r1
 8000312:	4614      	mov	r4, r2
 8000314:	7823      	ldrb	r3, [r4, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	2b4e      	cmp	r3, #78	; 0x4e
 800031a:	d82c      	bhi.n	8000376 <d_count_templates_scopes+0x6e>
 800031c:	e8df f003 	tbb	[pc, r3]
 8000320:	40373737 	.word	0x40373737
 8000324:	28282b2b 	.word	0x28282b2b
 8000328:	37373737 	.word	0x37373737
 800032c:	37373737 	.word	0x37373737
 8000330:	37373737 	.word	0x37373737
 8000334:	2b373737 	.word	0x2b373737
 8000338:	37373737 	.word	0x37373737
 800033c:	37373737 	.word	0x37373737
 8000340:	30303737 	.word	0x30303737
 8000344:	372b3737 	.word	0x372b3737
 8000348:	2c373737 	.word	0x2c373737
 800034c:	37373737 	.word	0x37373737
 8000350:	3737282b 	.word	0x3737282b
 8000354:	37373737 	.word	0x37373737
 8000358:	37373737 	.word	0x37373737
 800035c:	2b373737 	.word	0x2b373737
 8000360:	2c2c372b 	.word	0x2c2c372b
 8000364:	372b2c2c 	.word	0x372b2c2c
 8000368:	37373737 	.word	0x37373737
 800036c:	3737      	.short	0x3737
 800036e:	37          	.byte	0x37
 800036f:	00          	.byte	0x00
 8000370:	68e4      	ldr	r4, [r4, #12]
 8000372:	2c00      	cmp	r4, #0
 8000374:	d1ce      	bne.n	8000314 <d_count_templates_scopes+0xc>
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	68a4      	ldr	r4, [r4, #8]
 800037a:	2c00      	cmp	r4, #0
 800037c:	d1ca      	bne.n	8000314 <d_count_templates_scopes+0xc>
 800037e:	e7fa      	b.n	8000376 <d_count_templates_scopes+0x6e>
 8000380:	68a2      	ldr	r2, [r4, #8]
 8000382:	7813      	ldrb	r3, [r2, #0]
 8000384:	2b05      	cmp	r3, #5
 8000386:	d103      	bne.n	8000390 <d_count_templates_scopes+0x88>
 8000388:	6833      	ldr	r3, [r6, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	6033      	str	r3, [r6, #0]
 800038e:	68a2      	ldr	r2, [r4, #8]
 8000390:	4631      	mov	r1, r6
 8000392:	4628      	mov	r0, r5
 8000394:	f7ff ffb8 	bl	8000308 <d_count_templates_scopes>
 8000398:	68e4      	ldr	r4, [r4, #12]
 800039a:	2c00      	cmp	r4, #0
 800039c:	d1ba      	bne.n	8000314 <d_count_templates_scopes+0xc>
 800039e:	e7ea      	b.n	8000376 <d_count_templates_scopes+0x6e>
 80003a0:	682b      	ldr	r3, [r5, #0]
 80003a2:	3301      	adds	r3, #1
 80003a4:	602b      	str	r3, [r5, #0]
 80003a6:	68a2      	ldr	r2, [r4, #8]
 80003a8:	e7f2      	b.n	8000390 <d_count_templates_scopes+0x88>
 80003aa:	4770      	bx	lr

080003ac <d_append_buffer>:
 80003ac:	b39a      	cbz	r2, 8000416 <d_append_buffer+0x6a>
 80003ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003b2:	188e      	adds	r6, r1, r2
 80003b4:	4604      	mov	r4, r0
 80003b6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1e4d      	subs	r5, r1, #1
 80003be:	2700      	movs	r7, #0
 80003c0:	e016      	b.n	80003f0 <d_append_buffer+0x44>
 80003c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80003c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80003ca:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80003ce:	4798      	blx	r3
 80003d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80003d4:	2200      	movs	r2, #0
 80003d6:	3301      	adds	r3, #1
 80003d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80003dc:	42b5      	cmp	r5, r6
 80003de:	f04f 0301 	mov.w	r3, #1
 80003e2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003e6:	f804 8002 	strb.w	r8, [r4, r2]
 80003ea:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003ee:	d010      	beq.n	8000412 <d_append_buffer+0x66>
 80003f0:	2bff      	cmp	r3, #255	; 0xff
 80003f2:	4619      	mov	r1, r3
 80003f4:	4620      	mov	r0, r4
 80003f6:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80003fa:	d0e2      	beq.n	80003c2 <d_append_buffer+0x16>
 80003fc:	461a      	mov	r2, r3
 80003fe:	42b5      	cmp	r5, r6
 8000400:	f103 0301 	add.w	r3, r3, #1
 8000404:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8000408:	f804 8002 	strb.w	r8, [r4, r2]
 800040c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000410:	d1ee      	bne.n	80003f0 <d_append_buffer+0x44>
 8000412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000416:	4770      	bx	lr

08000418 <is_fnqual_component_type>:
 8000418:	f1a0 031c 	sub.w	r3, r0, #28
 800041c:	2b04      	cmp	r3, #4
 800041e:	d907      	bls.n	8000430 <is_fnqual_component_type+0x18>
 8000420:	284c      	cmp	r0, #76	; 0x4c
 8000422:	d005      	beq.n	8000430 <is_fnqual_component_type+0x18>
 8000424:	384e      	subs	r0, #78	; 0x4e
 8000426:	2801      	cmp	r0, #1
 8000428:	bf8c      	ite	hi
 800042a:	2000      	movhi	r0, #0
 800042c:	2001      	movls	r0, #1
 800042e:	4770      	bx	lr
 8000430:	2001      	movs	r0, #1
 8000432:	4770      	bx	lr

08000434 <d_number.isra.1>:
 8000434:	b470      	push	{r4, r5, r6}
 8000436:	6802      	ldr	r2, [r0, #0]
 8000438:	7811      	ldrb	r1, [r2, #0]
 800043a:	296e      	cmp	r1, #110	; 0x6e
 800043c:	d018      	beq.n	8000470 <d_number.isra.1+0x3c>
 800043e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000442:	2b09      	cmp	r3, #9
 8000444:	d81e      	bhi.n	8000484 <d_number.isra.1+0x50>
 8000446:	2600      	movs	r6, #0
 8000448:	2300      	movs	r3, #0
 800044a:	3201      	adds	r2, #1
 800044c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000450:	6002      	str	r2, [r0, #0]
 8000452:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000456:	7811      	ldrb	r1, [r2, #0]
 8000458:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800045c:	2d09      	cmp	r5, #9
 800045e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000462:	d9f2      	bls.n	800044a <d_number.isra.1+0x16>
 8000464:	b10e      	cbz	r6, 800046a <d_number.isra.1+0x36>
 8000466:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 800046a:	4618      	mov	r0, r3
 800046c:	bc70      	pop	{r4, r5, r6}
 800046e:	4770      	bx	lr
 8000470:	1c53      	adds	r3, r2, #1
 8000472:	6003      	str	r3, [r0, #0]
 8000474:	7851      	ldrb	r1, [r2, #1]
 8000476:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800047a:	2a09      	cmp	r2, #9
 800047c:	d802      	bhi.n	8000484 <d_number.isra.1+0x50>
 800047e:	461a      	mov	r2, r3
 8000480:	2601      	movs	r6, #1
 8000482:	e7e1      	b.n	8000448 <d_number.isra.1+0x14>
 8000484:	2300      	movs	r3, #0
 8000486:	4618      	mov	r0, r3
 8000488:	bc70      	pop	{r4, r5, r6}
 800048a:	4770      	bx	lr

0800048c <d_number_component>:
 800048c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000490:	4293      	cmp	r3, r2
 8000492:	b570      	push	{r4, r5, r6, lr}
 8000494:	da0e      	bge.n	80004b4 <d_number_component+0x28>
 8000496:	6901      	ldr	r1, [r0, #16]
 8000498:	011a      	lsls	r2, r3, #4
 800049a:	188c      	adds	r4, r1, r2
 800049c:	3301      	adds	r3, #1
 800049e:	2600      	movs	r6, #0
 80004a0:	2541      	movs	r5, #65	; 0x41
 80004a2:	6066      	str	r6, [r4, #4]
 80004a4:	300c      	adds	r0, #12
 80004a6:	6083      	str	r3, [r0, #8]
 80004a8:	548d      	strb	r5, [r1, r2]
 80004aa:	f7ff ffc3 	bl	8000434 <d_number.isra.1>
 80004ae:	60a0      	str	r0, [r4, #8]
 80004b0:	4620      	mov	r0, r4
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	2400      	movs	r4, #0
 80004b6:	4620      	mov	r0, r4
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	bf00      	nop

080004bc <d_compact_number>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	68c3      	ldr	r3, [r0, #12]
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	2a5f      	cmp	r2, #95	; 0x5f
 80004c4:	4604      	mov	r4, r0
 80004c6:	d00d      	beq.n	80004e4 <d_compact_number+0x28>
 80004c8:	2a6e      	cmp	r2, #110	; 0x6e
 80004ca:	d00d      	beq.n	80004e8 <d_compact_number+0x2c>
 80004cc:	300c      	adds	r0, #12
 80004ce:	f7ff ffb1 	bl	8000434 <d_number.isra.1>
 80004d2:	3001      	adds	r0, #1
 80004d4:	d408      	bmi.n	80004e8 <d_compact_number+0x2c>
 80004d6:	68e3      	ldr	r3, [r4, #12]
 80004d8:	781a      	ldrb	r2, [r3, #0]
 80004da:	2a5f      	cmp	r2, #95	; 0x5f
 80004dc:	d104      	bne.n	80004e8 <d_compact_number+0x2c>
 80004de:	3301      	adds	r3, #1
 80004e0:	60e3      	str	r3, [r4, #12]
 80004e2:	bd10      	pop	{r4, pc}
 80004e4:	2000      	movs	r0, #0
 80004e6:	e7fa      	b.n	80004de <d_compact_number+0x22>
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	bf00      	nop

080004f0 <d_template_param>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	68c3      	ldr	r3, [r0, #12]
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	2a54      	cmp	r2, #84	; 0x54
 80004f8:	d119      	bne.n	800052e <d_template_param+0x3e>
 80004fa:	3301      	adds	r3, #1
 80004fc:	60c3      	str	r3, [r0, #12]
 80004fe:	4604      	mov	r4, r0
 8000500:	f7ff ffdc 	bl	80004bc <d_compact_number>
 8000504:	1e05      	subs	r5, r0, #0
 8000506:	db12      	blt.n	800052e <d_template_param+0x3e>
 8000508:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800050c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800050e:	428b      	cmp	r3, r1
 8000510:	f102 0201 	add.w	r2, r2, #1
 8000514:	62a2      	str	r2, [r4, #40]	; 0x28
 8000516:	da0a      	bge.n	800052e <d_template_param+0x3e>
 8000518:	6921      	ldr	r1, [r4, #16]
 800051a:	011a      	lsls	r2, r3, #4
 800051c:	1888      	adds	r0, r1, r2
 800051e:	3301      	adds	r3, #1
 8000520:	2700      	movs	r7, #0
 8000522:	2605      	movs	r6, #5
 8000524:	6047      	str	r7, [r0, #4]
 8000526:	6163      	str	r3, [r4, #20]
 8000528:	548e      	strb	r6, [r1, r2]
 800052a:	6085      	str	r5, [r0, #8]
 800052c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800052e:	2000      	movs	r0, #0
 8000530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000532:	bf00      	nop

08000534 <d_source_name>:
 8000534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000538:	4604      	mov	r4, r0
 800053a:	300c      	adds	r0, #12
 800053c:	f7ff ff7a 	bl	8000434 <d_number.isra.1>
 8000540:	1e07      	subs	r7, r0, #0
 8000542:	dd49      	ble.n	80005d8 <d_source_name+0xa4>
 8000544:	68e5      	ldr	r5, [r4, #12]
 8000546:	6863      	ldr	r3, [r4, #4]
 8000548:	1b5b      	subs	r3, r3, r5
 800054a:	429f      	cmp	r7, r3
 800054c:	dc42      	bgt.n	80005d4 <d_source_name+0xa0>
 800054e:	68a2      	ldr	r2, [r4, #8]
 8000550:	19eb      	adds	r3, r5, r7
 8000552:	0752      	lsls	r2, r2, #29
 8000554:	60e3      	str	r3, [r4, #12]
 8000556:	d504      	bpl.n	8000562 <d_source_name+0x2e>
 8000558:	5dea      	ldrb	r2, [r5, r7]
 800055a:	2a24      	cmp	r2, #36	; 0x24
 800055c:	bf04      	itt	eq
 800055e:	3301      	addeq	r3, #1
 8000560:	60e3      	streq	r3, [r4, #12]
 8000562:	2f09      	cmp	r7, #9
 8000564:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
 8000568:	dc10      	bgt.n	800058c <d_source_name+0x58>
 800056a:	45b0      	cmp	r8, r6
 800056c:	dd32      	ble.n	80005d4 <d_source_name+0xa0>
 800056e:	6921      	ldr	r1, [r4, #16]
 8000570:	0132      	lsls	r2, r6, #4
 8000572:	1888      	adds	r0, r1, r2
 8000574:	3601      	adds	r6, #1
 8000576:	2300      	movs	r3, #0
 8000578:	6043      	str	r3, [r0, #4]
 800057a:	6166      	str	r6, [r4, #20]
 800057c:	b355      	cbz	r5, 80005d4 <d_source_name+0xa0>
 800057e:	6043      	str	r3, [r0, #4]
 8000580:	548b      	strb	r3, [r1, r2]
 8000582:	e9c0 5702 	strd	r5, r7, [r0, #8]
 8000586:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800058c:	2208      	movs	r2, #8
 800058e:	4914      	ldr	r1, [pc, #80]	; (80005e0 <d_source_name+0xac>)
 8000590:	4628      	mov	r0, r5
 8000592:	f00d fa77 	bl	800da84 <memcmp>
 8000596:	2800      	cmp	r0, #0
 8000598:	d1e7      	bne.n	800056a <d_source_name+0x36>
 800059a:	7a2b      	ldrb	r3, [r5, #8]
 800059c:	2b2e      	cmp	r3, #46	; 0x2e
 800059e:	d003      	beq.n	80005a8 <d_source_name+0x74>
 80005a0:	2b5f      	cmp	r3, #95	; 0x5f
 80005a2:	d001      	beq.n	80005a8 <d_source_name+0x74>
 80005a4:	2b24      	cmp	r3, #36	; 0x24
 80005a6:	d1e0      	bne.n	800056a <d_source_name+0x36>
 80005a8:	7a6b      	ldrb	r3, [r5, #9]
 80005aa:	2b4e      	cmp	r3, #78	; 0x4e
 80005ac:	d1dd      	bne.n	800056a <d_source_name+0x36>
 80005ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005b0:	3316      	adds	r3, #22
 80005b2:	1bdf      	subs	r7, r3, r7
 80005b4:	45b0      	cmp	r8, r6
 80005b6:	6327      	str	r7, [r4, #48]	; 0x30
 80005b8:	dd0c      	ble.n	80005d4 <d_source_name+0xa0>
 80005ba:	6922      	ldr	r2, [r4, #16]
 80005bc:	4d09      	ldr	r5, [pc, #36]	; (80005e4 <d_source_name+0xb0>)
 80005be:	0133      	lsls	r3, r6, #4
 80005c0:	18d0      	adds	r0, r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	3601      	adds	r6, #1
 80005c6:	6166      	str	r6, [r4, #20]
 80005c8:	6041      	str	r1, [r0, #4]
 80005ca:	54d1      	strb	r1, [r2, r3]
 80005cc:	2315      	movs	r3, #21
 80005ce:	e9c0 5302 	strd	r5, r3, [r0, #8]
 80005d2:	e7d8      	b.n	8000586 <d_source_name+0x52>
 80005d4:	2000      	movs	r0, #0
 80005d6:	e7d6      	b.n	8000586 <d_source_name+0x52>
 80005d8:	2000      	movs	r0, #0
 80005da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005de:	bf00      	nop
 80005e0:	08011af4 	.word	0x08011af4
 80005e4:	08011b00 	.word	0x08011b00

080005e8 <d_abi_tags>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	68c3      	ldr	r3, [r0, #12]
 80005ec:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	2a42      	cmp	r2, #66	; 0x42
 80005f2:	4604      	mov	r4, r0
 80005f4:	460d      	mov	r5, r1
 80005f6:	d10f      	bne.n	8000618 <d_abi_tags+0x30>
 80005f8:	3301      	adds	r3, #1
 80005fa:	60e3      	str	r3, [r4, #12]
 80005fc:	4620      	mov	r0, r4
 80005fe:	f7ff ff99 	bl	8000534 <d_source_name>
 8000602:	462a      	mov	r2, r5
 8000604:	4603      	mov	r3, r0
 8000606:	214b      	movs	r1, #75	; 0x4b
 8000608:	4620      	mov	r0, r4
 800060a:	f7ff fe19 	bl	8000240 <d_make_comp>
 800060e:	68e3      	ldr	r3, [r4, #12]
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	2a42      	cmp	r2, #66	; 0x42
 8000614:	4605      	mov	r5, r0
 8000616:	d0ef      	beq.n	80005f8 <d_abi_tags+0x10>
 8000618:	62e6      	str	r6, [r4, #44]	; 0x2c
 800061a:	4628      	mov	r0, r5
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	bf00      	nop

08000620 <d_substitution>:
 8000620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000624:	4605      	mov	r5, r0
 8000626:	68c0      	ldr	r0, [r0, #12]
 8000628:	7803      	ldrb	r3, [r0, #0]
 800062a:	2b53      	cmp	r3, #83	; 0x53
 800062c:	d131      	bne.n	8000692 <d_substitution+0x72>
 800062e:	1c43      	adds	r3, r0, #1
 8000630:	60eb      	str	r3, [r5, #12]
 8000632:	7842      	ldrb	r2, [r0, #1]
 8000634:	b3a2      	cbz	r2, 80006a0 <d_substitution+0x80>
 8000636:	1c83      	adds	r3, r0, #2
 8000638:	60eb      	str	r3, [r5, #12]
 800063a:	7842      	ldrb	r2, [r0, #1]
 800063c:	2a5f      	cmp	r2, #95	; 0x5f
 800063e:	f000 8089 	beq.w	8000754 <d_substitution+0x134>
 8000642:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000646:	b2e3      	uxtb	r3, r4
 8000648:	2b09      	cmp	r3, #9
 800064a:	d825      	bhi.n	8000698 <d_substitution+0x78>
 800064c:	2100      	movs	r1, #0
 800064e:	e00e      	b.n	800066e <d_substitution+0x4e>
 8000650:	3b30      	subs	r3, #48	; 0x30
 8000652:	4299      	cmp	r1, r3
 8000654:	d81d      	bhi.n	8000692 <d_substitution+0x72>
 8000656:	68e9      	ldr	r1, [r5, #12]
 8000658:	780a      	ldrb	r2, [r1, #0]
 800065a:	1c48      	adds	r0, r1, #1
 800065c:	b122      	cbz	r2, 8000668 <d_substitution+0x48>
 800065e:	60e8      	str	r0, [r5, #12]
 8000660:	780a      	ldrb	r2, [r1, #0]
 8000662:	2a5f      	cmp	r2, #95	; 0x5f
 8000664:	f000 8082 	beq.w	800076c <d_substitution+0x14c>
 8000668:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800066c:	4619      	mov	r1, r3
 800066e:	b2e4      	uxtb	r4, r4
 8000670:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000674:	2c09      	cmp	r4, #9
 8000676:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800067a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800067e:	d9e7      	bls.n	8000650 <d_substitution+0x30>
 8000680:	2819      	cmp	r0, #25
 8000682:	d806      	bhi.n	8000692 <d_substitution+0x72>
 8000684:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800068c:	3b37      	subs	r3, #55	; 0x37
 800068e:	4299      	cmp	r1, r3
 8000690:	d9e1      	bls.n	8000656 <d_substitution+0x36>
 8000692:	2000      	movs	r0, #0
 8000694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000698:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800069c:	2b19      	cmp	r3, #25
 800069e:	d9d5      	bls.n	800064c <d_substitution+0x2c>
 80006a0:	68ab      	ldr	r3, [r5, #8]
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf14      	ite	ne
 80006aa:	2401      	movne	r4, #1
 80006ac:	2400      	moveq	r4, #0
 80006ae:	d101      	bne.n	80006b4 <d_substitution+0x94>
 80006b0:	2900      	cmp	r1, #0
 80006b2:	d15d      	bne.n	8000770 <d_substitution+0x150>
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <d_substitution+0x16c>)
 80006b6:	2174      	movs	r1, #116	; 0x74
 80006b8:	4291      	cmp	r1, r2
 80006ba:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 80006be:	d005      	beq.n	80006cc <d_substitution+0xac>
 80006c0:	331c      	adds	r3, #28
 80006c2:	4283      	cmp	r3, r0
 80006c4:	d2e5      	bcs.n	8000692 <d_substitution+0x72>
 80006c6:	7819      	ldrb	r1, [r3, #0]
 80006c8:	4291      	cmp	r1, r2
 80006ca:	d1f9      	bne.n	80006c0 <d_substitution+0xa0>
 80006cc:	6958      	ldr	r0, [r3, #20]
 80006ce:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
 80006d2:	b1a8      	cbz	r0, 8000700 <d_substitution+0xe0>
 80006d4:	428a      	cmp	r2, r1
 80006d6:	da57      	bge.n	8000788 <d_substitution+0x168>
 80006d8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80006dc:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80006e0:	0117      	lsls	r7, r2, #4
 80006e2:	eb0c 0607 	add.w	r6, ip, r7
 80006e6:	3201      	adds	r2, #1
 80006e8:	f04f 0900 	mov.w	r9, #0
 80006ec:	f04f 0818 	mov.w	r8, #24
 80006f0:	f8c6 9004 	str.w	r9, [r6, #4]
 80006f4:	616a      	str	r2, [r5, #20]
 80006f6:	f80c 8007 	strb.w	r8, [ip, r7]
 80006fa:	e9c6 0e02 	strd	r0, lr, [r6, #8]
 80006fe:	62ee      	str	r6, [r5, #44]	; 0x2c
 8000700:	2c00      	cmp	r4, #0
 8000702:	d13c      	bne.n	800077e <d_substitution+0x15e>
 8000704:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
 8000708:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800070a:	4291      	cmp	r1, r2
 800070c:	4423      	add	r3, r4
 800070e:	632b      	str	r3, [r5, #48]	; 0x30
 8000710:	dd38      	ble.n	8000784 <d_substitution+0x164>
 8000712:	6929      	ldr	r1, [r5, #16]
 8000714:	0113      	lsls	r3, r2, #4
 8000716:	18c8      	adds	r0, r1, r3
 8000718:	3201      	adds	r2, #1
 800071a:	f04f 0c00 	mov.w	ip, #0
 800071e:	2718      	movs	r7, #24
 8000720:	f8c0 c004 	str.w	ip, [r0, #4]
 8000724:	616a      	str	r2, [r5, #20]
 8000726:	54cf      	strb	r7, [r1, r3]
 8000728:	e9c0 6402 	strd	r6, r4, [r0, #8]
 800072c:	68eb      	ldr	r3, [r5, #12]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b42      	cmp	r3, #66	; 0x42
 8000732:	d1af      	bne.n	8000694 <d_substitution+0x74>
 8000734:	4601      	mov	r1, r0
 8000736:	4628      	mov	r0, r5
 8000738:	f7ff ff56 	bl	80005e8 <d_abi_tags>
 800073c:	2800      	cmp	r0, #0
 800073e:	d0a8      	beq.n	8000692 <d_substitution+0x72>
 8000740:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000744:	4293      	cmp	r3, r2
 8000746:	daa5      	bge.n	8000694 <d_substitution+0x74>
 8000748:	69e9      	ldr	r1, [r5, #28]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000750:	622a      	str	r2, [r5, #32]
 8000752:	e79f      	b.n	8000694 <d_substitution+0x74>
 8000754:	2300      	movs	r3, #0
 8000756:	6a2a      	ldr	r2, [r5, #32]
 8000758:	429a      	cmp	r2, r3
 800075a:	d99a      	bls.n	8000692 <d_substitution+0x72>
 800075c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800075e:	69e9      	ldr	r1, [r5, #28]
 8000760:	3201      	adds	r2, #1
 8000762:	62aa      	str	r2, [r5, #40]	; 0x28
 8000764:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800076c:	3301      	adds	r3, #1
 800076e:	e7f2      	b.n	8000756 <d_substitution+0x136>
 8000770:	68eb      	ldr	r3, [r5, #12]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3b43      	subs	r3, #67	; 0x43
 8000776:	2b01      	cmp	r3, #1
 8000778:	bf98      	it	ls
 800077a:	460c      	movls	r4, r1
 800077c:	e79a      	b.n	80006b4 <d_substitution+0x94>
 800077e:	e9d3 6403 	ldrd	r6, r4, [r3, #12]
 8000782:	e7c1      	b.n	8000708 <d_substitution+0xe8>
 8000784:	2000      	movs	r0, #0
 8000786:	e7d1      	b.n	800072c <d_substitution+0x10c>
 8000788:	2600      	movs	r6, #0
 800078a:	e7b8      	b.n	80006fe <d_substitution+0xde>
 800078c:	080110c8 	.word	0x080110c8

08000790 <d_discriminator>:
 8000790:	68c3      	ldr	r3, [r0, #12]
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	2a5f      	cmp	r2, #95	; 0x5f
 8000796:	d001      	beq.n	800079c <d_discriminator+0xc>
 8000798:	2001      	movs	r0, #1
 800079a:	4770      	bx	lr
 800079c:	b510      	push	{r4, lr}
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	4604      	mov	r4, r0
 80007a2:	f840 2f0c 	str.w	r2, [r0, #12]!
 80007a6:	785a      	ldrb	r2, [r3, #1]
 80007a8:	2a5f      	cmp	r2, #95	; 0x5f
 80007aa:	d004      	beq.n	80007b6 <d_discriminator+0x26>
 80007ac:	f7ff fe42 	bl	8000434 <d_number.isra.1>
 80007b0:	43c0      	mvns	r0, r0
 80007b2:	0fc0      	lsrs	r0, r0, #31
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	3302      	adds	r3, #2
 80007b8:	60e3      	str	r3, [r4, #12]
 80007ba:	f7ff fe3b 	bl	8000434 <d_number.isra.1>
 80007be:	2800      	cmp	r0, #0
 80007c0:	db05      	blt.n	80007ce <d_discriminator+0x3e>
 80007c2:	2809      	cmp	r0, #9
 80007c4:	dd07      	ble.n	80007d6 <d_discriminator+0x46>
 80007c6:	68e3      	ldr	r3, [r4, #12]
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	2a5f      	cmp	r2, #95	; 0x5f
 80007cc:	d001      	beq.n	80007d2 <d_discriminator+0x42>
 80007ce:	2000      	movs	r0, #0
 80007d0:	bd10      	pop	{r4, pc}
 80007d2:	3301      	adds	r3, #1
 80007d4:	60e3      	str	r3, [r4, #12]
 80007d6:	2001      	movs	r0, #1
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	bf00      	nop

080007dc <d_index_template_argument.part.9>:
 80007dc:	b170      	cbz	r0, 80007fc <d_index_template_argument.part.9+0x20>
 80007de:	7803      	ldrb	r3, [r0, #0]
 80007e0:	2b2f      	cmp	r3, #47	; 0x2f
 80007e2:	d10f      	bne.n	8000804 <d_index_template_argument.part.9+0x28>
 80007e4:	2900      	cmp	r1, #0
 80007e6:	dc04      	bgt.n	80007f2 <d_index_template_argument.part.9+0x16>
 80007e8:	e009      	b.n	80007fe <d_index_template_argument.part.9+0x22>
 80007ea:	7803      	ldrb	r3, [r0, #0]
 80007ec:	2b2f      	cmp	r3, #47	; 0x2f
 80007ee:	d109      	bne.n	8000804 <d_index_template_argument.part.9+0x28>
 80007f0:	b131      	cbz	r1, 8000800 <d_index_template_argument.part.9+0x24>
 80007f2:	68c0      	ldr	r0, [r0, #12]
 80007f4:	3901      	subs	r1, #1
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d1f7      	bne.n	80007ea <d_index_template_argument.part.9+0xe>
 80007fa:	4770      	bx	lr
 80007fc:	4770      	bx	lr
 80007fe:	d101      	bne.n	8000804 <d_index_template_argument.part.9+0x28>
 8000800:	6880      	ldr	r0, [r0, #8]
 8000802:	4770      	bx	lr
 8000804:	2000      	movs	r0, #0
 8000806:	4770      	bx	lr

08000808 <d_lookup_template_argument.isra.10>:
 8000808:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800080c:	b133      	cbz	r3, 800081c <d_lookup_template_argument.isra.10+0x14>
 800080e:	6809      	ldr	r1, [r1, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2900      	cmp	r1, #0
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	db04      	blt.n	8000822 <d_lookup_template_argument.isra.10+0x1a>
 8000818:	4618      	mov	r0, r3
 800081a:	e7df      	b.n	80007dc <d_index_template_argument.part.9>
 800081c:	2201      	movs	r2, #1
 800081e:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8000822:	4618      	mov	r0, r3
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <d_find_pack>:
 8000828:	2900      	cmp	r1, #0
 800082a:	d042      	beq.n	80008b2 <d_find_pack+0x8a>
 800082c:	b538      	push	{r3, r4, r5, lr}
 800082e:	4605      	mov	r5, r0
 8000830:	460c      	mov	r4, r1
 8000832:	7823      	ldrb	r3, [r4, #0]
 8000834:	2b4b      	cmp	r3, #75	; 0x4b
 8000836:	d827      	bhi.n	8000888 <d_find_pack+0x60>
 8000838:	e8df f003 	tbb	[pc, r3]
 800083c:	2626262e 	.word	0x2626262e
 8000840:	2b2e3026 	.word	0x2b2e3026
 8000844:	2626262b 	.word	0x2626262b
 8000848:	26262626 	.word	0x26262626
 800084c:	26262626 	.word	0x26262626
 8000850:	26262626 	.word	0x26262626
 8000854:	2626262e 	.word	0x2626262e
 8000858:	26262626 	.word	0x26262626
 800085c:	26262626 	.word	0x26262626
 8000860:	2e262626 	.word	0x2e262626
 8000864:	26262626 	.word	0x26262626
 8000868:	2626262e 	.word	0x2626262e
 800086c:	262b2e26 	.word	0x262b2e26
 8000870:	26262626 	.word	0x26262626
 8000874:	26262626 	.word	0x26262626
 8000878:	26262626 	.word	0x26262626
 800087c:	26262e2e 	.word	0x26262e2e
 8000880:	2e2e2e26 	.word	0x2e2e2e26
 8000884:	2e2e2626 	.word	0x2e2e2626
 8000888:	68a1      	ldr	r1, [r4, #8]
 800088a:	4628      	mov	r0, r5
 800088c:	f7ff ffcc 	bl	8000828 <d_find_pack>
 8000890:	b918      	cbnz	r0, 800089a <d_find_pack+0x72>
 8000892:	68e4      	ldr	r4, [r4, #12]
 8000894:	2c00      	cmp	r4, #0
 8000896:	d1cc      	bne.n	8000832 <d_find_pack+0xa>
 8000898:	2000      	movs	r0, #0
 800089a:	bd38      	pop	{r3, r4, r5, pc}
 800089c:	f104 0108 	add.w	r1, r4, #8
 80008a0:	4628      	mov	r0, r5
 80008a2:	f7ff ffb1 	bl	8000808 <d_lookup_template_argument.isra.10>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d0f6      	beq.n	8000898 <d_find_pack+0x70>
 80008aa:	7803      	ldrb	r3, [r0, #0]
 80008ac:	2b2f      	cmp	r3, #47	; 0x2f
 80008ae:	d1f3      	bne.n	8000898 <d_find_pack+0x70>
 80008b0:	bd38      	pop	{r3, r4, r5, pc}
 80008b2:	2000      	movs	r0, #0
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop

080008b8 <d_growable_string_callback_adapter>:
 80008b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008bc:	4614      	mov	r4, r2
 80008be:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
 80008c2:	6852      	ldr	r2, [r2, #4]
 80008c4:	1c4b      	adds	r3, r1, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	42ab      	cmp	r3, r5
 80008ca:	b082      	sub	sp, #8
 80008cc:	460e      	mov	r6, r1
 80008ce:	4680      	mov	r8, r0
 80008d0:	d814      	bhi.n	80008fc <d_growable_string_callback_adapter+0x44>
 80008d2:	b117      	cbz	r7, 80008da <d_growable_string_callback_adapter+0x22>
 80008d4:	b002      	add	sp, #8
 80008d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008da:	e9d4 0300 	ldrd	r0, r3, [r4]
 80008de:	4632      	mov	r2, r6
 80008e0:	4641      	mov	r1, r8
 80008e2:	4418      	add	r0, r3
 80008e4:	f00d f8dd 	bl	800daa2 <memcpy>
 80008e8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80008ec:	4433      	add	r3, r6
 80008ee:	549f      	strb	r7, [r3, r2]
 80008f0:	6863      	ldr	r3, [r4, #4]
 80008f2:	441e      	add	r6, r3
 80008f4:	6066      	str	r6, [r4, #4]
 80008f6:	b002      	add	sp, #8
 80008f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008fc:	2f00      	cmp	r7, #0
 80008fe:	d1e9      	bne.n	80008d4 <d_growable_string_callback_adapter+0x1c>
 8000900:	b91d      	cbnz	r5, 800090a <d_growable_string_callback_adapter+0x52>
 8000902:	2b02      	cmp	r3, #2
 8000904:	f04f 0502 	mov.w	r5, #2
 8000908:	d902      	bls.n	8000910 <d_growable_string_callback_adapter+0x58>
 800090a:	006d      	lsls	r5, r5, #1
 800090c:	42ab      	cmp	r3, r5
 800090e:	d8fc      	bhi.n	800090a <d_growable_string_callback_adapter+0x52>
 8000910:	4629      	mov	r1, r5
 8000912:	6820      	ldr	r0, [r4, #0]
 8000914:	f00d f932 	bl	800db7c <realloc>
 8000918:	b128      	cbz	r0, 8000926 <d_growable_string_callback_adapter+0x6e>
 800091a:	68e7      	ldr	r7, [r4, #12]
 800091c:	6020      	str	r0, [r4, #0]
 800091e:	60a5      	str	r5, [r4, #8]
 8000920:	2f00      	cmp	r7, #0
 8000922:	d1d7      	bne.n	80008d4 <d_growable_string_callback_adapter+0x1c>
 8000924:	e7d9      	b.n	80008da <d_growable_string_callback_adapter+0x22>
 8000926:	9001      	str	r0, [sp, #4]
 8000928:	6820      	ldr	r0, [r4, #0]
 800092a:	f00c fe6d 	bl	800d608 <free>
 800092e:	9b01      	ldr	r3, [sp, #4]
 8000930:	2201      	movs	r2, #1
 8000932:	e9c4 3300 	strd	r3, r3, [r4]
 8000936:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800093a:	e7cb      	b.n	80008d4 <d_growable_string_callback_adapter+0x1c>

0800093c <d_call_offset>:
 800093c:	b538      	push	{r3, r4, r5, lr}
 800093e:	4604      	mov	r4, r0
 8000940:	b929      	cbnz	r1, 800094e <d_call_offset+0x12>
 8000942:	68c3      	ldr	r3, [r0, #12]
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	b132      	cbz	r2, 8000956 <d_call_offset+0x1a>
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	60c2      	str	r2, [r0, #12]
 800094c:	7819      	ldrb	r1, [r3, #0]
 800094e:	2968      	cmp	r1, #104	; 0x68
 8000950:	d012      	beq.n	8000978 <d_call_offset+0x3c>
 8000952:	2976      	cmp	r1, #118	; 0x76
 8000954:	d001      	beq.n	800095a <d_call_offset+0x1e>
 8000956:	2000      	movs	r0, #0
 8000958:	bd38      	pop	{r3, r4, r5, pc}
 800095a:	f104 050c 	add.w	r5, r4, #12
 800095e:	4628      	mov	r0, r5
 8000960:	f7ff fd68 	bl	8000434 <d_number.isra.1>
 8000964:	68e3      	ldr	r3, [r4, #12]
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	2a5f      	cmp	r2, #95	; 0x5f
 800096a:	d1f4      	bne.n	8000956 <d_call_offset+0x1a>
 800096c:	3301      	adds	r3, #1
 800096e:	60e3      	str	r3, [r4, #12]
 8000970:	4628      	mov	r0, r5
 8000972:	f7ff fd5f 	bl	8000434 <d_number.isra.1>
 8000976:	e003      	b.n	8000980 <d_call_offset+0x44>
 8000978:	f104 000c 	add.w	r0, r4, #12
 800097c:	f7ff fd5a 	bl	8000434 <d_number.isra.1>
 8000980:	68e3      	ldr	r3, [r4, #12]
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	2a5f      	cmp	r2, #95	; 0x5f
 8000986:	d1e6      	bne.n	8000956 <d_call_offset+0x1a>
 8000988:	3301      	adds	r3, #1
 800098a:	60e3      	str	r3, [r4, #12]
 800098c:	2001      	movs	r0, #1
 800098e:	bd38      	pop	{r3, r4, r5, pc}

08000990 <d_append_num>:
 8000990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000994:	b088      	sub	sp, #32
 8000996:	460a      	mov	r2, r1
 8000998:	4604      	mov	r4, r0
 800099a:	491c      	ldr	r1, [pc, #112]	; (8000a0c <d_append_num+0x7c>)
 800099c:	a801      	add	r0, sp, #4
 800099e:	f00d faf3 	bl	800df88 <sprintf>
 80009a2:	a801      	add	r0, sp, #4
 80009a4:	f006 fa16 	bl	8006dd4 <strlen>
 80009a8:	b368      	cbz	r0, 8000a06 <d_append_num+0x76>
 80009aa:	ad01      	add	r5, sp, #4
 80009ac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80009b0:	182e      	adds	r6, r5, r0
 80009b2:	2700      	movs	r7, #0
 80009b4:	e016      	b.n	80009e4 <d_append_num+0x54>
 80009b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80009ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80009be:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80009c2:	4798      	blx	r3
 80009c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80009c8:	2200      	movs	r2, #0
 80009ca:	3301      	adds	r3, #1
 80009cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80009d0:	42ae      	cmp	r6, r5
 80009d2:	f04f 0301 	mov.w	r3, #1
 80009d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009da:	f804 8002 	strb.w	r8, [r4, r2]
 80009de:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009e2:	d010      	beq.n	8000a06 <d_append_num+0x76>
 80009e4:	2bff      	cmp	r3, #255	; 0xff
 80009e6:	4619      	mov	r1, r3
 80009e8:	4620      	mov	r0, r4
 80009ea:	f815 8b01 	ldrb.w	r8, [r5], #1
 80009ee:	d0e2      	beq.n	80009b6 <d_append_num+0x26>
 80009f0:	461a      	mov	r2, r3
 80009f2:	42ae      	cmp	r6, r5
 80009f4:	f103 0301 	add.w	r3, r3, #1
 80009f8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009fc:	f804 8002 	strb.w	r8, [r4, r2]
 8000a00:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000a04:	d1ee      	bne.n	80009e4 <d_append_num+0x54>
 8000a06:	b008      	add	sp, #32
 8000a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a0c:	08011b18 	.word	0x08011b18

08000a10 <d_exprlist>:
 8000a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a14:	68c3      	ldr	r3, [r0, #12]
 8000a16:	781d      	ldrb	r5, [r3, #0]
 8000a18:	b083      	sub	sp, #12
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	428d      	cmp	r5, r1
 8000a1e:	4604      	mov	r4, r0
 8000a20:	9201      	str	r2, [sp, #4]
 8000a22:	f000 8199 	beq.w	8000d58 <d_exprlist+0x348>
 8000a26:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8000ee8 <d_exprlist+0x4d8>
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	af01      	add	r7, sp, #4
 8000a2e:	2501      	movs	r5, #1
 8000a30:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8000a32:	6365      	str	r5, [r4, #52]	; 0x34
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	2a4c      	cmp	r2, #76	; 0x4c
 8000a38:	d05c      	beq.n	8000af4 <d_exprlist+0xe4>
 8000a3a:	2a54      	cmp	r2, #84	; 0x54
 8000a3c:	d066      	beq.n	8000b0c <d_exprlist+0xfc>
 8000a3e:	2a73      	cmp	r2, #115	; 0x73
 8000a40:	d045      	beq.n	8000ace <d_exprlist+0xbe>
 8000a42:	2a66      	cmp	r2, #102	; 0x66
 8000a44:	d11c      	bne.n	8000a80 <d_exprlist+0x70>
 8000a46:	785a      	ldrb	r2, [r3, #1]
 8000a48:	2a70      	cmp	r2, #112	; 0x70
 8000a4a:	f000 8087 	beq.w	8000b5c <d_exprlist+0x14c>
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f001 fa70 	bl	8001f34 <d_operator_name>
 8000a54:	4605      	mov	r5, r0
 8000a56:	2800      	cmp	r0, #0
 8000a58:	f000 818c 	beq.w	8000d74 <d_exprlist+0x364>
 8000a5c:	7803      	ldrb	r3, [r0, #0]
 8000a5e:	2b31      	cmp	r3, #49	; 0x31
 8000a60:	f000 8098 	beq.w	8000b94 <d_exprlist+0x184>
 8000a64:	2b32      	cmp	r3, #50	; 0x32
 8000a66:	d056      	beq.n	8000b16 <d_exprlist+0x106>
 8000a68:	2b33      	cmp	r3, #51	; 0x33
 8000a6a:	d171      	bne.n	8000b50 <d_exprlist+0x140>
 8000a6c:	68e3      	ldr	r3, [r4, #12]
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	2a5f      	cmp	r2, #95	; 0x5f
 8000a72:	f000 81da 	beq.w	8000e2a <d_exprlist+0x41a>
 8000a76:	4620      	mov	r0, r4
 8000a78:	f000 fa38 	bl	8000eec <d_expression_1>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	e0c1      	b.n	8000c04 <d_exprlist+0x1f4>
 8000a80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a84:	2909      	cmp	r1, #9
 8000a86:	f200 80e7 	bhi.w	8000c58 <d_exprlist+0x248>
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f001 fbfe 	bl	800228c <d_unqualified_name>
 8000a90:	4605      	mov	r5, r0
 8000a92:	2800      	cmp	r0, #0
 8000a94:	f000 816e 	beq.w	8000d74 <d_exprlist+0x364>
 8000a98:	68e3      	ldr	r3, [r4, #12]
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	2a49      	cmp	r2, #73	; 0x49
 8000a9e:	f000 80b8 	beq.w	8000c12 <d_exprlist+0x202>
 8000aa2:	6366      	str	r6, [r4, #52]	; 0x34
 8000aa4:	462a      	mov	r2, r5
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	212e      	movs	r1, #46	; 0x2e
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f7ff fbc8 	bl	8000240 <d_make_comp>
 8000ab0:	6038      	str	r0, [r7, #0]
 8000ab2:	b330      	cbz	r0, 8000b02 <d_exprlist+0xf2>
 8000ab4:	68e3      	ldr	r3, [r4, #12]
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	4542      	cmp	r2, r8
 8000aba:	f100 070c 	add.w	r7, r0, #12
 8000abe:	d1b6      	bne.n	8000a2e <d_exprlist+0x1e>
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	9d01      	ldr	r5, [sp, #4]
 8000ac4:	60e3      	str	r3, [r4, #12]
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	b003      	add	sp, #12
 8000aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ace:	785a      	ldrb	r2, [r3, #1]
 8000ad0:	2a72      	cmp	r2, #114	; 0x72
 8000ad2:	f000 80ab 	beq.w	8000c2c <d_exprlist+0x21c>
 8000ad6:	2a70      	cmp	r2, #112	; 0x70
 8000ad8:	d1b9      	bne.n	8000a4e <d_exprlist+0x3e>
 8000ada:	3302      	adds	r3, #2
 8000adc:	60e3      	str	r3, [r4, #12]
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f000 fa04 	bl	8000eec <d_expression_1>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	214a      	movs	r1, #74	; 0x4a
 8000aea:	4620      	mov	r0, r4
 8000aec:	f7ff fba8 	bl	8000240 <d_make_comp>
 8000af0:	4605      	mov	r5, r0
 8000af2:	e003      	b.n	8000afc <d_exprlist+0xec>
 8000af4:	4620      	mov	r0, r4
 8000af6:	f002 f813 	bl	8002b20 <d_expr_primary>
 8000afa:	4605      	mov	r5, r0
 8000afc:	6366      	str	r6, [r4, #52]	; 0x34
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d1d0      	bne.n	8000aa4 <d_exprlist+0x94>
 8000b02:	2500      	movs	r5, #0
 8000b04:	4628      	mov	r0, r5
 8000b06:	b003      	add	sp, #12
 8000b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f7ff fcef 	bl	80004f0 <d_template_param>
 8000b12:	4605      	mov	r5, r0
 8000b14:	e7f2      	b.n	8000afc <d_exprlist+0xec>
 8000b16:	6883      	ldr	r3, [r0, #8]
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d819      	bhi.n	8000b50 <d_exprlist+0x140>
 8000b1c:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <d_exprlist+0x114>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000cb7 	.word	0x08000cb7
 8000b28:	08000a77 	.word	0x08000a77
 8000b2c:	08000b51 	.word	0x08000b51
 8000b30:	08000b51 	.word	0x08000b51
 8000b34:	2a74      	cmp	r2, #116	; 0x74
 8000b36:	d18a      	bne.n	8000a4e <d_exprlist+0x3e>
 8000b38:	785b      	ldrb	r3, [r3, #1]
 8000b3a:	2b6c      	cmp	r3, #108	; 0x6c
 8000b3c:	d187      	bne.n	8000a4e <d_exprlist+0x3e>
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f000 fdfe 	bl	8001740 <d_type>
 8000b44:	68e3      	ldr	r3, [r4, #12]
 8000b46:	785a      	ldrb	r2, [r3, #1]
 8000b48:	4605      	mov	r5, r0
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	f040 8123 	bne.w	8000d96 <d_exprlist+0x386>
 8000b50:	2500      	movs	r5, #0
 8000b52:	4628      	mov	r0, r5
 8000b54:	6366      	str	r6, [r4, #52]	; 0x34
 8000b56:	b003      	add	sp, #12
 8000b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b5c:	1c9a      	adds	r2, r3, #2
 8000b5e:	60e2      	str	r2, [r4, #12]
 8000b60:	789a      	ldrb	r2, [r3, #2]
 8000b62:	2a54      	cmp	r2, #84	; 0x54
 8000b64:	f040 8082 	bne.w	8000c6c <d_exprlist+0x25c>
 8000b68:	3303      	adds	r3, #3
 8000b6a:	60e3      	str	r3, [r4, #12]
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000b72:	4293      	cmp	r3, r2
 8000b74:	daec      	bge.n	8000b50 <d_exprlist+0x140>
 8000b76:	6921      	ldr	r1, [r4, #16]
 8000b78:	011a      	lsls	r2, r3, #4
 8000b7a:	188d      	adds	r5, r1, r2
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f04f 0e00 	mov.w	lr, #0
 8000b82:	f04f 0c06 	mov.w	ip, #6
 8000b86:	f8c5 e004 	str.w	lr, [r5, #4]
 8000b8a:	6163      	str	r3, [r4, #20]
 8000b8c:	f801 c002 	strb.w	ip, [r1, r2]
 8000b90:	60a8      	str	r0, [r5, #8]
 8000b92:	e786      	b.n	8000aa2 <d_exprlist+0x92>
 8000b94:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000b98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b9a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b9e:	f8db a000 	ldr.w	sl, [fp]
 8000ba2:	3a02      	subs	r2, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8000ba8:	4650      	mov	r0, sl
 8000baa:	4649      	mov	r1, r9
 8000bac:	f006 f908 	bl	8006dc0 <strcmp>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	f000 80e4 	beq.w	8000d7e <d_exprlist+0x36e>
 8000bb6:	f8db b00c 	ldr.w	fp, [fp, #12]
 8000bba:	f1bb 0f03 	cmp.w	fp, #3
 8000bbe:	d8c7      	bhi.n	8000b50 <d_exprlist+0x140>
 8000bc0:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8000bc4:	00040079 	.word	0x00040079
 8000bc8:	008100f7 	.word	0x008100f7
 8000bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8000bd0:	2b70      	cmp	r3, #112	; 0x70
 8000bd2:	d065      	beq.n	8000ca0 <d_exprlist+0x290>
 8000bd4:	2b6d      	cmp	r3, #109	; 0x6d
 8000bd6:	d063      	beq.n	8000ca0 <d_exprlist+0x290>
 8000bd8:	f04f 0b00 	mov.w	fp, #0
 8000bdc:	4650      	mov	r0, sl
 8000bde:	49bd      	ldr	r1, [pc, #756]	; (8000ed4 <d_exprlist+0x4c4>)
 8000be0:	f006 f8ee 	bl	8006dc0 <strcmp>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	f040 80c0 	bne.w	8000d6a <d_exprlist+0x35a>
 8000bea:	4620      	mov	r0, r4
 8000bec:	f000 fb90 	bl	8001310 <d_template_args_1>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f1bb 0f00 	cmp.w	fp, #0
 8000bf6:	d005      	beq.n	8000c04 <d_exprlist+0x1f4>
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	2138      	movs	r1, #56	; 0x38
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f7ff fb1f 	bl	8000240 <d_make_comp>
 8000c02:	4603      	mov	r3, r0
 8000c04:	462a      	mov	r2, r5
 8000c06:	2136      	movs	r1, #54	; 0x36
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f7ff fb19 	bl	8000240 <d_make_comp>
 8000c0e:	4605      	mov	r5, r0
 8000c10:	e774      	b.n	8000afc <d_exprlist+0xec>
 8000c12:	3301      	adds	r3, #1
 8000c14:	60e3      	str	r3, [r4, #12]
 8000c16:	4620      	mov	r0, r4
 8000c18:	f000 fb7a 	bl	8001310 <d_template_args_1>
 8000c1c:	462a      	mov	r2, r5
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2104      	movs	r1, #4
 8000c22:	4620      	mov	r0, r4
 8000c24:	f7ff fb0c 	bl	8000240 <d_make_comp>
 8000c28:	4605      	mov	r5, r0
 8000c2a:	e767      	b.n	8000afc <d_exprlist+0xec>
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	60e3      	str	r3, [r4, #12]
 8000c30:	4620      	mov	r0, r4
 8000c32:	f000 fd85 	bl	8001740 <d_type>
 8000c36:	4682      	mov	sl, r0
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f001 fb27 	bl	800228c <d_unqualified_name>
 8000c3e:	68e3      	ldr	r3, [r4, #12]
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	2a49      	cmp	r2, #73	; 0x49
 8000c44:	4683      	mov	fp, r0
 8000c46:	d01e      	beq.n	8000c86 <d_exprlist+0x276>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	4652      	mov	r2, sl
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f7ff faf6 	bl	8000240 <d_make_comp>
 8000c54:	4605      	mov	r5, r0
 8000c56:	e751      	b.n	8000afc <d_exprlist+0xec>
 8000c58:	2a6f      	cmp	r2, #111	; 0x6f
 8000c5a:	f040 8094 	bne.w	8000d86 <d_exprlist+0x376>
 8000c5e:	785a      	ldrb	r2, [r3, #1]
 8000c60:	2a6e      	cmp	r2, #110	; 0x6e
 8000c62:	f47f aef4 	bne.w	8000a4e <d_exprlist+0x3e>
 8000c66:	3302      	adds	r3, #2
 8000c68:	60e3      	str	r3, [r4, #12]
 8000c6a:	e70e      	b.n	8000a8a <d_exprlist+0x7a>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fc25 	bl	80004bc <d_compact_number>
 8000c72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000c76:	4298      	cmp	r0, r3
 8000c78:	f43f af6a 	beq.w	8000b50 <d_exprlist+0x140>
 8000c7c:	1c43      	adds	r3, r0, #1
 8000c7e:	f43f af67 	beq.w	8000b50 <d_exprlist+0x140>
 8000c82:	3001      	adds	r0, #1
 8000c84:	e773      	b.n	8000b6e <d_exprlist+0x15e>
 8000c86:	3301      	adds	r3, #1
 8000c88:	60e3      	str	r3, [r4, #12]
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f000 fb40 	bl	8001310 <d_template_args_1>
 8000c90:	465a      	mov	r2, fp
 8000c92:	4603      	mov	r3, r0
 8000c94:	2104      	movs	r1, #4
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff fad2 	bl	8000240 <d_make_comp>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	e7d4      	b.n	8000c4a <d_exprlist+0x23a>
 8000ca0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d197      	bne.n	8000bd8 <d_exprlist+0x1c8>
 8000ca8:	68e3      	ldr	r3, [r4, #12]
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	2a5f      	cmp	r2, #95	; 0x5f
 8000cae:	d195      	bne.n	8000bdc <d_exprlist+0x1cc>
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60e3      	str	r3, [r4, #12]
 8000cb4:	e790      	b.n	8000bd8 <d_exprlist+0x1c8>
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2135      	movs	r1, #53	; 0x35
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f7ff fabf 	bl	8000240 <d_make_comp>
 8000cc2:	4605      	mov	r5, r0
 8000cc4:	e71a      	b.n	8000afc <d_exprlist+0xec>
 8000cc6:	f1ba 0f00 	cmp.w	sl, #0
 8000cca:	f43f af41 	beq.w	8000b50 <d_exprlist+0x140>
 8000cce:	4982      	ldr	r1, [pc, #520]	; (8000ed8 <d_exprlist+0x4c8>)
 8000cd0:	4650      	mov	r0, sl
 8000cd2:	f006 f875 	bl	8006dc0 <strcmp>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	f000 80c7 	beq.w	8000e6a <d_exprlist+0x45a>
 8000cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8000ce0:	2b66      	cmp	r3, #102	; 0x66
 8000ce2:	f000 80ed 	beq.w	8000ec0 <d_exprlist+0x4b0>
 8000ce6:	2b6e      	cmp	r3, #110	; 0x6e
 8000ce8:	f47f af32 	bne.w	8000b50 <d_exprlist+0x140>
 8000cec:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000cf0:	2b77      	cmp	r3, #119	; 0x77
 8000cf2:	d002      	beq.n	8000cfa <d_exprlist+0x2ea>
 8000cf4:	2b61      	cmp	r3, #97	; 0x61
 8000cf6:	f47f af2b 	bne.w	8000b50 <d_exprlist+0x140>
 8000cfa:	215f      	movs	r1, #95	; 0x5f
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f7ff fe87 	bl	8000a10 <d_exprlist>
 8000d02:	4682      	mov	sl, r0
 8000d04:	4620      	mov	r0, r4
 8000d06:	f000 fd1b 	bl	8001740 <d_type>
 8000d0a:	68e3      	ldr	r3, [r4, #12]
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	2a45      	cmp	r2, #69	; 0x45
 8000d10:	4683      	mov	fp, r0
 8000d12:	f000 8086 	beq.w	8000e22 <d_exprlist+0x412>
 8000d16:	2a70      	cmp	r2, #112	; 0x70
 8000d18:	f000 80c6 	beq.w	8000ea8 <d_exprlist+0x498>
 8000d1c:	2a69      	cmp	r2, #105	; 0x69
 8000d1e:	f47f af17 	bne.w	8000b50 <d_exprlist+0x140>
 8000d22:	785b      	ldrb	r3, [r3, #1]
 8000d24:	2b6c      	cmp	r3, #108	; 0x6c
 8000d26:	f47f af13 	bne.w	8000b50 <d_exprlist+0x140>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f000 f8de 	bl	8000eec <d_expression_1>
 8000d30:	4603      	mov	r3, r0
 8000d32:	465a      	mov	r2, fp
 8000d34:	213b      	movs	r1, #59	; 0x3b
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff fa82 	bl	8000240 <d_make_comp>
 8000d3c:	4652      	mov	r2, sl
 8000d3e:	4603      	mov	r3, r0
 8000d40:	213a      	movs	r1, #58	; 0x3a
 8000d42:	4620      	mov	r0, r4
 8000d44:	f7ff fa7c 	bl	8000240 <d_make_comp>
 8000d48:	462a      	mov	r2, r5
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2139      	movs	r1, #57	; 0x39
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f7ff fa76 	bl	8000240 <d_make_comp>
 8000d54:	4605      	mov	r5, r0
 8000d56:	e6d1      	b.n	8000afc <d_exprlist+0xec>
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60c3      	str	r3, [r0, #12]
 8000d5c:	212e      	movs	r1, #46	; 0x2e
 8000d5e:	4613      	mov	r3, r2
 8000d60:	b003      	add	sp, #12
 8000d62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d66:	f7ff ba6b 	b.w	8000240 <d_make_comp>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f000 f8be 	bl	8000eec <d_expression_1>
 8000d70:	4603      	mov	r3, r0
 8000d72:	e73e      	b.n	8000bf2 <d_exprlist+0x1e2>
 8000d74:	4628      	mov	r0, r5
 8000d76:	6366      	str	r6, [r4, #52]	; 0x34
 8000d78:	b003      	add	sp, #12
 8000d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f000 fcde 	bl	8001740 <d_type>
 8000d84:	e73d      	b.n	8000c02 <d_exprlist+0x1f2>
 8000d86:	2a69      	cmp	r2, #105	; 0x69
 8000d88:	f47f aed4 	bne.w	8000b34 <d_exprlist+0x124>
 8000d8c:	785a      	ldrb	r2, [r3, #1]
 8000d8e:	2a6c      	cmp	r2, #108	; 0x6c
 8000d90:	f47f ae5d 	bne.w	8000a4e <d_exprlist+0x3e>
 8000d94:	2500      	movs	r5, #0
 8000d96:	3302      	adds	r3, #2
 8000d98:	60e3      	str	r3, [r4, #12]
 8000d9a:	2145      	movs	r1, #69	; 0x45
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff fe37 	bl	8000a10 <d_exprlist>
 8000da2:	462a      	mov	r2, r5
 8000da4:	4603      	mov	r3, r0
 8000da6:	2130      	movs	r1, #48	; 0x30
 8000da8:	4620      	mov	r0, r4
 8000daa:	f7ff fa49 	bl	8000240 <d_make_comp>
 8000dae:	4605      	mov	r5, r0
 8000db0:	e6a4      	b.n	8000afc <d_exprlist+0xec>
 8000db2:	f1ba 0f00 	cmp.w	sl, #0
 8000db6:	f43f aecb 	beq.w	8000b50 <d_exprlist+0x140>
 8000dba:	68ab      	ldr	r3, [r5, #8]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	785a      	ldrb	r2, [r3, #1]
 8000dc0:	2a63      	cmp	r2, #99	; 0x63
 8000dc2:	d03a      	beq.n	8000e3a <d_exprlist+0x42a>
 8000dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8000dc8:	2b66      	cmp	r3, #102	; 0x66
 8000dca:	d149      	bne.n	8000e60 <d_exprlist+0x450>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f001 f8b1 	bl	8001f34 <d_operator_name>
 8000dd2:	4683      	mov	fp, r0
 8000dd4:	4941      	ldr	r1, [pc, #260]	; (8000edc <d_exprlist+0x4cc>)
 8000dd6:	4650      	mov	r0, sl
 8000dd8:	f005 fff2 	bl	8006dc0 <strcmp>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d039      	beq.n	8000e54 <d_exprlist+0x444>
 8000de0:	493f      	ldr	r1, [pc, #252]	; (8000ee0 <d_exprlist+0x4d0>)
 8000de2:	4650      	mov	r0, sl
 8000de4:	f005 ffec 	bl	8006dc0 <strcmp>
 8000de8:	b128      	cbz	r0, 8000df6 <d_exprlist+0x3e6>
 8000dea:	4650      	mov	r0, sl
 8000dec:	493d      	ldr	r1, [pc, #244]	; (8000ee4 <d_exprlist+0x4d4>)
 8000dee:	f005 ffe7 	bl	8006dc0 <strcmp>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d168      	bne.n	8000ec8 <d_exprlist+0x4b8>
 8000df6:	4620      	mov	r0, r4
 8000df8:	f001 fa48 	bl	800228c <d_unqualified_name>
 8000dfc:	68e3      	ldr	r3, [r4, #12]
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	2a49      	cmp	r2, #73	; 0x49
 8000e02:	4682      	mov	sl, r0
 8000e04:	d043      	beq.n	8000e8e <d_exprlist+0x47e>
 8000e06:	4653      	mov	r3, sl
 8000e08:	465a      	mov	r2, fp
 8000e0a:	2138      	movs	r1, #56	; 0x38
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff fa17 	bl	8000240 <d_make_comp>
 8000e12:	462a      	mov	r2, r5
 8000e14:	4603      	mov	r3, r0
 8000e16:	2137      	movs	r1, #55	; 0x37
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f7ff fa11 	bl	8000240 <d_make_comp>
 8000e1e:	4605      	mov	r5, r0
 8000e20:	e66c      	b.n	8000afc <d_exprlist+0xec>
 8000e22:	3301      	adds	r3, #1
 8000e24:	60e3      	str	r3, [r4, #12]
 8000e26:	2300      	movs	r3, #0
 8000e28:	e783      	b.n	8000d32 <d_exprlist+0x322>
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60e3      	str	r3, [r4, #12]
 8000e2e:	2145      	movs	r1, #69	; 0x45
 8000e30:	4620      	mov	r0, r4
 8000e32:	f7ff fded 	bl	8000a10 <d_exprlist>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e6e4      	b.n	8000c04 <d_exprlist+0x1f4>
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000e40:	2a01      	cmp	r2, #1
 8000e42:	d902      	bls.n	8000e4a <d_exprlist+0x43a>
 8000e44:	3b72      	subs	r3, #114	; 0x72
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d8bc      	bhi.n	8000dc4 <d_exprlist+0x3b4>
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 fc78 	bl	8001740 <d_type>
 8000e50:	4683      	mov	fp, r0
 8000e52:	e7bf      	b.n	8000dd4 <d_exprlist+0x3c4>
 8000e54:	2145      	movs	r1, #69	; 0x45
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff fdda 	bl	8000a10 <d_exprlist>
 8000e5c:	4682      	mov	sl, r0
 8000e5e:	e7d2      	b.n	8000e06 <d_exprlist+0x3f6>
 8000e60:	4620      	mov	r0, r4
 8000e62:	f000 f843 	bl	8000eec <d_expression_1>
 8000e66:	4683      	mov	fp, r0
 8000e68:	e7b4      	b.n	8000dd4 <d_exprlist+0x3c4>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f000 f83e 	bl	8000eec <d_expression_1>
 8000e70:	4682      	mov	sl, r0
 8000e72:	4620      	mov	r0, r4
 8000e74:	f000 f83a 	bl	8000eec <d_expression_1>
 8000e78:	4683      	mov	fp, r0
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f000 f836 	bl	8000eec <d_expression_1>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2800      	cmp	r0, #0
 8000e84:	f47f af55 	bne.w	8000d32 <d_exprlist+0x322>
 8000e88:	6366      	str	r6, [r4, #52]	; 0x34
 8000e8a:	4605      	mov	r5, r0
 8000e8c:	e61b      	b.n	8000ac6 <d_exprlist+0xb6>
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60e3      	str	r3, [r4, #12]
 8000e92:	4620      	mov	r0, r4
 8000e94:	f000 fa3c 	bl	8001310 <d_template_args_1>
 8000e98:	4652      	mov	r2, sl
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f7ff f9ce 	bl	8000240 <d_make_comp>
 8000ea4:	4682      	mov	sl, r0
 8000ea6:	e7ae      	b.n	8000e06 <d_exprlist+0x3f6>
 8000ea8:	785a      	ldrb	r2, [r3, #1]
 8000eaa:	2a69      	cmp	r2, #105	; 0x69
 8000eac:	f47f ae50 	bne.w	8000b50 <d_exprlist+0x140>
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	60e3      	str	r3, [r4, #12]
 8000eb4:	2145      	movs	r1, #69	; 0x45
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff fdaa 	bl	8000a10 <d_exprlist>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	e738      	b.n	8000d32 <d_exprlist+0x322>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f001 f837 	bl	8001f34 <d_operator_name>
 8000ec6:	e7d3      	b.n	8000e70 <d_exprlist+0x460>
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f000 f80f 	bl	8000eec <d_expression_1>
 8000ece:	4682      	mov	sl, r0
 8000ed0:	e799      	b.n	8000e06 <d_exprlist+0x3f6>
 8000ed2:	bf00      	nop
 8000ed4:	08011b1c 	.word	0x08011b1c
 8000ed8:	08011b2c 	.word	0x08011b2c
 8000edc:	08011b20 	.word	0x08011b20
 8000ee0:	08011b24 	.word	0x08011b24
 8000ee4:	08011b28 	.word	0x08011b28
 8000ee8:	08012038 	.word	0x08012038

08000eec <d_expression_1>:
 8000eec:	68c1      	ldr	r1, [r0, #12]
 8000eee:	780b      	ldrb	r3, [r1, #0]
 8000ef0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ef2:	d067      	beq.n	8000fc4 <d_expression_1+0xd8>
 8000ef4:	2b54      	cmp	r3, #84	; 0x54
 8000ef6:	d067      	beq.n	8000fc8 <d_expression_1+0xdc>
 8000ef8:	2b73      	cmp	r3, #115	; 0x73
 8000efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000efe:	4604      	mov	r4, r0
 8000f00:	d01c      	beq.n	8000f3c <d_expression_1+0x50>
 8000f02:	2b66      	cmp	r3, #102	; 0x66
 8000f04:	d13d      	bne.n	8000f82 <d_expression_1+0x96>
 8000f06:	784b      	ldrb	r3, [r1, #1]
 8000f08:	2b70      	cmp	r3, #112	; 0x70
 8000f0a:	d11d      	bne.n	8000f48 <d_expression_1+0x5c>
 8000f0c:	1c8b      	adds	r3, r1, #2
 8000f0e:	60c3      	str	r3, [r0, #12]
 8000f10:	788b      	ldrb	r3, [r1, #2]
 8000f12:	2b54      	cmp	r3, #84	; 0x54
 8000f14:	f040 809a 	bne.w	800104c <d_expression_1+0x160>
 8000f18:	3103      	adds	r1, #3
 8000f1a:	60c1      	str	r1, [r0, #12]
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	da4a      	bge.n	8000fbc <d_expression_1+0xd0>
 8000f26:	6921      	ldr	r1, [r4, #16]
 8000f28:	011a      	lsls	r2, r3, #4
 8000f2a:	188d      	adds	r5, r1, r2
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	2700      	movs	r7, #0
 8000f30:	2606      	movs	r6, #6
 8000f32:	606f      	str	r7, [r5, #4]
 8000f34:	6163      	str	r3, [r4, #20]
 8000f36:	548e      	strb	r6, [r1, r2]
 8000f38:	60a8      	str	r0, [r5, #8]
 8000f3a:	e02f      	b.n	8000f9c <d_expression_1+0xb0>
 8000f3c:	784b      	ldrb	r3, [r1, #1]
 8000f3e:	2b72      	cmp	r3, #114	; 0x72
 8000f40:	d06e      	beq.n	8001020 <d_expression_1+0x134>
 8000f42:	2b70      	cmp	r3, #112	; 0x70
 8000f44:	f000 8160 	beq.w	8001208 <d_expression_1+0x31c>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f000 fff3 	bl	8001f34 <d_operator_name>
 8000f4e:	4605      	mov	r5, r0
 8000f50:	b3a0      	cbz	r0, 8000fbc <d_expression_1+0xd0>
 8000f52:	7803      	ldrb	r3, [r0, #0]
 8000f54:	2b31      	cmp	r3, #49	; 0x31
 8000f56:	d039      	beq.n	8000fcc <d_expression_1+0xe0>
 8000f58:	2b32      	cmp	r3, #50	; 0x32
 8000f5a:	f000 8127 	beq.w	80011ac <d_expression_1+0x2c0>
 8000f5e:	2b33      	cmp	r3, #51	; 0x33
 8000f60:	d12c      	bne.n	8000fbc <d_expression_1+0xd0>
 8000f62:	68e3      	ldr	r3, [r4, #12]
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	2a5f      	cmp	r2, #95	; 0x5f
 8000f68:	f000 8176 	beq.w	8001258 <d_expression_1+0x36c>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff ffbd 	bl	8000eec <d_expression_1>
 8000f72:	4603      	mov	r3, r0
 8000f74:	462a      	mov	r2, r5
 8000f76:	4620      	mov	r0, r4
 8000f78:	2136      	movs	r1, #54	; 0x36
 8000f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7e:	f7ff b95f 	b.w	8000240 <d_make_comp>
 8000f82:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f86:	2a09      	cmp	r2, #9
 8000f88:	d841      	bhi.n	800100e <d_expression_1+0x122>
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f001 f97e 	bl	800228c <d_unqualified_name>
 8000f90:	4605      	mov	r5, r0
 8000f92:	b198      	cbz	r0, 8000fbc <d_expression_1+0xd0>
 8000f94:	68e3      	ldr	r3, [r4, #12]
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	2a49      	cmp	r2, #73	; 0x49
 8000f9a:	d02b      	beq.n	8000ff4 <d_expression_1+0x108>
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fa2:	2b74      	cmp	r3, #116	; 0x74
 8000fa4:	d1d0      	bne.n	8000f48 <d_expression_1+0x5c>
 8000fa6:	784b      	ldrb	r3, [r1, #1]
 8000fa8:	2b6c      	cmp	r3, #108	; 0x6c
 8000faa:	d1cd      	bne.n	8000f48 <d_expression_1+0x5c>
 8000fac:	f000 fbc8 	bl	8001740 <d_type>
 8000fb0:	68e1      	ldr	r1, [r4, #12]
 8000fb2:	784b      	ldrb	r3, [r1, #1]
 8000fb4:	4605      	mov	r5, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 8190 	bne.w	80012dc <d_expression_1+0x3f0>
 8000fbc:	2500      	movs	r5, #0
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fc4:	f001 bdac 	b.w	8002b20 <d_expr_primary>
 8000fc8:	f7ff ba92 	b.w	80004f0 <d_template_param>
 8000fcc:	6887      	ldr	r7, [r0, #8]
 8000fce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	683e      	ldr	r6, [r7, #0]
 8000fd4:	49c8      	ldr	r1, [pc, #800]	; (80012f8 <d_expression_1+0x40c>)
 8000fd6:	3a02      	subs	r2, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	6323      	str	r3, [r4, #48]	; 0x30
 8000fdc:	4630      	mov	r0, r6
 8000fde:	f005 feef 	bl	8006dc0 <strcmp>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d05b      	beq.n	800109e <d_expression_1+0x1b2>
 8000fe6:	68ff      	ldr	r7, [r7, #12]
 8000fe8:	2f03      	cmp	r7, #3
 8000fea:	d8e7      	bhi.n	8000fbc <d_expression_1+0xd0>
 8000fec:	e8df f007 	tbb	[pc, r7]
 8000ff0:	64a7385c 	.word	0x64a7385c
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	60e3      	str	r3, [r4, #12]
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f000 f989 	bl	8001310 <d_template_args_1>
 8000ffe:	462a      	mov	r2, r5
 8001000:	4603      	mov	r3, r0
 8001002:	2104      	movs	r1, #4
 8001004:	4620      	mov	r0, r4
 8001006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800100a:	f7ff b919 	b.w	8000240 <d_make_comp>
 800100e:	2b6f      	cmp	r3, #111	; 0x6f
 8001010:	f040 815c 	bne.w	80012cc <d_expression_1+0x3e0>
 8001014:	784b      	ldrb	r3, [r1, #1]
 8001016:	2b6e      	cmp	r3, #110	; 0x6e
 8001018:	d196      	bne.n	8000f48 <d_expression_1+0x5c>
 800101a:	3102      	adds	r1, #2
 800101c:	60c1      	str	r1, [r0, #12]
 800101e:	e7b4      	b.n	8000f8a <d_expression_1+0x9e>
 8001020:	3102      	adds	r1, #2
 8001022:	60c1      	str	r1, [r0, #12]
 8001024:	f000 fb8c 	bl	8001740 <d_type>
 8001028:	4605      	mov	r5, r0
 800102a:	4620      	mov	r0, r4
 800102c:	f001 f92e 	bl	800228c <d_unqualified_name>
 8001030:	68e3      	ldr	r3, [r4, #12]
 8001032:	7819      	ldrb	r1, [r3, #0]
 8001034:	2949      	cmp	r1, #73	; 0x49
 8001036:	4606      	mov	r6, r0
 8001038:	f000 80d9 	beq.w	80011ee <d_expression_1+0x302>
 800103c:	4603      	mov	r3, r0
 800103e:	462a      	mov	r2, r5
 8001040:	4620      	mov	r0, r4
 8001042:	2101      	movs	r1, #1
 8001044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001048:	f7ff b8fa 	b.w	8000240 <d_make_comp>
 800104c:	f7ff fa36 	bl	80004bc <d_compact_number>
 8001050:	43c3      	mvns	r3, r0
 8001052:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8001056:	bf18      	it	ne
 8001058:	3001      	addne	r0, #1
 800105a:	f47f af60 	bne.w	8000f1e <d_expression_1+0x32>
 800105e:	e7ad      	b.n	8000fbc <d_expression_1+0xd0>
 8001060:	2e00      	cmp	r6, #0
 8001062:	d083      	beq.n	8000f6c <d_expression_1+0x80>
 8001064:	7833      	ldrb	r3, [r6, #0]
 8001066:	2b70      	cmp	r3, #112	; 0x70
 8001068:	f000 80b0 	beq.w	80011cc <d_expression_1+0x2e0>
 800106c:	2b6d      	cmp	r3, #109	; 0x6d
 800106e:	f000 80ad 	beq.w	80011cc <d_expression_1+0x2e0>
 8001072:	2700      	movs	r7, #0
 8001074:	4630      	mov	r0, r6
 8001076:	49a1      	ldr	r1, [pc, #644]	; (80012fc <d_expression_1+0x410>)
 8001078:	f005 fea2 	bl	8006dc0 <strcmp>
 800107c:	2800      	cmp	r0, #0
 800107e:	f040 80b1 	bne.w	80011e4 <d_expression_1+0x2f8>
 8001082:	4620      	mov	r0, r4
 8001084:	f000 f944 	bl	8001310 <d_template_args_1>
 8001088:	4603      	mov	r3, r0
 800108a:	2f00      	cmp	r7, #0
 800108c:	f43f af72 	beq.w	8000f74 <d_expression_1+0x88>
 8001090:	461a      	mov	r2, r3
 8001092:	2138      	movs	r1, #56	; 0x38
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff f8d3 	bl	8000240 <d_make_comp>
 800109a:	4603      	mov	r3, r0
 800109c:	e76a      	b.n	8000f74 <d_expression_1+0x88>
 800109e:	4620      	mov	r0, r4
 80010a0:	f000 fb4e 	bl	8001740 <d_type>
 80010a4:	4603      	mov	r3, r0
 80010a6:	e765      	b.n	8000f74 <d_expression_1+0x88>
 80010a8:	462a      	mov	r2, r5
 80010aa:	4620      	mov	r0, r4
 80010ac:	2300      	movs	r3, #0
 80010ae:	2135      	movs	r1, #53	; 0x35
 80010b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010b4:	f7ff b8c4 	b.w	8000240 <d_make_comp>
 80010b8:	4991      	ldr	r1, [pc, #580]	; (8001300 <d_expression_1+0x414>)
 80010ba:	4630      	mov	r0, r6
 80010bc:	f005 fe80 	bl	8006dc0 <strcmp>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	f000 80d1 	beq.w	8001268 <d_expression_1+0x37c>
 80010c6:	7833      	ldrb	r3, [r6, #0]
 80010c8:	2b66      	cmp	r3, #102	; 0x66
 80010ca:	f000 80f6 	beq.w	80012ba <d_expression_1+0x3ce>
 80010ce:	2b6e      	cmp	r3, #110	; 0x6e
 80010d0:	f47f af74 	bne.w	8000fbc <d_expression_1+0xd0>
 80010d4:	7873      	ldrb	r3, [r6, #1]
 80010d6:	2b77      	cmp	r3, #119	; 0x77
 80010d8:	d002      	beq.n	80010e0 <d_expression_1+0x1f4>
 80010da:	2b61      	cmp	r3, #97	; 0x61
 80010dc:	f47f af6e 	bne.w	8000fbc <d_expression_1+0xd0>
 80010e0:	215f      	movs	r1, #95	; 0x5f
 80010e2:	4620      	mov	r0, r4
 80010e4:	f7ff fc94 	bl	8000a10 <d_exprlist>
 80010e8:	4606      	mov	r6, r0
 80010ea:	4620      	mov	r0, r4
 80010ec:	f000 fb28 	bl	8001740 <d_type>
 80010f0:	68e3      	ldr	r3, [r4, #12]
 80010f2:	7819      	ldrb	r1, [r3, #0]
 80010f4:	2945      	cmp	r1, #69	; 0x45
 80010f6:	4607      	mov	r7, r0
 80010f8:	f000 80aa 	beq.w	8001250 <d_expression_1+0x364>
 80010fc:	2970      	cmp	r1, #112	; 0x70
 80010fe:	f000 80d0 	beq.w	80012a2 <d_expression_1+0x3b6>
 8001102:	2969      	cmp	r1, #105	; 0x69
 8001104:	f47f af5a 	bne.w	8000fbc <d_expression_1+0xd0>
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	2b6c      	cmp	r3, #108	; 0x6c
 800110c:	f47f af56 	bne.w	8000fbc <d_expression_1+0xd0>
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff feeb 	bl	8000eec <d_expression_1>
 8001116:	4603      	mov	r3, r0
 8001118:	463a      	mov	r2, r7
 800111a:	213b      	movs	r1, #59	; 0x3b
 800111c:	4620      	mov	r0, r4
 800111e:	f7ff f88f 	bl	8000240 <d_make_comp>
 8001122:	4632      	mov	r2, r6
 8001124:	4603      	mov	r3, r0
 8001126:	213a      	movs	r1, #58	; 0x3a
 8001128:	4620      	mov	r0, r4
 800112a:	f7ff f889 	bl	8000240 <d_make_comp>
 800112e:	462a      	mov	r2, r5
 8001130:	4603      	mov	r3, r0
 8001132:	2139      	movs	r1, #57	; 0x39
 8001134:	4620      	mov	r0, r4
 8001136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800113a:	f7ff b881 	b.w	8000240 <d_make_comp>
 800113e:	2e00      	cmp	r6, #0
 8001140:	f43f af3c 	beq.w	8000fbc <d_expression_1+0xd0>
 8001144:	68ab      	ldr	r3, [r5, #8]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	785a      	ldrb	r2, [r3, #1]
 800114a:	2a63      	cmp	r2, #99	; 0x63
 800114c:	d068      	beq.n	8001220 <d_expression_1+0x334>
 800114e:	7833      	ldrb	r3, [r6, #0]
 8001150:	2b66      	cmp	r3, #102	; 0x66
 8001152:	d178      	bne.n	8001246 <d_expression_1+0x35a>
 8001154:	4620      	mov	r0, r4
 8001156:	f000 feed 	bl	8001f34 <d_operator_name>
 800115a:	4607      	mov	r7, r0
 800115c:	4969      	ldr	r1, [pc, #420]	; (8001304 <d_expression_1+0x418>)
 800115e:	4630      	mov	r0, r6
 8001160:	f005 fe2e 	bl	8006dc0 <strcmp>
 8001164:	2800      	cmp	r0, #0
 8001166:	d068      	beq.n	800123a <d_expression_1+0x34e>
 8001168:	4967      	ldr	r1, [pc, #412]	; (8001308 <d_expression_1+0x41c>)
 800116a:	4630      	mov	r0, r6
 800116c:	f005 fe28 	bl	8006dc0 <strcmp>
 8001170:	b130      	cbz	r0, 8001180 <d_expression_1+0x294>
 8001172:	4630      	mov	r0, r6
 8001174:	4965      	ldr	r1, [pc, #404]	; (800130c <d_expression_1+0x420>)
 8001176:	f005 fe23 	bl	8006dc0 <strcmp>
 800117a:	2800      	cmp	r0, #0
 800117c:	f040 80a1 	bne.w	80012c2 <d_expression_1+0x3d6>
 8001180:	4620      	mov	r0, r4
 8001182:	f001 f883 	bl	800228c <d_unqualified_name>
 8001186:	68e3      	ldr	r3, [r4, #12]
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	2a49      	cmp	r2, #73	; 0x49
 800118c:	4606      	mov	r6, r0
 800118e:	d07b      	beq.n	8001288 <d_expression_1+0x39c>
 8001190:	4633      	mov	r3, r6
 8001192:	463a      	mov	r2, r7
 8001194:	2138      	movs	r1, #56	; 0x38
 8001196:	4620      	mov	r0, r4
 8001198:	f7ff f852 	bl	8000240 <d_make_comp>
 800119c:	462a      	mov	r2, r5
 800119e:	4603      	mov	r3, r0
 80011a0:	2137      	movs	r1, #55	; 0x37
 80011a2:	4620      	mov	r0, r4
 80011a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011a8:	f7ff b84a 	b.w	8000240 <d_make_comp>
 80011ac:	6883      	ldr	r3, [r0, #8]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	f63f af04 	bhi.w	8000fbc <d_expression_1+0xd0>
 80011b4:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <d_expression_1+0x2d0>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080010a9 	.word	0x080010a9
 80011c0:	08000f6d 	.word	0x08000f6d
 80011c4:	08000fbd 	.word	0x08000fbd
 80011c8:	08000fbd 	.word	0x08000fbd
 80011cc:	7872      	ldrb	r2, [r6, #1]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	f47f af4f 	bne.w	8001072 <d_expression_1+0x186>
 80011d4:	68e3      	ldr	r3, [r4, #12]
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	2a5f      	cmp	r2, #95	; 0x5f
 80011da:	f47f af4b 	bne.w	8001074 <d_expression_1+0x188>
 80011de:	3301      	adds	r3, #1
 80011e0:	60e3      	str	r3, [r4, #12]
 80011e2:	e746      	b.n	8001072 <d_expression_1+0x186>
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff fe81 	bl	8000eec <d_expression_1>
 80011ea:	4603      	mov	r3, r0
 80011ec:	e74d      	b.n	800108a <d_expression_1+0x19e>
 80011ee:	3301      	adds	r3, #1
 80011f0:	60e3      	str	r3, [r4, #12]
 80011f2:	4620      	mov	r0, r4
 80011f4:	f000 f88c 	bl	8001310 <d_template_args_1>
 80011f8:	4632      	mov	r2, r6
 80011fa:	4603      	mov	r3, r0
 80011fc:	2104      	movs	r1, #4
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff f81e 	bl	8000240 <d_make_comp>
 8001204:	4603      	mov	r3, r0
 8001206:	e71a      	b.n	800103e <d_expression_1+0x152>
 8001208:	3102      	adds	r1, #2
 800120a:	60e1      	str	r1, [r4, #12]
 800120c:	f7ff fe6e 	bl	8000eec <d_expression_1>
 8001210:	2300      	movs	r3, #0
 8001212:	4602      	mov	r2, r0
 8001214:	214a      	movs	r1, #74	; 0x4a
 8001216:	4620      	mov	r0, r4
 8001218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800121c:	f7ff b810 	b.w	8000240 <d_make_comp>
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8001226:	2a01      	cmp	r2, #1
 8001228:	d902      	bls.n	8001230 <d_expression_1+0x344>
 800122a:	3b72      	subs	r3, #114	; 0x72
 800122c:	2b01      	cmp	r3, #1
 800122e:	d88e      	bhi.n	800114e <d_expression_1+0x262>
 8001230:	4620      	mov	r0, r4
 8001232:	f000 fa85 	bl	8001740 <d_type>
 8001236:	4607      	mov	r7, r0
 8001238:	e790      	b.n	800115c <d_expression_1+0x270>
 800123a:	2145      	movs	r1, #69	; 0x45
 800123c:	4620      	mov	r0, r4
 800123e:	f7ff fbe7 	bl	8000a10 <d_exprlist>
 8001242:	4606      	mov	r6, r0
 8001244:	e7a4      	b.n	8001190 <d_expression_1+0x2a4>
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fe50 	bl	8000eec <d_expression_1>
 800124c:	4607      	mov	r7, r0
 800124e:	e785      	b.n	800115c <d_expression_1+0x270>
 8001250:	3301      	adds	r3, #1
 8001252:	60e3      	str	r3, [r4, #12]
 8001254:	2300      	movs	r3, #0
 8001256:	e75f      	b.n	8001118 <d_expression_1+0x22c>
 8001258:	3301      	adds	r3, #1
 800125a:	60e3      	str	r3, [r4, #12]
 800125c:	2145      	movs	r1, #69	; 0x45
 800125e:	4620      	mov	r0, r4
 8001260:	f7ff fbd6 	bl	8000a10 <d_exprlist>
 8001264:	4603      	mov	r3, r0
 8001266:	e685      	b.n	8000f74 <d_expression_1+0x88>
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fe3f 	bl	8000eec <d_expression_1>
 800126e:	4606      	mov	r6, r0
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fe3b 	bl	8000eec <d_expression_1>
 8001276:	4607      	mov	r7, r0
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff fe37 	bl	8000eec <d_expression_1>
 800127e:	4603      	mov	r3, r0
 8001280:	2800      	cmp	r0, #0
 8001282:	f47f af49 	bne.w	8001118 <d_expression_1+0x22c>
 8001286:	e699      	b.n	8000fbc <d_expression_1+0xd0>
 8001288:	3301      	adds	r3, #1
 800128a:	60e3      	str	r3, [r4, #12]
 800128c:	4620      	mov	r0, r4
 800128e:	f000 f83f 	bl	8001310 <d_template_args_1>
 8001292:	4632      	mov	r2, r6
 8001294:	4603      	mov	r3, r0
 8001296:	2104      	movs	r1, #4
 8001298:	4620      	mov	r0, r4
 800129a:	f7fe ffd1 	bl	8000240 <d_make_comp>
 800129e:	4606      	mov	r6, r0
 80012a0:	e776      	b.n	8001190 <d_expression_1+0x2a4>
 80012a2:	785a      	ldrb	r2, [r3, #1]
 80012a4:	2a69      	cmp	r2, #105	; 0x69
 80012a6:	f47f ae89 	bne.w	8000fbc <d_expression_1+0xd0>
 80012aa:	3302      	adds	r3, #2
 80012ac:	60e3      	str	r3, [r4, #12]
 80012ae:	2145      	movs	r1, #69	; 0x45
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff fbad 	bl	8000a10 <d_exprlist>
 80012b6:	4603      	mov	r3, r0
 80012b8:	e72e      	b.n	8001118 <d_expression_1+0x22c>
 80012ba:	4620      	mov	r0, r4
 80012bc:	f000 fe3a 	bl	8001f34 <d_operator_name>
 80012c0:	e7d5      	b.n	800126e <d_expression_1+0x382>
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff fe12 	bl	8000eec <d_expression_1>
 80012c8:	4606      	mov	r6, r0
 80012ca:	e761      	b.n	8001190 <d_expression_1+0x2a4>
 80012cc:	2b69      	cmp	r3, #105	; 0x69
 80012ce:	f47f ae68 	bne.w	8000fa2 <d_expression_1+0xb6>
 80012d2:	784b      	ldrb	r3, [r1, #1]
 80012d4:	2b6c      	cmp	r3, #108	; 0x6c
 80012d6:	f47f ae37 	bne.w	8000f48 <d_expression_1+0x5c>
 80012da:	2500      	movs	r5, #0
 80012dc:	3102      	adds	r1, #2
 80012de:	60e1      	str	r1, [r4, #12]
 80012e0:	4620      	mov	r0, r4
 80012e2:	2145      	movs	r1, #69	; 0x45
 80012e4:	f7ff fb94 	bl	8000a10 <d_exprlist>
 80012e8:	462a      	mov	r2, r5
 80012ea:	4603      	mov	r3, r0
 80012ec:	2130      	movs	r1, #48	; 0x30
 80012ee:	4620      	mov	r0, r4
 80012f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012f4:	f7fe bfa4 	b.w	8000240 <d_make_comp>
 80012f8:	08012038 	.word	0x08012038
 80012fc:	08011b1c 	.word	0x08011b1c
 8001300:	08011b2c 	.word	0x08011b2c
 8001304:	08011b20 	.word	0x08011b20
 8001308:	08011b24 	.word	0x08011b24
 800130c:	08011b28 	.word	0x08011b28

08001310 <d_template_args_1>:
 8001310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001314:	68c2      	ldr	r2, [r0, #12]
 8001316:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001318:	7813      	ldrb	r3, [r2, #0]
 800131a:	2b45      	cmp	r3, #69	; 0x45
 800131c:	b082      	sub	sp, #8
 800131e:	4604      	mov	r4, r0
 8001320:	d04e      	beq.n	80013c0 <d_template_args_1+0xb0>
 8001322:	ad02      	add	r5, sp, #8
 8001324:	2100      	movs	r1, #0
 8001326:	f845 1d04 	str.w	r1, [r5, #-4]!
 800132a:	2601      	movs	r6, #1
 800132c:	3b49      	subs	r3, #73	; 0x49
 800132e:	2b0f      	cmp	r3, #15
 8001330:	d83d      	bhi.n	80013ae <d_template_args_1+0x9e>
 8001332:	e8df f003 	tbb	[pc, r3]
 8001336:	3737      	.short	0x3737
 8001338:	3c3c323c 	.word	0x3c3c323c
 800133c:	3c3c3c3c 	.word	0x3c3c3c3c
 8001340:	3c3c3c3c 	.word	0x3c3c3c3c
 8001344:	083c      	.short	0x083c
 8001346:	3201      	adds	r2, #1
 8001348:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 800134c:	60e2      	str	r2, [r4, #12]
 800134e:	6366      	str	r6, [r4, #52]	; 0x34
 8001350:	4620      	mov	r0, r4
 8001352:	f7ff fdcb 	bl	8000eec <d_expression_1>
 8001356:	68e3      	ldr	r3, [r4, #12]
 8001358:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	2a45      	cmp	r2, #69	; 0x45
 8001360:	4684      	mov	ip, r0
 8001362:	f103 0301 	add.w	r3, r3, #1
 8001366:	d127      	bne.n	80013b8 <d_template_args_1+0xa8>
 8001368:	60e3      	str	r3, [r4, #12]
 800136a:	2300      	movs	r3, #0
 800136c:	212f      	movs	r1, #47	; 0x2f
 800136e:	4662      	mov	r2, ip
 8001370:	4620      	mov	r0, r4
 8001372:	f1bc 0f00 	cmp.w	ip, #0
 8001376:	d01f      	beq.n	80013b8 <d_template_args_1+0xa8>
 8001378:	f7fe ff62 	bl	8000240 <d_make_comp>
 800137c:	6028      	str	r0, [r5, #0]
 800137e:	f100 050c 	add.w	r5, r0, #12
 8001382:	b1c8      	cbz	r0, 80013b8 <d_template_args_1+0xa8>
 8001384:	68e2      	ldr	r2, [r4, #12]
 8001386:	7813      	ldrb	r3, [r2, #0]
 8001388:	2b45      	cmp	r3, #69	; 0x45
 800138a:	d1cf      	bne.n	800132c <d_template_args_1+0x1c>
 800138c:	9801      	ldr	r0, [sp, #4]
 800138e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001390:	3201      	adds	r2, #1
 8001392:	60e2      	str	r2, [r4, #12]
 8001394:	b002      	add	sp, #8
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800139a:	4620      	mov	r0, r4
 800139c:	f001 fbc0 	bl	8002b20 <d_expr_primary>
 80013a0:	4684      	mov	ip, r0
 80013a2:	e7e2      	b.n	800136a <d_template_args_1+0x5a>
 80013a4:	4620      	mov	r0, r4
 80013a6:	f000 f815 	bl	80013d4 <d_template_args>
 80013aa:	4684      	mov	ip, r0
 80013ac:	e7dd      	b.n	800136a <d_template_args_1+0x5a>
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 f9c6 	bl	8001740 <d_type>
 80013b4:	4684      	mov	ip, r0
 80013b6:	e7d8      	b.n	800136a <d_template_args_1+0x5a>
 80013b8:	2000      	movs	r0, #0
 80013ba:	b002      	add	sp, #8
 80013bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c0:	3201      	adds	r2, #1
 80013c2:	2300      	movs	r3, #0
 80013c4:	60c2      	str	r2, [r0, #12]
 80013c6:	212f      	movs	r1, #47	; 0x2f
 80013c8:	461a      	mov	r2, r3
 80013ca:	b002      	add	sp, #8
 80013cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013d0:	f7fe bf36 	b.w	8000240 <d_make_comp>

080013d4 <d_template_args>:
 80013d4:	68c3      	ldr	r3, [r0, #12]
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	3a49      	subs	r2, #73	; 0x49
 80013da:	2a01      	cmp	r2, #1
 80013dc:	d802      	bhi.n	80013e4 <d_template_args+0x10>
 80013de:	3301      	adds	r3, #1
 80013e0:	60c3      	str	r3, [r0, #12]
 80013e2:	e795      	b.n	8001310 <d_template_args_1>
 80013e4:	2000      	movs	r0, #0
 80013e6:	4770      	bx	lr

080013e8 <d_name>:
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	68c2      	ldr	r2, [r0, #12]
 80013ee:	7813      	ldrb	r3, [r2, #0]
 80013f0:	3b4e      	subs	r3, #78	; 0x4e
 80013f2:	b083      	sub	sp, #12
 80013f4:	4604      	mov	r4, r0
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d846      	bhi.n	8001488 <d_name+0xa0>
 80013fa:	e8df f003 	tbb	[pc, r3]
 80013fe:	4567      	.short	0x4567
 8001400:	0e454545 	.word	0x0e454545
 8001404:	45450745 	.word	0x45450745
 8001408:	4545      	.short	0x4545
 800140a:	a4          	.byte	0xa4
 800140b:	00          	.byte	0x00
 800140c:	f000 ff3e 	bl	800228c <d_unqualified_name>
 8001410:	4605      	mov	r5, r0
 8001412:	4628      	mov	r0, r5
 8001414:	b003      	add	sp, #12
 8001416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800141a:	7853      	ldrb	r3, [r2, #1]
 800141c:	2b74      	cmp	r3, #116	; 0x74
 800141e:	f040 80d7 	bne.w	80015d0 <d_name+0x1e8>
 8001422:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001426:	3202      	adds	r2, #2
 8001428:	428b      	cmp	r3, r1
 800142a:	60c2      	str	r2, [r0, #12]
 800142c:	f280 8127 	bge.w	800167e <d_name+0x296>
 8001430:	6901      	ldr	r1, [r0, #16]
 8001432:	48c0      	ldr	r0, [pc, #768]	; (8001734 <d_name+0x34c>)
 8001434:	011a      	lsls	r2, r3, #4
 8001436:	188d      	adds	r5, r1, r2
 8001438:	3301      	adds	r3, #1
 800143a:	6163      	str	r3, [r4, #20]
 800143c:	2300      	movs	r3, #0
 800143e:	606b      	str	r3, [r5, #4]
 8001440:	548b      	strb	r3, [r1, r2]
 8001442:	2303      	movs	r3, #3
 8001444:	e9c5 0302 	strd	r0, r3, [r5, #8]
 8001448:	4620      	mov	r0, r4
 800144a:	f000 ff1f 	bl	800228c <d_unqualified_name>
 800144e:	462a      	mov	r2, r5
 8001450:	4603      	mov	r3, r0
 8001452:	2101      	movs	r1, #1
 8001454:	4620      	mov	r0, r4
 8001456:	f7fe fef3 	bl	8000240 <d_make_comp>
 800145a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800145c:	68e2      	ldr	r2, [r4, #12]
 800145e:	3303      	adds	r3, #3
 8001460:	6323      	str	r3, [r4, #48]	; 0x30
 8001462:	7813      	ldrb	r3, [r2, #0]
 8001464:	2b49      	cmp	r3, #73	; 0x49
 8001466:	4605      	mov	r5, r0
 8001468:	d1d3      	bne.n	8001412 <d_name+0x2a>
 800146a:	2800      	cmp	r0, #0
 800146c:	f000 80ba 	beq.w	80015e4 <d_name+0x1fc>
 8001470:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001474:	4293      	cmp	r3, r2
 8001476:	f280 80b5 	bge.w	80015e4 <d_name+0x1fc>
 800147a:	69e1      	ldr	r1, [r4, #28]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001482:	6222      	str	r2, [r4, #32]
 8001484:	4620      	mov	r0, r4
 8001486:	e014      	b.n	80014b2 <d_name+0xca>
 8001488:	f000 ff00 	bl	800228c <d_unqualified_name>
 800148c:	68e3      	ldr	r3, [r4, #12]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b49      	cmp	r3, #73	; 0x49
 8001492:	4605      	mov	r5, r0
 8001494:	d1bd      	bne.n	8001412 <d_name+0x2a>
 8001496:	2800      	cmp	r0, #0
 8001498:	f000 80a4 	beq.w	80015e4 <d_name+0x1fc>
 800149c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f280 809f 	bge.w	80015e4 <d_name+0x1fc>
 80014a6:	69e1      	ldr	r1, [r4, #28]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80014ae:	4620      	mov	r0, r4
 80014b0:	6222      	str	r2, [r4, #32]
 80014b2:	f7ff ff8f 	bl	80013d4 <d_template_args>
 80014b6:	462a      	mov	r2, r5
 80014b8:	4603      	mov	r3, r0
 80014ba:	2104      	movs	r1, #4
 80014bc:	4620      	mov	r0, r4
 80014be:	f7fe febf 	bl	8000240 <d_make_comp>
 80014c2:	4605      	mov	r5, r0
 80014c4:	4628      	mov	r0, r5
 80014c6:	b003      	add	sp, #12
 80014c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014cc:	3201      	adds	r2, #1
 80014ce:	60c2      	str	r2, [r0, #12]
 80014d0:	a901      	add	r1, sp, #4
 80014d2:	2201      	movs	r2, #1
 80014d4:	f000 fde6 	bl	80020a4 <d_cv_qualifiers>
 80014d8:	4680      	mov	r8, r0
 80014da:	2800      	cmp	r0, #0
 80014dc:	f000 8082 	beq.w	80015e4 <d_name+0x1fc>
 80014e0:	2100      	movs	r1, #0
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7fe fef4 	bl	80002d0 <d_ref_qualifier>
 80014e8:	68e2      	ldr	r2, [r4, #12]
 80014ea:	4e93      	ldr	r6, [pc, #588]	; (8001738 <d_name+0x350>)
 80014ec:	7815      	ldrb	r5, [r2, #0]
 80014ee:	4681      	mov	r9, r0
 80014f0:	2700      	movs	r7, #0
 80014f2:	2d00      	cmp	r5, #0
 80014f4:	f000 80b3 	beq.w	800165e <d_name+0x276>
 80014f8:	2d44      	cmp	r5, #68	; 0x44
 80014fa:	f000 8096 	beq.w	800162a <d_name+0x242>
 80014fe:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b1c      	cmp	r3, #28
 8001506:	d96f      	bls.n	80015e8 <d_name+0x200>
 8001508:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b19      	cmp	r3, #25
 8001510:	d96e      	bls.n	80015f0 <d_name+0x208>
 8001512:	2d55      	cmp	r5, #85	; 0x55
 8001514:	f000 80a1 	beq.w	800165a <d_name+0x272>
 8001518:	2d53      	cmp	r5, #83	; 0x53
 800151a:	f000 80b2 	beq.w	8001682 <d_name+0x29a>
 800151e:	2d49      	cmp	r5, #73	; 0x49
 8001520:	f000 80a4 	beq.w	800166c <d_name+0x284>
 8001524:	2d54      	cmp	r5, #84	; 0x54
 8001526:	f000 80e6 	beq.w	80016f6 <d_name+0x30e>
 800152a:	2d45      	cmp	r5, #69	; 0x45
 800152c:	f000 80e9 	beq.w	8001702 <d_name+0x31a>
 8001530:	2d4d      	cmp	r5, #77	; 0x4d
 8001532:	f040 8094 	bne.w	800165e <d_name+0x276>
 8001536:	2f00      	cmp	r7, #0
 8001538:	f000 8091 	beq.w	800165e <d_name+0x276>
 800153c:	1c53      	adds	r3, r2, #1
 800153e:	60e3      	str	r3, [r4, #12]
 8001540:	7855      	ldrb	r5, [r2, #1]
 8001542:	461a      	mov	r2, r3
 8001544:	e7d5      	b.n	80014f2 <d_name+0x10a>
 8001546:	3201      	adds	r2, #1
 8001548:	60c2      	str	r2, [r0, #12]
 800154a:	2100      	movs	r1, #0
 800154c:	f001 f83a 	bl	80025c4 <d_encoding>
 8001550:	68e3      	ldr	r3, [r4, #12]
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	2a45      	cmp	r2, #69	; 0x45
 8001556:	4606      	mov	r6, r0
 8001558:	d144      	bne.n	80015e4 <d_name+0x1fc>
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60e2      	str	r2, [r4, #12]
 800155e:	785a      	ldrb	r2, [r3, #1]
 8001560:	2a73      	cmp	r2, #115	; 0x73
 8001562:	f000 80b0 	beq.w	80016c6 <d_name+0x2de>
 8001566:	2a64      	cmp	r2, #100	; 0x64
 8001568:	f000 8095 	beq.w	8001696 <d_name+0x2ae>
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff ff3b 	bl	80013e8 <d_name>
 8001572:	4605      	mov	r5, r0
 8001574:	b308      	cbz	r0, 80015ba <d_name+0x1d2>
 8001576:	7803      	ldrb	r3, [r0, #0]
 8001578:	2b45      	cmp	r3, #69	; 0x45
 800157a:	d01e      	beq.n	80015ba <d_name+0x1d2>
 800157c:	2b47      	cmp	r3, #71	; 0x47
 800157e:	d01c      	beq.n	80015ba <d_name+0x1d2>
 8001580:	f04f 37ff 	mov.w	r7, #4294967295
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff f903 	bl	8000790 <d_discriminator>
 800158a:	b358      	cbz	r0, 80015e4 <d_name+0x1fc>
 800158c:	1c7b      	adds	r3, r7, #1
 800158e:	d014      	beq.n	80015ba <d_name+0x1d2>
 8001590:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001594:	4293      	cmp	r3, r2
 8001596:	f280 8094 	bge.w	80016c2 <d_name+0x2da>
 800159a:	6920      	ldr	r0, [r4, #16]
 800159c:	0119      	lsls	r1, r3, #4
 800159e:	1842      	adds	r2, r0, r1
 80015a0:	3301      	adds	r3, #1
 80015a2:	f04f 0e00 	mov.w	lr, #0
 80015a6:	f04f 0c46 	mov.w	ip, #70	; 0x46
 80015aa:	f8c2 e004 	str.w	lr, [r2, #4]
 80015ae:	6163      	str	r3, [r4, #20]
 80015b0:	f800 c001 	strb.w	ip, [r0, r1]
 80015b4:	e9c2 5702 	strd	r5, r7, [r2, #8]
 80015b8:	4615      	mov	r5, r2
 80015ba:	462b      	mov	r3, r5
 80015bc:	4632      	mov	r2, r6
 80015be:	4620      	mov	r0, r4
 80015c0:	2102      	movs	r1, #2
 80015c2:	f7fe fe3d 	bl	8000240 <d_make_comp>
 80015c6:	4605      	mov	r5, r0
 80015c8:	4628      	mov	r0, r5
 80015ca:	b003      	add	sp, #12
 80015cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015d0:	2100      	movs	r1, #0
 80015d2:	f7ff f825 	bl	8000620 <d_substitution>
 80015d6:	68e3      	ldr	r3, [r4, #12]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b49      	cmp	r3, #73	; 0x49
 80015dc:	4605      	mov	r5, r0
 80015de:	f47f af18 	bne.w	8001412 <d_name+0x2a>
 80015e2:	e74f      	b.n	8001484 <d_name+0x9c>
 80015e4:	2500      	movs	r5, #0
 80015e6:	e714      	b.n	8001412 <d_name+0x2a>
 80015e8:	fa26 f303 	lsr.w	r3, r6, r3
 80015ec:	07d9      	lsls	r1, r3, #31
 80015ee:	d58b      	bpl.n	8001508 <d_name+0x120>
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 fe4b 	bl	800228c <d_unqualified_name>
 80015f6:	b35f      	cbz	r7, 8001650 <d_name+0x268>
 80015f8:	2101      	movs	r1, #1
 80015fa:	4603      	mov	r3, r0
 80015fc:	463a      	mov	r2, r7
 80015fe:	4620      	mov	r0, r4
 8001600:	f7fe fe1e 	bl	8000240 <d_make_comp>
 8001604:	4607      	mov	r7, r0
 8001606:	68e2      	ldr	r2, [r4, #12]
 8001608:	2d53      	cmp	r5, #83	; 0x53
 800160a:	7813      	ldrb	r3, [r2, #0]
 800160c:	d01e      	beq.n	800164c <d_name+0x264>
 800160e:	2b45      	cmp	r3, #69	; 0x45
 8001610:	d01a      	beq.n	8001648 <d_name+0x260>
 8001612:	b327      	cbz	r7, 800165e <d_name+0x276>
 8001614:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001618:	428b      	cmp	r3, r1
 800161a:	da20      	bge.n	800165e <d_name+0x276>
 800161c:	69e1      	ldr	r1, [r4, #28]
 800161e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 8001622:	3301      	adds	r3, #1
 8001624:	6223      	str	r3, [r4, #32]
 8001626:	7815      	ldrb	r5, [r2, #0]
 8001628:	e763      	b.n	80014f2 <d_name+0x10a>
 800162a:	7853      	ldrb	r3, [r2, #1]
 800162c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001630:	2b54      	cmp	r3, #84	; 0x54
 8001632:	4620      	mov	r0, r4
 8001634:	d00e      	beq.n	8001654 <d_name+0x26c>
 8001636:	f000 fe29 	bl	800228c <d_unqualified_name>
 800163a:	2f00      	cmp	r7, #0
 800163c:	d1dc      	bne.n	80015f8 <d_name+0x210>
 800163e:	68e2      	ldr	r2, [r4, #12]
 8001640:	7813      	ldrb	r3, [r2, #0]
 8001642:	2b45      	cmp	r3, #69	; 0x45
 8001644:	4607      	mov	r7, r0
 8001646:	d1e4      	bne.n	8001612 <d_name+0x22a>
 8001648:	461d      	mov	r5, r3
 800164a:	e758      	b.n	80014fe <d_name+0x116>
 800164c:	461d      	mov	r5, r3
 800164e:	e750      	b.n	80014f2 <d_name+0x10a>
 8001650:	4607      	mov	r7, r0
 8001652:	e7d8      	b.n	8001606 <d_name+0x21e>
 8001654:	f000 f874 	bl	8001740 <d_type>
 8001658:	e7ef      	b.n	800163a <d_name+0x252>
 800165a:	4620      	mov	r0, r4
 800165c:	e7eb      	b.n	8001636 <d_name+0x24e>
 800165e:	2500      	movs	r5, #0
 8001660:	4628      	mov	r0, r5
 8001662:	f8c8 5000 	str.w	r5, [r8]
 8001666:	b003      	add	sp, #12
 8001668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800166c:	2f00      	cmp	r7, #0
 800166e:	d0f6      	beq.n	800165e <d_name+0x276>
 8001670:	3201      	adds	r2, #1
 8001672:	60e2      	str	r2, [r4, #12]
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fe4b 	bl	8001310 <d_template_args_1>
 800167a:	2104      	movs	r1, #4
 800167c:	e7bd      	b.n	80015fa <d_name+0x212>
 800167e:	2500      	movs	r5, #0
 8001680:	e6e2      	b.n	8001448 <d_name+0x60>
 8001682:	2101      	movs	r1, #1
 8001684:	4620      	mov	r0, r4
 8001686:	f7fe ffcb 	bl	8000620 <d_substitution>
 800168a:	2f00      	cmp	r7, #0
 800168c:	d1b4      	bne.n	80015f8 <d_name+0x210>
 800168e:	68e2      	ldr	r2, [r4, #12]
 8001690:	4607      	mov	r7, r0
 8001692:	7815      	ldrb	r5, [r2, #0]
 8001694:	e72d      	b.n	80014f2 <d_name+0x10a>
 8001696:	3302      	adds	r3, #2
 8001698:	60e3      	str	r3, [r4, #12]
 800169a:	4620      	mov	r0, r4
 800169c:	f7fe ff0e 	bl	80004bc <d_compact_number>
 80016a0:	1e07      	subs	r7, r0, #0
 80016a2:	db9f      	blt.n	80015e4 <d_name+0x1fc>
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff fe9f 	bl	80013e8 <d_name>
 80016aa:	4605      	mov	r5, r0
 80016ac:	2800      	cmp	r0, #0
 80016ae:	f43f af6f 	beq.w	8001590 <d_name+0x1a8>
 80016b2:	7803      	ldrb	r3, [r0, #0]
 80016b4:	2b45      	cmp	r3, #69	; 0x45
 80016b6:	f43f af69 	beq.w	800158c <d_name+0x1a4>
 80016ba:	2b47      	cmp	r3, #71	; 0x47
 80016bc:	f43f af66 	beq.w	800158c <d_name+0x1a4>
 80016c0:	e760      	b.n	8001584 <d_name+0x19c>
 80016c2:	2500      	movs	r5, #0
 80016c4:	e779      	b.n	80015ba <d_name+0x1d2>
 80016c6:	3302      	adds	r3, #2
 80016c8:	60e3      	str	r3, [r4, #12]
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff f860 	bl	8000790 <d_discriminator>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d087      	beq.n	80015e4 <d_name+0x1fc>
 80016d4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80016d8:	429a      	cmp	r2, r3
 80016da:	da10      	bge.n	80016fe <d_name+0x316>
 80016dc:	6920      	ldr	r0, [r4, #16]
 80016de:	4d17      	ldr	r5, [pc, #92]	; (800173c <d_name+0x354>)
 80016e0:	0111      	lsls	r1, r2, #4
 80016e2:	1843      	adds	r3, r0, r1
 80016e4:	3201      	adds	r2, #1
 80016e6:	6162      	str	r2, [r4, #20]
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	5442      	strb	r2, [r0, r1]
 80016ee:	220e      	movs	r2, #14
 80016f0:	e9c3 5202 	strd	r5, r2, [r3, #8]
 80016f4:	e762      	b.n	80015bc <d_name+0x1d4>
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7fe fefa 	bl	80004f0 <d_template_param>
 80016fc:	e79d      	b.n	800163a <d_name+0x252>
 80016fe:	2300      	movs	r3, #0
 8001700:	e75c      	b.n	80015bc <d_name+0x1d4>
 8001702:	f8c8 7000 	str.w	r7, [r8]
 8001706:	2f00      	cmp	r7, #0
 8001708:	f43f af6c 	beq.w	80015e4 <d_name+0x1fc>
 800170c:	f1b9 0f00 	cmp.w	r9, #0
 8001710:	d004      	beq.n	800171c <d_name+0x334>
 8001712:	9b01      	ldr	r3, [sp, #4]
 8001714:	f8c9 3008 	str.w	r3, [r9, #8]
 8001718:	f8cd 9004 	str.w	r9, [sp, #4]
 800171c:	7813      	ldrb	r3, [r2, #0]
 800171e:	2b45      	cmp	r3, #69	; 0x45
 8001720:	f47f af60 	bne.w	80015e4 <d_name+0x1fc>
 8001724:	9d01      	ldr	r5, [sp, #4]
 8001726:	3201      	adds	r2, #1
 8001728:	4628      	mov	r0, r5
 800172a:	60e2      	str	r2, [r4, #12]
 800172c:	b003      	add	sp, #12
 800172e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001732:	bf00      	nop
 8001734:	08011b40 	.word	0x08011b40
 8001738:	100803ff 	.word	0x100803ff
 800173c:	08011b30 	.word	0x08011b30

08001740 <d_type>:
 8001740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001744:	68c2      	ldr	r2, [r0, #12]
 8001746:	7813      	ldrb	r3, [r2, #0]
 8001748:	2b72      	cmp	r3, #114	; 0x72
 800174a:	b083      	sub	sp, #12
 800174c:	4604      	mov	r4, r0
 800174e:	d05f      	beq.n	8001810 <d_type+0xd0>
 8001750:	2b56      	cmp	r3, #86	; 0x56
 8001752:	d05d      	beq.n	8001810 <d_type+0xd0>
 8001754:	2b4b      	cmp	r3, #75	; 0x4b
 8001756:	d05b      	beq.n	8001810 <d_type+0xd0>
 8001758:	2b44      	cmp	r3, #68	; 0x44
 800175a:	d051      	beq.n	8001800 <d_type+0xc0>
 800175c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001760:	294a      	cmp	r1, #74	; 0x4a
 8001762:	f200 809e 	bhi.w	80018a2 <d_type+0x162>
 8001766:	e8df f011 	tbh	[pc, r1, lsl #1]
 800176a:	0111      	.short	0x0111
 800176c:	01110111 	.word	0x01110111
 8001770:	01110111 	.word	0x01110111
 8001774:	01110111 	.word	0x01110111
 8001778:	01110111 	.word	0x01110111
 800177c:	009c0111 	.word	0x009c0111
 8001780:	009c009c 	.word	0x009c009c
 8001784:	009c009c 	.word	0x009c009c
 8001788:	009c009c 	.word	0x009c009c
 800178c:	009c021e 	.word	0x009c021e
 8001790:	009c013b 	.word	0x009c013b
 8001794:	0135009c 	.word	0x0135009c
 8001798:	009c0149 	.word	0x009c0149
 800179c:	009c009c 	.word	0x009c009c
 80017a0:	009c009c 	.word	0x009c009c
 80017a4:	01110206 	.word	0x01110206
 80017a8:	01650157 	.word	0x01650157
 80017ac:	0173009c 	.word	0x0173009c
 80017b0:	01a50181 	.word	0x01a50181
 80017b4:	009c01cc 	.word	0x009c01cc
 80017b8:	009c009c 	.word	0x009c009c
 80017bc:	0111009c 	.word	0x0111009c
 80017c0:	009c009c 	.word	0x009c009c
 80017c4:	009c009c 	.word	0x009c009c
 80017c8:	009c009c 	.word	0x009c009c
 80017cc:	01e401e4 	.word	0x01e401e4
 80017d0:	01e401e4 	.word	0x01e401e4
 80017d4:	01e401e4 	.word	0x01e401e4
 80017d8:	01e401e4 	.word	0x01e401e4
 80017dc:	01e401e4 	.word	0x01e401e4
 80017e0:	01e4009c 	.word	0x01e4009c
 80017e4:	01e401e4 	.word	0x01e401e4
 80017e8:	009c01e4 	.word	0x009c01e4
 80017ec:	009c009c 	.word	0x009c009c
 80017f0:	01e401e4 	.word	0x01e401e4
 80017f4:	01e40127 	.word	0x01e40127
 80017f8:	01e401e4 	.word	0x01e401e4
 80017fc:	01e401e4 	.word	0x01e401e4
 8001800:	7853      	ldrb	r3, [r2, #1]
 8001802:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 8001806:	294f      	cmp	r1, #79	; 0x4f
 8001808:	d002      	beq.n	8001810 <d_type+0xd0>
 800180a:	3b77      	subs	r3, #119	; 0x77
 800180c:	2b01      	cmp	r3, #1
 800180e:	d84d      	bhi.n	80018ac <d_type+0x16c>
 8001810:	2200      	movs	r2, #0
 8001812:	a901      	add	r1, sp, #4
 8001814:	4620      	mov	r0, r4
 8001816:	f000 fc45 	bl	80020a4 <d_cv_qualifiers>
 800181a:	4605      	mov	r5, r0
 800181c:	2800      	cmp	r0, #0
 800181e:	d040      	beq.n	80018a2 <d_type+0x162>
 8001820:	68e3      	ldr	r3, [r4, #12]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b46      	cmp	r3, #70	; 0x46
 8001826:	4620      	mov	r0, r4
 8001828:	d119      	bne.n	800185e <d_type+0x11e>
 800182a:	f000 fd0f 	bl	800224c <d_function_type>
 800182e:	6028      	str	r0, [r5, #0]
 8001830:	2800      	cmp	r0, #0
 8001832:	d036      	beq.n	80018a2 <d_type+0x162>
 8001834:	7803      	ldrb	r3, [r0, #0]
 8001836:	9a01      	ldr	r2, [sp, #4]
 8001838:	3b1f      	subs	r3, #31
 800183a:	2b01      	cmp	r3, #1
 800183c:	d913      	bls.n	8001866 <d_type+0x126>
 800183e:	2a00      	cmp	r2, #0
 8001840:	d02f      	beq.n	80018a2 <d_type+0x162>
 8001842:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001846:	428b      	cmp	r3, r1
 8001848:	da2b      	bge.n	80018a2 <d_type+0x162>
 800184a:	69e0      	ldr	r0, [r4, #28]
 800184c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001850:	1c59      	adds	r1, r3, #1
 8001852:	9d01      	ldr	r5, [sp, #4]
 8001854:	6221      	str	r1, [r4, #32]
 8001856:	4628      	mov	r0, r5
 8001858:	b003      	add	sp, #12
 800185a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800185e:	f7ff ff6f 	bl	8001740 <d_type>
 8001862:	6028      	str	r0, [r5, #0]
 8001864:	e7e4      	b.n	8001830 <d_type+0xf0>
 8001866:	6883      	ldr	r3, [r0, #8]
 8001868:	6082      	str	r2, [r0, #8]
 800186a:	682a      	ldr	r2, [r5, #0]
 800186c:	9201      	str	r2, [sp, #4]
 800186e:	602b      	str	r3, [r5, #0]
 8001870:	9a01      	ldr	r2, [sp, #4]
 8001872:	e7e4      	b.n	800183e <d_type+0xfe>
 8001874:	2301      	movs	r3, #1
 8001876:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001878:	6343      	str	r3, [r0, #52]	; 0x34
 800187a:	f7ff fb37 	bl	8000eec <d_expression_1>
 800187e:	6365      	str	r5, [r4, #52]	; 0x34
 8001880:	4602      	mov	r2, r0
 8001882:	2300      	movs	r3, #0
 8001884:	2142      	movs	r1, #66	; 0x42
 8001886:	4620      	mov	r0, r4
 8001888:	f7fe fcda 	bl	8000240 <d_make_comp>
 800188c:	4605      	mov	r5, r0
 800188e:	9001      	str	r0, [sp, #4]
 8001890:	b138      	cbz	r0, 80018a2 <d_type+0x162>
 8001892:	68e3      	ldr	r3, [r4, #12]
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	b122      	cbz	r2, 80018a2 <d_type+0x162>
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	60e2      	str	r2, [r4, #12]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b45      	cmp	r3, #69	; 0x45
 80018a0:	d07b      	beq.n	800199a <d_type+0x25a>
 80018a2:	2500      	movs	r5, #0
 80018a4:	4628      	mov	r0, r5
 80018a6:	b003      	add	sp, #12
 80018a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ac:	1c53      	adds	r3, r2, #1
 80018ae:	60c3      	str	r3, [r0, #12]
 80018b0:	7853      	ldrb	r3, [r2, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f5      	beq.n	80018a2 <d_type+0x162>
 80018b6:	1c93      	adds	r3, r2, #2
 80018b8:	60c3      	str	r3, [r0, #12]
 80018ba:	7853      	ldrb	r3, [r2, #1]
 80018bc:	3b46      	subs	r3, #70	; 0x46
 80018be:	2b30      	cmp	r3, #48	; 0x30
 80018c0:	d8ef      	bhi.n	80018a2 <d_type+0x162>
 80018c2:	a101      	add	r1, pc, #4	; (adr r1, 80018c8 <d_type+0x188>)
 80018c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018c8:	08001d85 	.word	0x08001d85
 80018cc:	080018a3 	.word	0x080018a3
 80018d0:	080018a3 	.word	0x080018a3
 80018d4:	080018a3 	.word	0x080018a3
 80018d8:	080018a3 	.word	0x080018a3
 80018dc:	080018a3 	.word	0x080018a3
 80018e0:	080018a3 	.word	0x080018a3
 80018e4:	080018a3 	.word	0x080018a3
 80018e8:	080018a3 	.word	0x080018a3
 80018ec:	080018a3 	.word	0x080018a3
 80018f0:	080018a3 	.word	0x080018a3
 80018f4:	080018a3 	.word	0x080018a3
 80018f8:	080018a3 	.word	0x080018a3
 80018fc:	080018a3 	.word	0x080018a3
 8001900:	08001875 	.word	0x08001875
 8001904:	080018a3 	.word	0x080018a3
 8001908:	080018a3 	.word	0x080018a3
 800190c:	080018a3 	.word	0x080018a3
 8001910:	080018a3 	.word	0x080018a3
 8001914:	080018a3 	.word	0x080018a3
 8001918:	080018a3 	.word	0x080018a3
 800191c:	080018a3 	.word	0x080018a3
 8001920:	080018a3 	.word	0x080018a3
 8001924:	080018a3 	.word	0x080018a3
 8001928:	080018a3 	.word	0x080018a3
 800192c:	080018a3 	.word	0x080018a3
 8001930:	080018a3 	.word	0x080018a3
 8001934:	08001d61 	.word	0x08001d61
 8001938:	080018a3 	.word	0x080018a3
 800193c:	08001d3d 	.word	0x08001d3d
 8001940:	08001d15 	.word	0x08001d15
 8001944:	08001ced 	.word	0x08001ced
 8001948:	08001cc5 	.word	0x08001cc5
 800194c:	080018a3 	.word	0x080018a3
 8001950:	08001c9d 	.word	0x08001c9d
 8001954:	08001e39 	.word	0x08001e39
 8001958:	080018a3 	.word	0x080018a3
 800195c:	080018a3 	.word	0x080018a3
 8001960:	080018a3 	.word	0x080018a3
 8001964:	080018a3 	.word	0x080018a3
 8001968:	08001ded 	.word	0x08001ded
 800196c:	080018a3 	.word	0x080018a3
 8001970:	08001c87 	.word	0x08001c87
 8001974:	080018a3 	.word	0x080018a3
 8001978:	080018a3 	.word	0x080018a3
 800197c:	08001c5f 	.word	0x08001c5f
 8001980:	08001875 	.word	0x08001875
 8001984:	080018a3 	.word	0x080018a3
 8001988:	08001c25 	.word	0x08001c25
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fd2b 	bl	80013e8 <d_name>
 8001992:	4605      	mov	r5, r0
 8001994:	9001      	str	r0, [sp, #4]
 8001996:	2d00      	cmp	r5, #0
 8001998:	d083      	beq.n	80018a2 <d_type+0x162>
 800199a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800199e:	4293      	cmp	r3, r2
 80019a0:	f6bf af7f 	bge.w	80018a2 <d_type+0x162>
 80019a4:	69e1      	ldr	r1, [r4, #28]
 80019a6:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 80019aa:	9d01      	ldr	r5, [sp, #4]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	4628      	mov	r0, r5
 80019b0:	6222      	str	r2, [r4, #32]
 80019b2:	b003      	add	sp, #12
 80019b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019b8:	3201      	adds	r2, #1
 80019ba:	60e2      	str	r2, [r4, #12]
 80019bc:	4620      	mov	r0, r4
 80019be:	f7fe fdb9 	bl	8000534 <d_source_name>
 80019c2:	2300      	movs	r3, #0
 80019c4:	4602      	mov	r2, r0
 80019c6:	2128      	movs	r1, #40	; 0x28
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7fe fc39 	bl	8000240 <d_make_comp>
 80019ce:	4605      	mov	r5, r0
 80019d0:	9001      	str	r0, [sp, #4]
 80019d2:	e7e0      	b.n	8001996 <d_type+0x256>
 80019d4:	4620      	mov	r0, r4
 80019d6:	f000 fc39 	bl	800224c <d_function_type>
 80019da:	4605      	mov	r5, r0
 80019dc:	9001      	str	r0, [sp, #4]
 80019de:	e7da      	b.n	8001996 <d_type+0x256>
 80019e0:	3201      	adds	r2, #1
 80019e2:	60e2      	str	r2, [r4, #12]
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff feab 	bl	8001740 <d_type>
 80019ea:	2300      	movs	r3, #0
 80019ec:	4602      	mov	r2, r0
 80019ee:	2125      	movs	r1, #37	; 0x25
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7fe fc25 	bl	8000240 <d_make_comp>
 80019f6:	4605      	mov	r5, r0
 80019f8:	9001      	str	r0, [sp, #4]
 80019fa:	e7cc      	b.n	8001996 <d_type+0x256>
 80019fc:	3201      	adds	r2, #1
 80019fe:	60e2      	str	r2, [r4, #12]
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff fe9d 	bl	8001740 <d_type>
 8001a06:	2300      	movs	r3, #0
 8001a08:	4602      	mov	r2, r0
 8001a0a:	2126      	movs	r1, #38	; 0x26
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7fe fc17 	bl	8000240 <d_make_comp>
 8001a12:	4605      	mov	r5, r0
 8001a14:	9001      	str	r0, [sp, #4]
 8001a16:	e7be      	b.n	8001996 <d_type+0x256>
 8001a18:	3201      	adds	r2, #1
 8001a1a:	60e2      	str	r2, [r4, #12]
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff fe8f 	bl	8001740 <d_type>
 8001a22:	2300      	movs	r3, #0
 8001a24:	4602      	mov	r2, r0
 8001a26:	2124      	movs	r1, #36	; 0x24
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7fe fc09 	bl	8000240 <d_make_comp>
 8001a2e:	4605      	mov	r5, r0
 8001a30:	9001      	str	r0, [sp, #4]
 8001a32:	e7b0      	b.n	8001996 <d_type+0x256>
 8001a34:	3201      	adds	r2, #1
 8001a36:	60e2      	str	r2, [r4, #12]
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7ff fe81 	bl	8001740 <d_type>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	4602      	mov	r2, r0
 8001a42:	2122      	movs	r1, #34	; 0x22
 8001a44:	4620      	mov	r0, r4
 8001a46:	f7fe fbfb 	bl	8000240 <d_make_comp>
 8001a4a:	4605      	mov	r5, r0
 8001a4c:	9001      	str	r0, [sp, #4]
 8001a4e:	e7a2      	b.n	8001996 <d_type+0x256>
 8001a50:	3201      	adds	r2, #1
 8001a52:	60e2      	str	r2, [r4, #12]
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7ff fe73 	bl	8001740 <d_type>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	2123      	movs	r1, #35	; 0x23
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7fe fbed 	bl	8000240 <d_make_comp>
 8001a66:	4605      	mov	r5, r0
 8001a68:	9001      	str	r0, [sp, #4]
 8001a6a:	e794      	b.n	8001996 <d_type+0x256>
 8001a6c:	7853      	ldrb	r3, [r2, #1]
 8001a6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a72:	2a09      	cmp	r2, #9
 8001a74:	d905      	bls.n	8001a82 <d_type+0x342>
 8001a76:	2b5f      	cmp	r3, #95	; 0x5f
 8001a78:	d003      	beq.n	8001a82 <d_type+0x342>
 8001a7a:	3b41      	subs	r3, #65	; 0x41
 8001a7c:	2b19      	cmp	r3, #25
 8001a7e:	f200 820f 	bhi.w	8001ea0 <d_type+0x760>
 8001a82:	2100      	movs	r1, #0
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7fe fdcb 	bl	8000620 <d_substitution>
 8001a8a:	68e3      	ldr	r3, [r4, #12]
 8001a8c:	9001      	str	r0, [sp, #4]
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	2a49      	cmp	r2, #73	; 0x49
 8001a92:	4605      	mov	r5, r0
 8001a94:	f47f aedf 	bne.w	8001856 <d_type+0x116>
 8001a98:	3301      	adds	r3, #1
 8001a9a:	60e3      	str	r3, [r4, #12]
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff fc37 	bl	8001310 <d_template_args_1>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	462a      	mov	r2, r5
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7fe fbc9 	bl	8000240 <d_make_comp>
 8001aae:	4605      	mov	r5, r0
 8001ab0:	9001      	str	r0, [sp, #4]
 8001ab2:	e770      	b.n	8001996 <d_type+0x256>
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7fe fd1b 	bl	80004f0 <d_template_param>
 8001aba:	68e6      	ldr	r6, [r4, #12]
 8001abc:	9001      	str	r0, [sp, #4]
 8001abe:	7833      	ldrb	r3, [r6, #0]
 8001ac0:	2b49      	cmp	r3, #73	; 0x49
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	f47f af67 	bne.w	8001996 <d_type+0x256>
 8001ac8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 81f5 	bne.w	8001eba <d_type+0x77a>
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	f43f aee6 	beq.w	80018a2 <d_type+0x162>
 8001ad6:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001ada:	428a      	cmp	r2, r1
 8001adc:	f6bf aee1 	bge.w	80018a2 <d_type+0x162>
 8001ae0:	69e1      	ldr	r1, [r4, #28]
 8001ae2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001ae6:	3201      	adds	r2, #1
 8001ae8:	6222      	str	r2, [r4, #32]
 8001aea:	7831      	ldrb	r1, [r6, #0]
 8001aec:	9d01      	ldr	r5, [sp, #4]
 8001aee:	3949      	subs	r1, #73	; 0x49
 8001af0:	2901      	cmp	r1, #1
 8001af2:	d8d7      	bhi.n	8001aa4 <d_type+0x364>
 8001af4:	3601      	adds	r6, #1
 8001af6:	60e6      	str	r6, [r4, #12]
 8001af8:	4620      	mov	r0, r4
 8001afa:	f7ff fc09 	bl	8001310 <d_template_args_1>
 8001afe:	4603      	mov	r3, r0
 8001b00:	e7d0      	b.n	8001aa4 <d_type+0x364>
 8001b02:	3201      	adds	r2, #1
 8001b04:	60e2      	str	r2, [r4, #12]
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7fe fd14 	bl	8000534 <d_source_name>
 8001b0c:	68e3      	ldr	r3, [r4, #12]
 8001b0e:	9001      	str	r0, [sp, #4]
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	2a49      	cmp	r2, #73	; 0x49
 8001b14:	4605      	mov	r5, r0
 8001b16:	f000 81a8 	beq.w	8001e6a <d_type+0x72a>
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff fe10 	bl	8001740 <d_type>
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	4602      	mov	r2, r0
 8001b24:	2121      	movs	r1, #33	; 0x21
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7fe fb8a 	bl	8000240 <d_make_comp>
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	9001      	str	r0, [sp, #4]
 8001b30:	e731      	b.n	8001996 <d_type+0x256>
 8001b32:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8001b36:	3b61      	subs	r3, #97	; 0x61
 8001b38:	4db6      	ldr	r5, [pc, #728]	; (8001e14 <d_type+0x6d4>)
 8001b3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b3e:	4281      	cmp	r1, r0
 8001b40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001b44:	f280 818b 	bge.w	8001e5e <d_type+0x71e>
 8001b48:	6858      	ldr	r0, [r3, #4]
 8001b4a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001b4c:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001b50:	010f      	lsls	r7, r1, #4
 8001b52:	eb0c 0507 	add.w	r5, ip, r7
 8001b56:	4406      	add	r6, r0
 8001b58:	4630      	mov	r0, r6
 8001b5a:	3201      	adds	r2, #1
 8001b5c:	3101      	adds	r1, #1
 8001b5e:	f04f 0e00 	mov.w	lr, #0
 8001b62:	2627      	movs	r6, #39	; 0x27
 8001b64:	f8c5 e004 	str.w	lr, [r5, #4]
 8001b68:	6161      	str	r1, [r4, #20]
 8001b6a:	f80c 6007 	strb.w	r6, [ip, r7]
 8001b6e:	60ab      	str	r3, [r5, #8]
 8001b70:	60e2      	str	r2, [r4, #12]
 8001b72:	6320      	str	r0, [r4, #48]	; 0x30
 8001b74:	e66f      	b.n	8001856 <d_type+0x116>
 8001b76:	3201      	adds	r2, #1
 8001b78:	60e2      	str	r2, [r4, #12]
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff fde0 	bl	8001740 <d_type>
 8001b80:	4605      	mov	r5, r0
 8001b82:	2800      	cmp	r0, #0
 8001b84:	f43f ae8d 	beq.w	80018a2 <d_type+0x162>
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7ff fdd9 	bl	8001740 <d_type>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2800      	cmp	r0, #0
 8001b92:	f43f ae86 	beq.w	80018a2 <d_type+0x162>
 8001b96:	462a      	mov	r2, r5
 8001b98:	212b      	movs	r1, #43	; 0x2b
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7fe fb50 	bl	8000240 <d_make_comp>
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	9001      	str	r0, [sp, #4]
 8001ba4:	e6f7      	b.n	8001996 <d_type+0x256>
 8001ba6:	1c55      	adds	r5, r2, #1
 8001ba8:	60e5      	str	r5, [r4, #12]
 8001baa:	7853      	ldrb	r3, [r2, #1]
 8001bac:	2b5f      	cmp	r3, #95	; 0x5f
 8001bae:	f000 815a 	beq.w	8001e66 <d_type+0x726>
 8001bb2:	3b30      	subs	r3, #48	; 0x30
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	f200 8165 	bhi.w	8001e84 <d_type+0x744>
 8001bba:	4628      	mov	r0, r5
 8001bbc:	e000      	b.n	8001bc0 <d_type+0x480>
 8001bbe:	4608      	mov	r0, r1
 8001bc0:	1c41      	adds	r1, r0, #1
 8001bc2:	60e1      	str	r1, [r4, #12]
 8001bc4:	7843      	ldrb	r3, [r0, #1]
 8001bc6:	3b30      	subs	r3, #48	; 0x30
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	d9f8      	bls.n	8001bbe <d_type+0x47e>
 8001bcc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	eba1 0705 	sub.w	r7, r1, r5
 8001bd6:	f6bf ae64 	bge.w	80018a2 <d_type+0x162>
 8001bda:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001bde:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8001be2:	eb0e 060c 	add.w	r6, lr, ip
 8001be6:	3301      	adds	r3, #1
 8001be8:	2200      	movs	r2, #0
 8001bea:	6072      	str	r2, [r6, #4]
 8001bec:	6163      	str	r3, [r4, #20]
 8001bee:	2f00      	cmp	r7, #0
 8001bf0:	f43f ae57 	beq.w	80018a2 <d_type+0x162>
 8001bf4:	6072      	str	r2, [r6, #4]
 8001bf6:	f80e 200c 	strb.w	r2, [lr, ip]
 8001bfa:	e9c6 5702 	strd	r5, r7, [r6, #8]
 8001bfe:	7843      	ldrb	r3, [r0, #1]
 8001c00:	460d      	mov	r5, r1
 8001c02:	2b5f      	cmp	r3, #95	; 0x5f
 8001c04:	f47f ae4d 	bne.w	80018a2 <d_type+0x162>
 8001c08:	3501      	adds	r5, #1
 8001c0a:	60e5      	str	r5, [r4, #12]
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff fd97 	bl	8001740 <d_type>
 8001c12:	4632      	mov	r2, r6
 8001c14:	4603      	mov	r3, r0
 8001c16:	212a      	movs	r1, #42	; 0x2a
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7fe fb11 	bl	8000240 <d_make_comp>
 8001c1e:	4605      	mov	r5, r0
 8001c20:	9001      	str	r0, [sp, #4]
 8001c22:	e6b8      	b.n	8001996 <d_type+0x256>
 8001c24:	7893      	ldrb	r3, [r2, #2]
 8001c26:	2b5f      	cmp	r3, #95	; 0x5f
 8001c28:	f000 8178 	beq.w	8001f1c <d_type+0x7dc>
 8001c2c:	f7fe fc2e 	bl	800048c <d_number_component>
 8001c30:	4605      	mov	r5, r0
 8001c32:	2d00      	cmp	r5, #0
 8001c34:	f43f ae35 	beq.w	80018a2 <d_type+0x162>
 8001c38:	68e3      	ldr	r3, [r4, #12]
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	2a5f      	cmp	r2, #95	; 0x5f
 8001c3e:	f47f ae30 	bne.w	80018a2 <d_type+0x162>
 8001c42:	3301      	adds	r3, #1
 8001c44:	60e3      	str	r3, [r4, #12]
 8001c46:	4620      	mov	r0, r4
 8001c48:	f7ff fd7a 	bl	8001740 <d_type>
 8001c4c:	462a      	mov	r2, r5
 8001c4e:	4603      	mov	r3, r0
 8001c50:	212d      	movs	r1, #45	; 0x2d
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7fe faf4 	bl	8000240 <d_make_comp>
 8001c58:	4605      	mov	r5, r0
 8001c5a:	9001      	str	r0, [sp, #4]
 8001c5c:	e69b      	b.n	8001996 <d_type+0x256>
 8001c5e:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	f280 80fb 	bge.w	8001e5e <d_type+0x71e>
 8001c68:	6900      	ldr	r0, [r0, #16]
 8001c6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c6c:	0119      	lsls	r1, r3, #4
 8001c6e:	1845      	adds	r5, r0, r1
 8001c70:	3301      	adds	r3, #1
 8001c72:	2600      	movs	r6, #0
 8001c74:	606e      	str	r6, [r5, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	6163      	str	r3, [r4, #20]
 8001c7a:	2627      	movs	r6, #39	; 0x27
 8001c7c:	4b66      	ldr	r3, [pc, #408]	; (8001e18 <d_type+0x6d8>)
 8001c7e:	5446      	strb	r6, [r0, r1]
 8001c80:	60ab      	str	r3, [r5, #8]
 8001c82:	6322      	str	r2, [r4, #48]	; 0x30
 8001c84:	e5e7      	b.n	8001856 <d_type+0x116>
 8001c86:	f7ff fd5b 	bl	8001740 <d_type>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	214a      	movs	r1, #74	; 0x4a
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7fe fad5 	bl	8000240 <d_make_comp>
 8001c96:	4605      	mov	r5, r0
 8001c98:	9001      	str	r0, [sp, #4]
 8001c9a:	e67c      	b.n	8001996 <d_type+0x256>
 8001c9c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	f280 80dc 	bge.w	8001e5e <d_type+0x71e>
 8001ca6:	6900      	ldr	r0, [r0, #16]
 8001ca8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001caa:	0119      	lsls	r1, r3, #4
 8001cac:	1845      	adds	r5, r0, r1
 8001cae:	3301      	adds	r3, #1
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	606e      	str	r6, [r5, #4]
 8001cb4:	3204      	adds	r2, #4
 8001cb6:	6163      	str	r3, [r4, #20]
 8001cb8:	2627      	movs	r6, #39	; 0x27
 8001cba:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <d_type+0x6dc>)
 8001cbc:	5446      	strb	r6, [r0, r1]
 8001cbe:	60ab      	str	r3, [r5, #8]
 8001cc0:	6322      	str	r2, [r4, #48]	; 0x30
 8001cc2:	e5c8      	b.n	8001856 <d_type+0x116>
 8001cc4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	f280 80c8 	bge.w	8001e5e <d_type+0x71e>
 8001cce:	6900      	ldr	r0, [r0, #16]
 8001cd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cd2:	0119      	lsls	r1, r3, #4
 8001cd4:	1845      	adds	r5, r0, r1
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	2600      	movs	r6, #0
 8001cda:	606e      	str	r6, [r5, #4]
 8001cdc:	3209      	adds	r2, #9
 8001cde:	6163      	str	r3, [r4, #20]
 8001ce0:	2627      	movs	r6, #39	; 0x27
 8001ce2:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <d_type+0x6e0>)
 8001ce4:	5446      	strb	r6, [r0, r1]
 8001ce6:	60ab      	str	r3, [r5, #8]
 8001ce8:	6322      	str	r2, [r4, #48]	; 0x30
 8001cea:	e5b4      	b.n	8001856 <d_type+0x116>
 8001cec:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	f280 80b4 	bge.w	8001e5e <d_type+0x71e>
 8001cf6:	6900      	ldr	r0, [r0, #16]
 8001cf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cfa:	0119      	lsls	r1, r3, #4
 8001cfc:	1845      	adds	r5, r0, r1
 8001cfe:	3301      	adds	r3, #1
 8001d00:	2600      	movs	r6, #0
 8001d02:	606e      	str	r6, [r5, #4]
 8001d04:	320a      	adds	r2, #10
 8001d06:	6163      	str	r3, [r4, #20]
 8001d08:	2627      	movs	r6, #39	; 0x27
 8001d0a:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <d_type+0x6e4>)
 8001d0c:	5446      	strb	r6, [r0, r1]
 8001d0e:	60ab      	str	r3, [r5, #8]
 8001d10:	6322      	str	r2, [r4, #48]	; 0x30
 8001d12:	e5a0      	b.n	8001856 <d_type+0x116>
 8001d14:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	f280 80a0 	bge.w	8001e5e <d_type+0x71e>
 8001d1e:	6900      	ldr	r0, [r0, #16]
 8001d20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d22:	0119      	lsls	r1, r3, #4
 8001d24:	1845      	adds	r5, r0, r1
 8001d26:	3301      	adds	r3, #1
 8001d28:	2600      	movs	r6, #0
 8001d2a:	606e      	str	r6, [r5, #4]
 8001d2c:	3209      	adds	r2, #9
 8001d2e:	6163      	str	r3, [r4, #20]
 8001d30:	2627      	movs	r6, #39	; 0x27
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <d_type+0x6e8>)
 8001d34:	5446      	strb	r6, [r0, r1]
 8001d36:	60ab      	str	r3, [r5, #8]
 8001d38:	6322      	str	r2, [r4, #48]	; 0x30
 8001d3a:	e58c      	b.n	8001856 <d_type+0x116>
 8001d3c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f6bf adae 	bge.w	80018a2 <d_type+0x162>
 8001d46:	6901      	ldr	r1, [r0, #16]
 8001d48:	4e38      	ldr	r6, [pc, #224]	; (8001e2c <d_type+0x6ec>)
 8001d4a:	011a      	lsls	r2, r3, #4
 8001d4c:	188d      	adds	r5, r1, r2
 8001d4e:	3301      	adds	r3, #1
 8001d50:	6143      	str	r3, [r0, #20]
 8001d52:	2300      	movs	r3, #0
 8001d54:	200e      	movs	r0, #14
 8001d56:	606b      	str	r3, [r5, #4]
 8001d58:	548b      	strb	r3, [r1, r2]
 8001d5a:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d5e:	e57a      	b.n	8001856 <d_type+0x116>
 8001d60:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	f6bf ad9c 	bge.w	80018a2 <d_type+0x162>
 8001d6a:	6901      	ldr	r1, [r0, #16]
 8001d6c:	4e30      	ldr	r6, [pc, #192]	; (8001e30 <d_type+0x6f0>)
 8001d6e:	011a      	lsls	r2, r3, #4
 8001d70:	188d      	adds	r5, r1, r2
 8001d72:	3301      	adds	r3, #1
 8001d74:	6143      	str	r3, [r0, #20]
 8001d76:	2300      	movs	r3, #0
 8001d78:	2004      	movs	r0, #4
 8001d7a:	606b      	str	r3, [r5, #4]
 8001d7c:	548b      	strb	r3, [r1, r2]
 8001d7e:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d82:	e568      	b.n	8001856 <d_type+0x116>
 8001d84:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	f280 80af 	bge.w	8001eec <d_type+0x7ac>
 8001d8e:	6905      	ldr	r5, [r0, #16]
 8001d90:	0118      	lsls	r0, r3, #4
 8001d92:	1829      	adds	r1, r5, r0
 8001d94:	3301      	adds	r3, #1
 8001d96:	2700      	movs	r7, #0
 8001d98:	262c      	movs	r6, #44	; 0x2c
 8001d9a:	604f      	str	r7, [r1, #4]
 8001d9c:	9101      	str	r1, [sp, #4]
 8001d9e:	6163      	str	r3, [r4, #20]
 8001da0:	542e      	strb	r6, [r5, r0]
 8001da2:	7893      	ldrb	r3, [r2, #2]
 8001da4:	3b30      	subs	r3, #48	; 0x30
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	bf94      	ite	ls
 8001dac:	2301      	movls	r3, #1
 8001dae:	463b      	movhi	r3, r7
 8001db0:	818b      	strh	r3, [r1, #12]
 8001db2:	f240 80ae 	bls.w	8001f12 <d_type+0x7d2>
 8001db6:	4620      	mov	r0, r4
 8001db8:	9d01      	ldr	r5, [sp, #4]
 8001dba:	f7ff fcc1 	bl	8001740 <d_type>
 8001dbe:	9b01      	ldr	r3, [sp, #4]
 8001dc0:	60a8      	str	r0, [r5, #8]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f43f ad6c 	beq.w	80018a2 <d_type+0x162>
 8001dca:	f104 000c 	add.w	r0, r4, #12
 8001dce:	f7fe fb31 	bl	8000434 <d_number.isra.1>
 8001dd2:	68e2      	ldr	r2, [r4, #12]
 8001dd4:	7813      	ldrb	r3, [r2, #0]
 8001dd6:	b113      	cbz	r3, 8001dde <d_type+0x69e>
 8001dd8:	1c53      	adds	r3, r2, #1
 8001dda:	60e3      	str	r3, [r4, #12]
 8001ddc:	7813      	ldrb	r3, [r2, #0]
 8001dde:	9d01      	ldr	r5, [sp, #4]
 8001de0:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8001de4:	4253      	negs	r3, r2
 8001de6:	4153      	adcs	r3, r2
 8001de8:	81eb      	strh	r3, [r5, #14]
 8001dea:	e534      	b.n	8001856 <d_type+0x116>
 8001dec:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001df0:	4293      	cmp	r3, r2
 8001df2:	da34      	bge.n	8001e5e <d_type+0x71e>
 8001df4:	6900      	ldr	r0, [r0, #16]
 8001df6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001df8:	0119      	lsls	r1, r3, #4
 8001dfa:	1845      	adds	r5, r0, r1
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	2600      	movs	r6, #0
 8001e00:	606e      	str	r6, [r5, #4]
 8001e02:	3211      	adds	r2, #17
 8001e04:	6163      	str	r3, [r4, #20]
 8001e06:	2627      	movs	r6, #39	; 0x27
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <d_type+0x6f4>)
 8001e0a:	5446      	strb	r6, [r0, r1]
 8001e0c:	60ab      	str	r3, [r5, #8]
 8001e0e:	6322      	str	r2, [r4, #48]	; 0x30
 8001e10:	e521      	b.n	8001856 <d_type+0x116>
 8001e12:	bf00      	nop
 8001e14:	0801118c 	.word	0x0801118c
 8001e18:	080113e4 	.word	0x080113e4
 8001e1c:	080113d0 	.word	0x080113d0
 8001e20:	08011394 	.word	0x08011394
 8001e24:	080113bc 	.word	0x080113bc
 8001e28:	080113a8 	.word	0x080113a8
 8001e2c:	08011b4c 	.word	0x08011b4c
 8001e30:	08011b44 	.word	0x08011b44
 8001e34:	0801140c 	.word	0x0801140c
 8001e38:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	da0e      	bge.n	8001e5e <d_type+0x71e>
 8001e40:	6900      	ldr	r0, [r0, #16]
 8001e42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e44:	0119      	lsls	r1, r3, #4
 8001e46:	1845      	adds	r5, r0, r1
 8001e48:	3301      	adds	r3, #1
 8001e4a:	2600      	movs	r6, #0
 8001e4c:	606e      	str	r6, [r5, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	6163      	str	r3, [r4, #20]
 8001e52:	2627      	movs	r6, #39	; 0x27
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <d_type+0x7f0>)
 8001e56:	5446      	strb	r6, [r0, r1]
 8001e58:	60ab      	str	r3, [r5, #8]
 8001e5a:	6322      	str	r2, [r4, #48]	; 0x30
 8001e5c:	e4fb      	b.n	8001856 <d_type+0x116>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	deff      	udf	#255	; 0xff
 8001e66:	2600      	movs	r6, #0
 8001e68:	e6ce      	b.n	8001c08 <d_type+0x4c8>
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60e3      	str	r3, [r4, #12]
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f7ff fa4e 	bl	8001310 <d_template_args_1>
 8001e74:	462a      	mov	r2, r5
 8001e76:	4603      	mov	r3, r0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7fe f9e0 	bl	8000240 <d_make_comp>
 8001e80:	9001      	str	r0, [sp, #4]
 8001e82:	e64a      	b.n	8001b1a <d_type+0x3da>
 8001e84:	2301      	movs	r3, #1
 8001e86:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e88:	6363      	str	r3, [r4, #52]	; 0x34
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff f82e 	bl	8000eec <d_expression_1>
 8001e90:	6365      	str	r5, [r4, #52]	; 0x34
 8001e92:	4606      	mov	r6, r0
 8001e94:	2800      	cmp	r0, #0
 8001e96:	f43f ad04 	beq.w	80018a2 <d_type+0x162>
 8001e9a:	68e5      	ldr	r5, [r4, #12]
 8001e9c:	782b      	ldrb	r3, [r5, #0]
 8001e9e:	e6b0      	b.n	8001c02 <d_type+0x4c2>
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff faa1 	bl	80013e8 <d_name>
 8001ea6:	4605      	mov	r5, r0
 8001ea8:	9001      	str	r0, [sp, #4]
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	f43f acf9 	beq.w	80018a2 <d_type+0x162>
 8001eb0:	7803      	ldrb	r3, [r0, #0]
 8001eb2:	2b18      	cmp	r3, #24
 8001eb4:	f47f ad71 	bne.w	800199a <d_type+0x25a>
 8001eb8:	e4cd      	b.n	8001856 <d_type+0x116>
 8001eba:	1c73      	adds	r3, r6, #1
 8001ebc:	60e3      	str	r3, [r4, #12]
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001ec4:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001ec8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001eca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001ecc:	f7ff fa20 	bl	8001310 <d_template_args_1>
 8001ed0:	68e2      	ldr	r2, [r4, #12]
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	2a49      	cmp	r2, #73	; 0x49
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	d00b      	beq.n	8001ef2 <d_type+0x7b2>
 8001eda:	6325      	str	r5, [r4, #48]	; 0x30
 8001edc:	60e6      	str	r6, [r4, #12]
 8001ede:	f8c4 9014 	str.w	r9, [r4, #20]
 8001ee2:	f8c4 8020 	str.w	r8, [r4, #32]
 8001ee6:	62a7      	str	r7, [r4, #40]	; 0x28
 8001ee8:	9d01      	ldr	r5, [sp, #4]
 8001eea:	e554      	b.n	8001996 <d_type+0x256>
 8001eec:	2300      	movs	r3, #0
 8001eee:	701b      	strb	r3, [r3, #0]
 8001ef0:	deff      	udf	#255	; 0xff
 8001ef2:	9901      	ldr	r1, [sp, #4]
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	f43f acd4 	beq.w	80018a2 <d_type+0x162>
 8001efa:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001efe:	4282      	cmp	r2, r0
 8001f00:	f6bf accf 	bge.w	80018a2 <d_type+0x162>
 8001f04:	69e0      	ldr	r0, [r4, #28]
 8001f06:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8001f0a:	3201      	adds	r2, #1
 8001f0c:	6222      	str	r2, [r4, #32]
 8001f0e:	9a01      	ldr	r2, [sp, #4]
 8001f10:	e5c9      	b.n	8001aa6 <d_type+0x366>
 8001f12:	f104 000c 	add.w	r0, r4, #12
 8001f16:	f7fe fa8d 	bl	8000434 <d_number.isra.1>
 8001f1a:	e74c      	b.n	8001db6 <d_type+0x676>
 8001f1c:	3203      	adds	r2, #3
 8001f1e:	2301      	movs	r3, #1
 8001f20:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001f22:	60c2      	str	r2, [r0, #12]
 8001f24:	6343      	str	r3, [r0, #52]	; 0x34
 8001f26:	f7fe ffe1 	bl	8000eec <d_expression_1>
 8001f2a:	6366      	str	r6, [r4, #52]	; 0x34
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	e680      	b.n	8001c32 <d_type+0x4f2>
 8001f30:	080113f8 	.word	0x080113f8

08001f34 <d_operator_name>:
 8001f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f36:	68c3      	ldr	r3, [r0, #12]
 8001f38:	781e      	ldrb	r6, [r3, #0]
 8001f3a:	4686      	mov	lr, r0
 8001f3c:	b336      	cbz	r6, 8001f8c <d_operator_name+0x58>
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60c2      	str	r2, [r0, #12]
 8001f42:	785a      	ldrb	r2, [r3, #1]
 8001f44:	781e      	ldrb	r6, [r3, #0]
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d04a      	beq.n	8001fe0 <d_operator_name+0xac>
 8001f4a:	1c9a      	adds	r2, r3, #2
 8001f4c:	60c2      	str	r2, [r0, #12]
 8001f4e:	2e76      	cmp	r6, #118	; 0x76
 8001f50:	4604      	mov	r4, r0
 8001f52:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001f56:	d145      	bne.n	8001fe4 <d_operator_name+0xb0>
 8001f58:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
 8001f5c:	b2eb      	uxtb	r3, r5
 8001f5e:	2b09      	cmp	r3, #9
 8001f60:	d815      	bhi.n	8001f8e <d_operator_name+0x5a>
 8001f62:	f7fe fae7 	bl	8000534 <d_source_name>
 8001f66:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001f6a:	428b      	cmp	r3, r1
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	da21      	bge.n	8001fb4 <d_operator_name+0x80>
 8001f70:	6926      	ldr	r6, [r4, #16]
 8001f72:	0119      	lsls	r1, r3, #4
 8001f74:	1870      	adds	r0, r6, r1
 8001f76:	3301      	adds	r3, #1
 8001f78:	2700      	movs	r7, #0
 8001f7a:	6047      	str	r7, [r0, #4]
 8001f7c:	6163      	str	r3, [r4, #20]
 8001f7e:	b1ca      	cbz	r2, 8001fb4 <d_operator_name+0x80>
 8001f80:	2332      	movs	r3, #50	; 0x32
 8001f82:	6047      	str	r7, [r0, #4]
 8001f84:	5473      	strb	r3, [r6, r1]
 8001f86:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8001f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8c:	46b4      	mov	ip, r6
 8001f8e:	4c23      	ldr	r4, [pc, #140]	; (800201c <d_operator_name+0xe8>)
 8001f90:	2043      	movs	r0, #67	; 0x43
 8001f92:	2200      	movs	r2, #0
 8001f94:	1a83      	subs	r3, r0, r2
 8001f96:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f9a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f9e:	0119      	lsls	r1, r3, #4
 8001fa0:	1867      	adds	r7, r4, r1
 8001fa2:	5861      	ldr	r1, [r4, r1]
 8001fa4:	780d      	ldrb	r5, [r1, #0]
 8001fa6:	42b5      	cmp	r5, r6
 8001fa8:	d006      	beq.n	8001fb8 <d_operator_name+0x84>
 8001faa:	bf94      	ite	ls
 8001fac:	1c5a      	addls	r2, r3, #1
 8001fae:	4618      	movhi	r0, r3
 8001fb0:	4282      	cmp	r2, r0
 8001fb2:	d1ef      	bne.n	8001f94 <d_operator_name+0x60>
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb8:	7849      	ldrb	r1, [r1, #1]
 8001fba:	4561      	cmp	r1, ip
 8001fbc:	d1f5      	bne.n	8001faa <d_operator_name+0x76>
 8001fbe:	e9de 3205 	ldrd	r3, r2, [lr, #20]
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	daf6      	bge.n	8001fb4 <d_operator_name+0x80>
 8001fc6:	f8de 1010 	ldr.w	r1, [lr, #16]
 8001fca:	011a      	lsls	r2, r3, #4
 8001fcc:	1888      	adds	r0, r1, r2
 8001fce:	3301      	adds	r3, #1
 8001fd0:	2500      	movs	r5, #0
 8001fd2:	2431      	movs	r4, #49	; 0x31
 8001fd4:	6045      	str	r5, [r0, #4]
 8001fd6:	f8ce 3014 	str.w	r3, [lr, #20]
 8001fda:	548c      	strb	r4, [r1, r2]
 8001fdc:	6087      	str	r7, [r0, #8]
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe0:	4694      	mov	ip, r2
 8001fe2:	e7d4      	b.n	8001f8e <d_operator_name+0x5a>
 8001fe4:	2e63      	cmp	r6, #99	; 0x63
 8001fe6:	d1d2      	bne.n	8001f8e <d_operator_name+0x5a>
 8001fe8:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8001fec:	d1cf      	bne.n	8001f8e <d_operator_name+0x5a>
 8001fee:	e9d0 350d 	ldrd	r3, r5, [r0, #52]	; 0x34
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	6383      	str	r3, [r0, #56]	; 0x38
 8001ffa:	f7ff fba1 	bl	8001740 <d_type>
 8001ffe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002000:	4602      	mov	r2, r0
 8002002:	b92b      	cbnz	r3, 8002010 <d_operator_name+0xdc>
 8002004:	2133      	movs	r1, #51	; 0x33
 8002006:	4620      	mov	r0, r4
 8002008:	f7fe f91a 	bl	8000240 <d_make_comp>
 800200c:	63a5      	str	r5, [r4, #56]	; 0x38
 800200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002010:	2300      	movs	r3, #0
 8002012:	2134      	movs	r1, #52	; 0x34
 8002014:	4620      	mov	r0, r4
 8002016:	f7fe f913 	bl	8000240 <d_make_comp>
 800201a:	e7f7      	b.n	800200c <d_operator_name+0xd8>
 800201c:	08011420 	.word	0x08011420

08002020 <d_parmlist>:
 8002020:	b530      	push	{r4, r5, lr}
 8002022:	68c2      	ldr	r2, [r0, #12]
 8002024:	b083      	sub	sp, #12
 8002026:	2300      	movs	r3, #0
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	7813      	ldrb	r3, [r2, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d036      	beq.n	800209e <d_parmlist+0x7e>
 8002030:	2b45      	cmp	r3, #69	; 0x45
 8002032:	d034      	beq.n	800209e <d_parmlist+0x7e>
 8002034:	2b2e      	cmp	r3, #46	; 0x2e
 8002036:	d032      	beq.n	800209e <d_parmlist+0x7e>
 8002038:	4604      	mov	r4, r0
 800203a:	ad01      	add	r5, sp, #4
 800203c:	e015      	b.n	800206a <d_parmlist+0x4a>
 800203e:	2b4f      	cmp	r3, #79	; 0x4f
 8002040:	d016      	beq.n	8002070 <d_parmlist+0x50>
 8002042:	f7ff fb7d 	bl	8001740 <d_type>
 8002046:	2300      	movs	r3, #0
 8002048:	4602      	mov	r2, r0
 800204a:	212e      	movs	r1, #46	; 0x2e
 800204c:	b338      	cbz	r0, 800209e <d_parmlist+0x7e>
 800204e:	4620      	mov	r0, r4
 8002050:	f7fe f8f6 	bl	8000240 <d_make_comp>
 8002054:	6028      	str	r0, [r5, #0]
 8002056:	b310      	cbz	r0, 800209e <d_parmlist+0x7e>
 8002058:	68e2      	ldr	r2, [r4, #12]
 800205a:	7813      	ldrb	r3, [r2, #0]
 800205c:	f100 050c 	add.w	r5, r0, #12
 8002060:	b14b      	cbz	r3, 8002076 <d_parmlist+0x56>
 8002062:	2b45      	cmp	r3, #69	; 0x45
 8002064:	d007      	beq.n	8002076 <d_parmlist+0x56>
 8002066:	2b2e      	cmp	r3, #46	; 0x2e
 8002068:	d005      	beq.n	8002076 <d_parmlist+0x56>
 800206a:	2b52      	cmp	r3, #82	; 0x52
 800206c:	4620      	mov	r0, r4
 800206e:	d1e6      	bne.n	800203e <d_parmlist+0x1e>
 8002070:	7853      	ldrb	r3, [r2, #1]
 8002072:	2b45      	cmp	r3, #69	; 0x45
 8002074:	d1e5      	bne.n	8002042 <d_parmlist+0x22>
 8002076:	9801      	ldr	r0, [sp, #4]
 8002078:	b188      	cbz	r0, 800209e <d_parmlist+0x7e>
 800207a:	68c3      	ldr	r3, [r0, #12]
 800207c:	b10b      	cbz	r3, 8002082 <d_parmlist+0x62>
 800207e:	b003      	add	sp, #12
 8002080:	bd30      	pop	{r4, r5, pc}
 8002082:	6882      	ldr	r2, [r0, #8]
 8002084:	7811      	ldrb	r1, [r2, #0]
 8002086:	2927      	cmp	r1, #39	; 0x27
 8002088:	d1f9      	bne.n	800207e <d_parmlist+0x5e>
 800208a:	6892      	ldr	r2, [r2, #8]
 800208c:	7c11      	ldrb	r1, [r2, #16]
 800208e:	2909      	cmp	r1, #9
 8002090:	d1f5      	bne.n	800207e <d_parmlist+0x5e>
 8002092:	6851      	ldr	r1, [r2, #4]
 8002094:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002096:	1a52      	subs	r2, r2, r1
 8002098:	6322      	str	r2, [r4, #48]	; 0x30
 800209a:	6083      	str	r3, [r0, #8]
 800209c:	e7ef      	b.n	800207e <d_parmlist+0x5e>
 800209e:	2000      	movs	r0, #0
 80020a0:	b003      	add	sp, #12
 80020a2:	bd30      	pop	{r4, r5, pc}

080020a4 <d_cv_qualifiers>:
 80020a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a8:	4689      	mov	r9, r1
 80020aa:	b083      	sub	sp, #12
 80020ac:	68c1      	ldr	r1, [r0, #12]
 80020ae:	1e13      	subs	r3, r2, #0
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	4604      	mov	r4, r0
 80020b4:	780b      	ldrb	r3, [r1, #0]
 80020b6:	bf15      	itete	ne
 80020b8:	f04f 081e 	movne.w	r8, #30
 80020bc:	f04f 081b 	moveq.w	r8, #27
 80020c0:	271d      	movne	r7, #29
 80020c2:	271a      	moveq	r7, #26
 80020c4:	bf14      	ite	ne
 80020c6:	261c      	movne	r6, #28
 80020c8:	2619      	moveq	r6, #25
 80020ca:	464d      	mov	r5, r9
 80020cc:	f04f 0a01 	mov.w	sl, #1
 80020d0:	e01c      	b.n	800210c <d_cv_qualifiers+0x68>
 80020d2:	2b56      	cmp	r3, #86	; 0x56
 80020d4:	d03f      	beq.n	8002156 <d_cv_qualifiers+0xb2>
 80020d6:	2b4b      	cmp	r3, #75	; 0x4b
 80020d8:	d043      	beq.n	8002162 <d_cv_qualifiers+0xbe>
 80020da:	784b      	ldrb	r3, [r1, #1]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d035      	beq.n	800214c <d_cv_qualifiers+0xa8>
 80020e0:	1c8b      	adds	r3, r1, #2
 80020e2:	60e3      	str	r3, [r4, #12]
 80020e4:	784b      	ldrb	r3, [r1, #1]
 80020e6:	2b78      	cmp	r3, #120	; 0x78
 80020e8:	d041      	beq.n	800216e <d_cv_qualifiers+0xca>
 80020ea:	2b6f      	cmp	r3, #111	; 0x6f
 80020ec:	d145      	bne.n	800217a <d_cv_qualifiers+0xd6>
 80020ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020f0:	3309      	adds	r3, #9
 80020f2:	6323      	str	r3, [r4, #48]	; 0x30
 80020f4:	214e      	movs	r1, #78	; 0x4e
 80020f6:	2300      	movs	r3, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7fe f8a0 	bl	8000240 <d_make_comp>
 8002100:	6028      	str	r0, [r5, #0]
 8002102:	b318      	cbz	r0, 800214c <d_cv_qualifiers+0xa8>
 8002104:	68e1      	ldr	r1, [r4, #12]
 8002106:	780b      	ldrb	r3, [r1, #0]
 8002108:	f100 0508 	add.w	r5, r0, #8
 800210c:	2b72      	cmp	r3, #114	; 0x72
 800210e:	d00d      	beq.n	800212c <d_cv_qualifiers+0x88>
 8002110:	2b56      	cmp	r3, #86	; 0x56
 8002112:	d00b      	beq.n	800212c <d_cv_qualifiers+0x88>
 8002114:	2b4b      	cmp	r3, #75	; 0x4b
 8002116:	d009      	beq.n	800212c <d_cv_qualifiers+0x88>
 8002118:	2b44      	cmp	r3, #68	; 0x44
 800211a:	d146      	bne.n	80021aa <d_cv_qualifiers+0x106>
 800211c:	784a      	ldrb	r2, [r1, #1]
 800211e:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 8002122:	284f      	cmp	r0, #79	; 0x4f
 8002124:	d002      	beq.n	800212c <d_cv_qualifiers+0x88>
 8002126:	3a77      	subs	r2, #119	; 0x77
 8002128:	2a01      	cmp	r2, #1
 800212a:	d83e      	bhi.n	80021aa <d_cv_qualifiers+0x106>
 800212c:	1c4a      	adds	r2, r1, #1
 800212e:	2b72      	cmp	r3, #114	; 0x72
 8002130:	60e2      	str	r2, [r4, #12]
 8002132:	d1ce      	bne.n	80020d2 <d_cv_qualifiers+0x2e>
 8002134:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002136:	3309      	adds	r3, #9
 8002138:	6323      	str	r3, [r4, #48]	; 0x30
 800213a:	4631      	mov	r1, r6
 800213c:	2300      	movs	r3, #0
 800213e:	2200      	movs	r2, #0
 8002140:	4620      	mov	r0, r4
 8002142:	f7fe f87d 	bl	8000240 <d_make_comp>
 8002146:	6028      	str	r0, [r5, #0]
 8002148:	2800      	cmp	r0, #0
 800214a:	d1db      	bne.n	8002104 <d_cv_qualifiers+0x60>
 800214c:	2500      	movs	r5, #0
 800214e:	4628      	mov	r0, r5
 8002150:	b003      	add	sp, #12
 8002152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002156:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002158:	3309      	adds	r3, #9
 800215a:	6323      	str	r3, [r4, #48]	; 0x30
 800215c:	4639      	mov	r1, r7
 800215e:	2300      	movs	r3, #0
 8002160:	e7ca      	b.n	80020f8 <d_cv_qualifiers+0x54>
 8002162:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002164:	3306      	adds	r3, #6
 8002166:	6323      	str	r3, [r4, #48]	; 0x30
 8002168:	4641      	mov	r1, r8
 800216a:	2300      	movs	r3, #0
 800216c:	e7c4      	b.n	80020f8 <d_cv_qualifiers+0x54>
 800216e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002170:	3311      	adds	r3, #17
 8002172:	6323      	str	r3, [r4, #48]	; 0x30
 8002174:	214c      	movs	r1, #76	; 0x4c
 8002176:	2300      	movs	r3, #0
 8002178:	e7be      	b.n	80020f8 <d_cv_qualifiers+0x54>
 800217a:	2b4f      	cmp	r3, #79	; 0x4f
 800217c:	d132      	bne.n	80021e4 <d_cv_qualifiers+0x140>
 800217e:	e9d4 3b0c 	ldrd	r3, fp, [r4, #48]	; 0x30
 8002182:	3309      	adds	r3, #9
 8002184:	6323      	str	r3, [r4, #48]	; 0x30
 8002186:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800218a:	4620      	mov	r0, r4
 800218c:	f7fe feae 	bl	8000eec <d_expression_1>
 8002190:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8002194:	4603      	mov	r3, r0
 8002196:	2800      	cmp	r0, #0
 8002198:	d0d8      	beq.n	800214c <d_cv_qualifiers+0xa8>
 800219a:	68e2      	ldr	r2, [r4, #12]
 800219c:	7811      	ldrb	r1, [r2, #0]
 800219e:	2945      	cmp	r1, #69	; 0x45
 80021a0:	d1d4      	bne.n	800214c <d_cv_qualifiers+0xa8>
 80021a2:	3201      	adds	r2, #1
 80021a4:	60e2      	str	r2, [r4, #12]
 80021a6:	214e      	movs	r1, #78	; 0x4e
 80021a8:	e7a6      	b.n	80020f8 <d_cv_qualifiers+0x54>
 80021aa:	9a01      	ldr	r2, [sp, #4]
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d1ce      	bne.n	800214e <d_cv_qualifiers+0xaa>
 80021b0:	2b46      	cmp	r3, #70	; 0x46
 80021b2:	d1cc      	bne.n	800214e <d_cv_qualifiers+0xaa>
 80021b4:	454d      	cmp	r5, r9
 80021b6:	d0ca      	beq.n	800214e <d_cv_qualifiers+0xaa>
 80021b8:	241d      	movs	r4, #29
 80021ba:	201e      	movs	r0, #30
 80021bc:	211c      	movs	r1, #28
 80021be:	e008      	b.n	80021d2 <d_cv_qualifiers+0x12e>
 80021c0:	2a1b      	cmp	r2, #27
 80021c2:	d00d      	beq.n	80021e0 <d_cv_qualifiers+0x13c>
 80021c4:	2a19      	cmp	r2, #25
 80021c6:	d100      	bne.n	80021ca <d_cv_qualifiers+0x126>
 80021c8:	7019      	strb	r1, [r3, #0]
 80021ca:	f103 0908 	add.w	r9, r3, #8
 80021ce:	454d      	cmp	r5, r9
 80021d0:	d0bd      	beq.n	800214e <d_cv_qualifiers+0xaa>
 80021d2:	f8d9 3000 	ldr.w	r3, [r9]
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	2a1a      	cmp	r2, #26
 80021da:	d1f1      	bne.n	80021c0 <d_cv_qualifiers+0x11c>
 80021dc:	701c      	strb	r4, [r3, #0]
 80021de:	e7f4      	b.n	80021ca <d_cv_qualifiers+0x126>
 80021e0:	7018      	strb	r0, [r3, #0]
 80021e2:	e7f2      	b.n	80021ca <d_cv_qualifiers+0x126>
 80021e4:	2b77      	cmp	r3, #119	; 0x77
 80021e6:	d1b1      	bne.n	800214c <d_cv_qualifiers+0xa8>
 80021e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021ea:	3306      	adds	r3, #6
 80021ec:	6323      	str	r3, [r4, #48]	; 0x30
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff ff16 	bl	8002020 <d_parmlist>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d0a8      	beq.n	800214c <d_cv_qualifiers+0xa8>
 80021fa:	68e2      	ldr	r2, [r4, #12]
 80021fc:	7811      	ldrb	r1, [r2, #0]
 80021fe:	2945      	cmp	r1, #69	; 0x45
 8002200:	d1a4      	bne.n	800214c <d_cv_qualifiers+0xa8>
 8002202:	3201      	adds	r2, #1
 8002204:	60e2      	str	r2, [r4, #12]
 8002206:	214f      	movs	r1, #79	; 0x4f
 8002208:	e776      	b.n	80020f8 <d_cv_qualifiers+0x54>
 800220a:	bf00      	nop

0800220c <d_bare_function_type>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	68c3      	ldr	r3, [r0, #12]
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	2a4a      	cmp	r2, #74	; 0x4a
 8002214:	4604      	mov	r4, r0
 8002216:	d013      	beq.n	8002240 <d_bare_function_type+0x34>
 8002218:	b181      	cbz	r1, 800223c <d_bare_function_type+0x30>
 800221a:	4620      	mov	r0, r4
 800221c:	f7ff fa90 	bl	8001740 <d_type>
 8002220:	4605      	mov	r5, r0
 8002222:	b180      	cbz	r0, 8002246 <d_bare_function_type+0x3a>
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff fefb 	bl	8002020 <d_parmlist>
 800222a:	b160      	cbz	r0, 8002246 <d_bare_function_type+0x3a>
 800222c:	4603      	mov	r3, r0
 800222e:	462a      	mov	r2, r5
 8002230:	4620      	mov	r0, r4
 8002232:	2129      	movs	r1, #41	; 0x29
 8002234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002238:	f7fe b802 	b.w	8000240 <d_make_comp>
 800223c:	460d      	mov	r5, r1
 800223e:	e7f1      	b.n	8002224 <d_bare_function_type+0x18>
 8002240:	3301      	adds	r3, #1
 8002242:	60c3      	str	r3, [r0, #12]
 8002244:	e7e9      	b.n	800221a <d_bare_function_type+0xe>
 8002246:	2000      	movs	r0, #0
 8002248:	bd70      	pop	{r4, r5, r6, pc}
 800224a:	bf00      	nop

0800224c <d_function_type>:
 800224c:	68c3      	ldr	r3, [r0, #12]
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	2a46      	cmp	r2, #70	; 0x46
 8002252:	d118      	bne.n	8002286 <d_function_type+0x3a>
 8002254:	b510      	push	{r4, lr}
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	60c2      	str	r2, [r0, #12]
 800225a:	785a      	ldrb	r2, [r3, #1]
 800225c:	2a59      	cmp	r2, #89	; 0x59
 800225e:	bf04      	itt	eq
 8002260:	3302      	addeq	r3, #2
 8002262:	60c3      	streq	r3, [r0, #12]
 8002264:	2101      	movs	r1, #1
 8002266:	4604      	mov	r4, r0
 8002268:	f7ff ffd0 	bl	800220c <d_bare_function_type>
 800226c:	4601      	mov	r1, r0
 800226e:	4620      	mov	r0, r4
 8002270:	f7fe f82e 	bl	80002d0 <d_ref_qualifier>
 8002274:	68e3      	ldr	r3, [r4, #12]
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	2a45      	cmp	r2, #69	; 0x45
 800227a:	d102      	bne.n	8002282 <d_function_type+0x36>
 800227c:	3301      	adds	r3, #1
 800227e:	60e3      	str	r3, [r4, #12]
 8002280:	bd10      	pop	{r4, pc}
 8002282:	2000      	movs	r0, #0
 8002284:	bd10      	pop	{r4, pc}
 8002286:	2000      	movs	r0, #0
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <d_unqualified_name>:
 800228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002290:	68c1      	ldr	r1, [r0, #12]
 8002292:	780b      	ldrb	r3, [r1, #0]
 8002294:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002298:	2a09      	cmp	r2, #9
 800229a:	4604      	mov	r4, r0
 800229c:	d93c      	bls.n	8002318 <d_unqualified_name+0x8c>
 800229e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80022a2:	2a19      	cmp	r2, #25
 80022a4:	d922      	bls.n	80022ec <d_unqualified_name+0x60>
 80022a6:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 80022aa:	2a01      	cmp	r2, #1
 80022ac:	d969      	bls.n	8002382 <d_unqualified_name+0xf6>
 80022ae:	2b4c      	cmp	r3, #76	; 0x4c
 80022b0:	d056      	beq.n	8002360 <d_unqualified_name+0xd4>
 80022b2:	2b55      	cmp	r3, #85	; 0x55
 80022b4:	d15f      	bne.n	8002376 <d_unqualified_name+0xea>
 80022b6:	784b      	ldrb	r3, [r1, #1]
 80022b8:	2b6c      	cmp	r3, #108	; 0x6c
 80022ba:	f000 80e5 	beq.w	8002488 <d_unqualified_name+0x1fc>
 80022be:	2b74      	cmp	r3, #116	; 0x74
 80022c0:	d159      	bne.n	8002376 <d_unqualified_name+0xea>
 80022c2:	1c4b      	adds	r3, r1, #1
 80022c4:	60c3      	str	r3, [r0, #12]
 80022c6:	784b      	ldrb	r3, [r1, #1]
 80022c8:	2b74      	cmp	r3, #116	; 0x74
 80022ca:	d158      	bne.n	800237e <d_unqualified_name+0xf2>
 80022cc:	3102      	adds	r1, #2
 80022ce:	60c1      	str	r1, [r0, #12]
 80022d0:	f7fe f8f4 	bl	80004bc <d_compact_number>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	f2c0 8155 	blt.w	8002584 <d_unqualified_name+0x2f8>
 80022da:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80022de:	4293      	cmp	r3, r2
 80022e0:	68e7      	ldr	r7, [r4, #12]
 80022e2:	f2c0 80f3 	blt.w	80024cc <d_unqualified_name+0x240>
 80022e6:	783b      	ldrb	r3, [r7, #0]
 80022e8:	2500      	movs	r5, #0
 80022ea:	e010      	b.n	800230e <d_unqualified_name+0x82>
 80022ec:	2b6f      	cmp	r3, #111	; 0x6f
 80022ee:	d104      	bne.n	80022fa <d_unqualified_name+0x6e>
 80022f0:	784b      	ldrb	r3, [r1, #1]
 80022f2:	2b6e      	cmp	r3, #110	; 0x6e
 80022f4:	bf04      	itt	eq
 80022f6:	3102      	addeq	r1, #2
 80022f8:	60c1      	streq	r1, [r0, #12]
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7ff fe1a 	bl	8001f34 <d_operator_name>
 8002300:	4605      	mov	r5, r0
 8002302:	b110      	cbz	r0, 800230a <d_unqualified_name+0x7e>
 8002304:	7803      	ldrb	r3, [r0, #0]
 8002306:	2b31      	cmp	r3, #49	; 0x31
 8002308:	d013      	beq.n	8002332 <d_unqualified_name+0xa6>
 800230a:	68e3      	ldr	r3, [r4, #12]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b42      	cmp	r3, #66	; 0x42
 8002310:	d009      	beq.n	8002326 <d_unqualified_name+0x9a>
 8002312:	4628      	mov	r0, r5
 8002314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002318:	f7fe f90c 	bl	8000534 <d_source_name>
 800231c:	68e3      	ldr	r3, [r4, #12]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b42      	cmp	r3, #66	; 0x42
 8002322:	4605      	mov	r5, r0
 8002324:	d1f5      	bne.n	8002312 <d_unqualified_name+0x86>
 8002326:	4629      	mov	r1, r5
 8002328:	4620      	mov	r0, r4
 800232a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800232e:	f7fe b95b 	b.w	80005e8 <d_abi_tags>
 8002332:	6882      	ldr	r2, [r0, #8]
 8002334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002336:	6896      	ldr	r6, [r2, #8]
 8002338:	6810      	ldr	r0, [r2, #0]
 800233a:	49a1      	ldr	r1, [pc, #644]	; (80025c0 <d_unqualified_name+0x334>)
 800233c:	3307      	adds	r3, #7
 800233e:	4433      	add	r3, r6
 8002340:	6323      	str	r3, [r4, #48]	; 0x30
 8002342:	f004 fd3d 	bl	8006dc0 <strcmp>
 8002346:	2800      	cmp	r0, #0
 8002348:	d1df      	bne.n	800230a <d_unqualified_name+0x7e>
 800234a:	4620      	mov	r0, r4
 800234c:	f7fe f8f2 	bl	8000534 <d_source_name>
 8002350:	462a      	mov	r2, r5
 8002352:	4603      	mov	r3, r0
 8002354:	2136      	movs	r1, #54	; 0x36
 8002356:	4620      	mov	r0, r4
 8002358:	f7fd ff72 	bl	8000240 <d_make_comp>
 800235c:	4605      	mov	r5, r0
 800235e:	e7d4      	b.n	800230a <d_unqualified_name+0x7e>
 8002360:	3101      	adds	r1, #1
 8002362:	60c1      	str	r1, [r0, #12]
 8002364:	f7fe f8e6 	bl	8000534 <d_source_name>
 8002368:	4605      	mov	r5, r0
 800236a:	b120      	cbz	r0, 8002376 <d_unqualified_name+0xea>
 800236c:	4620      	mov	r0, r4
 800236e:	f7fe fa0f 	bl	8000790 <d_discriminator>
 8002372:	2800      	cmp	r0, #0
 8002374:	d1c9      	bne.n	800230a <d_unqualified_name+0x7e>
 8002376:	2500      	movs	r5, #0
 8002378:	4628      	mov	r0, r5
 800237a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800237e:	2500      	movs	r5, #0
 8002380:	e7c5      	b.n	800230e <d_unqualified_name+0x82>
 8002382:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002384:	b132      	cbz	r2, 8002394 <d_unqualified_name+0x108>
 8002386:	7810      	ldrb	r0, [r2, #0]
 8002388:	b9e0      	cbnz	r0, 80023c4 <d_unqualified_name+0x138>
 800238a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800238c:	68d0      	ldr	r0, [r2, #12]
 800238e:	4403      	add	r3, r0
 8002390:	6323      	str	r3, [r4, #48]	; 0x30
 8002392:	780b      	ldrb	r3, [r1, #0]
 8002394:	2b43      	cmp	r3, #67	; 0x43
 8002396:	d018      	beq.n	80023ca <d_unqualified_name+0x13e>
 8002398:	2b44      	cmp	r3, #68	; 0x44
 800239a:	d1f0      	bne.n	800237e <d_unqualified_name+0xf2>
 800239c:	784b      	ldrb	r3, [r1, #1]
 800239e:	3b30      	subs	r3, #48	; 0x30
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d8e8      	bhi.n	8002376 <d_unqualified_name+0xea>
 80023a4:	a001      	add	r0, pc, #4	; (adr r0, 80023ac <d_unqualified_name+0x120>)
 80023a6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	0800241d 	.word	0x0800241d
 80023b0:	080023e7 	.word	0x080023e7
 80023b4:	0800242f 	.word	0x0800242f
 80023b8:	08002377 	.word	0x08002377
 80023bc:	08002429 	.word	0x08002429
 80023c0:	08002423 	.word	0x08002423
 80023c4:	2818      	cmp	r0, #24
 80023c6:	d1e5      	bne.n	8002394 <d_unqualified_name+0x108>
 80023c8:	e7df      	b.n	800238a <d_unqualified_name+0xfe>
 80023ca:	784b      	ldrb	r3, [r1, #1]
 80023cc:	2b49      	cmp	r3, #73	; 0x49
 80023ce:	f000 80b0 	beq.w	8002532 <d_unqualified_name+0x2a6>
 80023d2:	3b31      	subs	r3, #49	; 0x31
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d8ce      	bhi.n	8002376 <d_unqualified_name+0xea>
 80023d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023dc:	005100ed 	.word	0x005100ed
 80023e0:	0047004c 	.word	0x0047004c
 80023e4:	002c      	.short	0x002c
 80023e6:	f04f 0c02 	mov.w	ip, #2
 80023ea:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023ee:	1c8d      	adds	r5, r1, #2
 80023f0:	4283      	cmp	r3, r0
 80023f2:	60e5      	str	r5, [r4, #12]
 80023f4:	f280 80d0 	bge.w	8002598 <d_unqualified_name+0x30c>
 80023f8:	6926      	ldr	r6, [r4, #16]
 80023fa:	0118      	lsls	r0, r3, #4
 80023fc:	1835      	adds	r5, r6, r0
 80023fe:	3301      	adds	r3, #1
 8002400:	2700      	movs	r7, #0
 8002402:	606f      	str	r7, [r5, #4]
 8002404:	6163      	str	r3, [r4, #20]
 8002406:	2a00      	cmp	r2, #0
 8002408:	f000 80cf 	beq.w	80025aa <d_unqualified_name+0x31e>
 800240c:	2308      	movs	r3, #8
 800240e:	606f      	str	r7, [r5, #4]
 8002410:	5433      	strb	r3, [r6, r0]
 8002412:	f885 c008 	strb.w	ip, [r5, #8]
 8002416:	60ea      	str	r2, [r5, #12]
 8002418:	788b      	ldrb	r3, [r1, #2]
 800241a:	e778      	b.n	800230e <d_unqualified_name+0x82>
 800241c:	f04f 0c01 	mov.w	ip, #1
 8002420:	e7e3      	b.n	80023ea <d_unqualified_name+0x15e>
 8002422:	f04f 0c05 	mov.w	ip, #5
 8002426:	e7e0      	b.n	80023ea <d_unqualified_name+0x15e>
 8002428:	f04f 0c04 	mov.w	ip, #4
 800242c:	e7dd      	b.n	80023ea <d_unqualified_name+0x15e>
 800242e:	f04f 0c03 	mov.w	ip, #3
 8002432:	e7da      	b.n	80023ea <d_unqualified_name+0x15e>
 8002434:	3102      	adds	r1, #2
 8002436:	60e1      	str	r1, [r4, #12]
 8002438:	f04f 0805 	mov.w	r8, #5
 800243c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002440:	4283      	cmp	r3, r0
 8002442:	f280 80ac 	bge.w	800259e <d_unqualified_name+0x312>
 8002446:	6926      	ldr	r6, [r4, #16]
 8002448:	0118      	lsls	r0, r3, #4
 800244a:	1835      	adds	r5, r6, r0
 800244c:	3301      	adds	r3, #1
 800244e:	2700      	movs	r7, #0
 8002450:	606f      	str	r7, [r5, #4]
 8002452:	6163      	str	r3, [r4, #20]
 8002454:	2a00      	cmp	r2, #0
 8002456:	f000 80ab 	beq.w	80025b0 <d_unqualified_name+0x324>
 800245a:	2307      	movs	r3, #7
 800245c:	606f      	str	r7, [r5, #4]
 800245e:	5433      	strb	r3, [r6, r0]
 8002460:	f885 8008 	strb.w	r8, [r5, #8]
 8002464:	60ea      	str	r2, [r5, #12]
 8002466:	780b      	ldrb	r3, [r1, #0]
 8002468:	e751      	b.n	800230e <d_unqualified_name+0x82>
 800246a:	3102      	adds	r1, #2
 800246c:	60e1      	str	r1, [r4, #12]
 800246e:	f04f 0804 	mov.w	r8, #4
 8002472:	e7e3      	b.n	800243c <d_unqualified_name+0x1b0>
 8002474:	3102      	adds	r1, #2
 8002476:	60e1      	str	r1, [r4, #12]
 8002478:	f04f 0803 	mov.w	r8, #3
 800247c:	e7de      	b.n	800243c <d_unqualified_name+0x1b0>
 800247e:	3102      	adds	r1, #2
 8002480:	60e1      	str	r1, [r4, #12]
 8002482:	f04f 0802 	mov.w	r8, #2
 8002486:	e7d9      	b.n	800243c <d_unqualified_name+0x1b0>
 8002488:	1c4b      	adds	r3, r1, #1
 800248a:	60c3      	str	r3, [r0, #12]
 800248c:	784b      	ldrb	r3, [r1, #1]
 800248e:	2b6c      	cmp	r3, #108	; 0x6c
 8002490:	f47f af75 	bne.w	800237e <d_unqualified_name+0xf2>
 8002494:	3102      	adds	r1, #2
 8002496:	60c1      	str	r1, [r0, #12]
 8002498:	f7ff fdc2 	bl	8002020 <d_parmlist>
 800249c:	4606      	mov	r6, r0
 800249e:	2800      	cmp	r0, #0
 80024a0:	d070      	beq.n	8002584 <d_unqualified_name+0x2f8>
 80024a2:	68e2      	ldr	r2, [r4, #12]
 80024a4:	7813      	ldrb	r3, [r2, #0]
 80024a6:	2b45      	cmp	r3, #69	; 0x45
 80024a8:	f47f af69 	bne.w	800237e <d_unqualified_name+0xf2>
 80024ac:	3201      	adds	r2, #1
 80024ae:	60e2      	str	r2, [r4, #12]
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7fe f803 	bl	80004bc <d_compact_number>
 80024b6:	f1b0 0e00 	subs.w	lr, r0, #0
 80024ba:	db63      	blt.n	8002584 <d_unqualified_name+0x2f8>
 80024bc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	68e0      	ldr	r0, [r4, #12]
 80024c4:	db1b      	blt.n	80024fe <d_unqualified_name+0x272>
 80024c6:	7803      	ldrb	r3, [r0, #0]
 80024c8:	2500      	movs	r5, #0
 80024ca:	e720      	b.n	800230e <d_unqualified_name+0x82>
 80024cc:	6926      	ldr	r6, [r4, #16]
 80024ce:	6a22      	ldr	r2, [r4, #32]
 80024d0:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 80024d4:	0119      	lsls	r1, r3, #4
 80024d6:	1875      	adds	r5, r6, r1
 80024d8:	3301      	adds	r3, #1
 80024da:	f04f 0c00 	mov.w	ip, #0
 80024de:	f8c5 c004 	str.w	ip, [r5, #4]
 80024e2:	4572      	cmp	r2, lr
 80024e4:	6163      	str	r3, [r4, #20]
 80024e6:	f04f 0347 	mov.w	r3, #71	; 0x47
 80024ea:	5473      	strb	r3, [r6, r1]
 80024ec:	60a8      	str	r0, [r5, #8]
 80024ee:	da4d      	bge.n	800258c <d_unqualified_name+0x300>
 80024f0:	69e3      	ldr	r3, [r4, #28]
 80024f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024f6:	3201      	adds	r2, #1
 80024f8:	6222      	str	r2, [r4, #32]
 80024fa:	783b      	ldrb	r3, [r7, #0]
 80024fc:	e707      	b.n	800230e <d_unqualified_name+0x82>
 80024fe:	6927      	ldr	r7, [r4, #16]
 8002500:	6a22      	ldr	r2, [r4, #32]
 8002502:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8002506:	0119      	lsls	r1, r3, #4
 8002508:	187d      	adds	r5, r7, r1
 800250a:	3301      	adds	r3, #1
 800250c:	f04f 0c00 	mov.w	ip, #0
 8002510:	f8c5 c004 	str.w	ip, [r5, #4]
 8002514:	4542      	cmp	r2, r8
 8002516:	6163      	str	r3, [r4, #20]
 8002518:	f04f 0345 	mov.w	r3, #69	; 0x45
 800251c:	547b      	strb	r3, [r7, r1]
 800251e:	e9c5 6e02 	strd	r6, lr, [r5, #8]
 8002522:	da36      	bge.n	8002592 <d_unqualified_name+0x306>
 8002524:	69e3      	ldr	r3, [r4, #28]
 8002526:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800252a:	3201      	adds	r2, #1
 800252c:	6222      	str	r2, [r4, #32]
 800252e:	7803      	ldrb	r3, [r0, #0]
 8002530:	e6ed      	b.n	800230e <d_unqualified_name+0x82>
 8002532:	1c4b      	adds	r3, r1, #1
 8002534:	60e3      	str	r3, [r4, #12]
 8002536:	788b      	ldrb	r3, [r1, #2]
 8002538:	3b31      	subs	r3, #49	; 0x31
 800253a:	2b04      	cmp	r3, #4
 800253c:	d832      	bhi.n	80025a4 <d_unqualified_name+0x318>
 800253e:	e8df f003 	tbb	[pc, r3]
 8002542:	1c03      	.short	0x1c03
 8002544:	1217      	.short	0x1217
 8002546:	0d          	.byte	0x0d
 8002547:	00          	.byte	0x00
 8002548:	3103      	adds	r1, #3
 800254a:	60e1      	str	r1, [r4, #12]
 800254c:	f04f 0801 	mov.w	r8, #1
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff f8f5 	bl	8001740 <d_type>
 8002556:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002558:	68e1      	ldr	r1, [r4, #12]
 800255a:	e76f      	b.n	800243c <d_unqualified_name+0x1b0>
 800255c:	3103      	adds	r1, #3
 800255e:	60e1      	str	r1, [r4, #12]
 8002560:	f04f 0805 	mov.w	r8, #5
 8002564:	e7f4      	b.n	8002550 <d_unqualified_name+0x2c4>
 8002566:	3103      	adds	r1, #3
 8002568:	60e1      	str	r1, [r4, #12]
 800256a:	f04f 0804 	mov.w	r8, #4
 800256e:	e7ef      	b.n	8002550 <d_unqualified_name+0x2c4>
 8002570:	3103      	adds	r1, #3
 8002572:	60e1      	str	r1, [r4, #12]
 8002574:	f04f 0803 	mov.w	r8, #3
 8002578:	e7ea      	b.n	8002550 <d_unqualified_name+0x2c4>
 800257a:	3103      	adds	r1, #3
 800257c:	60e1      	str	r1, [r4, #12]
 800257e:	f04f 0802 	mov.w	r8, #2
 8002582:	e7e5      	b.n	8002550 <d_unqualified_name+0x2c4>
 8002584:	68e3      	ldr	r3, [r4, #12]
 8002586:	2500      	movs	r5, #0
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	e6c0      	b.n	800230e <d_unqualified_name+0x82>
 800258c:	783b      	ldrb	r3, [r7, #0]
 800258e:	4665      	mov	r5, ip
 8002590:	e6bd      	b.n	800230e <d_unqualified_name+0x82>
 8002592:	7803      	ldrb	r3, [r0, #0]
 8002594:	4665      	mov	r5, ip
 8002596:	e6ba      	b.n	800230e <d_unqualified_name+0x82>
 8002598:	788b      	ldrb	r3, [r1, #2]
 800259a:	2500      	movs	r5, #0
 800259c:	e6b7      	b.n	800230e <d_unqualified_name+0x82>
 800259e:	780b      	ldrb	r3, [r1, #0]
 80025a0:	2500      	movs	r5, #0
 80025a2:	e6b4      	b.n	800230e <d_unqualified_name+0x82>
 80025a4:	784b      	ldrb	r3, [r1, #1]
 80025a6:	2500      	movs	r5, #0
 80025a8:	e6b1      	b.n	800230e <d_unqualified_name+0x82>
 80025aa:	788b      	ldrb	r3, [r1, #2]
 80025ac:	4615      	mov	r5, r2
 80025ae:	e6ae      	b.n	800230e <d_unqualified_name+0x82>
 80025b0:	780b      	ldrb	r3, [r1, #0]
 80025b2:	4615      	mov	r5, r2
 80025b4:	e6ab      	b.n	800230e <d_unqualified_name+0x82>
 80025b6:	3102      	adds	r1, #2
 80025b8:	60e1      	str	r1, [r4, #12]
 80025ba:	f04f 0801 	mov.w	r8, #1
 80025be:	e73d      	b.n	800243c <d_unqualified_name+0x1b0>
 80025c0:	08011b5c 	.word	0x08011b5c

080025c4 <d_encoding>:
 80025c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c8:	68c3      	ldr	r3, [r0, #12]
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	2a47      	cmp	r2, #71	; 0x47
 80025ce:	4604      	mov	r4, r0
 80025d0:	d019      	beq.n	8002606 <d_encoding+0x42>
 80025d2:	2a54      	cmp	r2, #84	; 0x54
 80025d4:	d017      	beq.n	8002606 <d_encoding+0x42>
 80025d6:	460e      	mov	r6, r1
 80025d8:	f7fe ff06 	bl	80013e8 <d_name>
 80025dc:	4605      	mov	r5, r0
 80025de:	2800      	cmp	r0, #0
 80025e0:	d07d      	beq.n	80026de <d_encoding+0x11a>
 80025e2:	2e00      	cmp	r6, #0
 80025e4:	d057      	beq.n	8002696 <d_encoding+0xd2>
 80025e6:	68a3      	ldr	r3, [r4, #8]
 80025e8:	07db      	lsls	r3, r3, #31
 80025ea:	d454      	bmi.n	8002696 <d_encoding+0xd2>
 80025ec:	e000      	b.n	80025f0 <d_encoding+0x2c>
 80025ee:	68ad      	ldr	r5, [r5, #8]
 80025f0:	782b      	ldrb	r3, [r5, #0]
 80025f2:	f1a3 021c 	sub.w	r2, r3, #28
 80025f6:	2a04      	cmp	r2, #4
 80025f8:	d9f9      	bls.n	80025ee <d_encoding+0x2a>
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	f000 8186 	beq.w	800290c <d_encoding+0x348>
 8002600:	4628      	mov	r0, r5
 8002602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002606:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002608:	f101 0214 	add.w	r2, r1, #20
 800260c:	6322      	str	r2, [r4, #48]	; 0x30
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	2a54      	cmp	r2, #84	; 0x54
 8002612:	d068      	beq.n	80026e6 <d_encoding+0x122>
 8002614:	2a47      	cmp	r2, #71	; 0x47
 8002616:	d162      	bne.n	80026de <d_encoding+0x11a>
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	60e2      	str	r2, [r4, #12]
 800261c:	785a      	ldrb	r2, [r3, #1]
 800261e:	2a00      	cmp	r2, #0
 8002620:	d05d      	beq.n	80026de <d_encoding+0x11a>
 8002622:	1c9a      	adds	r2, r3, #2
 8002624:	60e2      	str	r2, [r4, #12]
 8002626:	785a      	ldrb	r2, [r3, #1]
 8002628:	3a41      	subs	r2, #65	; 0x41
 800262a:	2a31      	cmp	r2, #49	; 0x31
 800262c:	d857      	bhi.n	80026de <d_encoding+0x11a>
 800262e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002632:	013e      	.short	0x013e
 8002634:	00560056 	.word	0x00560056
 8002638:	00560056 	.word	0x00560056
 800263c:	00560056 	.word	0x00560056
 8002640:	00560056 	.word	0x00560056
 8002644:	00560056 	.word	0x00560056
 8002648:	00560056 	.word	0x00560056
 800264c:	00560056 	.word	0x00560056
 8002650:	00560056 	.word	0x00560056
 8002654:	0056014a 	.word	0x0056014a
 8002658:	00560159 	.word	0x00560159
 800265c:	005600e0 	.word	0x005600e0
 8002660:	00560056 	.word	0x00560056
 8002664:	00560056 	.word	0x00560056
 8002668:	00560056 	.word	0x00560056
 800266c:	00560056 	.word	0x00560056
 8002670:	00560056 	.word	0x00560056
 8002674:	00560056 	.word	0x00560056
 8002678:	00560056 	.word	0x00560056
 800267c:	00560056 	.word	0x00560056
 8002680:	00560056 	.word	0x00560056
 8002684:	00560056 	.word	0x00560056
 8002688:	00560056 	.word	0x00560056
 800268c:	00560056 	.word	0x00560056
 8002690:	00560056 	.word	0x00560056
 8002694:	00eb      	.short	0x00eb
 8002696:	68e3      	ldr	r3, [r4, #12]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0b0      	beq.n	8002600 <d_encoding+0x3c>
 800269e:	2b45      	cmp	r3, #69	; 0x45
 80026a0:	d0ae      	beq.n	8002600 <d_encoding+0x3c>
 80026a2:	4629      	mov	r1, r5
 80026a4:	780b      	ldrb	r3, [r1, #0]
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	f200 8218 	bhi.w	8002adc <d_encoding+0x518>
 80026ac:	2b1c      	cmp	r3, #28
 80026ae:	f080 821e 	bcs.w	8002aee <d_encoding+0x52a>
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	f040 8091 	bne.w	80027da <d_encoding+0x216>
 80026b8:	688a      	ldr	r2, [r1, #8]
 80026ba:	b16a      	cbz	r2, 80026d8 <d_encoding+0x114>
 80026bc:	7813      	ldrb	r3, [r2, #0]
 80026be:	2b08      	cmp	r3, #8
 80026c0:	f103 31ff 	add.w	r1, r3, #4294967295
 80026c4:	f200 8086 	bhi.w	80027d4 <d_encoding+0x210>
 80026c8:	2b07      	cmp	r3, #7
 80026ca:	f080 8086 	bcs.w	80027da <d_encoding+0x216>
 80026ce:	2901      	cmp	r1, #1
 80026d0:	d802      	bhi.n	80026d8 <d_encoding+0x114>
 80026d2:	68d2      	ldr	r2, [r2, #12]
 80026d4:	2a00      	cmp	r2, #0
 80026d6:	d1f1      	bne.n	80026bc <d_encoding+0xf8>
 80026d8:	2101      	movs	r1, #1
 80026da:	e07f      	b.n	80027dc <d_encoding+0x218>
 80026dc:	60e7      	str	r7, [r4, #12]
 80026de:	2500      	movs	r5, #0
 80026e0:	4628      	mov	r0, r5
 80026e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	60e2      	str	r2, [r4, #12]
 80026ea:	785a      	ldrb	r2, [r3, #1]
 80026ec:	2a00      	cmp	r2, #0
 80026ee:	d0f6      	beq.n	80026de <d_encoding+0x11a>
 80026f0:	1c9a      	adds	r2, r3, #2
 80026f2:	60e2      	str	r2, [r4, #12]
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	3b43      	subs	r3, #67	; 0x43
 80026f8:	2b33      	cmp	r3, #51	; 0x33
 80026fa:	d8f0      	bhi.n	80026de <d_encoding+0x11a>
 80026fc:	a201      	add	r2, pc, #4	; (adr r2, 8002704 <d_encoding+0x140>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	08002a59 	.word	0x08002a59
 8002708:	080026df 	.word	0x080026df
 800270c:	080026df 	.word	0x080026df
 8002710:	08002a43 	.word	0x08002a43
 8002714:	080026df 	.word	0x080026df
 8002718:	08002a2d 	.word	0x08002a2d
 800271c:	08002a17 	.word	0x08002a17
 8002720:	08002a01 	.word	0x08002a01
 8002724:	080026df 	.word	0x080026df
 8002728:	080026df 	.word	0x080026df
 800272c:	080026df 	.word	0x080026df
 8002730:	080026df 	.word	0x080026df
 8002734:	080026df 	.word	0x080026df
 8002738:	080026df 	.word	0x080026df
 800273c:	080026df 	.word	0x080026df
 8002740:	080026df 	.word	0x080026df
 8002744:	080029eb 	.word	0x080029eb
 8002748:	080029d1 	.word	0x080029d1
 800274c:	080026df 	.word	0x080026df
 8002750:	080029b7 	.word	0x080029b7
 8002754:	080029a1 	.word	0x080029a1
 8002758:	080026df 	.word	0x080026df
 800275c:	080026df 	.word	0x080026df
 8002760:	080026df 	.word	0x080026df
 8002764:	080026df 	.word	0x080026df
 8002768:	080026df 	.word	0x080026df
 800276c:	080026df 	.word	0x080026df
 8002770:	080026df 	.word	0x080026df
 8002774:	080026df 	.word	0x080026df
 8002778:	080026df 	.word	0x080026df
 800277c:	080026df 	.word	0x080026df
 8002780:	080026df 	.word	0x080026df
 8002784:	0800296d 	.word	0x0800296d
 8002788:	080026df 	.word	0x080026df
 800278c:	080026df 	.word	0x080026df
 8002790:	080026df 	.word	0x080026df
 8002794:	080026df 	.word	0x080026df
 8002798:	08002947 	.word	0x08002947
 800279c:	080026df 	.word	0x080026df
 80027a0:	080026df 	.word	0x080026df
 80027a4:	080026df 	.word	0x080026df
 80027a8:	080026df 	.word	0x080026df
 80027ac:	080026df 	.word	0x080026df
 80027b0:	080026df 	.word	0x080026df
 80027b4:	080026df 	.word	0x080026df
 80027b8:	080026df 	.word	0x080026df
 80027bc:	080026df 	.word	0x080026df
 80027c0:	080026df 	.word	0x080026df
 80027c4:	080026df 	.word	0x080026df
 80027c8:	080026df 	.word	0x080026df
 80027cc:	080026df 	.word	0x080026df
 80027d0:	08002921 	.word	0x08002921
 80027d4:	2b34      	cmp	r3, #52	; 0x34
 80027d6:	f47f af7f 	bne.w	80026d8 <d_encoding+0x114>
 80027da:	2100      	movs	r1, #0
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff fd15 	bl	800220c <d_bare_function_type>
 80027e2:	462a      	mov	r2, r5
 80027e4:	4603      	mov	r3, r0
 80027e6:	2103      	movs	r1, #3
 80027e8:	4620      	mov	r0, r4
 80027ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ee:	f7fd bd27 	b.w	8000240 <d_make_comp>
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7fe fdf8 	bl	80013e8 <d_name>
 80027f8:	2300      	movs	r3, #0
 80027fa:	4602      	mov	r2, r0
 80027fc:	2113      	movs	r1, #19
 80027fe:	4620      	mov	r0, r4
 8002800:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002804:	f7fd bd1c 	b.w	8000240 <d_make_comp>
 8002808:	f104 000c 	add.w	r0, r4, #12
 800280c:	f7fd fe12 	bl	8000434 <d_number.isra.1>
 8002810:	2801      	cmp	r0, #1
 8002812:	f77f af64 	ble.w	80026de <d_encoding+0x11a>
 8002816:	68e3      	ldr	r3, [r4, #12]
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	2a00      	cmp	r2, #0
 800281c:	f43f af5f 	beq.w	80026de <d_encoding+0x11a>
 8002820:	1c5f      	adds	r7, r3, #1
 8002822:	60e7      	str	r7, [r4, #12]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b5f      	cmp	r3, #95	; 0x5f
 8002828:	f47f af59 	bne.w	80026de <d_encoding+0x11a>
 800282c:	2200      	movs	r2, #0
 800282e:	1e45      	subs	r5, r0, #1
 8002830:	4690      	mov	r8, r2
 8002832:	f04f 0940 	mov.w	r9, #64	; 0x40
 8002836:	783b      	ldrb	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f43f af50 	beq.w	80026de <d_encoding+0x11a>
 800283e:	2b24      	cmp	r3, #36	; 0x24
 8002840:	f040 812a 	bne.w	8002a98 <d_encoding+0x4d4>
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b53      	cmp	r3, #83	; 0x53
 8002848:	f000 8156 	beq.w	8002af8 <d_encoding+0x534>
 800284c:	2b5f      	cmp	r3, #95	; 0x5f
 800284e:	f000 8155 	beq.w	8002afc <d_encoding+0x538>
 8002852:	2b24      	cmp	r3, #36	; 0x24
 8002854:	f47f af43 	bne.w	80026de <d_encoding+0x11a>
 8002858:	4619      	mov	r1, r3
 800285a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 800285e:	68e7      	ldr	r7, [r4, #12]
 8002860:	4298      	cmp	r0, r3
 8002862:	f107 0702 	add.w	r7, r7, #2
 8002866:	f6bf af39 	bge.w	80026dc <d_encoding+0x118>
 800286a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800286e:	0106      	lsls	r6, r0, #4
 8002870:	eb0c 0306 	add.w	r3, ip, r6
 8002874:	3001      	adds	r0, #1
 8002876:	f8c3 8004 	str.w	r8, [r3, #4]
 800287a:	3d02      	subs	r5, #2
 800287c:	6160      	str	r0, [r4, #20]
 800287e:	f80c 9006 	strb.w	r9, [ip, r6]
 8002882:	6099      	str	r1, [r3, #8]
 8002884:	60e7      	str	r7, [r4, #12]
 8002886:	2a00      	cmp	r2, #0
 8002888:	f000 8126 	beq.w	8002ad8 <d_encoding+0x514>
 800288c:	213f      	movs	r1, #63	; 0x3f
 800288e:	4620      	mov	r0, r4
 8002890:	f7fd fcd6 	bl	8000240 <d_make_comp>
 8002894:	4602      	mov	r2, r0
 8002896:	2800      	cmp	r0, #0
 8002898:	f43f af21 	beq.w	80026de <d_encoding+0x11a>
 800289c:	2d00      	cmp	r5, #0
 800289e:	dcca      	bgt.n	8002836 <d_encoding+0x272>
 80028a0:	4620      	mov	r0, r4
 80028a2:	2300      	movs	r3, #0
 80028a4:	213e      	movs	r1, #62	; 0x3e
 80028a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028aa:	f7fd bcc9 	b.w	8000240 <d_make_comp>
 80028ae:	2100      	movs	r1, #0
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff fe87 	bl	80025c4 <d_encoding>
 80028b6:	2300      	movs	r3, #0
 80028b8:	4602      	mov	r2, r0
 80028ba:	2117      	movs	r1, #23
 80028bc:	4620      	mov	r0, r4
 80028be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c2:	f7fd bcbd 	b.w	8000240 <d_make_comp>
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7fe fd8e 	bl	80013e8 <d_name>
 80028cc:	4605      	mov	r5, r0
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7fd fddc 	bl	800048c <d_number_component>
 80028d4:	462a      	mov	r2, r5
 80028d6:	4603      	mov	r3, r0
 80028d8:	2116      	movs	r1, #22
 80028da:	4620      	mov	r0, r4
 80028dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e0:	f7fd bcae 	b.w	8000240 <d_make_comp>
 80028e4:	789a      	ldrb	r2, [r3, #2]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4620      	mov	r0, r4
 80028ea:	b12a      	cbz	r2, 80028f8 <d_encoding+0x334>
 80028ec:	1cda      	adds	r2, r3, #3
 80028ee:	60e2      	str	r2, [r4, #12]
 80028f0:	789b      	ldrb	r3, [r3, #2]
 80028f2:	2b6e      	cmp	r3, #110	; 0x6e
 80028f4:	f000 8109 	beq.w	8002b0a <d_encoding+0x546>
 80028f8:	f7ff fe64 	bl	80025c4 <d_encoding>
 80028fc:	2300      	movs	r3, #0
 80028fe:	4602      	mov	r2, r0
 8002900:	2148      	movs	r1, #72	; 0x48
 8002902:	4620      	mov	r0, r4
 8002904:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002908:	f7fd bc9a 	b.w	8000240 <d_make_comp>
 800290c:	68ea      	ldr	r2, [r5, #12]
 800290e:	e000      	b.n	8002912 <d_encoding+0x34e>
 8002910:	6892      	ldr	r2, [r2, #8]
 8002912:	7810      	ldrb	r0, [r2, #0]
 8002914:	f7fd fd80 	bl	8000418 <is_fnqual_component_type>
 8002918:	2800      	cmp	r0, #0
 800291a:	d1f9      	bne.n	8002910 <d_encoding+0x34c>
 800291c:	60ea      	str	r2, [r5, #12]
 800291e:	e66f      	b.n	8002600 <d_encoding+0x3c>
 8002920:	2176      	movs	r1, #118	; 0x76
 8002922:	4620      	mov	r0, r4
 8002924:	f7fe f80a 	bl	800093c <d_call_offset>
 8002928:	2800      	cmp	r0, #0
 800292a:	f43f aed8 	beq.w	80026de <d_encoding+0x11a>
 800292e:	2100      	movs	r1, #0
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff fe47 	bl	80025c4 <d_encoding>
 8002936:	2300      	movs	r3, #0
 8002938:	4602      	mov	r2, r0
 800293a:	2110      	movs	r1, #16
 800293c:	4620      	mov	r0, r4
 800293e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002942:	f7fd bc7d 	b.w	8000240 <d_make_comp>
 8002946:	2168      	movs	r1, #104	; 0x68
 8002948:	4620      	mov	r0, r4
 800294a:	f7fd fff7 	bl	800093c <d_call_offset>
 800294e:	2800      	cmp	r0, #0
 8002950:	f43f aec5 	beq.w	80026de <d_encoding+0x11a>
 8002954:	2100      	movs	r1, #0
 8002956:	4620      	mov	r0, r4
 8002958:	f7ff fe34 	bl	80025c4 <d_encoding>
 800295c:	2300      	movs	r3, #0
 800295e:	4602      	mov	r2, r0
 8002960:	210f      	movs	r1, #15
 8002962:	4620      	mov	r0, r4
 8002964:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002968:	f7fd bc6a 	b.w	8000240 <d_make_comp>
 800296c:	2100      	movs	r1, #0
 800296e:	4620      	mov	r0, r4
 8002970:	f7fd ffe4 	bl	800093c <d_call_offset>
 8002974:	2800      	cmp	r0, #0
 8002976:	f43f aeb2 	beq.w	80026de <d_encoding+0x11a>
 800297a:	2100      	movs	r1, #0
 800297c:	4620      	mov	r0, r4
 800297e:	f7fd ffdd 	bl	800093c <d_call_offset>
 8002982:	2800      	cmp	r0, #0
 8002984:	f43f aeab 	beq.w	80026de <d_encoding+0x11a>
 8002988:	2100      	movs	r1, #0
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff fe1a 	bl	80025c4 <d_encoding>
 8002990:	2300      	movs	r3, #0
 8002992:	4602      	mov	r2, r0
 8002994:	2111      	movs	r1, #17
 8002996:	4620      	mov	r0, r4
 8002998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	f7fd bc50 	b.w	8000240 <d_make_comp>
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7fe fd21 	bl	80013e8 <d_name>
 80029a6:	2300      	movs	r3, #0
 80029a8:	4602      	mov	r2, r0
 80029aa:	2115      	movs	r1, #21
 80029ac:	4620      	mov	r0, r4
 80029ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b2:	f7fd bc45 	b.w	8000240 <d_make_comp>
 80029b6:	310f      	adds	r1, #15
 80029b8:	6321      	str	r1, [r4, #48]	; 0x30
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7fe fec0 	bl	8001740 <d_type>
 80029c0:	2300      	movs	r3, #0
 80029c2:	4602      	mov	r2, r0
 80029c4:	2109      	movs	r1, #9
 80029c6:	4620      	mov	r0, r4
 80029c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	f7fd bc38 	b.w	8000240 <d_make_comp>
 80029d0:	310a      	adds	r1, #10
 80029d2:	6321      	str	r1, [r4, #48]	; 0x30
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7fe feb3 	bl	8001740 <d_type>
 80029da:	2300      	movs	r3, #0
 80029dc:	4602      	mov	r2, r0
 80029de:	210a      	movs	r1, #10
 80029e0:	4620      	mov	r0, r4
 80029e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e6:	f7fd bc2b 	b.w	8000240 <d_make_comp>
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7fe fea8 	bl	8001740 <d_type>
 80029f0:	2300      	movs	r3, #0
 80029f2:	4602      	mov	r2, r0
 80029f4:	210d      	movs	r1, #13
 80029f6:	4620      	mov	r0, r4
 80029f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029fc:	f7fd bc20 	b.w	8000240 <d_make_comp>
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7fe fe9d 	bl	8001740 <d_type>
 8002a06:	2300      	movs	r3, #0
 8002a08:	4602      	mov	r2, r0
 8002a0a:	2112      	movs	r1, #18
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a12:	f7fd bc15 	b.w	8000240 <d_make_comp>
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7fe fe92 	bl	8001740 <d_type>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	4602      	mov	r2, r0
 8002a20:	210c      	movs	r1, #12
 8002a22:	4620      	mov	r0, r4
 8002a24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a28:	f7fd bc0a 	b.w	8000240 <d_make_comp>
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7fe fcdb 	bl	80013e8 <d_name>
 8002a32:	2300      	movs	r3, #0
 8002a34:	4602      	mov	r2, r0
 8002a36:	2114      	movs	r1, #20
 8002a38:	4620      	mov	r0, r4
 8002a3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a3e:	f7fd bbff 	b.w	8000240 <d_make_comp>
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7fe fe7c 	bl	8001740 <d_type>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	210e      	movs	r1, #14
 8002a4e:	4620      	mov	r0, r4
 8002a50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a54:	f7fd bbf4 	b.w	8000240 <d_make_comp>
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7fe fe71 	bl	8001740 <d_type>
 8002a5e:	4605      	mov	r5, r0
 8002a60:	f104 000c 	add.w	r0, r4, #12
 8002a64:	f7fd fce6 	bl	8000434 <d_number.isra.1>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	f6ff ae38 	blt.w	80026de <d_encoding+0x11a>
 8002a6e:	68e3      	ldr	r3, [r4, #12]
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	2a5f      	cmp	r2, #95	; 0x5f
 8002a74:	f47f ae33 	bne.w	80026de <d_encoding+0x11a>
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60e3      	str	r3, [r4, #12]
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f7fe fe5f 	bl	8001740 <d_type>
 8002a82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a84:	1d59      	adds	r1, r3, #5
 8002a86:	6321      	str	r1, [r4, #48]	; 0x30
 8002a88:	4602      	mov	r2, r0
 8002a8a:	462b      	mov	r3, r5
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	210b      	movs	r1, #11
 8002a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a94:	f7fd bbd4 	b.w	8000240 <d_make_comp>
 8002a98:	463e      	mov	r6, r7
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	e004      	b.n	8002aa8 <d_encoding+0x4e4>
 8002a9e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002aa2:	b123      	cbz	r3, 8002aae <d_encoding+0x4ea>
 8002aa4:	2b24      	cmp	r3, #36	; 0x24
 8002aa6:	d002      	beq.n	8002aae <d_encoding+0x4ea>
 8002aa8:	3101      	adds	r1, #1
 8002aaa:	42a9      	cmp	r1, r5
 8002aac:	dbf7      	blt.n	8002a9e <d_encoding+0x4da>
 8002aae:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002ab2:	4283      	cmp	r3, r0
 8002ab4:	da24      	bge.n	8002b00 <d_encoding+0x53c>
 8002ab6:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8002aba:	0118      	lsls	r0, r3, #4
 8002abc:	3301      	adds	r3, #1
 8002abe:	6163      	str	r3, [r4, #20]
 8002ac0:	1833      	adds	r3, r6, r0
 8002ac2:	1a6d      	subs	r5, r5, r1
 8002ac4:	f8c3 8004 	str.w	r8, [r3, #4]
 8002ac8:	f806 8000 	strb.w	r8, [r6, r0]
 8002acc:	609f      	str	r7, [r3, #8]
 8002ace:	eb0c 0701 	add.w	r7, ip, r1
 8002ad2:	60d9      	str	r1, [r3, #12]
 8002ad4:	60e7      	str	r7, [r4, #12]
 8002ad6:	e6d6      	b.n	8002886 <d_encoding+0x2c2>
 8002ad8:	461a      	mov	r2, r3
 8002ada:	e6df      	b.n	800289c <d_encoding+0x2d8>
 8002adc:	2b4c      	cmp	r3, #76	; 0x4c
 8002ade:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8002ae2:	d004      	beq.n	8002aee <d_encoding+0x52a>
 8002ae4:	f4ff ae79 	bcc.w	80027da <d_encoding+0x216>
 8002ae8:	2a01      	cmp	r2, #1
 8002aea:	f63f ae76 	bhi.w	80027da <d_encoding+0x216>
 8002aee:	6889      	ldr	r1, [r1, #8]
 8002af0:	2900      	cmp	r1, #0
 8002af2:	f47f add7 	bne.w	80026a4 <d_encoding+0xe0>
 8002af6:	e671      	b.n	80027dc <d_encoding+0x218>
 8002af8:	212f      	movs	r1, #47	; 0x2f
 8002afa:	e6ae      	b.n	800285a <d_encoding+0x296>
 8002afc:	212e      	movs	r1, #46	; 0x2e
 8002afe:	e6ac      	b.n	800285a <d_encoding+0x296>
 8002b00:	68e3      	ldr	r3, [r4, #12]
 8002b02:	440b      	add	r3, r1
 8002b04:	60e3      	str	r3, [r4, #12]
 8002b06:	2500      	movs	r5, #0
 8002b08:	e57a      	b.n	8002600 <d_encoding+0x3c>
 8002b0a:	f7ff fd5b 	bl	80025c4 <d_encoding>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	4602      	mov	r2, r0
 8002b12:	2149      	movs	r1, #73	; 0x49
 8002b14:	4620      	mov	r0, r4
 8002b16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b1a:	f7fd bb91 	b.w	8000240 <d_make_comp>
 8002b1e:	bf00      	nop

08002b20 <d_expr_primary>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	68c2      	ldr	r2, [r0, #12]
 8002b24:	7813      	ldrb	r3, [r2, #0]
 8002b26:	2b4c      	cmp	r3, #76	; 0x4c
 8002b28:	d144      	bne.n	8002bb4 <d_expr_primary+0x94>
 8002b2a:	1c53      	adds	r3, r2, #1
 8002b2c:	60c3      	str	r3, [r0, #12]
 8002b2e:	7851      	ldrb	r1, [r2, #1]
 8002b30:	295f      	cmp	r1, #95	; 0x5f
 8002b32:	4604      	mov	r4, r0
 8002b34:	d040      	beq.n	8002bb8 <d_expr_primary+0x98>
 8002b36:	295a      	cmp	r1, #90	; 0x5a
 8002b38:	d10c      	bne.n	8002b54 <d_expr_primary+0x34>
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60e3      	str	r3, [r4, #12]
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7ff fd3f 	bl	80025c4 <d_encoding>
 8002b46:	68e3      	ldr	r3, [r4, #12]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	2a45      	cmp	r2, #69	; 0x45
 8002b4c:	d132      	bne.n	8002bb4 <d_expr_primary+0x94>
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60e3      	str	r3, [r4, #12]
 8002b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b54:	f7fe fdf4 	bl	8001740 <d_type>
 8002b58:	b360      	cbz	r0, 8002bb4 <d_expr_primary+0x94>
 8002b5a:	7803      	ldrb	r3, [r0, #0]
 8002b5c:	2b27      	cmp	r3, #39	; 0x27
 8002b5e:	d032      	beq.n	8002bc6 <d_expr_primary+0xa6>
 8002b60:	68e6      	ldr	r6, [r4, #12]
 8002b62:	7833      	ldrb	r3, [r6, #0]
 8002b64:	2b6e      	cmp	r3, #110	; 0x6e
 8002b66:	d037      	beq.n	8002bd8 <d_expr_primary+0xb8>
 8002b68:	213c      	movs	r1, #60	; 0x3c
 8002b6a:	2b45      	cmp	r3, #69	; 0x45
 8002b6c:	d040      	beq.n	8002bf0 <d_expr_primary+0xd0>
 8002b6e:	b30b      	cbz	r3, 8002bb4 <d_expr_primary+0x94>
 8002b70:	4633      	mov	r3, r6
 8002b72:	e000      	b.n	8002b76 <d_expr_primary+0x56>
 8002b74:	b1f5      	cbz	r5, 8002bb4 <d_expr_primary+0x94>
 8002b76:	3301      	adds	r3, #1
 8002b78:	60e3      	str	r3, [r4, #12]
 8002b7a:	781d      	ldrb	r5, [r3, #0]
 8002b7c:	2d45      	cmp	r5, #69	; 0x45
 8002b7e:	d1f9      	bne.n	8002b74 <d_expr_primary+0x54>
 8002b80:	1b9d      	subs	r5, r3, r6
 8002b82:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	da0b      	bge.n	8002ba2 <d_expr_primary+0x82>
 8002b8a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002b8e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002b92:	eb0e 030c 	add.w	r3, lr, ip
 8002b96:	3201      	adds	r2, #1
 8002b98:	2700      	movs	r7, #0
 8002b9a:	605f      	str	r7, [r3, #4]
 8002b9c:	6162      	str	r2, [r4, #20]
 8002b9e:	b106      	cbz	r6, 8002ba2 <d_expr_primary+0x82>
 8002ba0:	bb05      	cbnz	r5, 8002be4 <d_expr_primary+0xc4>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7fd fb4a 	bl	8000240 <d_make_comp>
 8002bac:	68e3      	ldr	r3, [r4, #12]
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	2a45      	cmp	r2, #69	; 0x45
 8002bb2:	d0cc      	beq.n	8002b4e <d_expr_primary+0x2e>
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb8:	1c93      	adds	r3, r2, #2
 8002bba:	60c3      	str	r3, [r0, #12]
 8002bbc:	7892      	ldrb	r2, [r2, #2]
 8002bbe:	2a5a      	cmp	r2, #90	; 0x5a
 8002bc0:	d0bb      	beq.n	8002b3a <d_expr_primary+0x1a>
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	e7c1      	b.n	8002b4a <d_expr_primary+0x2a>
 8002bc6:	6883      	ldr	r3, [r0, #8]
 8002bc8:	7c1a      	ldrb	r2, [r3, #16]
 8002bca:	2a00      	cmp	r2, #0
 8002bcc:	d0c8      	beq.n	8002b60 <d_expr_primary+0x40>
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	6323      	str	r3, [r4, #48]	; 0x30
 8002bd6:	e7c3      	b.n	8002b60 <d_expr_primary+0x40>
 8002bd8:	1c72      	adds	r2, r6, #1
 8002bda:	60e2      	str	r2, [r4, #12]
 8002bdc:	7873      	ldrb	r3, [r6, #1]
 8002bde:	213d      	movs	r1, #61	; 0x3d
 8002be0:	4616      	mov	r6, r2
 8002be2:	e7c2      	b.n	8002b6a <d_expr_primary+0x4a>
 8002be4:	605f      	str	r7, [r3, #4]
 8002be6:	f80e 700c 	strb.w	r7, [lr, ip]
 8002bea:	e9c3 6502 	strd	r6, r5, [r3, #8]
 8002bee:	e7d9      	b.n	8002ba4 <d_expr_primary+0x84>
 8002bf0:	2500      	movs	r5, #0
 8002bf2:	e7c6      	b.n	8002b82 <d_expr_primary+0x62>

08002bf4 <d_print_comp>:
 8002bf4:	b112      	cbz	r2, 8002bfc <d_print_comp+0x8>
 8002bf6:	6853      	ldr	r3, [r2, #4]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	dd03      	ble.n	8002c04 <d_print_comp+0x10>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002c02:	4770      	bx	lr
 8002c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c08:	4615      	mov	r5, r2
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	606a      	str	r2, [r5, #4]
 8002c0e:	b099      	sub	sp, #100	; 0x64
 8002c10:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002c14:	9504      	str	r5, [sp, #16]
 8002c16:	460e      	mov	r6, r1
 8002c18:	ab04      	add	r3, sp, #16
 8002c1a:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
 8002c1e:	9105      	str	r1, [sp, #20]
 8002c20:	4604      	mov	r4, r0
 8002c22:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8002c26:	2f00      	cmp	r7, #0
 8002c28:	f040 80d7 	bne.w	8002dda <d_print_comp+0x1e6>
 8002c2c:	7828      	ldrb	r0, [r5, #0]
 8002c2e:	284f      	cmp	r0, #79	; 0x4f
 8002c30:	f201 82ef 	bhi.w	8004212 <d_print_comp+0x161e>
 8002c34:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002c38:	0ab80a87 	.word	0x0ab80a87
 8002c3c:	0a4f0ab8 	.word	0x0a4f0ab8
 8002c40:	079407c6 	.word	0x079407c6
 8002c44:	075e0767 	.word	0x075e0767
 8002c48:	070f0737 	.word	0x070f0737
 8002c4c:	06bf06e7 	.word	0x06bf06e7
 8002c50:	066f0697 	.word	0x066f0697
 8002c54:	061f0647 	.word	0x061f0647
 8002c58:	091f0947 	.word	0x091f0947
 8002c5c:	08cf08f7 	.word	0x08cf08f7
 8002c60:	087f08a7 	.word	0x087f08a7
 8002c64:	082f0857 	.word	0x082f0857
 8002c68:	09bf09d6 	.word	0x09bf09d6
 8002c6c:	09bf09bf 	.word	0x09bf09bf
 8002c70:	09990999 	.word	0x09990999
 8002c74:	09990999 	.word	0x09990999
 8002c78:	09990999 	.word	0x09990999
 8002c7c:	096f0999 	.word	0x096f0999
 8002c80:	0999096f 	.word	0x0999096f
 8002c84:	0a1d0999 	.word	0x0a1d0999
 8002c88:	06060a14 	.word	0x06060a14
 8002c8c:	05720592 	.word	0x05720592
 8002c90:	0572051b 	.word	0x0572051b
 8002c94:	04d304d3 	.word	0x04d304d3
 8002c98:	045c0488 	.word	0x045c0488
 8002c9c:	0aed0434 	.word	0x0aed0434
 8002ca0:	0404040c 	.word	0x0404040c
 8002ca4:	039c03b0 	.word	0x039c03b0
 8002ca8:	038d0397 	.word	0x038d0397
 8002cac:	03880388 	.word	0x03880388
 8002cb0:	03330333 	.word	0x03330333
 8002cb4:	02fe030b 	.word	0x02fe030b
 8002cb8:	02aa02dc 	.word	0x02aa02dc
 8002cbc:	025a0282 	.word	0x025a0282
 8002cc0:	01f80232 	.word	0x01f80232
 8002cc4:	01d00aed 	.word	0x01d00aed
 8002cc8:	015301a8 	.word	0x015301a8
 8002ccc:	017b0105 	.word	0x017b0105
 8002cd0:	00d80999 	.word	0x00d80999
 8002cd4:	09990999 	.word	0x09990999
 8002cd8:	68aa      	ldr	r2, [r5, #8]
 8002cda:	6893      	ldr	r3, [r2, #8]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	7859      	ldrb	r1, [r3, #1]
 8002ce0:	2963      	cmp	r1, #99	; 0x63
 8002ce2:	d109      	bne.n	8002cf8 <d_print_comp+0x104>
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8002cea:	2901      	cmp	r1, #1
 8002cec:	f242 8319 	bls.w	8005322 <d_print_comp+0x272e>
 8002cf0:	3b72      	subs	r3, #114	; 0x72
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f242 8315 	bls.w	8005322 <d_print_comp+0x272e>
 8002cf8:	f105 030c 	add.w	r3, r5, #12
 8002cfc:	4631      	mov	r1, r6
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f003 fcd2 	bl	80066a8 <d_maybe_print_fold_expression.isra.20>
 8002d04:	4680      	mov	r8, r0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f042 8400 	bne.w	800550c <d_print_comp+0x2918>
 8002d0c:	68ab      	ldr	r3, [r5, #8]
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	2a31      	cmp	r2, #49	; 0x31
 8002d12:	f002 8592 	beq.w	800583a <d_print_comp+0x2c46>
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	49d7      	ldr	r1, [pc, #860]	; (8003078 <d_print_comp+0x484>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	f004 f850 	bl	8006dc0 <strcmp>
 8002d20:	68eb      	ldr	r3, [r5, #12]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	b918      	cbnz	r0, 8002d2e <d_print_comp+0x13a>
 8002d26:	7813      	ldrb	r3, [r2, #0]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	f002 85d4 	beq.w	80058d6 <d_print_comp+0x2ce2>
 8002d2e:	4631      	mov	r1, r6
 8002d30:	4620      	mov	r0, r4
 8002d32:	f003 fc67 	bl	8006604 <d_print_subexpr>
 8002d36:	68af      	ldr	r7, [r5, #8]
 8002d38:	49d0      	ldr	r1, [pc, #832]	; (800307c <d_print_comp+0x488>)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f8d3 8000 	ldr.w	r8, [r3]
 8002d40:	4640      	mov	r0, r8
 8002d42:	f004 f83d 	bl	8006dc0 <strcmp>
 8002d46:	4681      	mov	r9, r0
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f042 83d0 	bne.w	80054ee <d_print_comp+0x28fa>
 8002d4e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d52:	2fff      	cmp	r7, #255	; 0xff
 8002d54:	d110      	bne.n	8002d78 <d_print_comp+0x184>
 8002d56:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d64:	4620      	mov	r0, r4
 8002d66:	4798      	blx	r3
 8002d68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d6c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8002d70:	3301      	adds	r3, #1
 8002d72:	464f      	mov	r7, r9
 8002d74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d78:	1c7a      	adds	r2, r7, #1
 8002d7a:	235b      	movs	r3, #91	; 0x5b
 8002d7c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d80:	55e3      	strb	r3, [r4, r7]
 8002d82:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d86:	68eb      	ldr	r3, [r5, #12]
 8002d88:	4631      	mov	r1, r6
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff ff31 	bl	8002bf4 <d_print_comp>
 8002d92:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d96:	2fff      	cmp	r7, #255	; 0xff
 8002d98:	d111      	bne.n	8002dbe <d_print_comp+0x1ca>
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	4639      	mov	r1, r7
 8002d9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002da2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002da6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002daa:	4620      	mov	r0, r4
 8002dac:	4798      	blx	r3
 8002dae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002db2:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8002db6:	3301      	adds	r3, #1
 8002db8:	4637      	mov	r7, r6
 8002dba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dbe:	235d      	movs	r3, #93	; 0x5d
 8002dc0:	1c7a      	adds	r2, r7, #1
 8002dc2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002dc6:	55e3      	strb	r3, [r4, r7]
 8002dc8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002dcc:	68ab      	ldr	r3, [r5, #8]
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	2a31      	cmp	r2, #49	; 0x31
 8002dd2:	f002 83ad 	beq.w	8005530 <d_print_comp+0x293c>
 8002dd6:	9905      	ldr	r1, [sp, #20]
 8002dd8:	686a      	ldr	r2, [r5, #4]
 8002dda:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8002dde:	3a01      	subs	r2, #1
 8002de0:	606a      	str	r2, [r5, #4]
 8002de2:	b019      	add	sp, #100	; 0x64
 8002de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de8:	4fa5      	ldr	r7, [pc, #660]	; (8003080 <d_print_comp+0x48c>)
 8002dea:	68aa      	ldr	r2, [r5, #8]
 8002dec:	4631      	mov	r1, r6
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff ff00 	bl	8002bf4 <d_print_comp>
 8002df4:	f107 0808 	add.w	r8, r7, #8
 8002df8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002dfc:	f04f 0900 	mov.w	r9, #0
 8002e00:	e016      	b.n	8002e30 <d_print_comp+0x23c>
 8002e02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e0a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e0e:	4798      	blx	r3
 8002e10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e14:	3301      	adds	r3, #1
 8002e16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	45b8      	cmp	r8, r7
 8002e20:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002e24:	f804 a002 	strb.w	sl, [r4, r2]
 8002e28:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002e2c:	f001 82f9 	beq.w	8004422 <d_print_comp+0x182e>
 8002e30:	2bff      	cmp	r3, #255	; 0xff
 8002e32:	4619      	mov	r1, r3
 8002e34:	4620      	mov	r0, r4
 8002e36:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002e3a:	d0e2      	beq.n	8002e02 <d_print_comp+0x20e>
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	e7ed      	b.n	8002e1e <d_print_comp+0x22a>
 8002e42:	68a9      	ldr	r1, [r5, #8]
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7fd fcef 	bl	8000828 <d_find_pack>
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	f002 81e1 	beq.w	8005212 <d_print_comp+0x261e>
 8002e50:	2300      	movs	r3, #0
 8002e52:	7802      	ldrb	r2, [r0, #0]
 8002e54:	2a2f      	cmp	r2, #47	; 0x2f
 8002e56:	f041 85df 	bne.w	8004a18 <d_print_comp+0x1e24>
 8002e5a:	6882      	ldr	r2, [r0, #8]
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	f001 85db 	beq.w	8004a18 <d_print_comp+0x1e24>
 8002e62:	68c0      	ldr	r0, [r0, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d1f3      	bne.n	8002e52 <d_print_comp+0x25e>
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	68ab      	ldr	r3, [r5, #8]
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	1e4a      	subs	r2, r1, #1
 8002e72:	9202      	str	r2, [sp, #8]
 8002e74:	f04f 0a00 	mov.w	sl, #0
 8002e78:	4689      	mov	r9, r1
 8002e7a:	9503      	str	r5, [sp, #12]
 8002e7c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8002e80:	9a01      	ldr	r2, [sp, #4]
 8002e82:	4631      	mov	r1, r6
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff feb5 	bl	8002bf4 <d_print_comp>
 8002e8a:	9b02      	ldr	r3, [sp, #8]
 8002e8c:	429f      	cmp	r7, r3
 8002e8e:	f281 81c6 	bge.w	800421e <d_print_comp+0x162a>
 8002e92:	4d7c      	ldr	r5, [pc, #496]	; (8003084 <d_print_comp+0x490>)
 8002e94:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e98:	f105 0802 	add.w	r8, r5, #2
 8002e9c:	e016      	b.n	8002ecc <d_print_comp+0x2d8>
 8002e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ea6:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8002eaa:	4798      	blx	r3
 8002eac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2301      	movs	r3, #1
 8002eba:	45a8      	cmp	r8, r5
 8002ebc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002ec0:	f804 b002 	strb.w	fp, [r4, r2]
 8002ec4:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8002ec8:	f001 81a9 	beq.w	800421e <d_print_comp+0x162a>
 8002ecc:	2bff      	cmp	r3, #255	; 0xff
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002ed6:	d0e2      	beq.n	8002e9e <d_print_comp+0x2aa>
 8002ed8:	461a      	mov	r2, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	e7ed      	b.n	8002eba <d_print_comp+0x2c6>
 8002ede:	4f6a      	ldr	r7, [pc, #424]	; (8003088 <d_print_comp+0x494>)
 8002ee0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002ee4:	f107 081a 	add.w	r8, r7, #26
 8002ee8:	f04f 0900 	mov.w	r9, #0
 8002eec:	e016      	b.n	8002f1c <d_print_comp+0x328>
 8002eee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ef2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ef6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002efa:	4798      	blx	r3
 8002efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f00:	3301      	adds	r3, #1
 8002f02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f06:	2200      	movs	r2, #0
 8002f08:	2301      	movs	r3, #1
 8002f0a:	45b8      	cmp	r8, r7
 8002f0c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f10:	f804 a002 	strb.w	sl, [r4, r2]
 8002f14:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f18:	f001 82f1 	beq.w	80044fe <d_print_comp+0x190a>
 8002f1c:	2bff      	cmp	r3, #255	; 0xff
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4620      	mov	r0, r4
 8002f22:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002f26:	d0e2      	beq.n	8002eee <d_print_comp+0x2fa>
 8002f28:	461a      	mov	r2, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	e7ed      	b.n	8002f0a <d_print_comp+0x316>
 8002f2e:	4f57      	ldr	r7, [pc, #348]	; (800308c <d_print_comp+0x498>)
 8002f30:	68aa      	ldr	r2, [r5, #8]
 8002f32:	4631      	mov	r1, r6
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff fe5d 	bl	8002bf4 <d_print_comp>
 8002f3a:	f107 0805 	add.w	r8, r7, #5
 8002f3e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f42:	f04f 0900 	mov.w	r9, #0
 8002f46:	e016      	b.n	8002f76 <d_print_comp+0x382>
 8002f48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f50:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f54:	4798      	blx	r3
 8002f56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f60:	2200      	movs	r2, #0
 8002f62:	2301      	movs	r3, #1
 8002f64:	45b8      	cmp	r8, r7
 8002f66:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f6a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f6e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f72:	f001 827c 	beq.w	800446e <d_print_comp+0x187a>
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002f80:	d0e2      	beq.n	8002f48 <d_print_comp+0x354>
 8002f82:	461a      	mov	r2, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	e7ed      	b.n	8002f64 <d_print_comp+0x370>
 8002f88:	4f41      	ldr	r7, [pc, #260]	; (8003090 <d_print_comp+0x49c>)
 8002f8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f8e:	f107 0816 	add.w	r8, r7, #22
 8002f92:	f04f 0900 	mov.w	r9, #0
 8002f96:	e016      	b.n	8002fc6 <d_print_comp+0x3d2>
 8002f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fa0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fa4:	4798      	blx	r3
 8002fa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002faa:	3301      	adds	r3, #1
 8002fac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	45b8      	cmp	r8, r7
 8002fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002fba:	f804 a002 	strb.w	sl, [r4, r2]
 8002fbe:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002fc2:	f001 81f4 	beq.w	80043ae <d_print_comp+0x17ba>
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002fd0:	d0e2      	beq.n	8002f98 <d_print_comp+0x3a4>
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	e7ed      	b.n	8002fb4 <d_print_comp+0x3c0>
 8002fd8:	4e2e      	ldr	r6, [pc, #184]	; (8003094 <d_print_comp+0x4a0>)
 8002fda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002fde:	f106 070e 	add.w	r7, r6, #14
 8002fe2:	f04f 0800 	mov.w	r8, #0
 8002fe6:	e016      	b.n	8003016 <d_print_comp+0x422>
 8002fe8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ff0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002ff4:	4798      	blx	r3
 8002ff6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003000:	2200      	movs	r2, #0
 8003002:	2301      	movs	r3, #1
 8003004:	42b7      	cmp	r7, r6
 8003006:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800300a:	f804 9002 	strb.w	r9, [r4, r2]
 800300e:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003012:	f001 81d5 	beq.w	80043c0 <d_print_comp+0x17cc>
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	4619      	mov	r1, r3
 800301a:	4620      	mov	r0, r4
 800301c:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8003020:	d0e2      	beq.n	8002fe8 <d_print_comp+0x3f4>
 8003022:	461a      	mov	r2, r3
 8003024:	3301      	adds	r3, #1
 8003026:	e7ed      	b.n	8003004 <d_print_comp+0x410>
 8003028:	4f1b      	ldr	r7, [pc, #108]	; (8003098 <d_print_comp+0x4a4>)
 800302a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800302e:	f107 0808 	add.w	r8, r7, #8
 8003032:	f04f 0900 	mov.w	r9, #0
 8003036:	e016      	b.n	8003066 <d_print_comp+0x472>
 8003038:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800303c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003040:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003044:	4798      	blx	r3
 8003046:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800304a:	3301      	adds	r3, #1
 800304c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003050:	2200      	movs	r2, #0
 8003052:	2301      	movs	r3, #1
 8003054:	45b8      	cmp	r8, r7
 8003056:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800305a:	f804 a002 	strb.w	sl, [r4, r2]
 800305e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003062:	f001 8114 	beq.w	800428e <d_print_comp+0x169a>
 8003066:	2bff      	cmp	r3, #255	; 0xff
 8003068:	4619      	mov	r1, r3
 800306a:	4620      	mov	r0, r4
 800306c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003070:	d0e2      	beq.n	8003038 <d_print_comp+0x444>
 8003072:	461a      	mov	r2, r3
 8003074:	3301      	adds	r3, #1
 8003076:	e7ed      	b.n	8003054 <d_print_comp+0x460>
 8003078:	08011b20 	.word	0x08011b20
 800307c:	08011d20 	.word	0x08011d20
 8003080:	08011ddb 	.word	0x08011ddb
 8003084:	08011cf4 	.word	0x08011cf4
 8003088:	08011cbf 	.word	0x08011cbf
 800308c:	08011b60 	.word	0x08011b60
 8003090:	08011cc3 	.word	0x08011cc3
 8003094:	08011dcb 	.word	0x08011dcb
 8003098:	08011dbb 	.word	0x08011dbb
 800309c:	4fb9      	ldr	r7, [pc, #740]	; (8003384 <d_print_comp+0x790>)
 800309e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030a2:	f107 081c 	add.w	r8, r7, #28
 80030a6:	f04f 0900 	mov.w	r9, #0
 80030aa:	e016      	b.n	80030da <d_print_comp+0x4e6>
 80030ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030b8:	4798      	blx	r3
 80030ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030be:	3301      	adds	r3, #1
 80030c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030c4:	2200      	movs	r2, #0
 80030c6:	2301      	movs	r3, #1
 80030c8:	45b8      	cmp	r8, r7
 80030ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030ce:	f804 a002 	strb.w	sl, [r4, r2]
 80030d2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030d6:	f001 810f 	beq.w	80042f8 <d_print_comp+0x1704>
 80030da:	2bff      	cmp	r3, #255	; 0xff
 80030dc:	4619      	mov	r1, r3
 80030de:	4620      	mov	r0, r4
 80030e0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80030e4:	d0e2      	beq.n	80030ac <d_print_comp+0x4b8>
 80030e6:	461a      	mov	r2, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	e7ed      	b.n	80030c8 <d_print_comp+0x4d4>
 80030ec:	4fa6      	ldr	r7, [pc, #664]	; (8003388 <d_print_comp+0x794>)
 80030ee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030f2:	f107 081d 	add.w	r8, r7, #29
 80030f6:	f04f 0900 	mov.w	r9, #0
 80030fa:	e016      	b.n	800312a <d_print_comp+0x536>
 80030fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003100:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003104:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003108:	4798      	blx	r3
 800310a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800310e:	3301      	adds	r3, #1
 8003110:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003114:	2200      	movs	r2, #0
 8003116:	2301      	movs	r3, #1
 8003118:	4547      	cmp	r7, r8
 800311a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800311e:	f804 a002 	strb.w	sl, [r4, r2]
 8003122:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003126:	f001 8083 	beq.w	8004230 <d_print_comp+0x163c>
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	4619      	mov	r1, r3
 800312e:	4620      	mov	r0, r4
 8003130:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003134:	d0e2      	beq.n	80030fc <d_print_comp+0x508>
 8003136:	461a      	mov	r2, r3
 8003138:	3301      	adds	r3, #1
 800313a:	e7ed      	b.n	8003118 <d_print_comp+0x524>
 800313c:	4f93      	ldr	r7, [pc, #588]	; (800338c <d_print_comp+0x798>)
 800313e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003142:	f107 080a 	add.w	r8, r7, #10
 8003146:	f04f 0900 	mov.w	r9, #0
 800314a:	e016      	b.n	800317a <d_print_comp+0x586>
 800314c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003150:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003154:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003158:	4798      	blx	r3
 800315a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800315e:	3301      	adds	r3, #1
 8003160:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003164:	2200      	movs	r2, #0
 8003166:	2301      	movs	r3, #1
 8003168:	45b8      	cmp	r8, r7
 800316a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800316e:	f804 a002 	strb.w	sl, [r4, r2]
 8003172:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003176:	f001 8064 	beq.w	8004242 <d_print_comp+0x164e>
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	4619      	mov	r1, r3
 800317e:	4620      	mov	r0, r4
 8003180:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003184:	d0e2      	beq.n	800314c <d_print_comp+0x558>
 8003186:	461a      	mov	r2, r3
 8003188:	3301      	adds	r3, #1
 800318a:	e7ed      	b.n	8003168 <d_print_comp+0x574>
 800318c:	a808      	add	r0, sp, #32
 800318e:	68aa      	ldr	r2, [r5, #8]
 8003190:	497f      	ldr	r1, [pc, #508]	; (8003390 <d_print_comp+0x79c>)
 8003192:	f00a fef9 	bl	800df88 <sprintf>
 8003196:	a808      	add	r0, sp, #32
 8003198:	f003 fe1c 	bl	8006dd4 <strlen>
 800319c:	2800      	cmp	r0, #0
 800319e:	f001 81b7 	beq.w	8004510 <d_print_comp+0x191c>
 80031a2:	ae08      	add	r6, sp, #32
 80031a4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80031a8:	1837      	adds	r7, r6, r0
 80031aa:	f04f 0800 	mov.w	r8, #0
 80031ae:	e016      	b.n	80031de <d_print_comp+0x5ea>
 80031b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80031bc:	4798      	blx	r3
 80031be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80031c2:	3301      	adds	r3, #1
 80031c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80031c8:	2200      	movs	r2, #0
 80031ca:	2301      	movs	r3, #1
 80031cc:	42be      	cmp	r6, r7
 80031ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031d2:	f804 9002 	strb.w	r9, [r4, r2]
 80031d6:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80031da:	f001 8199 	beq.w	8004510 <d_print_comp+0x191c>
 80031de:	2bff      	cmp	r3, #255	; 0xff
 80031e0:	4619      	mov	r1, r3
 80031e2:	4620      	mov	r0, r4
 80031e4:	f816 9b01 	ldrb.w	r9, [r6], #1
 80031e8:	d0e2      	beq.n	80031b0 <d_print_comp+0x5bc>
 80031ea:	461a      	mov	r2, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	e7ed      	b.n	80031cc <d_print_comp+0x5d8>
 80031f0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80031f4:	f895 8008 	ldrb.w	r8, [r5, #8]
 80031f8:	2fff      	cmp	r7, #255	; 0xff
 80031fa:	d111      	bne.n	8003220 <d_print_comp+0x62c>
 80031fc:	2600      	movs	r6, #0
 80031fe:	4639      	mov	r1, r7
 8003200:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003204:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003208:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800320c:	4620      	mov	r0, r4
 800320e:	4798      	blx	r3
 8003210:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003214:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003218:	3301      	adds	r3, #1
 800321a:	4637      	mov	r7, r6
 800321c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003220:	1c7b      	adds	r3, r7, #1
 8003222:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003226:	f804 8007 	strb.w	r8, [r4, r7]
 800322a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800322e:	686a      	ldr	r2, [r5, #4]
 8003230:	9905      	ldr	r1, [sp, #20]
 8003232:	e5d2      	b.n	8002dda <d_print_comp+0x1e6>
 8003234:	68aa      	ldr	r2, [r5, #8]
 8003236:	4631      	mov	r1, r6
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff fcdb 	bl	8002bf4 <d_print_comp>
 800323e:	4631      	mov	r1, r6
 8003240:	68ea      	ldr	r2, [r5, #12]
 8003242:	4620      	mov	r0, r4
 8003244:	f7ff fcd6 	bl	8002bf4 <d_print_comp>
 8003248:	9905      	ldr	r1, [sp, #20]
 800324a:	686a      	ldr	r2, [r5, #4]
 800324c:	e5c5      	b.n	8002dda <d_print_comp+0x1e6>
 800324e:	4f51      	ldr	r7, [pc, #324]	; (8003394 <d_print_comp+0x7a0>)
 8003250:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003254:	f107 080e 	add.w	r8, r7, #14
 8003258:	f04f 0900 	mov.w	r9, #0
 800325c:	e016      	b.n	800328c <d_print_comp+0x698>
 800325e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003262:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003266:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800326a:	4798      	blx	r3
 800326c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003270:	3301      	adds	r3, #1
 8003272:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003276:	2200      	movs	r2, #0
 8003278:	2301      	movs	r3, #1
 800327a:	45b8      	cmp	r8, r7
 800327c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003280:	f804 a002 	strb.w	sl, [r4, r2]
 8003284:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003288:	f001 8146 	beq.w	8004518 <d_print_comp+0x1924>
 800328c:	2bff      	cmp	r3, #255	; 0xff
 800328e:	4619      	mov	r1, r3
 8003290:	4620      	mov	r0, r4
 8003292:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003296:	d0e2      	beq.n	800325e <d_print_comp+0x66a>
 8003298:	461a      	mov	r2, r3
 800329a:	3301      	adds	r3, #1
 800329c:	e7ed      	b.n	800327a <d_print_comp+0x686>
 800329e:	68ab      	ldr	r3, [r5, #8]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	2a27      	cmp	r2, #39	; 0x27
 80032a4:	f001 8572 	beq.w	8004d8c <d_print_comp+0x2198>
 80032a8:	f04f 0800 	mov.w	r8, #0
 80032ac:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80032b0:	2fff      	cmp	r7, #255	; 0xff
 80032b2:	d112      	bne.n	80032da <d_print_comp+0x6e6>
 80032b4:	f04f 0900 	mov.w	r9, #0
 80032b8:	4639      	mov	r1, r7
 80032ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80032c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032c6:	4620      	mov	r0, r4
 80032c8:	4798      	blx	r3
 80032ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032ce:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80032d2:	3301      	adds	r3, #1
 80032d4:	464f      	mov	r7, r9
 80032d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032da:	2328      	movs	r3, #40	; 0x28
 80032dc:	1c7a      	adds	r2, r7, #1
 80032de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80032e2:	55e3      	strb	r3, [r4, r7]
 80032e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032e8:	68aa      	ldr	r2, [r5, #8]
 80032ea:	4631      	mov	r1, r6
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff fc81 	bl	8002bf4 <d_print_comp>
 80032f2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80032f6:	2bff      	cmp	r3, #255	; 0xff
 80032f8:	f041 85b8 	bne.w	8004e6c <d_print_comp+0x2278>
 80032fc:	2200      	movs	r2, #0
 80032fe:	4619      	mov	r1, r3
 8003300:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8003304:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003308:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800330c:	4620      	mov	r0, r4
 800330e:	4798      	blx	r3
 8003310:	2329      	movs	r3, #41	; 0x29
 8003312:	7023      	strb	r3, [r4, #0]
 8003314:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003318:	782a      	ldrb	r2, [r5, #0]
 800331a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800331e:	2101      	movs	r1, #1
 8003320:	3301      	adds	r3, #1
 8003322:	2a3d      	cmp	r2, #61	; 0x3d
 8003324:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003328:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800332c:	f001 85bb 	beq.w	8004ea6 <d_print_comp+0x22b2>
 8003330:	f1b8 0f08 	cmp.w	r8, #8
 8003334:	f001 8556 	beq.w	8004de4 <d_print_comp+0x21f0>
 8003338:	4631      	mov	r1, r6
 800333a:	68ea      	ldr	r2, [r5, #12]
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff fc59 	bl	8002bf4 <d_print_comp>
 8003342:	9905      	ldr	r1, [sp, #20]
 8003344:	686a      	ldr	r2, [r5, #4]
 8003346:	e548      	b.n	8002dda <d_print_comp+0x1e6>
 8003348:	2301      	movs	r3, #1
 800334a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800334e:	686a      	ldr	r2, [r5, #4]
 8003350:	e543      	b.n	8002dda <d_print_comp+0x1e6>
 8003352:	68eb      	ldr	r3, [r5, #12]
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	2a3a      	cmp	r2, #58	; 0x3a
 8003358:	f001 8405 	beq.w	8004b66 <d_print_comp+0x1f72>
 800335c:	2301      	movs	r3, #1
 800335e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003362:	686a      	ldr	r2, [r5, #4]
 8003364:	e539      	b.n	8002dda <d_print_comp+0x1e6>
 8003366:	2301      	movs	r3, #1
 8003368:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800336c:	686a      	ldr	r2, [r5, #4]
 800336e:	e534      	b.n	8002dda <d_print_comp+0x1e6>
 8003370:	68eb      	ldr	r3, [r5, #12]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b38      	cmp	r3, #56	; 0x38
 8003376:	f43f acaf 	beq.w	8002cd8 <d_print_comp+0xe4>
 800337a:	2301      	movs	r3, #1
 800337c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003380:	686a      	ldr	r2, [r5, #4]
 8003382:	e52a      	b.n	8002dda <d_print_comp+0x1e6>
 8003384:	08011d9b 	.word	0x08011d9b
 8003388:	08011d7b 	.word	0x08011d7b
 800338c:	08011d5c 	.word	0x08011d5c
 8003390:	08011b18 	.word	0x08011b18
 8003394:	08011d4b 	.word	0x08011d4b
 8003398:	e9d5 9802 	ldrd	r9, r8, [r5, #8]
 800339c:	f899 3000 	ldrb.w	r3, [r9]
 80033a0:	2b31      	cmp	r3, #49	; 0x31
 80033a2:	f001 843a 	beq.w	8004c1a <d_print_comp+0x2026>
 80033a6:	2b33      	cmp	r3, #51	; 0x33
 80033a8:	f042 8192 	bne.w	80056d0 <d_print_comp+0x2adc>
 80033ac:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80033b0:	2fff      	cmp	r7, #255	; 0xff
 80033b2:	d112      	bne.n	80033da <d_print_comp+0x7e6>
 80033b4:	f04f 0a00 	mov.w	sl, #0
 80033b8:	4639      	mov	r1, r7
 80033ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033be:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80033c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033c6:	4620      	mov	r0, r4
 80033c8:	4798      	blx	r3
 80033ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033ce:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 80033d2:	3301      	adds	r3, #1
 80033d4:	4657      	mov	r7, sl
 80033d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033da:	1c7a      	adds	r2, r7, #1
 80033dc:	2328      	movs	r3, #40	; 0x28
 80033de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033e2:	55e3      	strb	r3, [r4, r7]
 80033e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033e8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80033ec:	4631      	mov	r1, r6
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff fc00 	bl	8002bf4 <d_print_comp>
 80033f4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80033f8:	2fff      	cmp	r7, #255	; 0xff
 80033fa:	d112      	bne.n	8003422 <d_print_comp+0x82e>
 80033fc:	f04f 0900 	mov.w	r9, #0
 8003400:	4639      	mov	r1, r7
 8003402:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003406:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800340a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800340e:	4620      	mov	r0, r4
 8003410:	4798      	blx	r3
 8003412:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003416:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800341a:	3301      	adds	r3, #1
 800341c:	464f      	mov	r7, r9
 800341e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003422:	2329      	movs	r3, #41	; 0x29
 8003424:	1c7a      	adds	r2, r7, #1
 8003426:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800342a:	55e3      	strb	r3, [r4, r7]
 800342c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003430:	4642      	mov	r2, r8
 8003432:	4631      	mov	r1, r6
 8003434:	4620      	mov	r0, r4
 8003436:	f003 f8e5 	bl	8006604 <d_print_subexpr>
 800343a:	9905      	ldr	r1, [sp, #20]
 800343c:	686a      	ldr	r2, [r5, #4]
 800343e:	e4cc      	b.n	8002dda <d_print_comp+0x1e6>
 8003440:	4631      	mov	r1, r6
 8003442:	68aa      	ldr	r2, [r5, #8]
 8003444:	4620      	mov	r0, r4
 8003446:	f003 f89d 	bl	8006584 <d_print_expr_op>
 800344a:	9905      	ldr	r1, [sp, #20]
 800344c:	686a      	ldr	r2, [r5, #4]
 800344e:	e4c4      	b.n	8002dda <d_print_comp+0x1e6>
 8003450:	4fd2      	ldr	r7, [pc, #840]	; (800379c <d_print_comp+0xba8>)
 8003452:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003456:	f107 0809 	add.w	r8, r7, #9
 800345a:	f04f 0900 	mov.w	r9, #0
 800345e:	e016      	b.n	800348e <d_print_comp+0x89a>
 8003460:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003464:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003468:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800346c:	4798      	blx	r3
 800346e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003472:	3301      	adds	r3, #1
 8003474:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003478:	2200      	movs	r2, #0
 800347a:	2301      	movs	r3, #1
 800347c:	45b8      	cmp	r8, r7
 800347e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003482:	f804 a002 	strb.w	sl, [r4, r2]
 8003486:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800348a:	f001 8057 	beq.w	800453c <d_print_comp+0x1948>
 800348e:	2bff      	cmp	r3, #255	; 0xff
 8003490:	4619      	mov	r1, r3
 8003492:	4620      	mov	r0, r4
 8003494:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003498:	d0e2      	beq.n	8003460 <d_print_comp+0x86c>
 800349a:	461a      	mov	r2, r3
 800349c:	3301      	adds	r3, #1
 800349e:	e7ed      	b.n	800347c <d_print_comp+0x888>
 80034a0:	4fbe      	ldr	r7, [pc, #760]	; (800379c <d_print_comp+0xba8>)
 80034a2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80034a6:	f107 0809 	add.w	r8, r7, #9
 80034aa:	f04f 0900 	mov.w	r9, #0
 80034ae:	e016      	b.n	80034de <d_print_comp+0x8ea>
 80034b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034b8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034bc:	4798      	blx	r3
 80034be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034c2:	3301      	adds	r3, #1
 80034c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034c8:	2200      	movs	r2, #0
 80034ca:	2301      	movs	r3, #1
 80034cc:	45b8      	cmp	r8, r7
 80034ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034d2:	f804 a002 	strb.w	sl, [r4, r2]
 80034d6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80034da:	f001 8026 	beq.w	800452a <d_print_comp+0x1936>
 80034de:	2bff      	cmp	r3, #255	; 0xff
 80034e0:	4619      	mov	r1, r3
 80034e2:	4620      	mov	r0, r4
 80034e4:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80034e8:	d0e2      	beq.n	80034b0 <d_print_comp+0x8bc>
 80034ea:	461a      	mov	r2, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	e7ed      	b.n	80034cc <d_print_comp+0x8d8>
 80034f0:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80034f4:	4eaa      	ldr	r6, [pc, #680]	; (80037a0 <d_print_comp+0xbac>)
 80034f6:	f8da 7008 	ldr.w	r7, [sl, #8]
 80034fa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80034fe:	f106 0808 	add.w	r8, r6, #8
 8003502:	f04f 0900 	mov.w	r9, #0
 8003506:	e016      	b.n	8003536 <d_print_comp+0x942>
 8003508:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800350c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003510:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003514:	4798      	blx	r3
 8003516:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800351a:	3301      	adds	r3, #1
 800351c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003520:	2200      	movs	r2, #0
 8003522:	2301      	movs	r3, #1
 8003524:	4546      	cmp	r6, r8
 8003526:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800352a:	f804 b002 	strb.w	fp, [r4, r2]
 800352e:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8003532:	f001 8021 	beq.w	8004578 <d_print_comp+0x1984>
 8003536:	2bff      	cmp	r3, #255	; 0xff
 8003538:	4619      	mov	r1, r3
 800353a:	4620      	mov	r0, r4
 800353c:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 8003540:	d0e2      	beq.n	8003508 <d_print_comp+0x914>
 8003542:	461a      	mov	r2, r3
 8003544:	3301      	adds	r3, #1
 8003546:	e7ed      	b.n	8003524 <d_print_comp+0x930>
 8003548:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 800354c:	b11a      	cbz	r2, 8003556 <d_print_comp+0x962>
 800354e:	4631      	mov	r1, r6
 8003550:	4620      	mov	r0, r4
 8003552:	f7ff fb4f 	bl	8002bf4 <d_print_comp>
 8003556:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800355a:	2fff      	cmp	r7, #255	; 0xff
 800355c:	d112      	bne.n	8003584 <d_print_comp+0x990>
 800355e:	f04f 0900 	mov.w	r9, #0
 8003562:	4639      	mov	r1, r7
 8003564:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003568:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800356c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003570:	4620      	mov	r0, r4
 8003572:	4798      	blx	r3
 8003574:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003578:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800357c:	3301      	adds	r3, #1
 800357e:	464f      	mov	r7, r9
 8003580:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003584:	1c78      	adds	r0, r7, #1
 8003586:	237b      	movs	r3, #123	; 0x7b
 8003588:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800358c:	4642      	mov	r2, r8
 800358e:	55e3      	strb	r3, [r4, r7]
 8003590:	4631      	mov	r1, r6
 8003592:	4620      	mov	r0, r4
 8003594:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003598:	f7ff fb2c 	bl	8002bf4 <d_print_comp>
 800359c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80035a0:	2fff      	cmp	r7, #255	; 0xff
 80035a2:	d111      	bne.n	80035c8 <d_print_comp+0x9d4>
 80035a4:	2600      	movs	r6, #0
 80035a6:	4639      	mov	r1, r7
 80035a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035ac:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80035b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035b4:	4620      	mov	r0, r4
 80035b6:	4798      	blx	r3
 80035b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035bc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80035c0:	3301      	adds	r3, #1
 80035c2:	4637      	mov	r7, r6
 80035c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035c8:	1c7a      	adds	r2, r7, #1
 80035ca:	237d      	movs	r3, #125	; 0x7d
 80035cc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80035d0:	55e3      	strb	r3, [r4, r7]
 80035d2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80035d6:	686a      	ldr	r2, [r5, #4]
 80035d8:	9905      	ldr	r1, [sp, #20]
 80035da:	f7ff bbfe 	b.w	8002dda <d_print_comp+0x1e6>
 80035de:	68aa      	ldr	r2, [r5, #8]
 80035e0:	b11a      	cbz	r2, 80035ea <d_print_comp+0x9f6>
 80035e2:	4631      	mov	r1, r6
 80035e4:	4620      	mov	r0, r4
 80035e6:	f7ff fb05 	bl	8002bf4 <d_print_comp>
 80035ea:	68eb      	ldr	r3, [r5, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f001 853d 	beq.w	800506c <d_print_comp+0x2478>
 80035f2:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80035f6:	2ffd      	cmp	r7, #253	; 0xfd
 80035f8:	d912      	bls.n	8003620 <d_print_comp+0xa2c>
 80035fa:	f04f 0800 	mov.w	r8, #0
 80035fe:	f804 8007 	strb.w	r8, [r4, r7]
 8003602:	4639      	mov	r1, r7
 8003604:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003608:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800360c:	4620      	mov	r0, r4
 800360e:	4798      	blx	r3
 8003610:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003614:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003618:	3301      	adds	r3, #1
 800361a:	4647      	mov	r7, r8
 800361c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003620:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80037ac <d_print_comp+0xbb8>
 8003624:	f04f 0a00 	mov.w	sl, #0
 8003628:	f108 0b02 	add.w	fp, r8, #2
 800362c:	e016      	b.n	800365c <d_print_comp+0xa68>
 800362e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003632:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003636:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800363a:	4798      	blx	r3
 800363c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003640:	3301      	adds	r3, #1
 8003642:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003646:	2701      	movs	r7, #1
 8003648:	2300      	movs	r3, #0
 800364a:	45c3      	cmp	fp, r8
 800364c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8003650:	f804 9003 	strb.w	r9, [r4, r3]
 8003654:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003658:	f001 80cf 	beq.w	80047fa <d_print_comp+0x1c06>
 800365c:	2fff      	cmp	r7, #255	; 0xff
 800365e:	4639      	mov	r1, r7
 8003660:	4620      	mov	r0, r4
 8003662:	f818 9b01 	ldrb.w	r9, [r8], #1
 8003666:	d0e2      	beq.n	800362e <d_print_comp+0xa3a>
 8003668:	463b      	mov	r3, r7
 800366a:	3701      	adds	r7, #1
 800366c:	e7ed      	b.n	800364a <d_print_comp+0xa56>
 800366e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f041 84a0 	bne.w	8004fb8 <d_print_comp+0x23c4>
 8003678:	68aa      	ldr	r2, [r5, #8]
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <d_print_comp+0xbb0>)
 800367c:	6891      	ldr	r1, [r2, #8]
 800367e:	4299      	cmp	r1, r3
 8003680:	d020      	beq.n	80036c4 <d_print_comp+0xad0>
 8003682:	4631      	mov	r1, r6
 8003684:	4620      	mov	r0, r4
 8003686:	f7ff fab5 	bl	8002bf4 <d_print_comp>
 800368a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800368e:	2fff      	cmp	r7, #255	; 0xff
 8003690:	d111      	bne.n	80036b6 <d_print_comp+0xac2>
 8003692:	2600      	movs	r6, #0
 8003694:	4639      	mov	r1, r7
 8003696:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800369a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800369e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80036a2:	4620      	mov	r0, r4
 80036a4:	4798      	blx	r3
 80036a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80036aa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80036ae:	3301      	adds	r3, #1
 80036b0:	4637      	mov	r7, r6
 80036b2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036b6:	2320      	movs	r3, #32
 80036b8:	1c7a      	adds	r2, r7, #1
 80036ba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036be:	55e3      	strb	r3, [r4, r7]
 80036c0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036c4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 80036c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	f001 80a6 	beq.w	800481e <d_print_comp+0x1c2a>
 80036d2:	4e35      	ldr	r6, [pc, #212]	; (80037a8 <d_print_comp+0xbb4>)
 80036d4:	f04f 0800 	mov.w	r8, #0
 80036d8:	f106 0906 	add.w	r9, r6, #6
 80036dc:	e015      	b.n	800370a <d_print_comp+0xb16>
 80036de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80036e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80036e6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80036ea:	4798      	blx	r3
 80036ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80036f0:	3301      	adds	r3, #1
 80036f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036f6:	2200      	movs	r2, #0
 80036f8:	2301      	movs	r3, #1
 80036fa:	45b1      	cmp	r9, r6
 80036fc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003700:	54a7      	strb	r7, [r4, r2]
 8003702:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003706:	f001 8183 	beq.w	8004a10 <d_print_comp+0x1e1c>
 800370a:	2bff      	cmp	r3, #255	; 0xff
 800370c:	4619      	mov	r1, r3
 800370e:	4620      	mov	r0, r4
 8003710:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003714:	d0e3      	beq.n	80036de <d_print_comp+0xaea>
 8003716:	461a      	mov	r2, r3
 8003718:	3301      	adds	r3, #1
 800371a:	e7ee      	b.n	80036fa <d_print_comp+0xb06>
 800371c:	ab18      	add	r3, sp, #96	; 0x60
 800371e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8003722:	f843 2d40 	str.w	r2, [r3, #-64]!
 8003726:	2000      	movs	r0, #0
 8003728:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800372c:	900a      	str	r0, [sp, #40]	; 0x28
 800372e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003732:	68ea      	ldr	r2, [r5, #12]
 8003734:	930b      	str	r3, [sp, #44]	; 0x2c
 8003736:	4631      	mov	r1, r6
 8003738:	4620      	mov	r0, r4
 800373a:	9509      	str	r5, [sp, #36]	; 0x24
 800373c:	f7ff fa5a 	bl	8002bf4 <d_print_comp>
 8003740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003742:	b923      	cbnz	r3, 800374e <d_print_comp+0xb5a>
 8003744:	4631      	mov	r1, r6
 8003746:	462a      	mov	r2, r5
 8003748:	4620      	mov	r0, r4
 800374a:	f002 f8e9 	bl	8005920 <d_print_mod>
 800374e:	9b08      	ldr	r3, [sp, #32]
 8003750:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003754:	9905      	ldr	r1, [sp, #20]
 8003756:	686a      	ldr	r2, [r5, #4]
 8003758:	f7ff bb3f 	b.w	8002dda <d_print_comp+0x1e6>
 800375c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8003760:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003764:	f849 cd40 	str.w	ip, [r9, #-64]!
 8003768:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800376c:	f8cd c004 	str.w	ip, [sp, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	4667      	mov	r7, ip
 8003774:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003778:	9509      	str	r5, [sp, #36]	; 0x24
 800377a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800377e:	2f00      	cmp	r7, #0
 8003780:	f001 852f 	beq.w	80051e2 <d_print_comp+0x25ee>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	3b19      	subs	r3, #25
 800378a:	2b02      	cmp	r3, #2
 800378c:	f201 8529 	bhi.w	80051e2 <d_print_comp+0x25ee>
 8003790:	4623      	mov	r3, r4
 8003792:	f04f 0801 	mov.w	r8, #1
 8003796:	464c      	mov	r4, r9
 8003798:	469c      	mov	ip, r3
 800379a:	e00e      	b.n	80037ba <d_print_comp+0xbc6>
 800379c:	08011d03 	.word	0x08011d03
 80037a0:	08011cf7 	.word	0x08011cf7
 80037a4:	0801122c 	.word	0x0801122c
 80037a8:	08011ce4 	.word	0x08011ce4
 80037ac:	08011cf4 	.word	0x08011cf4
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	3b19      	subs	r3, #25
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d81d      	bhi.n	80037f6 <d_print_comp+0xc02>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 80037c0:	aa18      	add	r2, sp, #96	; 0x60
 80037c2:	eb02 0b0e 	add.w	fp, r2, lr
 80037c6:	b99b      	cbnz	r3, 80037f0 <d_print_comp+0xbfc>
 80037c8:	f1b8 0f03 	cmp.w	r8, #3
 80037cc:	f201 8517 	bhi.w	80051fe <d_print_comp+0x260a>
 80037d0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80037d4:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 80037d8:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80037dc:	f84b 4c40 	str.w	r4, [fp, #-64]
 80037e0:	2301      	movs	r3, #1
 80037e2:	eb09 040e 	add.w	r4, r9, lr
 80037e6:	f8cc 4114 	str.w	r4, [ip, #276]	; 0x114
 80037ea:	f108 0801 	add.w	r8, r8, #1
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	683f      	ldr	r7, [r7, #0]
 80037f2:	2f00      	cmp	r7, #0
 80037f4:	d1dc      	bne.n	80037b0 <d_print_comp+0xbbc>
 80037f6:	68ea      	ldr	r2, [r5, #12]
 80037f8:	4631      	mov	r1, r6
 80037fa:	4660      	mov	r0, ip
 80037fc:	4664      	mov	r4, ip
 80037fe:	f7ff f9f9 	bl	8002bf4 <d_print_comp>
 8003802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003804:	9a01      	ldr	r2, [sp, #4]
 8003806:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800380a:	b9bb      	cbnz	r3, 800383c <d_print_comp+0xc48>
 800380c:	f1b8 0f01 	cmp.w	r8, #1
 8003810:	d00c      	beq.n	800382c <d_print_comp+0xc38>
 8003812:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 8003816:	af0c      	add	r7, sp, #48	; 0x30
 8003818:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 800381c:	4631      	mov	r1, r6
 800381e:	f1a8 0810 	sub.w	r8, r8, #16
 8003822:	4620      	mov	r0, r4
 8003824:	f002 f87c 	bl	8005920 <d_print_mod>
 8003828:	4547      	cmp	r7, r8
 800382a:	d1f5      	bne.n	8003818 <d_print_comp+0xc24>
 800382c:	4631      	mov	r1, r6
 800382e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003832:	f105 0208 	add.w	r2, r5, #8
 8003836:	4620      	mov	r0, r4
 8003838:	f002 fdca 	bl	80063d0 <d_print_array_type.isra.14>
 800383c:	9905      	ldr	r1, [sp, #20]
 800383e:	686a      	ldr	r2, [r5, #4]
 8003840:	f7ff bacb 	b.w	8002dda <d_print_comp+0x1e6>
 8003844:	06b2      	lsls	r2, r6, #26
 8003846:	f026 0860 	bic.w	r8, r6, #96	; 0x60
 800384a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800384e:	f101 825a 	bmi.w	8004d06 <d_print_comp+0x2112>
 8003852:	68aa      	ldr	r2, [r5, #8]
 8003854:	b11a      	cbz	r2, 800385e <d_print_comp+0xc6a>
 8003856:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 800385a:	f001 85c3 	beq.w	80053e4 <d_print_comp+0x27f0>
 800385e:	4641      	mov	r1, r8
 8003860:	f105 020c 	add.w	r2, r5, #12
 8003864:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003868:	4620      	mov	r0, r4
 800386a:	f002 fb87 	bl	8005f7c <d_print_function_type.isra.15>
 800386e:	9905      	ldr	r1, [sp, #20]
 8003870:	686a      	ldr	r2, [r5, #4]
 8003872:	f7ff bab2 	b.w	8002dda <d_print_comp+0x1e6>
 8003876:	4fcb      	ldr	r7, [pc, #812]	; (8003ba4 <d_print_comp+0xfb0>)
 8003878:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800387c:	f107 0815 	add.w	r8, r7, #21
 8003880:	f04f 0900 	mov.w	r9, #0
 8003884:	e016      	b.n	80038b4 <d_print_comp+0xcc0>
 8003886:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800388a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800388e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003892:	4798      	blx	r3
 8003894:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003898:	3301      	adds	r3, #1
 800389a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800389e:	2200      	movs	r2, #0
 80038a0:	2301      	movs	r3, #1
 80038a2:	45b8      	cmp	r8, r7
 80038a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038a8:	f804 a002 	strb.w	sl, [r4, r2]
 80038ac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038b0:	f000 8789 	beq.w	80047c6 <d_print_comp+0x1bd2>
 80038b4:	2bff      	cmp	r3, #255	; 0xff
 80038b6:	4619      	mov	r1, r3
 80038b8:	4620      	mov	r0, r4
 80038ba:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038be:	d0e2      	beq.n	8003886 <d_print_comp+0xc92>
 80038c0:	461a      	mov	r2, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	e7ed      	b.n	80038a2 <d_print_comp+0xcae>
 80038c6:	4fb8      	ldr	r7, [pc, #736]	; (8003ba8 <d_print_comp+0xfb4>)
 80038c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038cc:	f107 0810 	add.w	r8, r7, #16
 80038d0:	f04f 0900 	mov.w	r9, #0
 80038d4:	e016      	b.n	8003904 <d_print_comp+0xd10>
 80038d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80038e2:	4798      	blx	r3
 80038e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80038e8:	3301      	adds	r3, #1
 80038ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80038ee:	2200      	movs	r2, #0
 80038f0:	2301      	movs	r3, #1
 80038f2:	45b8      	cmp	r8, r7
 80038f4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038f8:	f804 a002 	strb.w	sl, [r4, r2]
 80038fc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003900:	f000 876a 	beq.w	80047d8 <d_print_comp+0x1be4>
 8003904:	2bff      	cmp	r3, #255	; 0xff
 8003906:	4619      	mov	r1, r3
 8003908:	4620      	mov	r0, r4
 800390a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800390e:	d0e2      	beq.n	80038d6 <d_print_comp+0xce2>
 8003910:	461a      	mov	r2, r3
 8003912:	3301      	adds	r3, #1
 8003914:	e7ed      	b.n	80038f2 <d_print_comp+0xcfe>
 8003916:	4fa5      	ldr	r7, [pc, #660]	; (8003bac <d_print_comp+0xfb8>)
 8003918:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800391c:	f107 0812 	add.w	r8, r7, #18
 8003920:	f04f 0900 	mov.w	r9, #0
 8003924:	e016      	b.n	8003954 <d_print_comp+0xd60>
 8003926:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800392a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800392e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003932:	4798      	blx	r3
 8003934:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003938:	3301      	adds	r3, #1
 800393a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800393e:	2200      	movs	r2, #0
 8003940:	2301      	movs	r3, #1
 8003942:	45b8      	cmp	r8, r7
 8003944:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003948:	f804 a002 	strb.w	sl, [r4, r2]
 800394c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003950:	f000 8727 	beq.w	80047a2 <d_print_comp+0x1bae>
 8003954:	2bff      	cmp	r3, #255	; 0xff
 8003956:	4619      	mov	r1, r3
 8003958:	4620      	mov	r0, r4
 800395a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800395e:	d0e2      	beq.n	8003926 <d_print_comp+0xd32>
 8003960:	461a      	mov	r2, r3
 8003962:	3301      	adds	r3, #1
 8003964:	e7ed      	b.n	8003942 <d_print_comp+0xd4e>
 8003966:	4f92      	ldr	r7, [pc, #584]	; (8003bb0 <d_print_comp+0xfbc>)
 8003968:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800396c:	f107 080d 	add.w	r8, r7, #13
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	e016      	b.n	80039a4 <d_print_comp+0xdb0>
 8003976:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800397a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800397e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003982:	4798      	blx	r3
 8003984:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003988:	3301      	adds	r3, #1
 800398a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800398e:	2200      	movs	r2, #0
 8003990:	2301      	movs	r3, #1
 8003992:	45b8      	cmp	r8, r7
 8003994:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003998:	f804 a002 	strb.w	sl, [r4, r2]
 800399c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039a0:	f000 8708 	beq.w	80047b4 <d_print_comp+0x1bc0>
 80039a4:	2bff      	cmp	r3, #255	; 0xff
 80039a6:	4619      	mov	r1, r3
 80039a8:	4620      	mov	r0, r4
 80039aa:	f817 ab01 	ldrb.w	sl, [r7], #1
 80039ae:	d0e2      	beq.n	8003976 <d_print_comp+0xd82>
 80039b0:	461a      	mov	r2, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	e7ed      	b.n	8003992 <d_print_comp+0xd9e>
 80039b6:	4f7f      	ldr	r7, [pc, #508]	; (8003bb4 <d_print_comp+0xfc0>)
 80039b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039bc:	f107 0818 	add.w	r8, r7, #24
 80039c0:	f04f 0900 	mov.w	r9, #0
 80039c4:	e016      	b.n	80039f4 <d_print_comp+0xe00>
 80039c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039d2:	4798      	blx	r3
 80039d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039d8:	3301      	adds	r3, #1
 80039da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039de:	2200      	movs	r2, #0
 80039e0:	2301      	movs	r3, #1
 80039e2:	45b8      	cmp	r8, r7
 80039e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039e8:	f804 a002 	strb.w	sl, [r4, r2]
 80039ec:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039f0:	f000 8699 	beq.w	8004726 <d_print_comp+0x1b32>
 80039f4:	2bff      	cmp	r3, #255	; 0xff
 80039f6:	4619      	mov	r1, r3
 80039f8:	4620      	mov	r0, r4
 80039fa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039fe:	d0e2      	beq.n	80039c6 <d_print_comp+0xdd2>
 8003a00:	461a      	mov	r2, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	e7ed      	b.n	80039e2 <d_print_comp+0xdee>
 8003a06:	4f6c      	ldr	r7, [pc, #432]	; (8003bb8 <d_print_comp+0xfc4>)
 8003a08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a0c:	f107 0808 	add.w	r8, r7, #8
 8003a10:	f04f 0900 	mov.w	r9, #0
 8003a14:	e016      	b.n	8003a44 <d_print_comp+0xe50>
 8003a16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a22:	4798      	blx	r3
 8003a24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2301      	movs	r3, #1
 8003a32:	45b8      	cmp	r8, r7
 8003a34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a38:	f804 a002 	strb.w	sl, [r4, r2]
 8003a3c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a40:	f000 86a6 	beq.w	8004790 <d_print_comp+0x1b9c>
 8003a44:	2bff      	cmp	r3, #255	; 0xff
 8003a46:	4619      	mov	r1, r3
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003a4e:	d0e2      	beq.n	8003a16 <d_print_comp+0xe22>
 8003a50:	461a      	mov	r2, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	e7ed      	b.n	8003a32 <d_print_comp+0xe3e>
 8003a56:	4f59      	ldr	r7, [pc, #356]	; (8003bbc <d_print_comp+0xfc8>)
 8003a58:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a5c:	f107 080b 	add.w	r8, r7, #11
 8003a60:	f04f 0900 	mov.w	r9, #0
 8003a64:	e016      	b.n	8003a94 <d_print_comp+0xea0>
 8003a66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a6e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a72:	4798      	blx	r3
 8003a74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2301      	movs	r3, #1
 8003a82:	45b8      	cmp	r8, r7
 8003a84:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a88:	f804 a002 	strb.w	sl, [r4, r2]
 8003a8c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a90:	f000 85cc 	beq.w	800462c <d_print_comp+0x1a38>
 8003a94:	2bff      	cmp	r3, #255	; 0xff
 8003a96:	4619      	mov	r1, r3
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003a9e:	d0e2      	beq.n	8003a66 <d_print_comp+0xe72>
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	e7ed      	b.n	8003a82 <d_print_comp+0xe8e>
 8003aa6:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003aaa:	2fff      	cmp	r7, #255	; 0xff
 8003aac:	d112      	bne.n	8003ad4 <d_print_comp+0xee0>
 8003aae:	f04f 0800 	mov.w	r8, #0
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ab8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003abc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4798      	blx	r3
 8003ac4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ac8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003acc:	3301      	adds	r3, #1
 8003ace:	4647      	mov	r7, r8
 8003ad0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003ad4:	237e      	movs	r3, #126	; 0x7e
 8003ad6:	1c7a      	adds	r2, r7, #1
 8003ad8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003adc:	55e3      	strb	r3, [r4, r7]
 8003ade:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	68ea      	ldr	r2, [r5, #12]
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7ff f884 	bl	8002bf4 <d_print_comp>
 8003aec:	9905      	ldr	r1, [sp, #20]
 8003aee:	686a      	ldr	r2, [r5, #4]
 8003af0:	f7ff b973 	b.w	8002dda <d_print_comp+0x1e6>
 8003af4:	4631      	mov	r1, r6
 8003af6:	68ea      	ldr	r2, [r5, #12]
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7ff f87b 	bl	8002bf4 <d_print_comp>
 8003afe:	9905      	ldr	r1, [sp, #20]
 8003b00:	686a      	ldr	r2, [r5, #4]
 8003b02:	f7ff b96a 	b.w	8002dda <d_print_comp+0x1e6>
 8003b06:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003b0a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003b0e:	f1b8 0f00 	cmp.w	r8, #0
 8003b12:	f000 878b 	beq.w	8004a2c <d_print_comp+0x1e38>
 8003b16:	4e2a      	ldr	r6, [pc, #168]	; (8003bc0 <d_print_comp+0xfcc>)
 8003b18:	f04f 0900 	mov.w	r9, #0
 8003b1c:	f106 0a06 	add.w	sl, r6, #6
 8003b20:	e015      	b.n	8003b4e <d_print_comp+0xf5a>
 8003b22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b2a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b2e:	4798      	blx	r3
 8003b30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b34:	3301      	adds	r3, #1
 8003b36:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	45b2      	cmp	sl, r6
 8003b40:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003b44:	54a7      	strb	r7, [r4, r2]
 8003b46:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b4a:	f000 868f 	beq.w	800486c <d_print_comp+0x1c78>
 8003b4e:	2bff      	cmp	r3, #255	; 0xff
 8003b50:	4619      	mov	r1, r3
 8003b52:	4620      	mov	r0, r4
 8003b54:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003b58:	d0e3      	beq.n	8003b22 <d_print_comp+0xf2e>
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e7ee      	b.n	8003b3e <d_print_comp+0xf4a>
 8003b60:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f040 86d1 	bne.w	800490c <d_print_comp+0x1d18>
 8003b6a:	f105 0108 	add.w	r1, r5, #8
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7fc fe4a 	bl	8000808 <d_lookup_template_argument.isra.10>
 8003b74:	4602      	mov	r2, r0
 8003b76:	2800      	cmp	r0, #0
 8003b78:	f001 8271 	beq.w	800505e <d_print_comp+0x246a>
 8003b7c:	7803      	ldrb	r3, [r0, #0]
 8003b7e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b80:	f001 8262 	beq.w	8005048 <d_print_comp+0x2454>
 8003b84:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4620      	mov	r0, r4
 8003b92:	f7ff f82f 	bl	8002bf4 <d_print_comp>
 8003b96:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8003b9a:	9905      	ldr	r1, [sp, #20]
 8003b9c:	686a      	ldr	r2, [r5, #4]
 8003b9e:	f7ff b91c 	b.w	8002dda <d_print_comp+0x1e6>
 8003ba2:	bf00      	nop
 8003ba4:	08011c07 	.word	0x08011c07
 8003ba8:	08011bf3 	.word	0x08011bf3
 8003bac:	08011bdf 	.word	0x08011bdf
 8003bb0:	08011bd0 	.word	0x08011bd0
 8003bb4:	08011bab 	.word	0x08011bab
 8003bb8:	08011b9f 	.word	0x08011b9f
 8003bbc:	08011b94 	.word	0x08011b94
 8003bc0:	08011d74 	.word	0x08011d74
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	0771      	lsls	r1, r6, #29
 8003bc8:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
 8003bcc:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8003bd0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003bd4:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003bd8:	68af      	ldr	r7, [r5, #8]
 8003bda:	d505      	bpl.n	8003be8 <d_print_comp+0xff4>
 8003bdc:	783b      	ldrb	r3, [r7, #0]
 8003bde:	b91b      	cbnz	r3, 8003be8 <d_print_comp+0xff4>
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	2a06      	cmp	r2, #6
 8003be4:	f001 8433 	beq.w	800544e <d_print_comp+0x285a>
 8003be8:	463a      	mov	r2, r7
 8003bea:	4631      	mov	r1, r6
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7ff f801 	bl	8002bf4 <d_print_comp>
 8003bf2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bf6:	2b3c      	cmp	r3, #60	; 0x3c
 8003bf8:	f001 8206 	beq.w	8005008 <d_print_comp+0x2414>
 8003bfc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003c00:	2fff      	cmp	r7, #255	; 0xff
 8003c02:	d112      	bne.n	8003c2a <d_print_comp+0x1036>
 8003c04:	f04f 0a00 	mov.w	sl, #0
 8003c08:	4639      	mov	r1, r7
 8003c0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c0e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003c12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c16:	4620      	mov	r0, r4
 8003c18:	4798      	blx	r3
 8003c1a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c1e:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003c22:	3301      	adds	r3, #1
 8003c24:	4657      	mov	r7, sl
 8003c26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c2a:	233c      	movs	r3, #60	; 0x3c
 8003c2c:	1c7a      	adds	r2, r7, #1
 8003c2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c32:	55e3      	strb	r3, [r4, r7]
 8003c34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c38:	4631      	mov	r1, r6
 8003c3a:	68ea      	ldr	r2, [r5, #12]
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fe ffd9 	bl	8002bf4 <d_print_comp>
 8003c42:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003c46:	2b3e      	cmp	r3, #62	; 0x3e
 8003c48:	f001 806f 	beq.w	8004d2a <d_print_comp+0x2136>
 8003c4c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003c50:	2fff      	cmp	r7, #255	; 0xff
 8003c52:	d111      	bne.n	8003c78 <d_print_comp+0x1084>
 8003c54:	2600      	movs	r6, #0
 8003c56:	4639      	mov	r1, r7
 8003c58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c5c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003c60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c64:	4620      	mov	r0, r4
 8003c66:	4798      	blx	r3
 8003c68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c6c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003c70:	3301      	adds	r3, #1
 8003c72:	4637      	mov	r7, r6
 8003c74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c78:	233e      	movs	r3, #62	; 0x3e
 8003c7a:	1c7a      	adds	r2, r7, #1
 8003c7c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c80:	55e3      	strb	r3, [r4, r7]
 8003c82:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c86:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c8a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
 8003c8e:	9905      	ldr	r1, [sp, #20]
 8003c90:	686a      	ldr	r2, [r5, #4]
 8003c92:	f7ff b8a2 	b.w	8002dda <d_print_comp+0x1e6>
 8003c96:	4fda      	ldr	r7, [pc, #872]	; (8004000 <d_print_comp+0x140c>)
 8003c98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c9c:	f107 0811 	add.w	r8, r7, #17
 8003ca0:	f04f 0900 	mov.w	r9, #0
 8003ca4:	e016      	b.n	8003cd4 <d_print_comp+0x10e0>
 8003ca6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003caa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cb2:	4798      	blx	r3
 8003cb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	45b8      	cmp	r8, r7
 8003cc4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003cc8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ccc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003cd0:	f000 84eb 	beq.w	80046aa <d_print_comp+0x1ab6>
 8003cd4:	2bff      	cmp	r3, #255	; 0xff
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cde:	d0e2      	beq.n	8003ca6 <d_print_comp+0x10b2>
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	e7ed      	b.n	8003cc2 <d_print_comp+0x10ce>
 8003ce6:	4fc7      	ldr	r7, [pc, #796]	; (8004004 <d_print_comp+0x1410>)
 8003ce8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cec:	f107 0815 	add.w	r8, r7, #21
 8003cf0:	f04f 0900 	mov.w	r9, #0
 8003cf4:	e016      	b.n	8003d24 <d_print_comp+0x1130>
 8003cf6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cfe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d02:	4798      	blx	r3
 8003d04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2301      	movs	r3, #1
 8003d12:	45b8      	cmp	r8, r7
 8003d14:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d18:	f804 a002 	strb.w	sl, [r4, r2]
 8003d1c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d20:	f000 84cc 	beq.w	80046bc <d_print_comp+0x1ac8>
 8003d24:	2bff      	cmp	r3, #255	; 0xff
 8003d26:	4619      	mov	r1, r3
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d2e:	d0e2      	beq.n	8003cf6 <d_print_comp+0x1102>
 8003d30:	461a      	mov	r2, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	e7ed      	b.n	8003d12 <d_print_comp+0x111e>
 8003d36:	4fb4      	ldr	r7, [pc, #720]	; (8004008 <d_print_comp+0x1414>)
 8003d38:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d3c:	f107 0819 	add.w	r8, r7, #25
 8003d40:	f04f 0900 	mov.w	r9, #0
 8003d44:	e016      	b.n	8003d74 <d_print_comp+0x1180>
 8003d46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d4e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d52:	4798      	blx	r3
 8003d54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2301      	movs	r3, #1
 8003d62:	45b8      	cmp	r8, r7
 8003d64:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d68:	f804 a002 	strb.w	sl, [r4, r2]
 8003d6c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d70:	f000 8489 	beq.w	8004686 <d_print_comp+0x1a92>
 8003d74:	2bff      	cmp	r3, #255	; 0xff
 8003d76:	4619      	mov	r1, r3
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d7e:	d0e2      	beq.n	8003d46 <d_print_comp+0x1152>
 8003d80:	461a      	mov	r2, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	e7ed      	b.n	8003d62 <d_print_comp+0x116e>
 8003d86:	4fa1      	ldr	r7, [pc, #644]	; (800400c <d_print_comp+0x1418>)
 8003d88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d8c:	f107 0816 	add.w	r8, r7, #22
 8003d90:	f04f 0900 	mov.w	r9, #0
 8003d94:	e016      	b.n	8003dc4 <d_print_comp+0x11d0>
 8003d96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d9e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003da2:	4798      	blx	r3
 8003da4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003da8:	3301      	adds	r3, #1
 8003daa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dae:	2200      	movs	r2, #0
 8003db0:	2301      	movs	r3, #1
 8003db2:	45b8      	cmp	r8, r7
 8003db4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003db8:	f804 a002 	strb.w	sl, [r4, r2]
 8003dbc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003dc0:	f000 846a 	beq.w	8004698 <d_print_comp+0x1aa4>
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dce:	d0e2      	beq.n	8003d96 <d_print_comp+0x11a2>
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	e7ed      	b.n	8003db2 <d_print_comp+0x11be>
 8003dd6:	4f8e      	ldr	r7, [pc, #568]	; (8004010 <d_print_comp+0x141c>)
 8003dd8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ddc:	f107 0813 	add.w	r8, r7, #19
 8003de0:	f04f 0900 	mov.w	r9, #0
 8003de4:	e016      	b.n	8003e14 <d_print_comp+0x1220>
 8003de6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003df2:	4798      	blx	r3
 8003df4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2301      	movs	r3, #1
 8003e02:	45b8      	cmp	r8, r7
 8003e04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e08:	f804 a002 	strb.w	sl, [r4, r2]
 8003e0c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e10:	f000 8427 	beq.w	8004662 <d_print_comp+0x1a6e>
 8003e14:	2bff      	cmp	r3, #255	; 0xff
 8003e16:	4619      	mov	r1, r3
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e1e:	d0e2      	beq.n	8003de6 <d_print_comp+0x11f2>
 8003e20:	461a      	mov	r2, r3
 8003e22:	3301      	adds	r3, #1
 8003e24:	e7ed      	b.n	8003e02 <d_print_comp+0x120e>
 8003e26:	4f7b      	ldr	r7, [pc, #492]	; (8004014 <d_print_comp+0x1420>)
 8003e28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e2c:	f107 080f 	add.w	r8, r7, #15
 8003e30:	f04f 0900 	mov.w	r9, #0
 8003e34:	e016      	b.n	8003e64 <d_print_comp+0x1270>
 8003e36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e42:	4798      	blx	r3
 8003e44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2301      	movs	r3, #1
 8003e52:	45b8      	cmp	r8, r7
 8003e54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e58:	f804 a002 	strb.w	sl, [r4, r2]
 8003e5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e60:	f000 8408 	beq.w	8004674 <d_print_comp+0x1a80>
 8003e64:	2bff      	cmp	r3, #255	; 0xff
 8003e66:	4619      	mov	r1, r3
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e6e:	d0e2      	beq.n	8003e36 <d_print_comp+0x1242>
 8003e70:	461a      	mov	r2, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	e7ed      	b.n	8003e52 <d_print_comp+0x125e>
 8003e76:	4f68      	ldr	r7, [pc, #416]	; (8004018 <d_print_comp+0x1424>)
 8003e78:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e7c:	f107 081a 	add.w	r8, r7, #26
 8003e80:	f04f 0900 	mov.w	r9, #0
 8003e84:	e016      	b.n	8003eb4 <d_print_comp+0x12c0>
 8003e86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e8e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e92:	4798      	blx	r3
 8003e94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	45b8      	cmp	r8, r7
 8003ea4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ea8:	f804 a002 	strb.w	sl, [r4, r2]
 8003eac:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003eb0:	f000 83c5 	beq.w	800463e <d_print_comp+0x1a4a>
 8003eb4:	2bff      	cmp	r3, #255	; 0xff
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003ebe:	d0e2      	beq.n	8003e86 <d_print_comp+0x1292>
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	e7ed      	b.n	8003ea2 <d_print_comp+0x12ae>
 8003ec6:	4f55      	ldr	r7, [pc, #340]	; (800401c <d_print_comp+0x1428>)
 8003ec8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ecc:	f107 0811 	add.w	r8, r7, #17
 8003ed0:	f04f 0900 	mov.w	r9, #0
 8003ed4:	e016      	b.n	8003f04 <d_print_comp+0x1310>
 8003ed6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003eda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ede:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ee2:	4798      	blx	r3
 8003ee4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	45b8      	cmp	r8, r7
 8003ef4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ef8:	f804 a002 	strb.w	sl, [r4, r2]
 8003efc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003f00:	f000 83a6 	beq.w	8004650 <d_print_comp+0x1a5c>
 8003f04:	2bff      	cmp	r3, #255	; 0xff
 8003f06:	4619      	mov	r1, r3
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003f0e:	d0e2      	beq.n	8003ed6 <d_print_comp+0x12e2>
 8003f10:	461a      	mov	r2, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	e7ed      	b.n	8003ef2 <d_print_comp+0x12fe>
 8003f16:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8003f1a:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8003f1e:	2f00      	cmp	r7, #0
 8003f20:	f040 85ae 	bne.w	8004a80 <d_print_comp+0x1e8c>
 8003f24:	f899 2000 	ldrb.w	r2, [r9]
 8003f28:	2a05      	cmp	r2, #5
 8003f2a:	f001 8180 	beq.w	800522e <d_print_comp+0x263a>
 8003f2e:	f899 3000 	ldrb.w	r3, [r9]
 8003f32:	2b23      	cmp	r3, #35	; 0x23
 8003f34:	f000 85a0 	beq.w	8004a78 <d_print_comp+0x1e84>
 8003f38:	782a      	ldrb	r2, [r5, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f000 859c 	beq.w	8004a78 <d_print_comp+0x1e84>
 8003f40:	2b24      	cmp	r3, #36	; 0x24
 8003f42:	f001 8162 	beq.w	800520a <d_print_comp+0x2616>
 8003f46:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f4a:	46a9      	mov	r9, r5
 8003f4c:	ab18      	add	r3, sp, #96	; 0x60
 8003f4e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8003f52:	f843 cd40 	str.w	ip, [r3, #-64]!
 8003f56:	2100      	movs	r1, #0
 8003f58:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8003f5c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f60:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f64:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003f68:	e010      	b.n	8003f8c <d_print_comp+0x1398>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	ab18      	add	r3, sp, #96	; 0x60
 8003f6e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003f72:	f843 1d40 	str.w	r1, [r3, #-64]!
 8003f76:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003f7a:	9509      	str	r5, [sp, #36]	; 0x24
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f86:	46a9      	mov	r9, r5
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	d0eb      	beq.n	8003f64 <d_print_comp+0x1370>
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f7fe fe30 	bl	8002bf4 <d_print_comp>
 8003f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f96:	b923      	cbnz	r3, 8003fa2 <d_print_comp+0x13ae>
 8003f98:	464a      	mov	r2, r9
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f001 fcbf 	bl	8005920 <d_print_mod>
 8003fa2:	9b08      	ldr	r3, [sp, #32]
 8003fa4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003fa8:	b10f      	cbz	r7, 8003fae <d_print_comp+0x13ba>
 8003faa:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8003fae:	9905      	ldr	r1, [sp, #20]
 8003fb0:	686a      	ldr	r2, [r5, #4]
 8003fb2:	f7fe bf12 	b.w	8002dda <d_print_comp+0x1e6>
 8003fb6:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003fba:	4663      	mov	r3, ip
 8003fbc:	f1bc 0f00 	cmp.w	ip, #0
 8003fc0:	d0c3      	beq.n	8003f4a <d_print_comp+0x1356>
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	b951      	cbnz	r1, 8003fdc <d_print_comp+0x13e8>
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	f1a2 0e19 	sub.w	lr, r2, #25
 8003fce:	f1be 0f02 	cmp.w	lr, #2
 8003fd2:	f201 80fc 	bhi.w	80051ce <d_print_comp+0x25da>
 8003fd6:	4290      	cmp	r0, r2
 8003fd8:	f001 80f0 	beq.w	80051bc <d_print_comp+0x25c8>
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1ef      	bne.n	8003fc2 <d_print_comp+0x13ce>
 8003fe2:	e7b2      	b.n	8003f4a <d_print_comp+0x1356>
 8003fe4:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	f43e aef6 	beq.w	8002dda <d_print_comp+0x1e6>
 8003fee:	4437      	add	r7, r6
 8003ff0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ff4:	3f01      	subs	r7, #1
 8003ff6:	3e01      	subs	r6, #1
 8003ff8:	f04f 0800 	mov.w	r8, #0
 8003ffc:	e027      	b.n	800404e <d_print_comp+0x145a>
 8003ffe:	bf00      	nop
 8004000:	08011cab 	.word	0x08011cab
 8004004:	08011c93 	.word	0x08011c93
 8004008:	08011c77 	.word	0x08011c77
 800400c:	08011c5f 	.word	0x08011c5f
 8004010:	08011c4b 	.word	0x08011c4b
 8004014:	08011c3b 	.word	0x08011c3b
 8004018:	08011c1f 	.word	0x08011c1f
 800401c:	08011c0b 	.word	0x08011c0b
 8004020:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004024:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004028:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800402c:	4798      	blx	r3
 800402e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004032:	3301      	adds	r3, #1
 8004034:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004038:	2200      	movs	r2, #0
 800403a:	2301      	movs	r3, #1
 800403c:	42b7      	cmp	r7, r6
 800403e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004042:	f804 9002 	strb.w	r9, [r4, r2]
 8004046:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800404a:	f000 83ce 	beq.w	80047ea <d_print_comp+0x1bf6>
 800404e:	2bff      	cmp	r3, #255	; 0xff
 8004050:	4619      	mov	r1, r3
 8004052:	4620      	mov	r0, r4
 8004054:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8004058:	d0e2      	beq.n	8004020 <d_print_comp+0x142c>
 800405a:	461a      	mov	r2, r3
 800405c:	3301      	adds	r3, #1
 800405e:	e7ed      	b.n	800403c <d_print_comp+0x1448>
 8004060:	4631      	mov	r1, r6
 8004062:	68aa      	ldr	r2, [r5, #8]
 8004064:	4620      	mov	r0, r4
 8004066:	f7fe fdc5 	bl	8002bf4 <d_print_comp>
 800406a:	9905      	ldr	r1, [sp, #20]
 800406c:	686a      	ldr	r2, [r5, #4]
 800406e:	f7fe beb4 	b.w	8002dda <d_print_comp+0x1e6>
 8004072:	f016 0604 	ands.w	r6, r6, #4
 8004076:	68a8      	ldr	r0, [r5, #8]
 8004078:	f040 8505 	bne.w	8004a86 <d_print_comp+0x1e92>
 800407c:	e9d0 7300 	ldrd	r7, r3, [r0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f43e aeaa 	beq.w	8002dda <d_print_comp+0x1e6>
 8004086:	eb07 0803 	add.w	r8, r7, r3
 800408a:	f108 38ff 	add.w	r8, r8, #4294967295
 800408e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004092:	3f01      	subs	r7, #1
 8004094:	46b1      	mov	r9, r6
 8004096:	e015      	b.n	80040c4 <d_print_comp+0x14d0>
 8004098:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800409c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040a0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80040a4:	4798      	blx	r3
 80040a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80040aa:	3301      	adds	r3, #1
 80040ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80040b0:	2200      	movs	r2, #0
 80040b2:	2301      	movs	r3, #1
 80040b4:	45b8      	cmp	r8, r7
 80040b6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80040ba:	54a6      	strb	r6, [r4, r2]
 80040bc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80040c0:	f000 8545 	beq.w	8004b4e <d_print_comp+0x1f5a>
 80040c4:	2bff      	cmp	r3, #255	; 0xff
 80040c6:	4619      	mov	r1, r3
 80040c8:	4620      	mov	r0, r4
 80040ca:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 80040ce:	d0e3      	beq.n	8004098 <d_print_comp+0x14a4>
 80040d0:	461a      	mov	r2, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	e7ee      	b.n	80040b4 <d_print_comp+0x14c0>
 80040d6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80040da:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80040de:	9302      	str	r3, [sp, #8]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80040e6:	f1b8 0f00 	cmp.w	r8, #0
 80040ea:	d025      	beq.n	8004138 <d_print_comp+0x1544>
 80040ec:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	f10d 0920 	add.w	r9, sp, #32
 80040f6:	4623      	mov	r3, r4
 80040f8:	4617      	mov	r7, r2
 80040fa:	4644      	mov	r4, r8
 80040fc:	4692      	mov	sl, r2
 80040fe:	4649      	mov	r1, r9
 8004100:	46ab      	mov	fp, r5
 8004102:	4698      	mov	r8, r3
 8004104:	7825      	ldrb	r5, [r4, #0]
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	600a      	str	r2, [r1, #0]
 800410a:	4628      	mov	r0, r5
 800410c:	e9c1 4a01 	strd	r4, sl, [r1, #4]
 8004110:	60cb      	str	r3, [r1, #12]
 8004112:	3701      	adds	r7, #1
 8004114:	460a      	mov	r2, r1
 8004116:	f7fc f97f 	bl	8000418 <is_fnqual_component_type>
 800411a:	2800      	cmp	r0, #0
 800411c:	f000 87c8 	beq.w	80050b0 <d_print_comp+0x24bc>
 8004120:	68a4      	ldr	r4, [r4, #8]
 8004122:	2c00      	cmp	r4, #0
 8004124:	f001 8057 	beq.w	80051d6 <d_print_comp+0x25e2>
 8004128:	2f04      	cmp	r7, #4
 800412a:	f101 0110 	add.w	r1, r1, #16
 800412e:	d1e9      	bne.n	8004104 <d_print_comp+0x1510>
 8004130:	4644      	mov	r4, r8
 8004132:	465d      	mov	r5, fp
 8004134:	f8c8 2114 	str.w	r2, [r8, #276]	; 0x114
 8004138:	2301      	movs	r3, #1
 800413a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800413e:	9905      	ldr	r1, [sp, #20]
 8004140:	686a      	ldr	r2, [r5, #4]
 8004142:	f7fe be4a 	b.w	8002dda <d_print_comp+0x1e6>
 8004146:	f016 0604 	ands.w	r6, r6, #4
 800414a:	68af      	ldr	r7, [r5, #8]
 800414c:	f040 8405 	bne.w	800495a <d_print_comp+0x1d66>
 8004150:	68eb      	ldr	r3, [r5, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f43e ae41 	beq.w	8002dda <d_print_comp+0x1e6>
 8004158:	eb07 0803 	add.w	r8, r7, r3
 800415c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004160:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004164:	3f01      	subs	r7, #1
 8004166:	46b1      	mov	r9, r6
 8004168:	e015      	b.n	8004196 <d_print_comp+0x15a2>
 800416a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800416e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004172:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004176:	4798      	blx	r3
 8004178:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800417c:	3301      	adds	r3, #1
 800417e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004182:	2200      	movs	r2, #0
 8004184:	2301      	movs	r3, #1
 8004186:	45b8      	cmp	r8, r7
 8004188:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800418c:	54a6      	strb	r6, [r4, r2]
 800418e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004192:	f000 84e0 	beq.w	8004b56 <d_print_comp+0x1f62>
 8004196:	2bff      	cmp	r3, #255	; 0xff
 8004198:	4619      	mov	r1, r3
 800419a:	4620      	mov	r0, r4
 800419c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 80041a0:	d0e3      	beq.n	800416a <d_print_comp+0x1576>
 80041a2:	461a      	mov	r2, r3
 80041a4:	3301      	adds	r3, #1
 80041a6:	e7ee      	b.n	8004186 <d_print_comp+0x1592>
 80041a8:	68aa      	ldr	r2, [r5, #8]
 80041aa:	4631      	mov	r1, r6
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7fe fd21 	bl	8002bf4 <d_print_comp>
 80041b2:	f016 0904 	ands.w	r9, r6, #4
 80041b6:	f000 8681 	beq.w	8004ebc <d_print_comp+0x22c8>
 80041ba:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80041be:	2fff      	cmp	r7, #255	; 0xff
 80041c0:	d112      	bne.n	80041e8 <d_print_comp+0x15f4>
 80041c2:	f04f 0800 	mov.w	r8, #0
 80041c6:	4639      	mov	r1, r7
 80041c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80041d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041d4:	4620      	mov	r0, r4
 80041d6:	4798      	blx	r3
 80041d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041dc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80041e0:	3301      	adds	r3, #1
 80041e2:	4647      	mov	r7, r8
 80041e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80041e8:	232e      	movs	r3, #46	; 0x2e
 80041ea:	1c7a      	adds	r2, r7, #1
 80041ec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041f0:	55e3      	strb	r3, [r4, r7]
 80041f2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041f6:	68ef      	ldr	r7, [r5, #12]
 80041f8:	783b      	ldrb	r3, [r7, #0]
 80041fa:	2b46      	cmp	r3, #70	; 0x46
 80041fc:	f000 873a 	beq.w	8005074 <d_print_comp+0x2480>
 8004200:	463a      	mov	r2, r7
 8004202:	4631      	mov	r1, r6
 8004204:	4620      	mov	r0, r4
 8004206:	f7fe fcf5 	bl	8002bf4 <d_print_comp>
 800420a:	9905      	ldr	r1, [sp, #20]
 800420c:	686a      	ldr	r2, [r5, #4]
 800420e:	f7fe bde4 	b.w	8002dda <d_print_comp+0x1e6>
 8004212:	2301      	movs	r3, #1
 8004214:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004218:	686a      	ldr	r2, [r5, #4]
 800421a:	f7fe bdde 	b.w	8002dda <d_print_comp+0x1e6>
 800421e:	3701      	adds	r7, #1
 8004220:	454f      	cmp	r7, r9
 8004222:	f47e ae2b 	bne.w	8002e7c <d_print_comp+0x288>
 8004226:	9d03      	ldr	r5, [sp, #12]
 8004228:	9905      	ldr	r1, [sp, #20]
 800422a:	686a      	ldr	r2, [r5, #4]
 800422c:	f7fe bdd5 	b.w	8002dda <d_print_comp+0x1e6>
 8004230:	4631      	mov	r1, r6
 8004232:	68aa      	ldr	r2, [r5, #8]
 8004234:	4620      	mov	r0, r4
 8004236:	f7fe fcdd 	bl	8002bf4 <d_print_comp>
 800423a:	9905      	ldr	r1, [sp, #20]
 800423c:	686a      	ldr	r2, [r5, #4]
 800423e:	f7fe bdcc 	b.w	8002dda <d_print_comp+0x1e6>
 8004242:	4631      	mov	r1, r6
 8004244:	68aa      	ldr	r2, [r5, #8]
 8004246:	4620      	mov	r0, r4
 8004248:	f7fe fcd4 	bl	8002bf4 <d_print_comp>
 800424c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004250:	2fff      	cmp	r7, #255	; 0xff
 8004252:	d111      	bne.n	8004278 <d_print_comp+0x1684>
 8004254:	2600      	movs	r6, #0
 8004256:	4639      	mov	r1, r7
 8004258:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800425c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004260:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004264:	4620      	mov	r0, r4
 8004266:	4798      	blx	r3
 8004268:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800426c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004270:	3301      	adds	r3, #1
 8004272:	4637      	mov	r7, r6
 8004274:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004278:	1c7a      	adds	r2, r7, #1
 800427a:	2329      	movs	r3, #41	; 0x29
 800427c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004280:	55e3      	strb	r3, [r4, r7]
 8004282:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004286:	686a      	ldr	r2, [r5, #4]
 8004288:	9905      	ldr	r1, [sp, #20]
 800428a:	f7fe bda6 	b.w	8002dda <d_print_comp+0x1e6>
 800428e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004292:	68aa      	ldr	r2, [r5, #8]
 8004294:	4fd3      	ldr	r7, [pc, #844]	; (80045e4 <d_print_comp+0x19f0>)
 8004296:	3301      	adds	r3, #1
 8004298:	4631      	mov	r1, r6
 800429a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800429e:	4620      	mov	r0, r4
 80042a0:	f7fe fca8 	bl	8002bf4 <d_print_comp>
 80042a4:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 80042a8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042ac:	3a01      	subs	r2, #1
 80042ae:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 80042b2:	1cbe      	adds	r6, r7, #2
 80042b4:	f04f 0800 	mov.w	r8, #0
 80042b8:	e015      	b.n	80042e6 <d_print_comp+0x16f2>
 80042ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80042be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80042c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80042c6:	4798      	blx	r3
 80042c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80042cc:	3301      	adds	r3, #1
 80042ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80042d2:	2200      	movs	r2, #0
 80042d4:	2301      	movs	r3, #1
 80042d6:	42b7      	cmp	r7, r6
 80042d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042dc:	f804 9002 	strb.w	r9, [r4, r2]
 80042e0:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80042e4:	d011      	beq.n	800430a <d_print_comp+0x1716>
 80042e6:	2bff      	cmp	r3, #255	; 0xff
 80042e8:	4619      	mov	r1, r3
 80042ea:	4620      	mov	r0, r4
 80042ec:	f817 9b01 	ldrb.w	r9, [r7], #1
 80042f0:	d0e3      	beq.n	80042ba <d_print_comp+0x16c6>
 80042f2:	461a      	mov	r2, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	e7ee      	b.n	80042d6 <d_print_comp+0x16e2>
 80042f8:	4631      	mov	r1, r6
 80042fa:	68aa      	ldr	r2, [r5, #8]
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7fe fc79 	bl	8002bf4 <d_print_comp>
 8004302:	9905      	ldr	r1, [sp, #20]
 8004304:	686a      	ldr	r2, [r5, #4]
 8004306:	f7fe bd68 	b.w	8002dda <d_print_comp+0x1e6>
 800430a:	68ea      	ldr	r2, [r5, #12]
 800430c:	49b6      	ldr	r1, [pc, #728]	; (80045e8 <d_print_comp+0x19f4>)
 800430e:	3201      	adds	r2, #1
 8004310:	a808      	add	r0, sp, #32
 8004312:	f009 fe39 	bl	800df88 <sprintf>
 8004316:	a808      	add	r0, sp, #32
 8004318:	f002 fd5c 	bl	8006dd4 <strlen>
 800431c:	b328      	cbz	r0, 800436a <d_print_comp+0x1776>
 800431e:	ae08      	add	r6, sp, #32
 8004320:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004324:	1837      	adds	r7, r6, r0
 8004326:	f04f 0800 	mov.w	r8, #0
 800432a:	e015      	b.n	8004358 <d_print_comp+0x1764>
 800432c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004330:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004334:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004338:	4798      	blx	r3
 800433a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800433e:	3301      	adds	r3, #1
 8004340:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004344:	2200      	movs	r2, #0
 8004346:	2301      	movs	r3, #1
 8004348:	42be      	cmp	r6, r7
 800434a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800434e:	f804 9002 	strb.w	r9, [r4, r2]
 8004352:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004356:	d00a      	beq.n	800436e <d_print_comp+0x177a>
 8004358:	2bff      	cmp	r3, #255	; 0xff
 800435a:	4619      	mov	r1, r3
 800435c:	4620      	mov	r0, r4
 800435e:	f816 9b01 	ldrb.w	r9, [r6], #1
 8004362:	d0e3      	beq.n	800432c <d_print_comp+0x1738>
 8004364:	461a      	mov	r2, r3
 8004366:	3301      	adds	r3, #1
 8004368:	e7ee      	b.n	8004348 <d_print_comp+0x1754>
 800436a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800436e:	2bff      	cmp	r3, #255	; 0xff
 8004370:	d110      	bne.n	8004394 <d_print_comp+0x17a0>
 8004372:	2600      	movs	r6, #0
 8004374:	4619      	mov	r1, r3
 8004376:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800437a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800437e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004382:	4620      	mov	r0, r4
 8004384:	4798      	blx	r3
 8004386:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800438a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800438e:	3301      	adds	r3, #1
 8004390:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004394:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004398:	9905      	ldr	r1, [sp, #20]
 800439a:	1c50      	adds	r0, r2, #1
 800439c:	237d      	movs	r3, #125	; 0x7d
 800439e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80043a2:	54a3      	strb	r3, [r4, r2]
 80043a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80043a8:	686a      	ldr	r2, [r5, #4]
 80043aa:	f7fe bd16 	b.w	8002dda <d_print_comp+0x1e6>
 80043ae:	4631      	mov	r1, r6
 80043b0:	68aa      	ldr	r2, [r5, #8]
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7fe fc1e 	bl	8002bf4 <d_print_comp>
 80043b8:	9905      	ldr	r1, [sp, #20]
 80043ba:	686a      	ldr	r2, [r5, #4]
 80043bc:	f7fe bd0d 	b.w	8002dda <d_print_comp+0x1e6>
 80043c0:	68aa      	ldr	r2, [r5, #8]
 80043c2:	4989      	ldr	r1, [pc, #548]	; (80045e8 <d_print_comp+0x19f4>)
 80043c4:	3201      	adds	r2, #1
 80043c6:	a808      	add	r0, sp, #32
 80043c8:	f009 fdde 	bl	800df88 <sprintf>
 80043cc:	a808      	add	r0, sp, #32
 80043ce:	f002 fd01 	bl	8006dd4 <strlen>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d071      	beq.n	80044ba <d_print_comp+0x18c6>
 80043d6:	ae08      	add	r6, sp, #32
 80043d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80043dc:	1837      	adds	r7, r6, r0
 80043de:	f04f 0800 	mov.w	r8, #0
 80043e2:	e015      	b.n	8004410 <d_print_comp+0x181c>
 80043e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043f0:	4798      	blx	r3
 80043f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043f6:	3301      	adds	r3, #1
 80043f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043fc:	2200      	movs	r2, #0
 80043fe:	2301      	movs	r3, #1
 8004400:	42b7      	cmp	r7, r6
 8004402:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004406:	f804 9002 	strb.w	r9, [r4, r2]
 800440a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800440e:	d056      	beq.n	80044be <d_print_comp+0x18ca>
 8004410:	2bff      	cmp	r3, #255	; 0xff
 8004412:	4619      	mov	r1, r3
 8004414:	4620      	mov	r0, r4
 8004416:	f816 9b01 	ldrb.w	r9, [r6], #1
 800441a:	d0e3      	beq.n	80043e4 <d_print_comp+0x17f0>
 800441c:	461a      	mov	r2, r3
 800441e:	3301      	adds	r3, #1
 8004420:	e7ee      	b.n	8004400 <d_print_comp+0x180c>
 8004422:	4631      	mov	r1, r6
 8004424:	68ea      	ldr	r2, [r5, #12]
 8004426:	4620      	mov	r0, r4
 8004428:	f7fe fbe4 	bl	8002bf4 <d_print_comp>
 800442c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004430:	2fff      	cmp	r7, #255	; 0xff
 8004432:	d111      	bne.n	8004458 <d_print_comp+0x1864>
 8004434:	2600      	movs	r6, #0
 8004436:	4639      	mov	r1, r7
 8004438:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800443c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004440:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004444:	4620      	mov	r0, r4
 8004446:	4798      	blx	r3
 8004448:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800444c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004450:	3301      	adds	r3, #1
 8004452:	4637      	mov	r7, r6
 8004454:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004458:	1c7a      	adds	r2, r7, #1
 800445a:	235d      	movs	r3, #93	; 0x5d
 800445c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004460:	55e3      	strb	r3, [r4, r7]
 8004462:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004466:	686a      	ldr	r2, [r5, #4]
 8004468:	9905      	ldr	r1, [sp, #20]
 800446a:	f7fe bcb6 	b.w	8002dda <d_print_comp+0x1e6>
 800446e:	4631      	mov	r1, r6
 8004470:	68ea      	ldr	r2, [r5, #12]
 8004472:	4620      	mov	r0, r4
 8004474:	f7fe fbbe 	bl	8002bf4 <d_print_comp>
 8004478:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800447c:	2fff      	cmp	r7, #255	; 0xff
 800447e:	d111      	bne.n	80044a4 <d_print_comp+0x18b0>
 8004480:	2600      	movs	r6, #0
 8004482:	4639      	mov	r1, r7
 8004484:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004488:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800448c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004490:	4620      	mov	r0, r4
 8004492:	4798      	blx	r3
 8004494:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004498:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800449c:	3301      	adds	r3, #1
 800449e:	4637      	mov	r7, r6
 80044a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044a4:	1c7a      	adds	r2, r7, #1
 80044a6:	235d      	movs	r3, #93	; 0x5d
 80044a8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80044ac:	55e3      	strb	r3, [r4, r7]
 80044ae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80044b2:	686a      	ldr	r2, [r5, #4]
 80044b4:	9905      	ldr	r1, [sp, #20]
 80044b6:	f7fe bc90 	b.w	8002dda <d_print_comp+0x1e6>
 80044ba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80044be:	2bff      	cmp	r3, #255	; 0xff
 80044c0:	d110      	bne.n	80044e4 <d_print_comp+0x18f0>
 80044c2:	2600      	movs	r6, #0
 80044c4:	4619      	mov	r1, r3
 80044c6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80044ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80044ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044d2:	4620      	mov	r0, r4
 80044d4:	4798      	blx	r3
 80044d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044da:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80044de:	3301      	adds	r3, #1
 80044e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044e4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80044e8:	9905      	ldr	r1, [sp, #20]
 80044ea:	1c50      	adds	r0, r2, #1
 80044ec:	237d      	movs	r3, #125	; 0x7d
 80044ee:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80044f2:	54a3      	strb	r3, [r4, r2]
 80044f4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80044f8:	686a      	ldr	r2, [r5, #4]
 80044fa:	f7fe bc6e 	b.w	8002dda <d_print_comp+0x1e6>
 80044fe:	4631      	mov	r1, r6
 8004500:	68aa      	ldr	r2, [r5, #8]
 8004502:	4620      	mov	r0, r4
 8004504:	f7fe fb76 	bl	8002bf4 <d_print_comp>
 8004508:	9905      	ldr	r1, [sp, #20]
 800450a:	686a      	ldr	r2, [r5, #4]
 800450c:	f7fe bc65 	b.w	8002dda <d_print_comp+0x1e6>
 8004510:	9905      	ldr	r1, [sp, #20]
 8004512:	686a      	ldr	r2, [r5, #4]
 8004514:	f7fe bc61 	b.w	8002dda <d_print_comp+0x1e6>
 8004518:	4631      	mov	r1, r6
 800451a:	68aa      	ldr	r2, [r5, #8]
 800451c:	4620      	mov	r0, r4
 800451e:	f7fe fb69 	bl	8002bf4 <d_print_comp>
 8004522:	9905      	ldr	r1, [sp, #20]
 8004524:	686a      	ldr	r2, [r5, #4]
 8004526:	f7fe bc58 	b.w	8002dda <d_print_comp+0x1e6>
 800452a:	4631      	mov	r1, r6
 800452c:	68ea      	ldr	r2, [r5, #12]
 800452e:	4620      	mov	r0, r4
 8004530:	f7fe fb60 	bl	8002bf4 <d_print_comp>
 8004534:	9905      	ldr	r1, [sp, #20]
 8004536:	686a      	ldr	r2, [r5, #4]
 8004538:	f7fe bc4f 	b.w	8002dda <d_print_comp+0x1e6>
 800453c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8004540:	b13a      	cbz	r2, 8004552 <d_print_comp+0x195e>
 8004542:	ab18      	add	r3, sp, #96	; 0x60
 8004544:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8004548:	f843 1d40 	str.w	r1, [r3, #-64]!
 800454c:	9209      	str	r2, [sp, #36]	; 0x24
 800454e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004552:	68aa      	ldr	r2, [r5, #8]
 8004554:	7813      	ldrb	r3, [r2, #0]
 8004556:	2b04      	cmp	r3, #4
 8004558:	f000 84d6 	beq.w	8004f08 <d_print_comp+0x2314>
 800455c:	4631      	mov	r1, r6
 800455e:	4620      	mov	r0, r4
 8004560:	f7fe fb48 	bl	8002bf4 <d_print_comp>
 8004564:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004568:	b113      	cbz	r3, 8004570 <d_print_comp+0x197c>
 800456a:	9b08      	ldr	r3, [sp, #32]
 800456c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004570:	9905      	ldr	r1, [sp, #20]
 8004572:	686a      	ldr	r2, [r5, #4]
 8004574:	f7fe bc31 	b.w	8002dda <d_print_comp+0x1e6>
 8004578:	f8da 6004 	ldr.w	r6, [sl, #4]
 800457c:	7832      	ldrb	r2, [r6, #0]
 800457e:	3a61      	subs	r2, #97	; 0x61
 8004580:	2a19      	cmp	r2, #25
 8004582:	d81d      	bhi.n	80045c0 <d_print_comp+0x19cc>
 8004584:	2bff      	cmp	r3, #255	; 0xff
 8004586:	d110      	bne.n	80045aa <d_print_comp+0x19b6>
 8004588:	2600      	movs	r6, #0
 800458a:	4619      	mov	r1, r3
 800458c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004590:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004594:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004598:	4620      	mov	r0, r4
 800459a:	4798      	blx	r3
 800459c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045a0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80045a4:	3301      	adds	r3, #1
 80045a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045aa:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80045ae:	2320      	movs	r3, #32
 80045b0:	1c51      	adds	r1, r2, #1
 80045b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80045b6:	54a3      	strb	r3, [r4, r2]
 80045b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80045bc:	f8da 6004 	ldr.w	r6, [sl, #4]
 80045c0:	19f3      	adds	r3, r6, r7
 80045c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	bf08      	it	eq
 80045ca:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80045ce:	2f00      	cmp	r7, #0
 80045d0:	f000 86fb 	beq.w	80053ca <d_print_comp+0x27d6>
 80045d4:	3e01      	subs	r6, #1
 80045d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80045da:	4437      	add	r7, r6
 80045dc:	f04f 0800 	mov.w	r8, #0
 80045e0:	e01b      	b.n	800461a <d_print_comp+0x1a26>
 80045e2:	bf00      	nop
 80045e4:	08011dc8 	.word	0x08011dc8
 80045e8:	08011b18 	.word	0x08011b18
 80045ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80045f8:	4798      	blx	r3
 80045fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045fe:	3301      	adds	r3, #1
 8004600:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004604:	2200      	movs	r2, #0
 8004606:	2301      	movs	r3, #1
 8004608:	42be      	cmp	r6, r7
 800460a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800460e:	f804 9002 	strb.w	r9, [r4, r2]
 8004612:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004616:	f000 80ec 	beq.w	80047f2 <d_print_comp+0x1bfe>
 800461a:	2bff      	cmp	r3, #255	; 0xff
 800461c:	4619      	mov	r1, r3
 800461e:	4620      	mov	r0, r4
 8004620:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8004624:	d0e2      	beq.n	80045ec <d_print_comp+0x19f8>
 8004626:	461a      	mov	r2, r3
 8004628:	3301      	adds	r3, #1
 800462a:	e7ed      	b.n	8004608 <d_print_comp+0x1a14>
 800462c:	4631      	mov	r1, r6
 800462e:	68aa      	ldr	r2, [r5, #8]
 8004630:	4620      	mov	r0, r4
 8004632:	f7fe fadf 	bl	8002bf4 <d_print_comp>
 8004636:	9905      	ldr	r1, [sp, #20]
 8004638:	686a      	ldr	r2, [r5, #4]
 800463a:	f7fe bbce 	b.w	8002dda <d_print_comp+0x1e6>
 800463e:	4631      	mov	r1, r6
 8004640:	68aa      	ldr	r2, [r5, #8]
 8004642:	4620      	mov	r0, r4
 8004644:	f7fe fad6 	bl	8002bf4 <d_print_comp>
 8004648:	9905      	ldr	r1, [sp, #20]
 800464a:	686a      	ldr	r2, [r5, #4]
 800464c:	f7fe bbc5 	b.w	8002dda <d_print_comp+0x1e6>
 8004650:	4631      	mov	r1, r6
 8004652:	68aa      	ldr	r2, [r5, #8]
 8004654:	4620      	mov	r0, r4
 8004656:	f7fe facd 	bl	8002bf4 <d_print_comp>
 800465a:	9905      	ldr	r1, [sp, #20]
 800465c:	686a      	ldr	r2, [r5, #4]
 800465e:	f7fe bbbc 	b.w	8002dda <d_print_comp+0x1e6>
 8004662:	4631      	mov	r1, r6
 8004664:	68aa      	ldr	r2, [r5, #8]
 8004666:	4620      	mov	r0, r4
 8004668:	f7fe fac4 	bl	8002bf4 <d_print_comp>
 800466c:	9905      	ldr	r1, [sp, #20]
 800466e:	686a      	ldr	r2, [r5, #4]
 8004670:	f7fe bbb3 	b.w	8002dda <d_print_comp+0x1e6>
 8004674:	4631      	mov	r1, r6
 8004676:	68aa      	ldr	r2, [r5, #8]
 8004678:	4620      	mov	r0, r4
 800467a:	f7fe fabb 	bl	8002bf4 <d_print_comp>
 800467e:	9905      	ldr	r1, [sp, #20]
 8004680:	686a      	ldr	r2, [r5, #4]
 8004682:	f7fe bbaa 	b.w	8002dda <d_print_comp+0x1e6>
 8004686:	4631      	mov	r1, r6
 8004688:	68aa      	ldr	r2, [r5, #8]
 800468a:	4620      	mov	r0, r4
 800468c:	f7fe fab2 	bl	8002bf4 <d_print_comp>
 8004690:	9905      	ldr	r1, [sp, #20]
 8004692:	686a      	ldr	r2, [r5, #4]
 8004694:	f7fe bba1 	b.w	8002dda <d_print_comp+0x1e6>
 8004698:	4631      	mov	r1, r6
 800469a:	68aa      	ldr	r2, [r5, #8]
 800469c:	4620      	mov	r0, r4
 800469e:	f7fe faa9 	bl	8002bf4 <d_print_comp>
 80046a2:	9905      	ldr	r1, [sp, #20]
 80046a4:	686a      	ldr	r2, [r5, #4]
 80046a6:	f7fe bb98 	b.w	8002dda <d_print_comp+0x1e6>
 80046aa:	4631      	mov	r1, r6
 80046ac:	68aa      	ldr	r2, [r5, #8]
 80046ae:	4620      	mov	r0, r4
 80046b0:	f7fe faa0 	bl	8002bf4 <d_print_comp>
 80046b4:	9905      	ldr	r1, [sp, #20]
 80046b6:	686a      	ldr	r2, [r5, #4]
 80046b8:	f7fe bb8f 	b.w	8002dda <d_print_comp+0x1e6>
 80046bc:	4fcf      	ldr	r7, [pc, #828]	; (80049fc <d_print_comp+0x1e08>)
 80046be:	68ea      	ldr	r2, [r5, #12]
 80046c0:	4631      	mov	r1, r6
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7fe fa96 	bl	8002bf4 <d_print_comp>
 80046c8:	f107 0805 	add.w	r8, r7, #5
 80046cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046d0:	f04f 0900 	mov.w	r9, #0
 80046d4:	e015      	b.n	8004702 <d_print_comp+0x1b0e>
 80046d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80046e2:	4798      	blx	r3
 80046e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80046e8:	3301      	adds	r3, #1
 80046ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80046ee:	2200      	movs	r2, #0
 80046f0:	2301      	movs	r3, #1
 80046f2:	4547      	cmp	r7, r8
 80046f4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80046f8:	f804 a002 	strb.w	sl, [r4, r2]
 80046fc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8004700:	d008      	beq.n	8004714 <d_print_comp+0x1b20>
 8004702:	2bff      	cmp	r3, #255	; 0xff
 8004704:	4619      	mov	r1, r3
 8004706:	4620      	mov	r0, r4
 8004708:	f817 ab01 	ldrb.w	sl, [r7], #1
 800470c:	d0e3      	beq.n	80046d6 <d_print_comp+0x1ae2>
 800470e:	461a      	mov	r2, r3
 8004710:	3301      	adds	r3, #1
 8004712:	e7ee      	b.n	80046f2 <d_print_comp+0x1afe>
 8004714:	4631      	mov	r1, r6
 8004716:	68aa      	ldr	r2, [r5, #8]
 8004718:	4620      	mov	r0, r4
 800471a:	f7fe fa6b 	bl	8002bf4 <d_print_comp>
 800471e:	9905      	ldr	r1, [sp, #20]
 8004720:	686a      	ldr	r2, [r5, #4]
 8004722:	f7fe bb5a 	b.w	8002dda <d_print_comp+0x1e6>
 8004726:	4fb6      	ldr	r7, [pc, #728]	; (8004a00 <d_print_comp+0x1e0c>)
 8004728:	68aa      	ldr	r2, [r5, #8]
 800472a:	4631      	mov	r1, r6
 800472c:	4620      	mov	r0, r4
 800472e:	f7fe fa61 	bl	8002bf4 <d_print_comp>
 8004732:	f107 0804 	add.w	r8, r7, #4
 8004736:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800473a:	f04f 0900 	mov.w	r9, #0
 800473e:	e015      	b.n	800476c <d_print_comp+0x1b78>
 8004740:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004744:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004748:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800474c:	4798      	blx	r3
 800474e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004752:	3301      	adds	r3, #1
 8004754:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004758:	2200      	movs	r2, #0
 800475a:	2301      	movs	r3, #1
 800475c:	45b8      	cmp	r8, r7
 800475e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004762:	f804 a002 	strb.w	sl, [r4, r2]
 8004766:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800476a:	d008      	beq.n	800477e <d_print_comp+0x1b8a>
 800476c:	2bff      	cmp	r3, #255	; 0xff
 800476e:	4619      	mov	r1, r3
 8004770:	4620      	mov	r0, r4
 8004772:	f817 ab01 	ldrb.w	sl, [r7], #1
 8004776:	d0e3      	beq.n	8004740 <d_print_comp+0x1b4c>
 8004778:	461a      	mov	r2, r3
 800477a:	3301      	adds	r3, #1
 800477c:	e7ee      	b.n	800475c <d_print_comp+0x1b68>
 800477e:	4631      	mov	r1, r6
 8004780:	68ea      	ldr	r2, [r5, #12]
 8004782:	4620      	mov	r0, r4
 8004784:	f7fe fa36 	bl	8002bf4 <d_print_comp>
 8004788:	9905      	ldr	r1, [sp, #20]
 800478a:	686a      	ldr	r2, [r5, #4]
 800478c:	f7fe bb25 	b.w	8002dda <d_print_comp+0x1e6>
 8004790:	4631      	mov	r1, r6
 8004792:	68aa      	ldr	r2, [r5, #8]
 8004794:	4620      	mov	r0, r4
 8004796:	f7fe fa2d 	bl	8002bf4 <d_print_comp>
 800479a:	9905      	ldr	r1, [sp, #20]
 800479c:	686a      	ldr	r2, [r5, #4]
 800479e:	f7fe bb1c 	b.w	8002dda <d_print_comp+0x1e6>
 80047a2:	4631      	mov	r1, r6
 80047a4:	68aa      	ldr	r2, [r5, #8]
 80047a6:	4620      	mov	r0, r4
 80047a8:	f7fe fa24 	bl	8002bf4 <d_print_comp>
 80047ac:	9905      	ldr	r1, [sp, #20]
 80047ae:	686a      	ldr	r2, [r5, #4]
 80047b0:	f7fe bb13 	b.w	8002dda <d_print_comp+0x1e6>
 80047b4:	4631      	mov	r1, r6
 80047b6:	68aa      	ldr	r2, [r5, #8]
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7fe fa1b 	bl	8002bf4 <d_print_comp>
 80047be:	9905      	ldr	r1, [sp, #20]
 80047c0:	686a      	ldr	r2, [r5, #4]
 80047c2:	f7fe bb0a 	b.w	8002dda <d_print_comp+0x1e6>
 80047c6:	4631      	mov	r1, r6
 80047c8:	68aa      	ldr	r2, [r5, #8]
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7fe fa12 	bl	8002bf4 <d_print_comp>
 80047d0:	9905      	ldr	r1, [sp, #20]
 80047d2:	686a      	ldr	r2, [r5, #4]
 80047d4:	f7fe bb01 	b.w	8002dda <d_print_comp+0x1e6>
 80047d8:	4631      	mov	r1, r6
 80047da:	68aa      	ldr	r2, [r5, #8]
 80047dc:	4620      	mov	r0, r4
 80047de:	f7fe fa09 	bl	8002bf4 <d_print_comp>
 80047e2:	9905      	ldr	r1, [sp, #20]
 80047e4:	686a      	ldr	r2, [r5, #4]
 80047e6:	f7fe baf8 	b.w	8002dda <d_print_comp+0x1e6>
 80047ea:	9905      	ldr	r1, [sp, #20]
 80047ec:	686a      	ldr	r2, [r5, #4]
 80047ee:	f7fe baf4 	b.w	8002dda <d_print_comp+0x1e6>
 80047f2:	9905      	ldr	r1, [sp, #20]
 80047f4:	686a      	ldr	r2, [r5, #4]
 80047f6:	f7fe baf0 	b.w	8002dda <d_print_comp+0x1e6>
 80047fa:	4631      	mov	r1, r6
 80047fc:	68ea      	ldr	r2, [r5, #12]
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	4620      	mov	r0, r4
 8004802:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
 8004806:	f7fe f9f5 	bl	8002bf4 <d_print_comp>
 800480a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	4296      	cmp	r6, r2
 8004812:	f000 8441 	beq.w	8005098 <d_print_comp+0x24a4>
 8004816:	9905      	ldr	r1, [sp, #20]
 8004818:	686a      	ldr	r2, [r5, #4]
 800481a:	f7fe bade 	b.w	8002dda <d_print_comp+0x1e6>
 800481e:	4e79      	ldr	r6, [pc, #484]	; (8004a04 <d_print_comp+0x1e10>)
 8004820:	4690      	mov	r8, r2
 8004822:	f106 0906 	add.w	r9, r6, #6
 8004826:	e014      	b.n	8004852 <d_print_comp+0x1c5e>
 8004828:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800482c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004830:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004834:	4798      	blx	r3
 8004836:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800483a:	3301      	adds	r3, #1
 800483c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004840:	2200      	movs	r2, #0
 8004842:	2301      	movs	r3, #1
 8004844:	45b1      	cmp	r9, r6
 8004846:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800484a:	54a7      	strb	r7, [r4, r2]
 800484c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004850:	d008      	beq.n	8004864 <d_print_comp+0x1c70>
 8004852:	2bff      	cmp	r3, #255	; 0xff
 8004854:	4619      	mov	r1, r3
 8004856:	4620      	mov	r0, r4
 8004858:	f816 7b01 	ldrb.w	r7, [r6], #1
 800485c:	d0e4      	beq.n	8004828 <d_print_comp+0x1c34>
 800485e:	461a      	mov	r2, r3
 8004860:	3301      	adds	r3, #1
 8004862:	e7ef      	b.n	8004844 <d_print_comp+0x1c50>
 8004864:	9905      	ldr	r1, [sp, #20]
 8004866:	686a      	ldr	r2, [r5, #4]
 8004868:	f7fe bab7 	b.w	8002dda <d_print_comp+0x1e6>
 800486c:	4642      	mov	r2, r8
 800486e:	a808      	add	r0, sp, #32
 8004870:	4965      	ldr	r1, [pc, #404]	; (8004a08 <d_print_comp+0x1e14>)
 8004872:	f009 fb89 	bl	800df88 <sprintf>
 8004876:	a808      	add	r0, sp, #32
 8004878:	f002 faac 	bl	8006dd4 <strlen>
 800487c:	b328      	cbz	r0, 80048ca <d_print_comp+0x1cd6>
 800487e:	ae08      	add	r6, sp, #32
 8004880:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004884:	eb06 0900 	add.w	r9, r6, r0
 8004888:	f04f 0800 	mov.w	r8, #0
 800488c:	e014      	b.n	80048b8 <d_print_comp+0x1cc4>
 800488e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004892:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004896:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800489a:	4798      	blx	r3
 800489c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048a0:	3301      	adds	r3, #1
 80048a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048a6:	2200      	movs	r2, #0
 80048a8:	2301      	movs	r3, #1
 80048aa:	45b1      	cmp	r9, r6
 80048ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80048b0:	54a7      	strb	r7, [r4, r2]
 80048b2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80048b6:	d008      	beq.n	80048ca <d_print_comp+0x1cd6>
 80048b8:	2bff      	cmp	r3, #255	; 0xff
 80048ba:	4619      	mov	r1, r3
 80048bc:	4620      	mov	r0, r4
 80048be:	f816 7b01 	ldrb.w	r7, [r6], #1
 80048c2:	d0e4      	beq.n	800488e <d_print_comp+0x1c9a>
 80048c4:	461a      	mov	r2, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	e7ef      	b.n	80048aa <d_print_comp+0x1cb6>
 80048ca:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80048ce:	2fff      	cmp	r7, #255	; 0xff
 80048d0:	d111      	bne.n	80048f6 <d_print_comp+0x1d02>
 80048d2:	2600      	movs	r6, #0
 80048d4:	4639      	mov	r1, r7
 80048d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048da:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80048de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048e2:	4620      	mov	r0, r4
 80048e4:	4798      	blx	r3
 80048e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048ea:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80048ee:	3301      	adds	r3, #1
 80048f0:	4637      	mov	r7, r6
 80048f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048f6:	1c7a      	adds	r2, r7, #1
 80048f8:	237d      	movs	r3, #125	; 0x7d
 80048fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048fe:	55e3      	strb	r3, [r4, r7]
 8004900:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004904:	686a      	ldr	r2, [r5, #4]
 8004906:	9905      	ldr	r1, [sp, #20]
 8004908:	f7fe ba67 	b.w	8002dda <d_print_comp+0x1e6>
 800490c:	4e3f      	ldr	r6, [pc, #252]	; (8004a0c <d_print_comp+0x1e18>)
 800490e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004912:	f106 0905 	add.w	r9, r6, #5
 8004916:	f04f 0800 	mov.w	r8, #0
 800491a:	e015      	b.n	8004948 <d_print_comp+0x1d54>
 800491c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004920:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004924:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004928:	4798      	blx	r3
 800492a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800492e:	3301      	adds	r3, #1
 8004930:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004934:	2200      	movs	r2, #0
 8004936:	2301      	movs	r3, #1
 8004938:	45b1      	cmp	r9, r6
 800493a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800493e:	54a7      	strb	r7, [r4, r2]
 8004940:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004944:	f000 80cf 	beq.w	8004ae6 <d_print_comp+0x1ef2>
 8004948:	2bff      	cmp	r3, #255	; 0xff
 800494a:	4619      	mov	r1, r3
 800494c:	4620      	mov	r0, r4
 800494e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004952:	d0e3      	beq.n	800491c <d_print_comp+0x1d28>
 8004954:	461a      	mov	r2, r3
 8004956:	3301      	adds	r3, #1
 8004958:	e7ee      	b.n	8004938 <d_print_comp+0x1d44>
 800495a:	68ee      	ldr	r6, [r5, #12]
 800495c:	443e      	add	r6, r7
 800495e:	42be      	cmp	r6, r7
 8004960:	f67e aa3b 	bls.w	8002dda <d_print_comp+0x1e6>
 8004964:	f04f 0800 	mov.w	r8, #0
 8004968:	e018      	b.n	800499c <d_print_comp+0x1da8>
 800496a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800496e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004972:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004976:	4620      	mov	r0, r4
 8004978:	4798      	blx	r3
 800497a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800497e:	3301      	adds	r3, #1
 8004980:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004984:	2100      	movs	r1, #0
 8004986:	2301      	movs	r3, #1
 8004988:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800498c:	f804 9001 	strb.w	r9, [r4, r1]
 8004990:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004994:	3701      	adds	r7, #1
 8004996:	42be      	cmp	r6, r7
 8004998:	f240 80e1 	bls.w	8004b5e <d_print_comp+0x1f6a>
 800499c:	1bf3      	subs	r3, r6, r7
 800499e:	2b03      	cmp	r3, #3
 80049a0:	f897 9000 	ldrb.w	r9, [r7]
 80049a4:	dd02      	ble.n	80049ac <d_print_comp+0x1db8>
 80049a6:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 80049aa:	d005      	beq.n	80049b8 <d_print_comp+0x1dc4>
 80049ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80049b0:	29ff      	cmp	r1, #255	; 0xff
 80049b2:	d0da      	beq.n	800496a <d_print_comp+0x1d76>
 80049b4:	1c4b      	adds	r3, r1, #1
 80049b6:	e7e7      	b.n	8004988 <d_print_comp+0x1d94>
 80049b8:	787b      	ldrb	r3, [r7, #1]
 80049ba:	2b5f      	cmp	r3, #95	; 0x5f
 80049bc:	d1f6      	bne.n	80049ac <d_print_comp+0x1db8>
 80049be:	78bb      	ldrb	r3, [r7, #2]
 80049c0:	2b55      	cmp	r3, #85	; 0x55
 80049c2:	d1f3      	bne.n	80049ac <d_print_comp+0x1db8>
 80049c4:	1cf9      	adds	r1, r7, #3
 80049c6:	2000      	movs	r0, #0
 80049c8:	e002      	b.n	80049d0 <d_print_comp+0x1ddc>
 80049ca:	4613      	mov	r3, r2
 80049cc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80049d0:	428e      	cmp	r6, r1
 80049d2:	468a      	mov	sl, r1
 80049d4:	d9ea      	bls.n	80049ac <d_print_comp+0x1db8>
 80049d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80049de:	fa5f fe82 	uxtb.w	lr, r2
 80049e2:	f1be 0f09 	cmp.w	lr, #9
 80049e6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80049ea:	d9ee      	bls.n	80049ca <d_print_comp+0x1dd6>
 80049ec:	f1bc 0f05 	cmp.w	ip, #5
 80049f0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049f4:	f200 85c7 	bhi.w	8005586 <d_print_comp+0x2992>
 80049f8:	3b37      	subs	r3, #55	; 0x37
 80049fa:	e7e7      	b.n	80049cc <d_print_comp+0x1dd8>
 80049fc:	08011c8c 	.word	0x08011c8c
 8004a00:	08011bc8 	.word	0x08011bc8
 8004a04:	08011cec 	.word	0x08011cec
 8004a08:	08011b18 	.word	0x08011b18
 8004a0c:	08011b8c 	.word	0x08011b8c
 8004a10:	9905      	ldr	r1, [sp, #20]
 8004a12:	686a      	ldr	r2, [r5, #4]
 8004a14:	f7fe b9e1 	b.w	8002dda <d_print_comp+0x1e6>
 8004a18:	68aa      	ldr	r2, [r5, #8]
 8004a1a:	9201      	str	r2, [sp, #4]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f47e aa26 	bne.w	8002e70 <d_print_comp+0x27c>
 8004a24:	9905      	ldr	r1, [sp, #20]
 8004a26:	686a      	ldr	r2, [r5, #4]
 8004a28:	f7fe b9d7 	b.w	8002dda <d_print_comp+0x1e6>
 8004a2c:	4ece      	ldr	r6, [pc, #824]	; (8004d68 <d_print_comp+0x2174>)
 8004a2e:	f106 0904 	add.w	r9, r6, #4
 8004a32:	e014      	b.n	8004a5e <d_print_comp+0x1e6a>
 8004a34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004a40:	4798      	blx	r3
 8004a42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a46:	3301      	adds	r3, #1
 8004a48:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2301      	movs	r3, #1
 8004a50:	45b1      	cmp	r9, r6
 8004a52:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a56:	54a7      	strb	r7, [r4, r2]
 8004a58:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004a5c:	d008      	beq.n	8004a70 <d_print_comp+0x1e7c>
 8004a5e:	2bff      	cmp	r3, #255	; 0xff
 8004a60:	4619      	mov	r1, r3
 8004a62:	4620      	mov	r0, r4
 8004a64:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004a68:	d0e4      	beq.n	8004a34 <d_print_comp+0x1e40>
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	e7ef      	b.n	8004a50 <d_print_comp+0x1e5c>
 8004a70:	9905      	ldr	r1, [sp, #20]
 8004a72:	686a      	ldr	r2, [r5, #4]
 8004a74:	f7fe b9b1 	b.w	8002dda <d_print_comp+0x1e6>
 8004a78:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004a7c:	f7ff ba66 	b.w	8003f4c <d_print_comp+0x1358>
 8004a80:	2700      	movs	r7, #0
 8004a82:	f7ff ba54 	b.w	8003f2e <d_print_comp+0x133a>
 8004a86:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8004a8a:	2f00      	cmp	r7, #0
 8004a8c:	f43e a9a5 	beq.w	8002dda <d_print_comp+0x1e6>
 8004a90:	4437      	add	r7, r6
 8004a92:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a96:	3f01      	subs	r7, #1
 8004a98:	3e01      	subs	r6, #1
 8004a9a:	f04f 0900 	mov.w	r9, #0
 8004a9e:	e015      	b.n	8004acc <d_print_comp+0x1ed8>
 8004aa0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004aa4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004aa8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004aac:	4798      	blx	r3
 8004aae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2301      	movs	r3, #1
 8004abc:	42b7      	cmp	r7, r6
 8004abe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004ac2:	f804 8002 	strb.w	r8, [r4, r2]
 8004ac6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004aca:	d008      	beq.n	8004ade <d_print_comp+0x1eea>
 8004acc:	2bff      	cmp	r3, #255	; 0xff
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004ad6:	d0e3      	beq.n	8004aa0 <d_print_comp+0x1eac>
 8004ad8:	461a      	mov	r2, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	e7ee      	b.n	8004abc <d_print_comp+0x1ec8>
 8004ade:	9905      	ldr	r1, [sp, #20]
 8004ae0:	686a      	ldr	r2, [r5, #4]
 8004ae2:	f7fe b97a 	b.w	8002dda <d_print_comp+0x1e6>
 8004ae6:	68aa      	ldr	r2, [r5, #8]
 8004ae8:	49a0      	ldr	r1, [pc, #640]	; (8004d6c <d_print_comp+0x2178>)
 8004aea:	3201      	adds	r2, #1
 8004aec:	a808      	add	r0, sp, #32
 8004aee:	f009 fa4b 	bl	800df88 <sprintf>
 8004af2:	a808      	add	r0, sp, #32
 8004af4:	f002 f96e 	bl	8006dd4 <strlen>
 8004af8:	b328      	cbz	r0, 8004b46 <d_print_comp+0x1f52>
 8004afa:	ae08      	add	r6, sp, #32
 8004afc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004b00:	eb06 0900 	add.w	r9, r6, r0
 8004b04:	f04f 0800 	mov.w	r8, #0
 8004b08:	e014      	b.n	8004b34 <d_print_comp+0x1f40>
 8004b0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b12:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004b16:	4798      	blx	r3
 8004b18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004b22:	2200      	movs	r2, #0
 8004b24:	2301      	movs	r3, #1
 8004b26:	45b1      	cmp	r9, r6
 8004b28:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004b2c:	54a7      	strb	r7, [r4, r2]
 8004b2e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004b32:	d008      	beq.n	8004b46 <d_print_comp+0x1f52>
 8004b34:	2bff      	cmp	r3, #255	; 0xff
 8004b36:	4619      	mov	r1, r3
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004b3e:	d0e4      	beq.n	8004b0a <d_print_comp+0x1f16>
 8004b40:	461a      	mov	r2, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	e7ef      	b.n	8004b26 <d_print_comp+0x1f32>
 8004b46:	9905      	ldr	r1, [sp, #20]
 8004b48:	686a      	ldr	r2, [r5, #4]
 8004b4a:	f7fe b946 	b.w	8002dda <d_print_comp+0x1e6>
 8004b4e:	9905      	ldr	r1, [sp, #20]
 8004b50:	686a      	ldr	r2, [r5, #4]
 8004b52:	f7fe b942 	b.w	8002dda <d_print_comp+0x1e6>
 8004b56:	9905      	ldr	r1, [sp, #20]
 8004b58:	686a      	ldr	r2, [r5, #4]
 8004b5a:	f7fe b93e 	b.w	8002dda <d_print_comp+0x1e6>
 8004b5e:	9905      	ldr	r1, [sp, #20]
 8004b60:	686a      	ldr	r2, [r5, #4]
 8004b62:	f7fe b93a 	b.w	8002dda <d_print_comp+0x1e6>
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b6c:	f47e abf6 	bne.w	800335c <d_print_comp+0x768>
 8004b70:	f105 030c 	add.w	r3, r5, #12
 8004b74:	68aa      	ldr	r2, [r5, #8]
 8004b76:	4631      	mov	r1, r6
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f001 fd95 	bl	80066a8 <d_maybe_print_fold_expression.isra.20>
 8004b7e:	4680      	mov	r8, r0
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f040 86a0 	bne.w	80058c6 <d_print_comp+0x2cd2>
 8004b86:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68d3      	ldr	r3, [r2, #12]
 8004b8e:	6808      	ldr	r0, [r1, #0]
 8004b90:	4977      	ldr	r1, [pc, #476]	; (8004d70 <d_print_comp+0x217c>)
 8004b92:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004b96:	e9d3 a902 	ldrd	sl, r9, [r3, #8]
 8004b9a:	f002 f911 	bl	8006dc0 <strcmp>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f000 8674 	beq.w	800588c <d_print_comp+0x2c98>
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	4973      	ldr	r1, [pc, #460]	; (8004d74 <d_print_comp+0x2180>)
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7fb fbff 	bl	80003ac <d_append_buffer>
 8004bae:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004bb2:	b303      	cbz	r3, 8004bf6 <d_print_comp+0x2002>
 8004bb4:	465a      	mov	r2, fp
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f001 fd23 	bl	8006604 <d_print_subexpr>
 8004bbe:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004bc2:	2fff      	cmp	r7, #255	; 0xff
 8004bc4:	d110      	bne.n	8004be8 <d_print_comp+0x1ff4>
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bcc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004bd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4798      	blx	r3
 8004bd8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004bdc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004be0:	3301      	adds	r3, #1
 8004be2:	4647      	mov	r7, r8
 8004be4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004be8:	2320      	movs	r3, #32
 8004bea:	1c7a      	adds	r2, r7, #1
 8004bec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004bf0:	55e3      	strb	r3, [r4, r7]
 8004bf2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004bf6:	4652      	mov	r2, sl
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7fd fffa 	bl	8002bf4 <d_print_comp>
 8004c00:	f1b9 0f00 	cmp.w	r9, #0
 8004c04:	f000 8663 	beq.w	80058ce <d_print_comp+0x2cda>
 8004c08:	464a      	mov	r2, r9
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f001 fcf9 	bl	8006604 <d_print_subexpr>
 8004c12:	9905      	ldr	r1, [sp, #20]
 8004c14:	686a      	ldr	r2, [r5, #4]
 8004c16:	f7fe b8e0 	b.w	8002dda <d_print_comp+0x1e6>
 8004c1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004c1e:	4956      	ldr	r1, [pc, #344]	; (8004d78 <d_print_comp+0x2184>)
 8004c20:	f8d3 a000 	ldr.w	sl, [r3]
 8004c24:	4650      	mov	r0, sl
 8004c26:	f002 f8cb 	bl	8006dc0 <strcmp>
 8004c2a:	f898 3000 	ldrb.w	r3, [r8]
 8004c2e:	b910      	cbnz	r0, 8004c36 <d_print_comp+0x2042>
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	f000 852b 	beq.w	800568c <d_print_comp+0x2a98>
 8004c36:	2b38      	cmp	r3, #56	; 0x38
 8004c38:	f000 850c 	beq.w	8005654 <d_print_comp+0x2a60>
 8004c3c:	494f      	ldr	r1, [pc, #316]	; (8004d7c <d_print_comp+0x2188>)
 8004c3e:	4650      	mov	r0, sl
 8004c40:	f002 f8be 	bl	8006dc0 <strcmp>
 8004c44:	4607      	mov	r7, r0
 8004c46:	2800      	cmp	r0, #0
 8004c48:	f000 8513 	beq.w	8005672 <d_print_comp+0x2a7e>
 8004c4c:	494c      	ldr	r1, [pc, #304]	; (8004d80 <d_print_comp+0x218c>)
 8004c4e:	4650      	mov	r0, sl
 8004c50:	f002 f8b6 	bl	8006dc0 <strcmp>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	f000 8333 	beq.w	80052c0 <d_print_comp+0x26cc>
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	464a      	mov	r2, r9
 8004c60:	f001 fc90 	bl	8006584 <d_print_expr_op>
 8004c64:	4947      	ldr	r1, [pc, #284]	; (8004d84 <d_print_comp+0x2190>)
 8004c66:	4650      	mov	r0, sl
 8004c68:	f002 f8aa 	bl	8006dc0 <strcmp>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	f000 83b0 	beq.w	80053d2 <d_print_comp+0x27de>
 8004c72:	4650      	mov	r0, sl
 8004c74:	4944      	ldr	r1, [pc, #272]	; (8004d88 <d_print_comp+0x2194>)
 8004c76:	f002 f8a3 	bl	8006dc0 <strcmp>
 8004c7a:	4681      	mov	r9, r0
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	f47e abd7 	bne.w	8003430 <d_print_comp+0x83c>
 8004c82:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c86:	2fff      	cmp	r7, #255	; 0xff
 8004c88:	d110      	bne.n	8004cac <d_print_comp+0x20b8>
 8004c8a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004c8e:	4639      	mov	r1, r7
 8004c90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4798      	blx	r3
 8004c9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ca0:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	464f      	mov	r7, r9
 8004ca8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cac:	1c78      	adds	r0, r7, #1
 8004cae:	2328      	movs	r3, #40	; 0x28
 8004cb0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	55e3      	strb	r3, [r4, r7]
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cc0:	f7fd ff98 	bl	8002bf4 <d_print_comp>
 8004cc4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004cc8:	2fff      	cmp	r7, #255	; 0xff
 8004cca:	d111      	bne.n	8004cf0 <d_print_comp+0x20fc>
 8004ccc:	2600      	movs	r6, #0
 8004cce:	4639      	mov	r1, r7
 8004cd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cd4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004cd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4798      	blx	r3
 8004ce0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ce4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004ce8:	3301      	adds	r3, #1
 8004cea:	4637      	mov	r7, r6
 8004cec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cf0:	1c7a      	adds	r2, r7, #1
 8004cf2:	2329      	movs	r3, #41	; 0x29
 8004cf4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004cf8:	55e3      	strb	r3, [r4, r7]
 8004cfa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cfe:	686a      	ldr	r2, [r5, #4]
 8004d00:	9905      	ldr	r1, [sp, #20]
 8004d02:	f7fe b86a 	b.w	8002dda <d_print_comp+0x1e6>
 8004d06:	f105 020c 	add.w	r2, r5, #12
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f001 f935 	bl	8005f7c <d_print_function_type.isra.15>
 8004d12:	68aa      	ldr	r2, [r5, #8]
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	f000 83fd 	beq.w	8005514 <d_print_comp+0x2920>
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7fd ff69 	bl	8002bf4 <d_print_comp>
 8004d22:	9905      	ldr	r1, [sp, #20]
 8004d24:	686a      	ldr	r2, [r5, #4]
 8004d26:	f7fe b858 	b.w	8002dda <d_print_comp+0x1e6>
 8004d2a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004d2e:	2fff      	cmp	r7, #255	; 0xff
 8004d30:	d111      	bne.n	8004d56 <d_print_comp+0x2162>
 8004d32:	2600      	movs	r6, #0
 8004d34:	4639      	mov	r1, r7
 8004d36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d3a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004d3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d42:	4620      	mov	r0, r4
 8004d44:	4798      	blx	r3
 8004d46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d4a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4637      	mov	r7, r6
 8004d52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d56:	2320      	movs	r3, #32
 8004d58:	1c7a      	adds	r2, r7, #1
 8004d5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d5e:	55e3      	strb	r3, [r4, r7]
 8004d60:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d64:	f7fe bf72 	b.w	8003c4c <d_print_comp+0x1058>
 8004d68:	08011d6c 	.word	0x08011d6c
 8004d6c:	08011b18 	.word	0x08011b18
 8004d70:	08011b2c 	.word	0x08011b2c
 8004d74:	08011d28 	.word	0x08011d28
 8004d78:	08011d10 	.word	0x08011d10
 8004d7c:	08011d14 	.word	0x08011d14
 8004d80:	08011b1c 	.word	0x08011b1c
 8004d84:	08011d18 	.word	0x08011d18
 8004d88:	08012038 	.word	0x08012038
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	f43e aa89 	beq.w	80032ac <d_print_comp+0x6b8>
 8004d9a:	f1b8 0f06 	cmp.w	r8, #6
 8004d9e:	f240 843f 	bls.w	8005620 <d_print_comp+0x2a2c>
 8004da2:	f1b8 0f07 	cmp.w	r8, #7
 8004da6:	f47e aa81 	bne.w	80032ac <d_print_comp+0x6b8>
 8004daa:	68eb      	ldr	r3, [r5, #12]
 8004dac:	781a      	ldrb	r2, [r3, #0]
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	f47e aa7c 	bne.w	80032ac <d_print_comp+0x6b8>
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	2a01      	cmp	r2, #1
 8004db8:	f47e aa78 	bne.w	80032ac <d_print_comp+0x6b8>
 8004dbc:	283c      	cmp	r0, #60	; 0x3c
 8004dbe:	f47e aa75 	bne.w	80032ac <d_print_comp+0x6b8>
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b30      	cmp	r3, #48	; 0x30
 8004dc8:	f000 84b6 	beq.w	8005738 <d_print_comp+0x2b44>
 8004dcc:	2b31      	cmp	r3, #49	; 0x31
 8004dce:	f47e aa6d 	bne.w	80032ac <d_print_comp+0x6b8>
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	49c3      	ldr	r1, [pc, #780]	; (80050e4 <d_print_comp+0x24f0>)
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7fb fae8 	bl	80003ac <d_append_buffer>
 8004ddc:	9905      	ldr	r1, [sp, #20]
 8004dde:	686a      	ldr	r2, [r5, #4]
 8004de0:	f7fd bffb 	b.w	8002dda <d_print_comp+0x1e6>
 8004de4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004de8:	2fff      	cmp	r7, #255	; 0xff
 8004dea:	d112      	bne.n	8004e12 <d_print_comp+0x221e>
 8004dec:	f04f 0800 	mov.w	r8, #0
 8004df0:	4639      	mov	r1, r7
 8004df2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004df6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004dfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dfe:	4620      	mov	r0, r4
 8004e00:	4798      	blx	r3
 8004e02:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e06:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	4647      	mov	r7, r8
 8004e0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e12:	1c7a      	adds	r2, r7, #1
 8004e14:	235b      	movs	r3, #91	; 0x5b
 8004e16:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e1a:	55e3      	strb	r3, [r4, r7]
 8004e1c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e20:	4631      	mov	r1, r6
 8004e22:	68ea      	ldr	r2, [r5, #12]
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7fd fee5 	bl	8002bf4 <d_print_comp>
 8004e2a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004e2e:	2fff      	cmp	r7, #255	; 0xff
 8004e30:	d111      	bne.n	8004e56 <d_print_comp+0x2262>
 8004e32:	2600      	movs	r6, #0
 8004e34:	4639      	mov	r1, r7
 8004e36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e3a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004e3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e42:	4620      	mov	r0, r4
 8004e44:	4798      	blx	r3
 8004e46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e4a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004e4e:	3301      	adds	r3, #1
 8004e50:	4637      	mov	r7, r6
 8004e52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e56:	1c7a      	adds	r2, r7, #1
 8004e58:	235d      	movs	r3, #93	; 0x5d
 8004e5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e5e:	55e3      	strb	r3, [r4, r7]
 8004e60:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e64:	686a      	ldr	r2, [r5, #4]
 8004e66:	9905      	ldr	r1, [sp, #20]
 8004e68:	f7fd bfb7 	b.w	8002dda <d_print_comp+0x1e6>
 8004e6c:	1c59      	adds	r1, r3, #1
 8004e6e:	2229      	movs	r2, #41	; 0x29
 8004e70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e74:	54e2      	strb	r2, [r4, r3]
 8004e76:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004e7a:	782b      	ldrb	r3, [r5, #0]
 8004e7c:	2b3d      	cmp	r3, #61	; 0x3d
 8004e7e:	f47e aa57 	bne.w	8003330 <d_print_comp+0x73c>
 8004e82:	29ff      	cmp	r1, #255	; 0xff
 8004e84:	d10f      	bne.n	8004ea6 <d_print_comp+0x22b2>
 8004e86:	2700      	movs	r7, #0
 8004e88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e8c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004e90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e94:	4620      	mov	r0, r4
 8004e96:	4798      	blx	r3
 8004e98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e9c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ea6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004eaa:	232d      	movs	r3, #45	; 0x2d
 8004eac:	1c51      	adds	r1, r2, #1
 8004eae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004eb2:	54a3      	strb	r3, [r4, r2]
 8004eb4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004eb8:	f7fe ba3a 	b.w	8003330 <d_print_comp+0x73c>
 8004ebc:	4f8a      	ldr	r7, [pc, #552]	; (80050e8 <d_print_comp+0x24f4>)
 8004ebe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004ec2:	f107 0a02 	add.w	sl, r7, #2
 8004ec6:	e016      	b.n	8004ef6 <d_print_comp+0x2302>
 8004ec8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ecc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ed0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004ed4:	4798      	blx	r3
 8004ed6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004eda:	3301      	adds	r3, #1
 8004edc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	45ba      	cmp	sl, r7
 8004ee6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004eea:	f804 8002 	strb.w	r8, [r4, r2]
 8004eee:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004ef2:	f43f a980 	beq.w	80041f6 <d_print_comp+0x1602>
 8004ef6:	2bff      	cmp	r3, #255	; 0xff
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4620      	mov	r0, r4
 8004efc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004f00:	d0e2      	beq.n	8004ec8 <d_print_comp+0x22d4>
 8004f02:	461a      	mov	r2, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	e7ed      	b.n	8004ee4 <d_print_comp+0x22f0>
 8004f08:	6892      	ldr	r2, [r2, #8]
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7fd fe71 	bl	8002bf4 <d_print_comp>
 8004f12:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004f16:	b113      	cbz	r3, 8004f1e <d_print_comp+0x232a>
 8004f18:	9b08      	ldr	r3, [sp, #32]
 8004f1a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004f1e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f22:	2b3c      	cmp	r3, #60	; 0x3c
 8004f24:	f000 82c4 	beq.w	80054b0 <d_print_comp+0x28bc>
 8004f28:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f2c:	2fff      	cmp	r7, #255	; 0xff
 8004f2e:	d112      	bne.n	8004f56 <d_print_comp+0x2362>
 8004f30:	f04f 0800 	mov.w	r8, #0
 8004f34:	4639      	mov	r1, r7
 8004f36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f3a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f42:	4620      	mov	r0, r4
 8004f44:	4798      	blx	r3
 8004f46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f4a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004f4e:	3301      	adds	r3, #1
 8004f50:	4647      	mov	r7, r8
 8004f52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f56:	233c      	movs	r3, #60	; 0x3c
 8004f58:	1c7a      	adds	r2, r7, #1
 8004f5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f5e:	55e3      	strb	r3, [r4, r7]
 8004f60:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f64:	68ab      	ldr	r3, [r5, #8]
 8004f66:	4631      	mov	r1, r6
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f7fd fe42 	bl	8002bf4 <d_print_comp>
 8004f70:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f74:	2b3e      	cmp	r3, #62	; 0x3e
 8004f76:	f000 827d 	beq.w	8005474 <d_print_comp+0x2880>
 8004f7a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f7e:	2fff      	cmp	r7, #255	; 0xff
 8004f80:	d111      	bne.n	8004fa6 <d_print_comp+0x23b2>
 8004f82:	2600      	movs	r6, #0
 8004f84:	4639      	mov	r1, r7
 8004f86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f8a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f92:	4620      	mov	r0, r4
 8004f94:	4798      	blx	r3
 8004f96:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f9a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	4637      	mov	r7, r6
 8004fa2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fa6:	233e      	movs	r3, #62	; 0x3e
 8004fa8:	1c7a      	adds	r2, r7, #1
 8004faa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004fae:	55e3      	strb	r3, [r4, r7]
 8004fb0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004fb4:	f7ff badc 	b.w	8004570 <d_print_comp+0x197c>
 8004fb8:	4f4c      	ldr	r7, [pc, #304]	; (80050ec <d_print_comp+0x24f8>)
 8004fba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004fbe:	f107 0905 	add.w	r9, r7, #5
 8004fc2:	f04f 0a00 	mov.w	sl, #0
 8004fc6:	e016      	b.n	8004ff6 <d_print_comp+0x2402>
 8004fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fd0:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fd4:	4798      	blx	r3
 8004fd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	45b9      	cmp	r9, r7
 8004fe6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004fea:	f804 8002 	strb.w	r8, [r4, r2]
 8004fee:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004ff2:	f43e ab41 	beq.w	8003678 <d_print_comp+0xa84>
 8004ff6:	2bff      	cmp	r3, #255	; 0xff
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8005000:	d0e2      	beq.n	8004fc8 <d_print_comp+0x23d4>
 8005002:	461a      	mov	r2, r3
 8005004:	3301      	adds	r3, #1
 8005006:	e7ed      	b.n	8004fe4 <d_print_comp+0x23f0>
 8005008:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800500c:	2fff      	cmp	r7, #255	; 0xff
 800500e:	d112      	bne.n	8005036 <d_print_comp+0x2442>
 8005010:	f04f 0a00 	mov.w	sl, #0
 8005014:	4639      	mov	r1, r7
 8005016:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800501a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 800501e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005022:	4620      	mov	r0, r4
 8005024:	4798      	blx	r3
 8005026:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800502a:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 800502e:	3301      	adds	r3, #1
 8005030:	4657      	mov	r7, sl
 8005032:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005036:	2320      	movs	r3, #32
 8005038:	1c7a      	adds	r2, r7, #1
 800503a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800503e:	55e3      	strb	r3, [r4, r7]
 8005040:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005044:	f7fe bdda 	b.w	8003bfc <d_print_comp+0x1008>
 8005048:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800504c:	2900      	cmp	r1, #0
 800504e:	f6fe ad99 	blt.w	8003b84 <d_print_comp+0xf90>
 8005052:	f7fb fbc3 	bl	80007dc <d_index_template_argument.part.9>
 8005056:	4602      	mov	r2, r0
 8005058:	2800      	cmp	r0, #0
 800505a:	f47e ad93 	bne.w	8003b84 <d_print_comp+0xf90>
 800505e:	2301      	movs	r3, #1
 8005060:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005064:	686a      	ldr	r2, [r5, #4]
 8005066:	9905      	ldr	r1, [sp, #20]
 8005068:	f7fd beb7 	b.w	8002dda <d_print_comp+0x1e6>
 800506c:	9905      	ldr	r1, [sp, #20]
 800506e:	686a      	ldr	r2, [r5, #4]
 8005070:	f7fd beb3 	b.w	8002dda <d_print_comp+0x1e6>
 8005074:	220d      	movs	r2, #13
 8005076:	491e      	ldr	r1, [pc, #120]	; (80050f0 <d_print_comp+0x24fc>)
 8005078:	4620      	mov	r0, r4
 800507a:	f7fb f997 	bl	80003ac <d_append_buffer>
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	4620      	mov	r0, r4
 8005082:	3101      	adds	r1, #1
 8005084:	f7fb fc84 	bl	8000990 <d_append_num>
 8005088:	2203      	movs	r2, #3
 800508a:	491a      	ldr	r1, [pc, #104]	; (80050f4 <d_print_comp+0x2500>)
 800508c:	4620      	mov	r0, r4
 800508e:	f7fb f98d 	bl	80003ac <d_append_buffer>
 8005092:	68bf      	ldr	r7, [r7, #8]
 8005094:	f7ff b8b4 	b.w	8004200 <d_print_comp+0x160c>
 8005098:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800509c:	9905      	ldr	r1, [sp, #20]
 800509e:	686a      	ldr	r2, [r5, #4]
 80050a0:	42b8      	cmp	r0, r7
 80050a2:	f47d ae9a 	bne.w	8002dda <d_print_comp+0x1e6>
 80050a6:	3b01      	subs	r3, #1
 80050a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80050ac:	f7fd be95 	b.w	8002dda <d_print_comp+0x1e6>
 80050b0:	4642      	mov	r2, r8
 80050b2:	465b      	mov	r3, fp
 80050b4:	46ab      	mov	fp, r5
 80050b6:	f1bb 0f04 	cmp.w	fp, #4
 80050ba:	46a0      	mov	r8, r4
 80050bc:	461d      	mov	r5, r3
 80050be:	4614      	mov	r4, r2
 80050c0:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 80050c4:	f000 82a3 	beq.w	800560e <d_print_comp+0x2a1a>
 80050c8:	f1bb 0f02 	cmp.w	fp, #2
 80050cc:	d137      	bne.n	800513e <d_print_comp+0x254a>
 80050ce:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80050d2:	f89a 3000 	ldrb.w	r3, [sl]
 80050d6:	2b46      	cmp	r3, #70	; 0x46
 80050d8:	f000 8327 	beq.w	800572a <d_print_comp+0x2b36>
 80050dc:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 80050e0:	3a0c      	subs	r2, #12
 80050e2:	e020      	b.n	8005126 <d_print_comp+0x2532>
 80050e4:	08011d44 	.word	0x08011d44
 80050e8:	08011b68 	.word	0x08011b68
 80050ec:	08011cdc 	.word	0x08011cdc
 80050f0:	08011b6c 	.word	0x08011b6c
 80050f4:	08011b7c 	.word	0x08011b7c
 80050f8:	2f04      	cmp	r7, #4
 80050fa:	f43f a81d 	beq.w	8004138 <d_print_comp+0x1544>
 80050fe:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8005102:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005106:	2300      	movs	r3, #0
 8005108:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800510c:	f84e ac10 	str.w	sl, [lr, #-16]
 8005110:	9b01      	ldr	r3, [sp, #4]
 8005112:	f8da a008 	ldr.w	sl, [sl, #8]
 8005116:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
 800511a:	3701      	adds	r7, #1
 800511c:	f84e bc04 	str.w	fp, [lr, #-4]
 8005120:	f84e 3c08 	str.w	r3, [lr, #-8]
 8005124:	4672      	mov	r2, lr
 8005126:	f89a 0000 	ldrb.w	r0, [sl]
 800512a:	f7fb f975 	bl	8000418 <is_fnqual_component_type>
 800512e:	f1a2 0b04 	sub.w	fp, r2, #4
 8005132:	f102 0e10 	add.w	lr, r2, #16
 8005136:	f102 0c0c 	add.w	ip, r2, #12
 800513a:	2800      	cmp	r0, #0
 800513c:	d1dc      	bne.n	80050f8 <d_print_comp+0x2504>
 800513e:	68ea      	ldr	r2, [r5, #12]
 8005140:	4631      	mov	r1, r6
 8005142:	4620      	mov	r0, r4
 8005144:	f7fd fd56 	bl	8002bf4 <d_print_comp>
 8005148:	f898 3000 	ldrb.w	r3, [r8]
 800514c:	2b04      	cmp	r3, #4
 800514e:	bf04      	itt	eq
 8005150:	9b06      	ldreq	r3, [sp, #24]
 8005152:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 8005156:	013f      	lsls	r7, r7, #4
 8005158:	f04f 0a20 	mov.w	sl, #32
 800515c:	46a8      	mov	r8, r5
 800515e:	eb09 0b07 	add.w	fp, r9, r7
 8005162:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 8005166:	bb0d      	cbnz	r5, 80051ac <d_print_comp+0x25b8>
 8005168:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800516c:	2bff      	cmp	r3, #255	; 0xff
 800516e:	4620      	mov	r0, r4
 8005170:	4619      	mov	r1, r3
 8005172:	d10e      	bne.n	8005192 <d_print_comp+0x259e>
 8005174:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005178:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800517c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005180:	4798      	blx	r3
 8005182:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005186:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005190:	462b      	mov	r3, r5
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005198:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800519c:	f804 a003 	strb.w	sl, [r4, r3]
 80051a0:	4631      	mov	r1, r6
 80051a2:	4620      	mov	r0, r4
 80051a4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80051a8:	f000 fbba 	bl	8005920 <d_print_mod>
 80051ac:	3f10      	subs	r7, #16
 80051ae:	d1d6      	bne.n	800515e <d_print_comp+0x256a>
 80051b0:	9b02      	ldr	r3, [sp, #8]
 80051b2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80051b6:	4645      	mov	r5, r8
 80051b8:	f7fe bfc1 	b.w	800413e <d_print_comp+0x154a>
 80051bc:	4631      	mov	r1, r6
 80051be:	68aa      	ldr	r2, [r5, #8]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7fd fd17 	bl	8002bf4 <d_print_comp>
 80051c6:	9905      	ldr	r1, [sp, #20]
 80051c8:	686a      	ldr	r2, [r5, #4]
 80051ca:	f7fd be06 	b.w	8002dda <d_print_comp+0x1e6>
 80051ce:	460f      	mov	r7, r1
 80051d0:	46a9      	mov	r9, r5
 80051d2:	f7fe bebb 	b.w	8003f4c <d_print_comp+0x1358>
 80051d6:	4644      	mov	r4, r8
 80051d8:	465d      	mov	r5, fp
 80051da:	f8c8 1114 	str.w	r1, [r8, #276]	; 0x114
 80051de:	f7fe bfab 	b.w	8004138 <d_print_comp+0x1544>
 80051e2:	68ea      	ldr	r2, [r5, #12]
 80051e4:	4631      	mov	r1, r6
 80051e6:	4620      	mov	r0, r4
 80051e8:	f7fd fd04 	bl	8002bf4 <d_print_comp>
 80051ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ee:	9a01      	ldr	r2, [sp, #4]
 80051f0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f43e ab19 	beq.w	800382c <d_print_comp+0xc38>
 80051fa:	f7fe bb1f 	b.w	800383c <d_print_comp+0xc48>
 80051fe:	2301      	movs	r3, #1
 8005200:	4664      	mov	r4, ip
 8005202:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
 8005206:	f7fe bb19 	b.w	800383c <d_print_comp+0xc48>
 800520a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800520e:	f7fe bead 	b.w	8003f6c <d_print_comp+0x1378>
 8005212:	4631      	mov	r1, r6
 8005214:	68aa      	ldr	r2, [r5, #8]
 8005216:	4620      	mov	r0, r4
 8005218:	f001 f9f4 	bl	8006604 <d_print_subexpr>
 800521c:	2203      	movs	r2, #3
 800521e:	49bf      	ldr	r1, [pc, #764]	; (800551c <d_print_comp+0x2928>)
 8005220:	4620      	mov	r0, r4
 8005222:	f7fb f8c3 	bl	80003ac <d_append_buffer>
 8005226:	9905      	ldr	r1, [sp, #20]
 8005228:	686a      	ldr	r2, [r5, #4]
 800522a:	f7fd bdd6 	b.w	8002dda <d_print_comp+0x1e6>
 800522e:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
 8005232:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 8005236:	f1be 0f00 	cmp.w	lr, #0
 800523a:	dd17      	ble.n	800526c <d_print_comp+0x2678>
 800523c:	6810      	ldr	r0, [r2, #0]
 800523e:	4581      	cmp	r9, r0
 8005240:	f000 81a7 	beq.w	8005592 <d_print_comp+0x299e>
 8005244:	f102 0b08 	add.w	fp, r2, #8
 8005248:	46bc      	mov	ip, r7
 800524a:	9101      	str	r1, [sp, #4]
 800524c:	4670      	mov	r0, lr
 800524e:	e004      	b.n	800525a <d_print_comp+0x2666>
 8005250:	f852 103c 	ldr.w	r1, [r2, ip, lsl #3]
 8005254:	4589      	cmp	r9, r1
 8005256:	f000 819d 	beq.w	8005594 <d_print_comp+0x29a0>
 800525a:	f10c 0c01 	add.w	ip, ip, #1
 800525e:	4560      	cmp	r0, ip
 8005260:	46da      	mov	sl, fp
 8005262:	f10b 0b08 	add.w	fp, fp, #8
 8005266:	d1f3      	bne.n	8005250 <d_print_comp+0x265c>
 8005268:	9901      	ldr	r1, [sp, #4]
 800526a:	4686      	mov	lr, r0
 800526c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005270:	459e      	cmp	lr, r3
 8005272:	f280 8344 	bge.w	80058fe <d_print_comp+0x2d0a>
 8005276:	f10e 0301 	add.w	r3, lr, #1
 800527a:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 800527e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8005282:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8005286:	f842 903e 	str.w	r9, [r2, lr, lsl #3]
 800528a:	f10c 0c04 	add.w	ip, ip, #4
 800528e:	2800      	cmp	r0, #0
 8005290:	f000 825b 	beq.w	800574a <d_print_comp+0x2b56>
 8005294:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8005298:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800529c:	429a      	cmp	r2, r3
 800529e:	f102 0e01 	add.w	lr, r2, #1
 80052a2:	f280 832c 	bge.w	80058fe <d_print_comp+0x2d0a>
 80052a6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80052aa:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 80052ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052b2:	6842      	ldr	r2, [r0, #4]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	f8cc 3000 	str.w	r3, [ip]
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	469c      	mov	ip, r3
 80052be:	e7e6      	b.n	800528e <d_print_comp+0x269a>
 80052c0:	4606      	mov	r6, r0
 80052c2:	4647      	mov	r7, r8
 80052c4:	e001      	b.n	80052ca <d_print_comp+0x26d6>
 80052c6:	68ff      	ldr	r7, [r7, #12]
 80052c8:	b31f      	cbz	r7, 8005312 <d_print_comp+0x271e>
 80052ca:	783b      	ldrb	r3, [r7, #0]
 80052cc:	2b2f      	cmp	r3, #47	; 0x2f
 80052ce:	d120      	bne.n	8005312 <d_print_comp+0x271e>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	b1f3      	cbz	r3, 8005312 <d_print_comp+0x271e>
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	2a4a      	cmp	r2, #74	; 0x4a
 80052d8:	bf18      	it	ne
 80052da:	3601      	addne	r6, #1
 80052dc:	d1f3      	bne.n	80052c6 <d_print_comp+0x26d2>
 80052de:	6899      	ldr	r1, [r3, #8]
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7fb faa1 	bl	8000828 <d_find_pack>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f000 81ef 	beq.w	80056ca <d_print_comp+0x2ad6>
 80052ec:	7803      	ldrb	r3, [r0, #0]
 80052ee:	2b2f      	cmp	r3, #47	; 0x2f
 80052f0:	f040 81eb 	bne.w	80056ca <d_print_comp+0x2ad6>
 80052f4:	6883      	ldr	r3, [r0, #8]
 80052f6:	b153      	cbz	r3, 800530e <d_print_comp+0x271a>
 80052f8:	2300      	movs	r3, #0
 80052fa:	e004      	b.n	8005306 <d_print_comp+0x2712>
 80052fc:	7802      	ldrb	r2, [r0, #0]
 80052fe:	2a2f      	cmp	r2, #47	; 0x2f
 8005300:	d105      	bne.n	800530e <d_print_comp+0x271a>
 8005302:	6882      	ldr	r2, [r0, #8]
 8005304:	b11a      	cbz	r2, 800530e <d_print_comp+0x271a>
 8005306:	68c0      	ldr	r0, [r0, #12]
 8005308:	3301      	adds	r3, #1
 800530a:	2800      	cmp	r0, #0
 800530c:	d1f6      	bne.n	80052fc <d_print_comp+0x2708>
 800530e:	441e      	add	r6, r3
 8005310:	e7d9      	b.n	80052c6 <d_print_comp+0x26d2>
 8005312:	4631      	mov	r1, r6
 8005314:	4620      	mov	r0, r4
 8005316:	f7fb fb3b 	bl	8000990 <d_append_num>
 800531a:	9905      	ldr	r1, [sp, #20]
 800531c:	686a      	ldr	r2, [r5, #4]
 800531e:	f7fd bd5c 	b.w	8002dda <d_print_comp+0x1e6>
 8005322:	4631      	mov	r1, r6
 8005324:	4620      	mov	r0, r4
 8005326:	f001 f92d 	bl	8006584 <d_print_expr_op>
 800532a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800532e:	2fff      	cmp	r7, #255	; 0xff
 8005330:	d112      	bne.n	8005358 <d_print_comp+0x2764>
 8005332:	f04f 0800 	mov.w	r8, #0
 8005336:	4639      	mov	r1, r7
 8005338:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800533c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005340:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005344:	4620      	mov	r0, r4
 8005346:	4798      	blx	r3
 8005348:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800534c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005350:	3301      	adds	r3, #1
 8005352:	4647      	mov	r7, r8
 8005354:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005358:	1c7a      	adds	r2, r7, #1
 800535a:	233c      	movs	r3, #60	; 0x3c
 800535c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005360:	55e3      	strb	r3, [r4, r7]
 8005362:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005366:	68eb      	ldr	r3, [r5, #12]
 8005368:	4631      	mov	r1, r6
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	4620      	mov	r0, r4
 800536e:	f7fd fc41 	bl	8002bf4 <d_print_comp>
 8005372:	2202      	movs	r2, #2
 8005374:	496a      	ldr	r1, [pc, #424]	; (8005520 <d_print_comp+0x292c>)
 8005376:	4620      	mov	r0, r4
 8005378:	f7fb f818 	bl	80003ac <d_append_buffer>
 800537c:	68eb      	ldr	r3, [r5, #12]
 800537e:	4631      	mov	r1, r6
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	4620      	mov	r0, r4
 8005384:	f7fd fc36 	bl	8002bf4 <d_print_comp>
 8005388:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800538c:	2fff      	cmp	r7, #255	; 0xff
 800538e:	d111      	bne.n	80053b4 <d_print_comp+0x27c0>
 8005390:	2600      	movs	r6, #0
 8005392:	4639      	mov	r1, r7
 8005394:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005398:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800539c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053a0:	4620      	mov	r0, r4
 80053a2:	4798      	blx	r3
 80053a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053a8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053ac:	3301      	adds	r3, #1
 80053ae:	4637      	mov	r7, r6
 80053b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053b4:	1c7a      	adds	r2, r7, #1
 80053b6:	2329      	movs	r3, #41	; 0x29
 80053b8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80053bc:	55e3      	strb	r3, [r4, r7]
 80053be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80053c2:	686a      	ldr	r2, [r5, #4]
 80053c4:	9905      	ldr	r1, [sp, #20]
 80053c6:	f7fd bd08 	b.w	8002dda <d_print_comp+0x1e6>
 80053ca:	9905      	ldr	r1, [sp, #20]
 80053cc:	686a      	ldr	r2, [r5, #4]
 80053ce:	f7fd bd04 	b.w	8002dda <d_print_comp+0x1e6>
 80053d2:	4642      	mov	r2, r8
 80053d4:	4631      	mov	r1, r6
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7fd fc0c 	bl	8002bf4 <d_print_comp>
 80053dc:	9905      	ldr	r1, [sp, #20]
 80053de:	686a      	ldr	r2, [r5, #4]
 80053e0:	f7fd bcfb 	b.w	8002dda <d_print_comp+0x1e6>
 80053e4:	a918      	add	r1, sp, #96	; 0x60
 80053e6:	4620      	mov	r0, r4
 80053e8:	f841 3d40 	str.w	r3, [r1, #-64]!
 80053ec:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80053f0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 80053f4:	4641      	mov	r1, r8
 80053f6:	960a      	str	r6, [sp, #40]	; 0x28
 80053f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053fa:	9509      	str	r5, [sp, #36]	; 0x24
 80053fc:	f7fd fbfa 	bl	8002bf4 <d_print_comp>
 8005400:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005402:	9b08      	ldr	r3, [sp, #32]
 8005404:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005408:	b9ee      	cbnz	r6, 8005446 <d_print_comp+0x2852>
 800540a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800540e:	2fff      	cmp	r7, #255	; 0xff
 8005410:	d110      	bne.n	8005434 <d_print_comp+0x2840>
 8005412:	4639      	mov	r1, r7
 8005414:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005418:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800541c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005420:	4620      	mov	r0, r4
 8005422:	4798      	blx	r3
 8005424:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005428:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800542c:	3301      	adds	r3, #1
 800542e:	4637      	mov	r7, r6
 8005430:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005434:	2320      	movs	r3, #32
 8005436:	1c7a      	adds	r2, r7, #1
 8005438:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800543c:	55e3      	strb	r3, [r4, r7]
 800543e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005442:	f7fe ba0c 	b.w	800385e <d_print_comp+0xc6a>
 8005446:	9905      	ldr	r1, [sp, #20]
 8005448:	686a      	ldr	r2, [r5, #4]
 800544a:	f7fd bcc6 	b.w	8002dda <d_print_comp+0x1e6>
 800544e:	4935      	ldr	r1, [pc, #212]	; (8005524 <d_print_comp+0x2930>)
 8005450:	68b8      	ldr	r0, [r7, #8]
 8005452:	f008 fdb9 	bl	800dfc8 <strncmp>
 8005456:	2800      	cmp	r0, #0
 8005458:	f47e abc6 	bne.w	8003be8 <d_print_comp+0xff4>
 800545c:	4631      	mov	r1, r6
 800545e:	68ea      	ldr	r2, [r5, #12]
 8005460:	4620      	mov	r0, r4
 8005462:	f7fd fbc7 	bl	8002bf4 <d_print_comp>
 8005466:	2202      	movs	r2, #2
 8005468:	492f      	ldr	r1, [pc, #188]	; (8005528 <d_print_comp+0x2934>)
 800546a:	4620      	mov	r0, r4
 800546c:	f7fa ff9e 	bl	80003ac <d_append_buffer>
 8005470:	f7fe bc09 	b.w	8003c86 <d_print_comp+0x1092>
 8005474:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005478:	2fff      	cmp	r7, #255	; 0xff
 800547a:	d111      	bne.n	80054a0 <d_print_comp+0x28ac>
 800547c:	2600      	movs	r6, #0
 800547e:	4639      	mov	r1, r7
 8005480:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005484:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005488:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800548c:	4620      	mov	r0, r4
 800548e:	4798      	blx	r3
 8005490:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005494:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005498:	3301      	adds	r3, #1
 800549a:	4637      	mov	r7, r6
 800549c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054a0:	2320      	movs	r3, #32
 80054a2:	1c7a      	adds	r2, r7, #1
 80054a4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80054a8:	55e3      	strb	r3, [r4, r7]
 80054aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80054ae:	e564      	b.n	8004f7a <d_print_comp+0x2386>
 80054b0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80054b4:	2fff      	cmp	r7, #255	; 0xff
 80054b6:	d112      	bne.n	80054de <d_print_comp+0x28ea>
 80054b8:	f04f 0800 	mov.w	r8, #0
 80054bc:	4639      	mov	r1, r7
 80054be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80054c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054ca:	4620      	mov	r0, r4
 80054cc:	4798      	blx	r3
 80054ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054d2:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80054d6:	3301      	adds	r3, #1
 80054d8:	4647      	mov	r7, r8
 80054da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054de:	2320      	movs	r3, #32
 80054e0:	1c7a      	adds	r2, r7, #1
 80054e2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80054e6:	55e3      	strb	r3, [r4, r7]
 80054e8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80054ec:	e51c      	b.n	8004f28 <d_print_comp+0x2334>
 80054ee:	4640      	mov	r0, r8
 80054f0:	490e      	ldr	r1, [pc, #56]	; (800552c <d_print_comp+0x2938>)
 80054f2:	f001 fc65 	bl	8006dc0 <strcmp>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f040 81fb 	bne.w	80058f2 <d_print_comp+0x2cfe>
 80054fc:	68eb      	ldr	r3, [r5, #12]
 80054fe:	4631      	mov	r1, r6
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	4620      	mov	r0, r4
 8005504:	f001 f87e 	bl	8006604 <d_print_subexpr>
 8005508:	f7fd bc60 	b.w	8002dcc <d_print_comp+0x1d8>
 800550c:	9905      	ldr	r1, [sp, #20]
 800550e:	686a      	ldr	r2, [r5, #4]
 8005510:	f7fd bc63 	b.w	8002dda <d_print_comp+0x1e6>
 8005514:	9905      	ldr	r1, [sp, #20]
 8005516:	686a      	ldr	r2, [r5, #4]
 8005518:	f7fd bc5f 	b.w	8002dda <d_print_comp+0x1e6>
 800551c:	08011d68 	.word	0x08011d68
 8005520:	08011d1c 	.word	0x08011d1c
 8005524:	08011b80 	.word	0x08011b80
 8005528:	08011b88 	.word	0x08011b88
 800552c:	08011b20 	.word	0x08011b20
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	2a01      	cmp	r2, #1
 8005536:	f47d ac4e 	bne.w	8002dd6 <d_print_comp+0x1e2>
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b3e      	cmp	r3, #62	; 0x3e
 8005540:	f47d ac49 	bne.w	8002dd6 <d_print_comp+0x1e2>
 8005544:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005548:	2fff      	cmp	r7, #255	; 0xff
 800554a:	d111      	bne.n	8005570 <d_print_comp+0x297c>
 800554c:	2600      	movs	r6, #0
 800554e:	4639      	mov	r1, r7
 8005550:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005554:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005558:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800555c:	4620      	mov	r0, r4
 800555e:	4798      	blx	r3
 8005560:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005564:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005568:	3301      	adds	r3, #1
 800556a:	4637      	mov	r7, r6
 800556c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005570:	1c7a      	adds	r2, r7, #1
 8005572:	2329      	movs	r3, #41	; 0x29
 8005574:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005578:	55e3      	strb	r3, [r4, r7]
 800557a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800557e:	686a      	ldr	r2, [r5, #4]
 8005580:	9905      	ldr	r1, [sp, #20]
 8005582:	f7fd bc2a 	b.w	8002dda <d_print_comp+0x1e6>
 8005586:	2a05      	cmp	r2, #5
 8005588:	f200 80a9 	bhi.w	80056de <d_print_comp+0x2aea>
 800558c:	3b57      	subs	r3, #87	; 0x57
 800558e:	f7ff ba1d 	b.w	80049cc <d_print_comp+0x1dd8>
 8005592:	4692      	mov	sl, r2
 8005594:	461a      	mov	r2, r3
 8005596:	e001      	b.n	800559c <d_print_comp+0x29a8>
 8005598:	6852      	ldr	r2, [r2, #4]
 800559a:	b342      	cbz	r2, 80055ee <d_print_comp+0x29fa>
 800559c:	6811      	ldr	r1, [r2, #0]
 800559e:	4589      	cmp	r9, r1
 80055a0:	d003      	beq.n	80055aa <d_print_comp+0x29b6>
 80055a2:	428d      	cmp	r5, r1
 80055a4:	d1f8      	bne.n	8005598 <d_print_comp+0x29a4>
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d0f6      	beq.n	8005598 <d_print_comp+0x29a4>
 80055aa:	f109 0108 	add.w	r1, r9, #8
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7fb f92a 	bl	8000808 <d_lookup_template_argument.isra.10>
 80055b4:	4681      	mov	r9, r0
 80055b6:	b198      	cbz	r0, 80055e0 <d_print_comp+0x29ec>
 80055b8:	f899 3000 	ldrb.w	r3, [r9]
 80055bc:	2b2f      	cmp	r3, #47	; 0x2f
 80055be:	f47e acb6 	bne.w	8003f2e <d_print_comp+0x133a>
 80055c2:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 80055c6:	2900      	cmp	r1, #0
 80055c8:	f6fe acb6 	blt.w	8003f38 <d_print_comp+0x1344>
 80055cc:	4648      	mov	r0, r9
 80055ce:	f7fb f905 	bl	80007dc <d_index_template_argument.part.9>
 80055d2:	4681      	mov	r9, r0
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f47e acaa 	bne.w	8003f2e <d_print_comp+0x133a>
 80055da:	b10f      	cbz	r7, 80055e0 <d_print_comp+0x29ec>
 80055dc:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 80055e0:	2301      	movs	r3, #1
 80055e2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80055e6:	686a      	ldr	r2, [r5, #4]
 80055e8:	9905      	ldr	r1, [sp, #20]
 80055ea:	f7fd bbf6 	b.w	8002dda <d_print_comp+0x1e6>
 80055ee:	f8da 3004 	ldr.w	r3, [sl, #4]
 80055f2:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 80055f6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055fa:	f109 0108 	add.w	r1, r9, #8
 80055fe:	4620      	mov	r0, r4
 8005600:	f7fb f902 	bl	8000808 <d_lookup_template_argument.isra.10>
 8005604:	2701      	movs	r7, #1
 8005606:	4681      	mov	r9, r0
 8005608:	2800      	cmp	r0, #0
 800560a:	d1d5      	bne.n	80055b8 <d_print_comp+0x29c4>
 800560c:	e7e6      	b.n	80055dc <d_print_comp+0x29e8>
 800560e:	ab18      	add	r3, sp, #96	; 0x60
 8005610:	9a01      	ldr	r2, [sp, #4]
 8005612:	f843 2d48 	str.w	r2, [r3, #-72]!
 8005616:	f8cd 801c 	str.w	r8, [sp, #28]
 800561a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800561e:	e58e      	b.n	800513e <d_print_comp+0x254a>
 8005620:	68eb      	ldr	r3, [r5, #12]
 8005622:	f893 9000 	ldrb.w	r9, [r3]
 8005626:	f1b9 0f00 	cmp.w	r9, #0
 800562a:	f47d ae3f 	bne.w	80032ac <d_print_comp+0x6b8>
 800562e:	283d      	cmp	r0, #61	; 0x3d
 8005630:	f000 80e6 	beq.w	8005800 <d_print_comp+0x2c0c>
 8005634:	4631      	mov	r1, r6
 8005636:	68ea      	ldr	r2, [r5, #12]
 8005638:	4620      	mov	r0, r4
 800563a:	f1a8 0802 	sub.w	r8, r8, #2
 800563e:	f7fd fad9 	bl	8002bf4 <d_print_comp>
 8005642:	f1b8 0f04 	cmp.w	r8, #4
 8005646:	f200 80d7 	bhi.w	80057f8 <d_print_comp+0x2c04>
 800564a:	e8df f008 	tbb	[pc, r8]
 800564e:	93b4      	.short	0x93b4
 8005650:	818a      	.short	0x818a
 8005652:	35          	.byte	0x35
 8005653:	00          	.byte	0x00
 8005654:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005658:	4631      	mov	r1, r6
 800565a:	4620      	mov	r0, r4
 800565c:	f000 ffd2 	bl	8006604 <d_print_subexpr>
 8005660:	464a      	mov	r2, r9
 8005662:	4631      	mov	r1, r6
 8005664:	4620      	mov	r0, r4
 8005666:	f000 ff8d 	bl	8006584 <d_print_expr_op>
 800566a:	9905      	ldr	r1, [sp, #20]
 800566c:	686a      	ldr	r2, [r5, #4]
 800566e:	f7fd bbb4 	b.w	8002dda <d_print_comp+0x1e6>
 8005672:	4641      	mov	r1, r8
 8005674:	4620      	mov	r0, r4
 8005676:	f7fb f8d7 	bl	8000828 <d_find_pack>
 800567a:	b1a8      	cbz	r0, 80056a8 <d_print_comp+0x2ab4>
 800567c:	7803      	ldrb	r3, [r0, #0]
 800567e:	2b2f      	cmp	r3, #47	; 0x2f
 8005680:	d112      	bne.n	80056a8 <d_print_comp+0x2ab4>
 8005682:	6883      	ldr	r3, [r0, #8]
 8005684:	b183      	cbz	r3, 80056a8 <d_print_comp+0x2ab4>
 8005686:	68c0      	ldr	r0, [r0, #12]
 8005688:	3701      	adds	r7, #1
 800568a:	e7f6      	b.n	800567a <d_print_comp+0x2a86>
 800568c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	2a01      	cmp	r2, #1
 8005694:	f47f aad2 	bne.w	8004c3c <d_print_comp+0x2048>
 8005698:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	2a29      	cmp	r2, #41	; 0x29
 80056a0:	bf08      	it	eq
 80056a2:	4698      	moveq	r8, r3
 80056a4:	f7ff baca 	b.w	8004c3c <d_print_comp+0x2048>
 80056a8:	4639      	mov	r1, r7
 80056aa:	4620      	mov	r0, r4
 80056ac:	f7fb f970 	bl	8000990 <d_append_num>
 80056b0:	9905      	ldr	r1, [sp, #20]
 80056b2:	686a      	ldr	r2, [r5, #4]
 80056b4:	f7fd bb91 	b.w	8002dda <d_print_comp+0x1e6>
 80056b8:	2203      	movs	r2, #3
 80056ba:	4994      	ldr	r1, [pc, #592]	; (800590c <d_print_comp+0x2d18>)
 80056bc:	4620      	mov	r0, r4
 80056be:	f7fa fe75 	bl	80003ac <d_append_buffer>
 80056c2:	9905      	ldr	r1, [sp, #20]
 80056c4:	686a      	ldr	r2, [r5, #4]
 80056c6:	f7fd bb88 	b.w	8002dda <d_print_comp+0x1e6>
 80056ca:	2300      	movs	r3, #0
 80056cc:	441e      	add	r6, r3
 80056ce:	e5fa      	b.n	80052c6 <d_print_comp+0x26d2>
 80056d0:	464a      	mov	r2, r9
 80056d2:	4631      	mov	r1, r6
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 ff55 	bl	8006584 <d_print_expr_op>
 80056da:	f7fd bea9 	b.w	8003430 <d_print_comp+0x83c>
 80056de:	2b5f      	cmp	r3, #95	; 0x5f
 80056e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80056e4:	f47f a964 	bne.w	80049b0 <d_print_comp+0x1dbc>
 80056e8:	28ff      	cmp	r0, #255	; 0xff
 80056ea:	f63f a961 	bhi.w	80049b0 <d_print_comp+0x1dbc>
 80056ee:	29ff      	cmp	r1, #255	; 0xff
 80056f0:	fa5f f980 	uxtb.w	r9, r0
 80056f4:	d10f      	bne.n	8005716 <d_print_comp+0x2b22>
 80056f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005702:	4620      	mov	r0, r4
 8005704:	4798      	blx	r3
 8005706:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800570a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800570e:	3301      	adds	r3, #1
 8005710:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005714:	2100      	movs	r1, #0
 8005716:	1c4b      	adds	r3, r1, #1
 8005718:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800571c:	4657      	mov	r7, sl
 800571e:	f804 9001 	strb.w	r9, [r4, r1]
 8005722:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8005726:	f7ff b935 	b.w	8004994 <d_print_comp+0x1da0>
 800572a:	f8da a008 	ldr.w	sl, [sl, #8]
 800572e:	f1ba 0f00 	cmp.w	sl, #0
 8005732:	f43e ad01 	beq.w	8004138 <d_print_comp+0x1544>
 8005736:	e4d1      	b.n	80050dc <d_print_comp+0x24e8>
 8005738:	2205      	movs	r2, #5
 800573a:	4975      	ldr	r1, [pc, #468]	; (8005910 <d_print_comp+0x2d1c>)
 800573c:	4620      	mov	r0, r4
 800573e:	f7fa fe35 	bl	80003ac <d_append_buffer>
 8005742:	9905      	ldr	r1, [sp, #20]
 8005744:	686a      	ldr	r2, [r5, #4]
 8005746:	f7fd bb48 	b.w	8002dda <d_print_comp+0x1e6>
 800574a:	f8cc 0000 	str.w	r0, [ip]
 800574e:	e72c      	b.n	80055aa <d_print_comp+0x29b6>
 8005750:	2202      	movs	r2, #2
 8005752:	4970      	ldr	r1, [pc, #448]	; (8005914 <d_print_comp+0x2d20>)
 8005754:	4620      	mov	r0, r4
 8005756:	f7fa fe29 	bl	80003ac <d_append_buffer>
 800575a:	9905      	ldr	r1, [sp, #20]
 800575c:	686a      	ldr	r2, [r5, #4]
 800575e:	f7fd bb3c 	b.w	8002dda <d_print_comp+0x1e6>
 8005762:	2202      	movs	r2, #2
 8005764:	496c      	ldr	r1, [pc, #432]	; (8005918 <d_print_comp+0x2d24>)
 8005766:	4620      	mov	r0, r4
 8005768:	f7fa fe20 	bl	80003ac <d_append_buffer>
 800576c:	9905      	ldr	r1, [sp, #20]
 800576e:	686a      	ldr	r2, [r5, #4]
 8005770:	f7fd bb33 	b.w	8002dda <d_print_comp+0x1e6>
 8005774:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005778:	2fff      	cmp	r7, #255	; 0xff
 800577a:	d111      	bne.n	80057a0 <d_print_comp+0x2bac>
 800577c:	2600      	movs	r6, #0
 800577e:	4639      	mov	r1, r7
 8005780:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005784:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005788:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800578c:	4620      	mov	r0, r4
 800578e:	4798      	blx	r3
 8005790:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005794:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005798:	3301      	adds	r3, #1
 800579a:	4637      	mov	r7, r6
 800579c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057a0:	1c7a      	adds	r2, r7, #1
 80057a2:	236c      	movs	r3, #108	; 0x6c
 80057a4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057a8:	55e3      	strb	r3, [r4, r7]
 80057aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057ae:	686a      	ldr	r2, [r5, #4]
 80057b0:	9905      	ldr	r1, [sp, #20]
 80057b2:	f7fd bb12 	b.w	8002dda <d_print_comp+0x1e6>
 80057b6:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057ba:	2fff      	cmp	r7, #255	; 0xff
 80057bc:	d111      	bne.n	80057e2 <d_print_comp+0x2bee>
 80057be:	2600      	movs	r6, #0
 80057c0:	4639      	mov	r1, r7
 80057c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057c6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80057ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057ce:	4620      	mov	r0, r4
 80057d0:	4798      	blx	r3
 80057d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057d6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80057da:	3301      	adds	r3, #1
 80057dc:	4637      	mov	r7, r6
 80057de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057e2:	1c7a      	adds	r2, r7, #1
 80057e4:	2375      	movs	r3, #117	; 0x75
 80057e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057ea:	55e3      	strb	r3, [r4, r7]
 80057ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057f0:	686a      	ldr	r2, [r5, #4]
 80057f2:	9905      	ldr	r1, [sp, #20]
 80057f4:	f7fd baf1 	b.w	8002dda <d_print_comp+0x1e6>
 80057f8:	9905      	ldr	r1, [sp, #20]
 80057fa:	686a      	ldr	r2, [r5, #4]
 80057fc:	f7fd baed 	b.w	8002dda <d_print_comp+0x1e6>
 8005800:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005804:	2fff      	cmp	r7, #255	; 0xff
 8005806:	d110      	bne.n	800582a <d_print_comp+0x2c36>
 8005808:	4639      	mov	r1, r7
 800580a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800580e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005812:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005816:	4620      	mov	r0, r4
 8005818:	4798      	blx	r3
 800581a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800581e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8005822:	3301      	adds	r3, #1
 8005824:	464f      	mov	r7, r9
 8005826:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800582a:	232d      	movs	r3, #45	; 0x2d
 800582c:	1c7a      	adds	r2, r7, #1
 800582e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005832:	55e3      	strb	r3, [r4, r7]
 8005834:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005838:	e6fc      	b.n	8005634 <d_print_comp+0x2a40>
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	6891      	ldr	r1, [r2, #8]
 800583e:	2901      	cmp	r1, #1
 8005840:	f47d aa69 	bne.w	8002d16 <d_print_comp+0x122>
 8005844:	6852      	ldr	r2, [r2, #4]
 8005846:	7812      	ldrb	r2, [r2, #0]
 8005848:	2a3e      	cmp	r2, #62	; 0x3e
 800584a:	f47d aa64 	bne.w	8002d16 <d_print_comp+0x122>
 800584e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005852:	2fff      	cmp	r7, #255	; 0xff
 8005854:	d110      	bne.n	8005878 <d_print_comp+0x2c84>
 8005856:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800585a:	4639      	mov	r1, r7
 800585c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005860:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005864:	4620      	mov	r0, r4
 8005866:	4798      	blx	r3
 8005868:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800586c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005870:	3301      	adds	r3, #1
 8005872:	4647      	mov	r7, r8
 8005874:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005878:	2328      	movs	r3, #40	; 0x28
 800587a:	1c7a      	adds	r2, r7, #1
 800587c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005880:	55e3      	strb	r3, [r4, r7]
 8005882:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005886:	68ab      	ldr	r3, [r5, #8]
 8005888:	f7fd ba45 	b.w	8002d16 <d_print_comp+0x122>
 800588c:	465a      	mov	r2, fp
 800588e:	4631      	mov	r1, r6
 8005890:	4620      	mov	r0, r4
 8005892:	f000 feb7 	bl	8006604 <d_print_subexpr>
 8005896:	463a      	mov	r2, r7
 8005898:	4631      	mov	r1, r6
 800589a:	4620      	mov	r0, r4
 800589c:	f000 fe72 	bl	8006584 <d_print_expr_op>
 80058a0:	4652      	mov	r2, sl
 80058a2:	4631      	mov	r1, r6
 80058a4:	4620      	mov	r0, r4
 80058a6:	f000 fead 	bl	8006604 <d_print_subexpr>
 80058aa:	2203      	movs	r2, #3
 80058ac:	491b      	ldr	r1, [pc, #108]	; (800591c <d_print_comp+0x2d28>)
 80058ae:	4620      	mov	r0, r4
 80058b0:	f7fa fd7c 	bl	80003ac <d_append_buffer>
 80058b4:	464a      	mov	r2, r9
 80058b6:	4631      	mov	r1, r6
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fea3 	bl	8006604 <d_print_subexpr>
 80058be:	9905      	ldr	r1, [sp, #20]
 80058c0:	686a      	ldr	r2, [r5, #4]
 80058c2:	f7fd ba8a 	b.w	8002dda <d_print_comp+0x1e6>
 80058c6:	9905      	ldr	r1, [sp, #20]
 80058c8:	686a      	ldr	r2, [r5, #4]
 80058ca:	f7fd ba86 	b.w	8002dda <d_print_comp+0x1e6>
 80058ce:	9905      	ldr	r1, [sp, #20]
 80058d0:	686a      	ldr	r2, [r5, #4]
 80058d2:	f7fd ba82 	b.w	8002dda <d_print_comp+0x1e6>
 80058d6:	68d3      	ldr	r3, [r2, #12]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b29      	cmp	r3, #41	; 0x29
 80058dc:	bf1c      	itt	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 80058e4:	6892      	ldr	r2, [r2, #8]
 80058e6:	4631      	mov	r1, r6
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fe8b 	bl	8006604 <d_print_subexpr>
 80058ee:	f7fd ba22 	b.w	8002d36 <d_print_comp+0x142>
 80058f2:	463a      	mov	r2, r7
 80058f4:	4631      	mov	r1, r6
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 fe44 	bl	8006584 <d_print_expr_op>
 80058fc:	e5fe      	b.n	80054fc <d_print_comp+0x2908>
 80058fe:	2301      	movs	r3, #1
 8005900:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005904:	686a      	ldr	r2, [r5, #4]
 8005906:	f7fd ba68 	b.w	8002dda <d_print_comp+0x1e6>
 800590a:	bf00      	nop
 800590c:	08011d38 	.word	0x08011d38
 8005910:	08011d3c 	.word	0x08011d3c
 8005914:	08011d34 	.word	0x08011d34
 8005918:	08011d30 	.word	0x08011d30
 800591c:	08011d24 	.word	0x08011d24

08005920 <d_print_mod>:
 8005920:	7813      	ldrb	r3, [r2, #0]
 8005922:	3b03      	subs	r3, #3
 8005924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	4615      	mov	r5, r2
 800592a:	4604      	mov	r4, r0
 800592c:	460e      	mov	r6, r1
 800592e:	2b4c      	cmp	r3, #76	; 0x4c
 8005930:	f200 82c8 	bhi.w	8005ec4 <d_print_mod+0x5a4>
 8005934:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005938:	02c60075 	.word	0x02c60075
 800593c:	02c602c6 	.word	0x02c602c6
 8005940:	02c602c6 	.word	0x02c602c6
 8005944:	02c602c6 	.word	0x02c602c6
 8005948:	02c602c6 	.word	0x02c602c6
 800594c:	02c602c6 	.word	0x02c602c6
 8005950:	02c602c6 	.word	0x02c602c6
 8005954:	02c602c6 	.word	0x02c602c6
 8005958:	02c602c6 	.word	0x02c602c6
 800595c:	02c602c6 	.word	0x02c602c6
 8005960:	02c602c6 	.word	0x02c602c6
 8005964:	00a1007a 	.word	0x00a1007a
 8005968:	007a00c8 	.word	0x007a00c8
 800596c:	00c800a1 	.word	0x00c800a1
 8005970:	010a00ee 	.word	0x010a00ee
 8005974:	01480126 	.word	0x01480126
 8005978:	02790166 	.word	0x02790166
 800597c:	029f0252 	.word	0x029f0252
 8005980:	02c602c6 	.word	0x02c602c6
 8005984:	02c602c6 	.word	0x02c602c6
 8005988:	02c60184 	.word	0x02c60184
 800598c:	02c601cc 	.word	0x02c601cc
 8005990:	02c602c6 	.word	0x02c602c6
 8005994:	02c602c6 	.word	0x02c602c6
 8005998:	02c602c6 	.word	0x02c602c6
 800599c:	02c602c6 	.word	0x02c602c6
 80059a0:	02c602c6 	.word	0x02c602c6
 80059a4:	02c602c6 	.word	0x02c602c6
 80059a8:	02c602c6 	.word	0x02c602c6
 80059ac:	02c602c6 	.word	0x02c602c6
 80059b0:	02c602c6 	.word	0x02c602c6
 80059b4:	02c602c6 	.word	0x02c602c6
 80059b8:	02c602c6 	.word	0x02c602c6
 80059bc:	02c602c6 	.word	0x02c602c6
 80059c0:	02c602c6 	.word	0x02c602c6
 80059c4:	02c602c6 	.word	0x02c602c6
 80059c8:	01f402c6 	.word	0x01f402c6
 80059cc:	022a02c6 	.word	0x022a02c6
 80059d0:	004d      	.short	0x004d
 80059d2:	4fd7      	ldr	r7, [pc, #860]	; (8005d30 <d_print_mod+0x410>)
 80059d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80059d8:	f107 0806 	add.w	r8, r7, #6
 80059dc:	f04f 0900 	mov.w	r9, #0
 80059e0:	e016      	b.n	8005a10 <d_print_mod+0xf0>
 80059e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059ea:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80059ee:	4798      	blx	r3
 80059f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059f4:	3301      	adds	r3, #1
 80059f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059fa:	2200      	movs	r2, #0
 80059fc:	2301      	movs	r3, #1
 80059fe:	4547      	cmp	r7, r8
 8005a00:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a04:	f804 a002 	strb.w	sl, [r4, r2]
 8005a08:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005a0c:	f000 825f 	beq.w	8005ece <d_print_mod+0x5ae>
 8005a10:	2bff      	cmp	r3, #255	; 0xff
 8005a12:	4619      	mov	r1, r3
 8005a14:	4620      	mov	r0, r4
 8005a16:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005a1a:	d0e2      	beq.n	80059e2 <d_print_mod+0xc2>
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	e7ed      	b.n	80059fe <d_print_mod+0xde>
 8005a22:	68aa      	ldr	r2, [r5, #8]
 8005a24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	f7fd b8e4 	b.w	8002bf4 <d_print_comp>
 8005a2c:	4dc1      	ldr	r5, [pc, #772]	; (8005d34 <d_print_mod+0x414>)
 8005a2e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a32:	f105 0609 	add.w	r6, r5, #9
 8005a36:	2700      	movs	r7, #0
 8005a38:	e016      	b.n	8005a68 <d_print_mod+0x148>
 8005a3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a42:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a46:	4798      	blx	r3
 8005a48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a52:	2200      	movs	r2, #0
 8005a54:	2301      	movs	r3, #1
 8005a56:	42ae      	cmp	r6, r5
 8005a58:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a5c:	f804 8002 	strb.w	r8, [r4, r2]
 8005a60:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a64:	f000 80ea 	beq.w	8005c3c <d_print_mod+0x31c>
 8005a68:	2bff      	cmp	r3, #255	; 0xff
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a72:	d0e2      	beq.n	8005a3a <d_print_mod+0x11a>
 8005a74:	461a      	mov	r2, r3
 8005a76:	3301      	adds	r3, #1
 8005a78:	e7ed      	b.n	8005a56 <d_print_mod+0x136>
 8005a7a:	4daf      	ldr	r5, [pc, #700]	; (8005d38 <d_print_mod+0x418>)
 8005a7c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a80:	f105 0609 	add.w	r6, r5, #9
 8005a84:	2700      	movs	r7, #0
 8005a86:	e016      	b.n	8005ab6 <d_print_mod+0x196>
 8005a88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a90:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a94:	4798      	blx	r3
 8005a96:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	42ae      	cmp	r6, r5
 8005aa6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005aaa:	f804 8002 	strb.w	r8, [r4, r2]
 8005aae:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005ab2:	f000 80c3 	beq.w	8005c3c <d_print_mod+0x31c>
 8005ab6:	2bff      	cmp	r3, #255	; 0xff
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4620      	mov	r0, r4
 8005abc:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005ac0:	d0e2      	beq.n	8005a88 <d_print_mod+0x168>
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	e7ed      	b.n	8005aa4 <d_print_mod+0x184>
 8005ac8:	4d9c      	ldr	r5, [pc, #624]	; (8005d3c <d_print_mod+0x41c>)
 8005aca:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005ace:	1dae      	adds	r6, r5, #6
 8005ad0:	2700      	movs	r7, #0
 8005ad2:	e016      	b.n	8005b02 <d_print_mod+0x1e2>
 8005ad4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ad8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005adc:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005ae0:	4798      	blx	r3
 8005ae2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005aec:	2200      	movs	r2, #0
 8005aee:	2301      	movs	r3, #1
 8005af0:	42b5      	cmp	r5, r6
 8005af2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005af6:	f804 8002 	strb.w	r8, [r4, r2]
 8005afa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005afe:	f000 809d 	beq.w	8005c3c <d_print_mod+0x31c>
 8005b02:	2bff      	cmp	r3, #255	; 0xff
 8005b04:	4619      	mov	r1, r3
 8005b06:	4620      	mov	r0, r4
 8005b08:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005b0c:	d0e2      	beq.n	8005ad4 <d_print_mod+0x1b4>
 8005b0e:	461a      	mov	r2, r3
 8005b10:	3301      	adds	r3, #1
 8005b12:	e7ed      	b.n	8005af0 <d_print_mod+0x1d0>
 8005b14:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b18:	29ff      	cmp	r1, #255	; 0xff
 8005b1a:	d10f      	bne.n	8005b3c <d_print_mod+0x21c>
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b22:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005b26:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b2a:	4798      	blx	r3
 8005b2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b30:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b34:	3301      	adds	r3, #1
 8005b36:	4629      	mov	r1, r5
 8005b38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	1c4b      	adds	r3, r1, #1
 8005b40:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b44:	5462      	strb	r2, [r4, r1]
 8005b46:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b4a:	e05d      	b.n	8005c08 <d_print_mod+0x2e8>
 8005b4c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b50:	29ff      	cmp	r1, #255	; 0xff
 8005b52:	d10f      	bne.n	8005b74 <d_print_mod+0x254>
 8005b54:	2500      	movs	r5, #0
 8005b56:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b5a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005b5e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b62:	4798      	blx	r3
 8005b64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b68:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b74:	2220      	movs	r2, #32
 8005b76:	1c4b      	adds	r3, r1, #1
 8005b78:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b7c:	5462      	strb	r2, [r4, r1]
 8005b7e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b82:	e154      	b.n	8005e2e <d_print_mod+0x50e>
 8005b84:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b88:	29ff      	cmp	r1, #255	; 0xff
 8005b8a:	d10f      	bne.n	8005bac <d_print_mod+0x28c>
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b92:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005b96:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b9a:	4798      	blx	r3
 8005b9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ba0:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005bac:	1c4a      	adds	r2, r1, #1
 8005bae:	2320      	movs	r3, #32
 8005bb0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005bb4:	5463      	strb	r3, [r4, r1]
 8005bb6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005bba:	4631      	mov	r1, r6
 8005bbc:	68ea      	ldr	r2, [r5, #12]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	f7fd b816 	b.w	8002bf4 <d_print_comp>
 8005bc8:	f011 0604 	ands.w	r6, r1, #4
 8005bcc:	d136      	bne.n	8005c3c <d_print_mod+0x31c>
 8005bce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005bd2:	29ff      	cmp	r1, #255	; 0xff
 8005bd4:	d10e      	bne.n	8005bf4 <d_print_mod+0x2d4>
 8005bd6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005bda:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005bde:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005be2:	4798      	blx	r3
 8005be4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005be8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005bec:	3301      	adds	r3, #1
 8005bee:	4631      	mov	r1, r6
 8005bf0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005bf4:	232a      	movs	r3, #42	; 0x2a
 8005bf6:	1c4a      	adds	r2, r1, #1
 8005bf8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005bfc:	5463      	strb	r3, [r4, r1]
 8005bfe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c02:	e01b      	b.n	8005c3c <d_print_mod+0x31c>
 8005c04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005c08:	2bff      	cmp	r3, #255	; 0xff
 8005c0a:	f040 81a9 	bne.w	8005f60 <d_print_mod+0x640>
 8005c0e:	2500      	movs	r5, #0
 8005c10:	4619      	mov	r1, r3
 8005c12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c1a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4798      	blx	r3
 8005c22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	2101      	movs	r1, #1
 8005c30:	2226      	movs	r2, #38	; 0x26
 8005c32:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005c36:	54e2      	strb	r2, [r4, r3]
 8005c38:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005c44:	2b28      	cmp	r3, #40	; 0x28
 8005c46:	d019      	beq.n	8005c7c <d_print_mod+0x35c>
 8005c48:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005c4c:	29ff      	cmp	r1, #255	; 0xff
 8005c4e:	f040 818b 	bne.w	8005f68 <d_print_mod+0x648>
 8005c52:	2700      	movs	r7, #0
 8005c54:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005c58:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005c5c:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005c60:	4798      	blx	r3
 8005c62:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c66:	3301      	adds	r3, #1
 8005c68:	4639      	mov	r1, r7
 8005c6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2320      	movs	r3, #32
 8005c72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c76:	5463      	strb	r3, [r4, r1]
 8005c78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c7c:	68aa      	ldr	r2, [r5, #8]
 8005c7e:	4d30      	ldr	r5, [pc, #192]	; (8005d40 <d_print_mod+0x420>)
 8005c80:	4631      	mov	r1, r6
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7fc ffb6 	bl	8002bf4 <d_print_comp>
 8005c88:	1cee      	adds	r6, r5, #3
 8005c8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005c8e:	2700      	movs	r7, #0
 8005c90:	e015      	b.n	8005cbe <d_print_mod+0x39e>
 8005c92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c9a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005c9e:	4798      	blx	r3
 8005ca0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005caa:	2200      	movs	r2, #0
 8005cac:	2301      	movs	r3, #1
 8005cae:	42ae      	cmp	r6, r5
 8005cb0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cb4:	f804 8002 	strb.w	r8, [r4, r2]
 8005cb8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005cbc:	d0be      	beq.n	8005c3c <d_print_mod+0x31c>
 8005cbe:	2bff      	cmp	r3, #255	; 0xff
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005cc8:	d0e3      	beq.n	8005c92 <d_print_mod+0x372>
 8005cca:	461a      	mov	r2, r3
 8005ccc:	3301      	adds	r3, #1
 8005cce:	e7ee      	b.n	8005cae <d_print_mod+0x38e>
 8005cd0:	4f1c      	ldr	r7, [pc, #112]	; (8005d44 <d_print_mod+0x424>)
 8005cd2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005cd6:	f107 080a 	add.w	r8, r7, #10
 8005cda:	f04f 0900 	mov.w	r9, #0
 8005cde:	e016      	b.n	8005d0e <d_print_mod+0x3ee>
 8005ce0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ce4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ce8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005cec:	4798      	blx	r3
 8005cee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	45b8      	cmp	r8, r7
 8005cfe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d02:	f804 a002 	strb.w	sl, [r4, r2]
 8005d06:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d0a:	f000 811e 	beq.w	8005f4a <d_print_mod+0x62a>
 8005d0e:	2bff      	cmp	r3, #255	; 0xff
 8005d10:	4619      	mov	r1, r3
 8005d12:	4620      	mov	r0, r4
 8005d14:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005d18:	d0e2      	beq.n	8005ce0 <d_print_mod+0x3c0>
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	e7ed      	b.n	8005cfc <d_print_mod+0x3dc>
 8005d20:	4d09      	ldr	r5, [pc, #36]	; (8005d48 <d_print_mod+0x428>)
 8005d22:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d26:	f105 0611 	add.w	r6, r5, #17
 8005d2a:	2700      	movs	r7, #0
 8005d2c:	e025      	b.n	8005d7a <d_print_mod+0x45a>
 8005d2e:	bf00      	nop
 8005d30:	08011e28 	.word	0x08011e28
 8005d34:	08011de7 	.word	0x08011de7
 8005d38:	08011df3 	.word	0x08011df3
 8005d3c:	08011e00 	.word	0x08011e00
 8005d40:	08011e4c 	.word	0x08011e4c
 8005d44:	08011e50 	.word	0x08011e50
 8005d48:	08011e07 	.word	0x08011e07
 8005d4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d54:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005d58:	4798      	blx	r3
 8005d5a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d5e:	3301      	adds	r3, #1
 8005d60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d64:	2200      	movs	r2, #0
 8005d66:	2301      	movs	r3, #1
 8005d68:	42ae      	cmp	r6, r5
 8005d6a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d6e:	f804 8002 	strb.w	r8, [r4, r2]
 8005d72:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d76:	f43f af61 	beq.w	8005c3c <d_print_mod+0x31c>
 8005d7a:	2bff      	cmp	r3, #255	; 0xff
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005d84:	d0e2      	beq.n	8005d4c <d_print_mod+0x42c>
 8005d86:	461a      	mov	r2, r3
 8005d88:	3301      	adds	r3, #1
 8005d8a:	e7ed      	b.n	8005d68 <d_print_mod+0x448>
 8005d8c:	4f77      	ldr	r7, [pc, #476]	; (8005f6c <d_print_mod+0x64c>)
 8005d8e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d92:	f107 0809 	add.w	r8, r7, #9
 8005d96:	f04f 0900 	mov.w	r9, #0
 8005d9a:	e016      	b.n	8005dca <d_print_mod+0x4aa>
 8005d9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005da0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005da4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005da8:	4798      	blx	r3
 8005daa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dae:	3301      	adds	r3, #1
 8005db0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005db4:	2200      	movs	r2, #0
 8005db6:	2301      	movs	r3, #1
 8005db8:	4547      	cmp	r7, r8
 8005dba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005dbe:	f804 a002 	strb.w	sl, [r4, r2]
 8005dc2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005dc6:	f000 8082 	beq.w	8005ece <d_print_mod+0x5ae>
 8005dca:	2bff      	cmp	r3, #255	; 0xff
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8005dd4:	d0e2      	beq.n	8005d9c <d_print_mod+0x47c>
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	3301      	adds	r3, #1
 8005dda:	e7ed      	b.n	8005db8 <d_print_mod+0x498>
 8005ddc:	4d64      	ldr	r5, [pc, #400]	; (8005f70 <d_print_mod+0x650>)
 8005dde:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005de2:	f105 0608 	add.w	r6, r5, #8
 8005de6:	2700      	movs	r7, #0
 8005de8:	e016      	b.n	8005e18 <d_print_mod+0x4f8>
 8005dea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005df2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005df6:	4798      	blx	r3
 8005df8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e02:	2200      	movs	r2, #0
 8005e04:	2301      	movs	r3, #1
 8005e06:	42ae      	cmp	r6, r5
 8005e08:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e0c:	f804 8002 	strb.w	r8, [r4, r2]
 8005e10:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e14:	f43f af12 	beq.w	8005c3c <d_print_mod+0x31c>
 8005e18:	2bff      	cmp	r3, #255	; 0xff
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005e22:	d0e2      	beq.n	8005dea <d_print_mod+0x4ca>
 8005e24:	461a      	mov	r2, r3
 8005e26:	3301      	adds	r3, #1
 8005e28:	e7ed      	b.n	8005e06 <d_print_mod+0x4e6>
 8005e2a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e2e:	4d51      	ldr	r5, [pc, #324]	; (8005f74 <d_print_mod+0x654>)
 8005e30:	2700      	movs	r7, #0
 8005e32:	1cae      	adds	r6, r5, #2
 8005e34:	e016      	b.n	8005e64 <d_print_mod+0x544>
 8005e36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e3e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e42:	4798      	blx	r3
 8005e44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2301      	movs	r3, #1
 8005e52:	42b5      	cmp	r5, r6
 8005e54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e58:	f804 8002 	strb.w	r8, [r4, r2]
 8005e5c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e60:	f43f aeec 	beq.w	8005c3c <d_print_mod+0x31c>
 8005e64:	2bff      	cmp	r3, #255	; 0xff
 8005e66:	4619      	mov	r1, r3
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e6e:	d0e2      	beq.n	8005e36 <d_print_mod+0x516>
 8005e70:	461a      	mov	r2, r3
 8005e72:	3301      	adds	r3, #1
 8005e74:	e7ed      	b.n	8005e52 <d_print_mod+0x532>
 8005e76:	4d40      	ldr	r5, [pc, #256]	; (8005f78 <d_print_mod+0x658>)
 8005e78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e7c:	f105 060a 	add.w	r6, r5, #10
 8005e80:	2700      	movs	r7, #0
 8005e82:	e016      	b.n	8005eb2 <d_print_mod+0x592>
 8005e84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e8c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e90:	4798      	blx	r3
 8005e92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e96:	3301      	adds	r3, #1
 8005e98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	42b5      	cmp	r5, r6
 8005ea2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ea6:	f804 8002 	strb.w	r8, [r4, r2]
 8005eaa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005eae:	f43f aec5 	beq.w	8005c3c <d_print_mod+0x31c>
 8005eb2:	2bff      	cmp	r3, #255	; 0xff
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005ebc:	d0e2      	beq.n	8005e84 <d_print_mod+0x564>
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	e7ed      	b.n	8005ea0 <d_print_mod+0x580>
 8005ec4:	462a      	mov	r2, r5
 8005ec6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eca:	f7fc be93 	b.w	8002bf4 <d_print_comp>
 8005ece:	68ea      	ldr	r2, [r5, #12]
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	f43f aeb3 	beq.w	8005c3c <d_print_mod+0x31c>
 8005ed6:	2bff      	cmp	r3, #255	; 0xff
 8005ed8:	d144      	bne.n	8005f64 <d_print_mod+0x644>
 8005eda:	2700      	movs	r7, #0
 8005edc:	4619      	mov	r1, r3
 8005ede:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ee2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ee6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005eea:	4620      	mov	r0, r4
 8005eec:	4798      	blx	r3
 8005eee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ef2:	68ea      	ldr	r2, [r5, #12]
 8005ef4:	1c59      	adds	r1, r3, #1
 8005ef6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005efa:	463b      	mov	r3, r7
 8005efc:	2101      	movs	r1, #1
 8005efe:	2528      	movs	r5, #40	; 0x28
 8005f00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f04:	4620      	mov	r0, r4
 8005f06:	4631      	mov	r1, r6
 8005f08:	54e5      	strb	r5, [r4, r3]
 8005f0a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005f0e:	f7fc fe71 	bl	8002bf4 <d_print_comp>
 8005f12:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f16:	29ff      	cmp	r1, #255	; 0xff
 8005f18:	d120      	bne.n	8005f5c <d_print_mod+0x63c>
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f24:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005f28:	4620      	mov	r0, r4
 8005f2a:	4798      	blx	r3
 8005f2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f30:	3301      	adds	r3, #1
 8005f32:	4629      	mov	r1, r5
 8005f34:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005f38:	2201      	movs	r2, #1
 8005f3a:	2329      	movs	r3, #41	; 0x29
 8005f3c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f40:	5463      	strb	r3, [r4, r1]
 8005f42:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	68aa      	ldr	r2, [r5, #8]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f7fc fe50 	bl	8002bf4 <d_print_comp>
 8005f54:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f58:	29ff      	cmp	r1, #255	; 0xff
 8005f5a:	d0de      	beq.n	8005f1a <d_print_mod+0x5fa>
 8005f5c:	1c4a      	adds	r2, r1, #1
 8005f5e:	e7ec      	b.n	8005f3a <d_print_mod+0x61a>
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	e665      	b.n	8005c30 <d_print_mod+0x310>
 8005f64:	1c59      	adds	r1, r3, #1
 8005f66:	e7ca      	b.n	8005efe <d_print_mod+0x5de>
 8005f68:	1c4a      	adds	r2, r1, #1
 8005f6a:	e681      	b.n	8005c70 <d_print_mod+0x350>
 8005f6c:	08011e1b 	.word	0x08011e1b
 8005f70:	08011e33 	.word	0x08011e33
 8005f74:	08011e30 	.word	0x08011e30
 8005f78:	08011e40 	.word	0x08011e40

08005f7c <d_print_function_type.isra.15>:
 8005f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f80:	4604      	mov	r4, r0
 8005f82:	460e      	mov	r6, r1
 8005f84:	4617      	mov	r7, r2
 8005f86:	461d      	mov	r5, r3
 8005f88:	b1d3      	cbz	r3, 8005fc0 <d_print_function_type.isra.15+0x44>
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	b9c3      	cbnz	r3, 8005fc0 <d_print_function_type.isra.15+0x44>
 8005f8e:	462a      	mov	r2, r5
 8005f90:	2001      	movs	r0, #1
 8005f92:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 800615c <d_print_function_type.isra.15+0x1e0>
 8005f96:	e001      	b.n	8005f9c <d_print_function_type.isra.15+0x20>
 8005f98:	6893      	ldr	r3, [r2, #8]
 8005f9a:	b98b      	cbnz	r3, 8005fc0 <d_print_function_type.isra.15+0x44>
 8005f9c:	6853      	ldr	r3, [r2, #4]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	3b19      	subs	r3, #25
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b12      	cmp	r3, #18
 8005fa6:	fa00 f103 	lsl.w	r1, r0, r3
 8005faa:	d806      	bhi.n	8005fba <d_print_function_type.isra.15+0x3e>
 8005fac:	ea11 0f0c 	tst.w	r1, ip
 8005fb0:	f040 80c7 	bne.w	8006142 <d_print_function_type.isra.15+0x1c6>
 8005fb4:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005fb8:	d154      	bne.n	8006064 <d_print_function_type.isra.15+0xe8>
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	d1eb      	bne.n	8005f98 <d_print_function_type.isra.15+0x1c>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005fc6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005fca:	4631      	mov	r1, r6
 8005fcc:	462a      	mov	r2, r5
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 f8c6 	bl	8006160 <d_print_mod_list>
 8005fd4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fd8:	29ff      	cmp	r1, #255	; 0xff
 8005fda:	f040 80a4 	bne.w	8006126 <d_print_function_type.isra.15+0x1aa>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005fe4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fe8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fec:	4620      	mov	r0, r4
 8005fee:	4798      	blx	r3
 8005ff0:	2328      	movs	r3, #40	; 0x28
 8005ff2:	7023      	strb	r3, [r4, #0]
 8005ff4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005ff8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	1c59      	adds	r1, r3, #1
 8006000:	2301      	movs	r3, #1
 8006002:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8006006:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800600a:	2a00      	cmp	r2, #0
 800600c:	f000 8097 	beq.w	800613e <d_print_function_type.isra.15+0x1c2>
 8006010:	4631      	mov	r1, r6
 8006012:	4620      	mov	r0, r4
 8006014:	f7fc fdee 	bl	8002bf4 <d_print_comp>
 8006018:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800601c:	2bff      	cmp	r3, #255	; 0xff
 800601e:	f040 808e 	bne.w	800613e <d_print_function_type.isra.15+0x1c2>
 8006022:	2700      	movs	r7, #0
 8006024:	4619      	mov	r1, r3
 8006026:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800602a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800602e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006032:	4620      	mov	r0, r4
 8006034:	4798      	blx	r3
 8006036:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006040:	463b      	mov	r3, r7
 8006042:	2201      	movs	r2, #1
 8006044:	2029      	movs	r0, #41	; 0x29
 8006046:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800604a:	4631      	mov	r1, r6
 800604c:	54e0      	strb	r0, [r4, r3]
 800604e:	462a      	mov	r2, r5
 8006050:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8006054:	2301      	movs	r3, #1
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f882 	bl	8006160 <d_print_mod_list>
 800605c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006064:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006068:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800606c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006070:	2a28      	cmp	r2, #40	; 0x28
 8006072:	d01e      	beq.n	80060b2 <d_print_function_type.isra.15+0x136>
 8006074:	2b20      	cmp	r3, #32
 8006076:	d01c      	beq.n	80060b2 <d_print_function_type.isra.15+0x136>
 8006078:	29ff      	cmp	r1, #255	; 0xff
 800607a:	d112      	bne.n	80060a2 <d_print_function_type.isra.15+0x126>
 800607c:	2300      	movs	r3, #0
 800607e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006082:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006086:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800608a:	4620      	mov	r0, r4
 800608c:	4798      	blx	r3
 800608e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006092:	2220      	movs	r2, #32
 8006094:	3301      	adds	r3, #1
 8006096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800609a:	7022      	strb	r2, [r4, #0]
 800609c:	2101      	movs	r1, #1
 800609e:	1c4a      	adds	r2, r1, #1
 80060a0:	e01a      	b.n	80060d8 <d_print_function_type.isra.15+0x15c>
 80060a2:	1c4b      	adds	r3, r1, #1
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80060aa:	5462      	strb	r2, [r4, r1]
 80060ac:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80060b0:	4619      	mov	r1, r3
 80060b2:	29ff      	cmp	r1, #255	; 0xff
 80060b4:	d1f3      	bne.n	800609e <d_print_function_type.isra.15+0x122>
 80060b6:	f04f 0800 	mov.w	r8, #0
 80060ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80060c6:	4620      	mov	r0, r4
 80060c8:	4798      	blx	r3
 80060ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ce:	3301      	adds	r3, #1
 80060d0:	4641      	mov	r1, r8
 80060d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060d6:	2201      	movs	r2, #1
 80060d8:	2328      	movs	r3, #40	; 0x28
 80060da:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80060de:	5463      	strb	r3, [r4, r1]
 80060e0:	f04f 0900 	mov.w	r9, #0
 80060e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80060e8:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 80060ec:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80060f0:	464b      	mov	r3, r9
 80060f2:	462a      	mov	r2, r5
 80060f4:	4631      	mov	r1, r6
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f832 	bl	8006160 <d_print_mod_list>
 80060fc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006100:	2bff      	cmp	r3, #255	; 0xff
 8006102:	d123      	bne.n	800614c <d_print_function_type.isra.15+0x1d0>
 8006104:	4619      	mov	r1, r3
 8006106:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800610a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800610e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006112:	4620      	mov	r0, r4
 8006114:	4798      	blx	r3
 8006116:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800611a:	2229      	movs	r2, #41	; 0x29
 800611c:	3301      	adds	r3, #1
 800611e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006122:	7022      	strb	r2, [r4, #0]
 8006124:	2101      	movs	r1, #1
 8006126:	2228      	movs	r2, #40	; 0x28
 8006128:	1c4b      	adds	r3, r1, #1
 800612a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800612e:	5462      	strb	r2, [r4, r1]
 8006130:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	2a00      	cmp	r2, #0
 8006138:	f43f af70 	beq.w	800601c <d_print_function_type.isra.15+0xa0>
 800613c:	e768      	b.n	8006010 <d_print_function_type.isra.15+0x94>
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	e780      	b.n	8006044 <d_print_function_type.isra.15+0xc8>
 8006142:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006146:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800614a:	e793      	b.n	8006074 <d_print_function_type.isra.15+0xf8>
 800614c:	2229      	movs	r2, #41	; 0x29
 800614e:	1c59      	adds	r1, r3, #1
 8006150:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006154:	54e2      	strb	r2, [r4, r3]
 8006156:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800615a:	e73d      	b.n	8005fd8 <d_print_function_type.isra.15+0x5c>
 800615c:	00043107 	.word	0x00043107

08006160 <d_print_mod_list>:
 8006160:	2a00      	cmp	r2, #0
 8006162:	f000 80ac 	beq.w	80062be <d_print_mod_list+0x15e>
 8006166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616a:	461f      	mov	r7, r3
 800616c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006170:	b089      	sub	sp, #36	; 0x24
 8006172:	4605      	mov	r5, r0
 8006174:	bb4b      	cbnz	r3, 80061ca <d_print_mod_list+0x6a>
 8006176:	4688      	mov	r8, r1
 8006178:	4614      	mov	r4, r2
 800617a:	f04f 0901 	mov.w	r9, #1
 800617e:	e002      	b.n	8006186 <d_print_mod_list+0x26>
 8006180:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006184:	bb0b      	cbnz	r3, 80061ca <d_print_mod_list+0x6a>
 8006186:	68a3      	ldr	r3, [r4, #8]
 8006188:	b9e3      	cbnz	r3, 80061c4 <d_print_mod_list+0x64>
 800618a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800618e:	f89a 6000 	ldrb.w	r6, [sl]
 8006192:	4630      	mov	r0, r6
 8006194:	b917      	cbnz	r7, 800619c <d_print_mod_list+0x3c>
 8006196:	f7fa f93f 	bl	8000418 <is_fnqual_component_type>
 800619a:	b998      	cbnz	r0, 80061c4 <d_print_mod_list+0x64>
 800619c:	68e3      	ldr	r3, [r4, #12]
 800619e:	f8c4 9008 	str.w	r9, [r4, #8]
 80061a2:	2e29      	cmp	r6, #41	; 0x29
 80061a4:	f8d5 b110 	ldr.w	fp, [r5, #272]	; 0x110
 80061a8:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 80061ac:	4652      	mov	r2, sl
 80061ae:	4641      	mov	r1, r8
 80061b0:	4628      	mov	r0, r5
 80061b2:	d00d      	beq.n	80061d0 <d_print_mod_list+0x70>
 80061b4:	2e2a      	cmp	r6, #42	; 0x2a
 80061b6:	d015      	beq.n	80061e4 <d_print_mod_list+0x84>
 80061b8:	2e02      	cmp	r6, #2
 80061ba:	d01d      	beq.n	80061f8 <d_print_mod_list+0x98>
 80061bc:	f7ff fbb0 	bl	8005920 <d_print_mod>
 80061c0:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061c4:	6824      	ldr	r4, [r4, #0]
 80061c6:	2c00      	cmp	r4, #0
 80061c8:	d1da      	bne.n	8006180 <d_print_mod_list+0x20>
 80061ca:	b009      	add	sp, #36	; 0x24
 80061cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	f10a 020c 	add.w	r2, sl, #12
 80061d6:	f7ff fed1 	bl	8005f7c <d_print_function_type.isra.15>
 80061da:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061de:	b009      	add	sp, #36	; 0x24
 80061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	f10a 0208 	add.w	r2, sl, #8
 80061ea:	f000 f8f1 	bl	80063d0 <d_print_array_type.isra.14>
 80061ee:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061f2:	b009      	add	sp, #36	; 0x24
 80061f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f8:	2600      	movs	r6, #0
 80061fa:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 80061fe:	f8da 2008 	ldr.w	r2, [sl, #8]
 8006202:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8006206:	f7fc fcf5 	bl	8002bf4 <d_print_comp>
 800620a:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 800620e:	f018 0704 	ands.w	r7, r8, #4
 8006212:	d02f      	beq.n	8006274 <d_print_mod_list+0x114>
 8006214:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8006218:	29ff      	cmp	r1, #255	; 0xff
 800621a:	f040 80cf 	bne.w	80063bc <d_print_mod_list+0x25c>
 800621e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006222:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006226:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 800622a:	4628      	mov	r0, r5
 800622c:	4798      	blx	r3
 800622e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006232:	3301      	adds	r3, #1
 8006234:	4631      	mov	r1, r6
 8006236:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 800623a:	2201      	movs	r2, #1
 800623c:	232e      	movs	r3, #46	; 0x2e
 800623e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8006242:	546b      	strb	r3, [r5, r1]
 8006244:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	68dc      	ldr	r4, [r3, #12]
 800624c:	7820      	ldrb	r0, [r4, #0]
 800624e:	2846      	cmp	r0, #70	; 0x46
 8006250:	d102      	bne.n	8006258 <d_print_mod_list+0xf8>
 8006252:	e035      	b.n	80062c0 <d_print_mod_list+0x160>
 8006254:	68a4      	ldr	r4, [r4, #8]
 8006256:	7820      	ldrb	r0, [r4, #0]
 8006258:	f7fa f8de 	bl	8000418 <is_fnqual_component_type>
 800625c:	2800      	cmp	r0, #0
 800625e:	d1f9      	bne.n	8006254 <d_print_mod_list+0xf4>
 8006260:	4622      	mov	r2, r4
 8006262:	4641      	mov	r1, r8
 8006264:	4628      	mov	r0, r5
 8006266:	f7fc fcc5 	bl	8002bf4 <d_print_comp>
 800626a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800626e:	b009      	add	sp, #36	; 0x24
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	4e52      	ldr	r6, [pc, #328]	; (80063c0 <d_print_mod_list+0x260>)
 8006276:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800627a:	f106 0902 	add.w	r9, r6, #2
 800627e:	e015      	b.n	80062ac <d_print_mod_list+0x14c>
 8006280:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006284:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006288:	f885 70ff 	strb.w	r7, [r5, #255]	; 0xff
 800628c:	4798      	blx	r3
 800628e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006292:	3301      	adds	r3, #1
 8006294:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006298:	2200      	movs	r2, #0
 800629a:	2301      	movs	r3, #1
 800629c:	45b1      	cmp	r9, r6
 800629e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062a2:	f805 a002 	strb.w	sl, [r5, r2]
 80062a6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062aa:	d0cd      	beq.n	8006248 <d_print_mod_list+0xe8>
 80062ac:	2bff      	cmp	r3, #255	; 0xff
 80062ae:	4619      	mov	r1, r3
 80062b0:	4628      	mov	r0, r5
 80062b2:	f816 ab01 	ldrb.w	sl, [r6], #1
 80062b6:	d0e3      	beq.n	8006280 <d_print_mod_list+0x120>
 80062b8:	461a      	mov	r2, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	e7ee      	b.n	800629c <d_print_mod_list+0x13c>
 80062be:	4770      	bx	lr
 80062c0:	4e40      	ldr	r6, [pc, #256]	; (80063c4 <d_print_mod_list+0x264>)
 80062c2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80062c6:	f106 070d 	add.w	r7, r6, #13
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	e015      	b.n	80062fc <d_print_mod_list+0x19c>
 80062d0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80062d4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80062d8:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80062dc:	4798      	blx	r3
 80062de:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80062e2:	3301      	adds	r3, #1
 80062e4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80062e8:	2200      	movs	r2, #0
 80062ea:	2301      	movs	r3, #1
 80062ec:	42b7      	cmp	r7, r6
 80062ee:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062f2:	f805 a002 	strb.w	sl, [r5, r2]
 80062f6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062fa:	d008      	beq.n	800630e <d_print_mod_list+0x1ae>
 80062fc:	2bff      	cmp	r3, #255	; 0xff
 80062fe:	4619      	mov	r1, r3
 8006300:	4628      	mov	r0, r5
 8006302:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006306:	d0e3      	beq.n	80062d0 <d_print_mod_list+0x170>
 8006308:	461a      	mov	r2, r3
 800630a:	3301      	adds	r3, #1
 800630c:	e7ee      	b.n	80062ec <d_print_mod_list+0x18c>
 800630e:	68e2      	ldr	r2, [r4, #12]
 8006310:	492d      	ldr	r1, [pc, #180]	; (80063c8 <d_print_mod_list+0x268>)
 8006312:	3201      	adds	r2, #1
 8006314:	a801      	add	r0, sp, #4
 8006316:	f007 fe37 	bl	800df88 <sprintf>
 800631a:	a801      	add	r0, sp, #4
 800631c:	f000 fd5a 	bl	8006dd4 <strlen>
 8006320:	b328      	cbz	r0, 800636e <d_print_mod_list+0x20e>
 8006322:	ae01      	add	r6, sp, #4
 8006324:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006328:	1837      	adds	r7, r6, r0
 800632a:	f04f 0900 	mov.w	r9, #0
 800632e:	e015      	b.n	800635c <d_print_mod_list+0x1fc>
 8006330:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006334:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006338:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800633c:	4798      	blx	r3
 800633e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006342:	3301      	adds	r3, #1
 8006344:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006348:	2200      	movs	r2, #0
 800634a:	2301      	movs	r3, #1
 800634c:	42be      	cmp	r6, r7
 800634e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006352:	f805 a002 	strb.w	sl, [r5, r2]
 8006356:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800635a:	d00a      	beq.n	8006372 <d_print_mod_list+0x212>
 800635c:	2bff      	cmp	r3, #255	; 0xff
 800635e:	4619      	mov	r1, r3
 8006360:	4628      	mov	r0, r5
 8006362:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006366:	d0e3      	beq.n	8006330 <d_print_mod_list+0x1d0>
 8006368:	461a      	mov	r2, r3
 800636a:	3301      	adds	r3, #1
 800636c:	e7ee      	b.n	800634c <d_print_mod_list+0x1ec>
 800636e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006372:	4e16      	ldr	r6, [pc, #88]	; (80063cc <d_print_mod_list+0x26c>)
 8006374:	f04f 0900 	mov.w	r9, #0
 8006378:	1cf7      	adds	r7, r6, #3
 800637a:	e016      	b.n	80063aa <d_print_mod_list+0x24a>
 800637c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006380:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006384:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8006388:	4798      	blx	r3
 800638a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800638e:	3301      	adds	r3, #1
 8006390:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006394:	2200      	movs	r2, #0
 8006396:	2301      	movs	r3, #1
 8006398:	42b7      	cmp	r7, r6
 800639a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800639e:	f805 a002 	strb.w	sl, [r5, r2]
 80063a2:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80063a6:	f43f af55 	beq.w	8006254 <d_print_mod_list+0xf4>
 80063aa:	2bff      	cmp	r3, #255	; 0xff
 80063ac:	4619      	mov	r1, r3
 80063ae:	4628      	mov	r0, r5
 80063b0:	f816 ab01 	ldrb.w	sl, [r6], #1
 80063b4:	d0e2      	beq.n	800637c <d_print_mod_list+0x21c>
 80063b6:	461a      	mov	r2, r3
 80063b8:	3301      	adds	r3, #1
 80063ba:	e7ed      	b.n	8006398 <d_print_mod_list+0x238>
 80063bc:	1c4a      	adds	r2, r1, #1
 80063be:	e73d      	b.n	800623c <d_print_mod_list+0xdc>
 80063c0:	08011b68 	.word	0x08011b68
 80063c4:	08011b6c 	.word	0x08011b6c
 80063c8:	08011b18 	.word	0x08011b18
 80063cc:	08011b7c 	.word	0x08011b7c

080063d0 <d_print_array_type.isra.14>:
 80063d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	4604      	mov	r4, r0
 80063d6:	460f      	mov	r7, r1
 80063d8:	4690      	mov	r8, r2
 80063da:	b15b      	cbz	r3, 80063f4 <d_print_array_type.isra.14+0x24>
 80063dc:	461e      	mov	r6, r3
 80063de:	689d      	ldr	r5, [r3, #8]
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	d042      	beq.n	800646a <d_print_array_type.isra.14+0x9a>
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f9      	bne.n	80063de <d_print_array_type.isra.14+0xe>
 80063ea:	4632      	mov	r2, r6
 80063ec:	4639      	mov	r1, r7
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff feb6 	bl	8006160 <d_print_mod_list>
 80063f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063f8:	29ff      	cmp	r1, #255	; 0xff
 80063fa:	f040 80b1 	bne.w	8006560 <d_print_array_type.isra.14+0x190>
 80063fe:	2300      	movs	r3, #0
 8006400:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006404:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006408:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800640c:	4620      	mov	r0, r4
 800640e:	4798      	blx	r3
 8006410:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006414:	2220      	movs	r2, #32
 8006416:	3301      	adds	r3, #1
 8006418:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800641c:	7022      	strb	r2, [r4, #0]
 800641e:	2301      	movs	r3, #1
 8006420:	225b      	movs	r2, #91	; 0x5b
 8006422:	1c59      	adds	r1, r3, #1
 8006424:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006428:	54e2      	strb	r2, [r4, r3]
 800642a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800642e:	f8d8 2000 	ldr.w	r2, [r8]
 8006432:	2a00      	cmp	r2, #0
 8006434:	d140      	bne.n	80064b8 <d_print_array_type.isra.14+0xe8>
 8006436:	29ff      	cmp	r1, #255	; 0xff
 8006438:	d145      	bne.n	80064c6 <d_print_array_type.isra.14+0xf6>
 800643a:	2500      	movs	r5, #0
 800643c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006440:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006444:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006448:	4620      	mov	r0, r4
 800644a:	4798      	blx	r3
 800644c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006450:	3301      	adds	r3, #1
 8006452:	4629      	mov	r1, r5
 8006454:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006458:	2201      	movs	r2, #1
 800645a:	235d      	movs	r3, #93	; 0x5d
 800645c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006460:	5463      	strb	r3, [r4, r1]
 8006462:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b2a      	cmp	r3, #42	; 0x2a
 8006470:	d12b      	bne.n	80064ca <d_print_array_type.isra.14+0xfa>
 8006472:	462b      	mov	r3, r5
 8006474:	4632      	mov	r2, r6
 8006476:	4639      	mov	r1, r7
 8006478:	4620      	mov	r0, r4
 800647a:	f7ff fe71 	bl	8006160 <d_print_mod_list>
 800647e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006482:	2bff      	cmp	r3, #255	; 0xff
 8006484:	d1cc      	bne.n	8006420 <d_print_array_type.isra.14+0x50>
 8006486:	2200      	movs	r2, #0
 8006488:	4619      	mov	r1, r3
 800648a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800648e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006492:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006496:	4620      	mov	r0, r4
 8006498:	4798      	blx	r3
 800649a:	235b      	movs	r3, #91	; 0x5b
 800649c:	7023      	strb	r3, [r4, #0]
 800649e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80064a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064a6:	f8d8 2000 	ldr.w	r2, [r8]
 80064aa:	3301      	adds	r3, #1
 80064ac:	2101      	movs	r1, #1
 80064ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80064b6:	b132      	cbz	r2, 80064c6 <d_print_array_type.isra.14+0xf6>
 80064b8:	4639      	mov	r1, r7
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7fc fb9a 	bl	8002bf4 <d_print_comp>
 80064c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80064c4:	e7b7      	b.n	8006436 <d_print_array_type.isra.14+0x66>
 80064c6:	1c4a      	adds	r2, r1, #1
 80064c8:	e7c7      	b.n	800645a <d_print_array_type.isra.14+0x8a>
 80064ca:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006580 <d_print_array_type.isra.14+0x1b0>
 80064ce:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064d2:	f109 0a02 	add.w	sl, r9, #2
 80064d6:	e016      	b.n	8006506 <d_print_array_type.isra.14+0x136>
 80064d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064e0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80064e4:	4798      	blx	r3
 80064e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064ea:	2200      	movs	r2, #0
 80064ec:	3301      	adds	r3, #1
 80064ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064f2:	45ca      	cmp	sl, r9
 80064f4:	f04f 0301 	mov.w	r3, #1
 80064f8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064fc:	f804 b002 	strb.w	fp, [r4, r2]
 8006500:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8006504:	d010      	beq.n	8006528 <d_print_array_type.isra.14+0x158>
 8006506:	2bff      	cmp	r3, #255	; 0xff
 8006508:	4619      	mov	r1, r3
 800650a:	4620      	mov	r0, r4
 800650c:	f819 bb01 	ldrb.w	fp, [r9], #1
 8006510:	d0e2      	beq.n	80064d8 <d_print_array_type.isra.14+0x108>
 8006512:	461a      	mov	r2, r3
 8006514:	45ca      	cmp	sl, r9
 8006516:	f103 0301 	add.w	r3, r3, #1
 800651a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800651e:	f804 b002 	strb.w	fp, [r4, r2]
 8006522:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8006526:	d1ee      	bne.n	8006506 <d_print_array_type.isra.14+0x136>
 8006528:	2300      	movs	r3, #0
 800652a:	4632      	mov	r2, r6
 800652c:	4639      	mov	r1, r7
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff fe16 	bl	8006160 <d_print_mod_list>
 8006534:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006538:	2bff      	cmp	r3, #255	; 0xff
 800653a:	d119      	bne.n	8006570 <d_print_array_type.isra.14+0x1a0>
 800653c:	2200      	movs	r2, #0
 800653e:	4619      	mov	r1, r3
 8006540:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8006544:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006548:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800654c:	4620      	mov	r0, r4
 800654e:	4798      	blx	r3
 8006550:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006554:	2229      	movs	r2, #41	; 0x29
 8006556:	3301      	adds	r3, #1
 8006558:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800655c:	7022      	strb	r2, [r4, #0]
 800655e:	2101      	movs	r1, #1
 8006560:	2220      	movs	r2, #32
 8006562:	1c4b      	adds	r3, r1, #1
 8006564:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006568:	5462      	strb	r2, [r4, r1]
 800656a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800656e:	e788      	b.n	8006482 <d_print_array_type.isra.14+0xb2>
 8006570:	2229      	movs	r2, #41	; 0x29
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006578:	54e2      	strb	r2, [r4, r3]
 800657a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800657e:	e73b      	b.n	80063f8 <d_print_array_type.isra.14+0x28>
 8006580:	08011d64 	.word	0x08011d64

08006584 <d_print_expr_op>:
 8006584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006588:	7815      	ldrb	r5, [r2, #0]
 800658a:	2d31      	cmp	r5, #49	; 0x31
 800658c:	d003      	beq.n	8006596 <d_print_expr_op+0x12>
 800658e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006592:	f7fc bb2f 	b.w	8002bf4 <d_print_comp>
 8006596:	6893      	ldr	r3, [r2, #8]
 8006598:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 800659c:	b37e      	cbz	r6, 80065fe <d_print_expr_op+0x7a>
 800659e:	442e      	add	r6, r5
 80065a0:	4604      	mov	r4, r0
 80065a2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80065a6:	3e01      	subs	r6, #1
 80065a8:	3d01      	subs	r5, #1
 80065aa:	2700      	movs	r7, #0
 80065ac:	e016      	b.n	80065dc <d_print_expr_op+0x58>
 80065ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80065b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80065b6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80065ba:	4798      	blx	r3
 80065bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80065c0:	2200      	movs	r2, #0
 80065c2:	3301      	adds	r3, #1
 80065c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80065c8:	42b5      	cmp	r5, r6
 80065ca:	f04f 0301 	mov.w	r3, #1
 80065ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065d2:	f804 8002 	strb.w	r8, [r4, r2]
 80065d6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065da:	d010      	beq.n	80065fe <d_print_expr_op+0x7a>
 80065dc:	2bff      	cmp	r3, #255	; 0xff
 80065de:	4619      	mov	r1, r3
 80065e0:	4620      	mov	r0, r4
 80065e2:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80065e6:	d0e2      	beq.n	80065ae <d_print_expr_op+0x2a>
 80065e8:	461a      	mov	r2, r3
 80065ea:	42b5      	cmp	r5, r6
 80065ec:	f103 0301 	add.w	r3, r3, #1
 80065f0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065f4:	f804 8002 	strb.w	r8, [r4, r2]
 80065f8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065fc:	d1ee      	bne.n	80065dc <d_print_expr_op+0x58>
 80065fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006602:	bf00      	nop

08006604 <d_print_subexpr>:
 8006604:	7813      	ldrb	r3, [r2, #0]
 8006606:	2b01      	cmp	r3, #1
 8006608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660c:	4604      	mov	r4, r0
 800660e:	d941      	bls.n	8006694 <d_print_subexpr+0x90>
 8006610:	2b30      	cmp	r3, #48	; 0x30
 8006612:	d03f      	beq.n	8006694 <d_print_subexpr+0x90>
 8006614:	2b06      	cmp	r3, #6
 8006616:	d03d      	beq.n	8006694 <d_print_subexpr+0x90>
 8006618:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 800661c:	2fff      	cmp	r7, #255	; 0xff
 800661e:	460e      	mov	r6, r1
 8006620:	4615      	mov	r5, r2
 8006622:	d13e      	bne.n	80066a2 <d_print_subexpr+0x9e>
 8006624:	f04f 0800 	mov.w	r8, #0
 8006628:	4639      	mov	r1, r7
 800662a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800662e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006632:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8006636:	4798      	blx	r3
 8006638:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800663c:	3301      	adds	r3, #1
 800663e:	4647      	mov	r7, r8
 8006640:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006644:	2201      	movs	r2, #1
 8006646:	2328      	movs	r3, #40	; 0x28
 8006648:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800664c:	4631      	mov	r1, r6
 800664e:	55e3      	strb	r3, [r4, r7]
 8006650:	462a      	mov	r2, r5
 8006652:	4620      	mov	r0, r4
 8006654:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006658:	f7fc facc 	bl	8002bf4 <d_print_comp>
 800665c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006660:	29ff      	cmp	r1, #255	; 0xff
 8006662:	d11c      	bne.n	800669e <d_print_subexpr+0x9a>
 8006664:	2500      	movs	r5, #0
 8006666:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800666a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800666e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006672:	4620      	mov	r0, r4
 8006674:	4798      	blx	r3
 8006676:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800667a:	3301      	adds	r3, #1
 800667c:	4629      	mov	r1, r5
 800667e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006682:	2201      	movs	r2, #1
 8006684:	2329      	movs	r3, #41	; 0x29
 8006686:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800668a:	5463      	strb	r3, [r4, r1]
 800668c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006694:	4620      	mov	r0, r4
 8006696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800669a:	f7fc baab 	b.w	8002bf4 <d_print_comp>
 800669e:	1c4a      	adds	r2, r1, #1
 80066a0:	e7f0      	b.n	8006684 <d_print_subexpr+0x80>
 80066a2:	1c7a      	adds	r2, r7, #1
 80066a4:	e7cf      	b.n	8006646 <d_print_subexpr+0x42>
 80066a6:	bf00      	nop

080066a8 <d_maybe_print_fold_expression.isra.20>:
 80066a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	6892      	ldr	r2, [r2, #8]
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	7816      	ldrb	r6, [r2, #0]
 80066b2:	2e66      	cmp	r6, #102	; 0x66
 80066b4:	b083      	sub	sp, #12
 80066b6:	d003      	beq.n	80066c0 <d_maybe_print_fold_expression.isra.20+0x18>
 80066b8:	2000      	movs	r0, #0
 80066ba:	b003      	add	sp, #12
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80066c6:	f899 3000 	ldrb.w	r3, [r9]
 80066ca:	2b3b      	cmp	r3, #59	; 0x3b
 80066cc:	f000 8110 	beq.w	80068f0 <d_maybe_print_fold_expression.isra.20+0x248>
 80066d0:	2300      	movs	r3, #0
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	f04f 33ff 	mov.w	r3, #4294967295
 80066d8:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 80066dc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80066e0:	7853      	ldrb	r3, [r2, #1]
 80066e2:	3b4c      	subs	r3, #76	; 0x4c
 80066e4:	460d      	mov	r5, r1
 80066e6:	4604      	mov	r4, r0
 80066e8:	2b26      	cmp	r3, #38	; 0x26
 80066ea:	d83a      	bhi.n	8006762 <d_maybe_print_fold_expression.isra.20+0xba>
 80066ec:	e8df f003 	tbb	[pc, r3]
 80066f0:	393939b0 	.word	0x393939b0
 80066f4:	39b03939 	.word	0x39b03939
 80066f8:	39393939 	.word	0x39393939
 80066fc:	39393939 	.word	0x39393939
 8006700:	39393939 	.word	0x39393939
 8006704:	39393939 	.word	0x39393939
 8006708:	39393939 	.word	0x39393939
 800670c:	39393939 	.word	0x39393939
 8006710:	39393989 	.word	0x39393989
 8006714:	3939      	.short	0x3939
 8006716:	3f          	.byte	0x3f
 8006717:	00          	.byte	0x00
 8006718:	4642      	mov	r2, r8
 800671a:	4629      	mov	r1, r5
 800671c:	4620      	mov	r0, r4
 800671e:	f7ff ff31 	bl	8006584 <d_print_expr_op>
 8006722:	9a01      	ldr	r2, [sp, #4]
 8006724:	4629      	mov	r1, r5
 8006726:	4620      	mov	r0, r4
 8006728:	f7ff ff6c 	bl	8006604 <d_print_subexpr>
 800672c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006730:	29ff      	cmp	r1, #255	; 0xff
 8006732:	f040 80ea 	bne.w	800690a <d_maybe_print_fold_expression.isra.20+0x262>
 8006736:	2500      	movs	r5, #0
 8006738:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800673c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006740:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006744:	4620      	mov	r0, r4
 8006746:	4798      	blx	r3
 8006748:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800674c:	3301      	adds	r3, #1
 800674e:	4629      	mov	r1, r5
 8006750:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006754:	2201      	movs	r2, #1
 8006756:	2329      	movs	r3, #41	; 0x29
 8006758:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800675c:	5463      	strb	r3, [r4, r1]
 800675e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006762:	2001      	movs	r0, #1
 8006764:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8006768:	b003      	add	sp, #12
 800676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006772:	29ff      	cmp	r1, #255	; 0xff
 8006774:	f040 80cb 	bne.w	800690e <d_maybe_print_fold_expression.isra.20+0x266>
 8006778:	2600      	movs	r6, #0
 800677a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800677e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006782:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006786:	4798      	blx	r3
 8006788:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800678c:	3301      	adds	r3, #1
 800678e:	4631      	mov	r1, r6
 8006790:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006794:	2201      	movs	r2, #1
 8006796:	2328      	movs	r3, #40	; 0x28
 8006798:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800679c:	4620      	mov	r0, r4
 800679e:	5463      	strb	r3, [r4, r1]
 80067a0:	464a      	mov	r2, r9
 80067a2:	4629      	mov	r1, r5
 80067a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80067a8:	f7ff ff2c 	bl	8006604 <d_print_subexpr>
 80067ac:	4629      	mov	r1, r5
 80067ae:	4d59      	ldr	r5, [pc, #356]	; (8006914 <d_maybe_print_fold_expression.isra.20+0x26c>)
 80067b0:	4642      	mov	r2, r8
 80067b2:	4620      	mov	r0, r4
 80067b4:	f7ff fee6 	bl	8006584 <d_print_expr_op>
 80067b8:	1d2e      	adds	r6, r5, #4
 80067ba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80067be:	f04f 0800 	mov.w	r8, #0
 80067c2:	e015      	b.n	80067f0 <d_maybe_print_fold_expression.isra.20+0x148>
 80067c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80067c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80067cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80067d0:	4798      	blx	r3
 80067d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067d6:	3301      	adds	r3, #1
 80067d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067dc:	2200      	movs	r2, #0
 80067de:	2301      	movs	r3, #1
 80067e0:	42ae      	cmp	r6, r5
 80067e2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80067e6:	f804 9002 	strb.w	r9, [r4, r2]
 80067ea:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80067ee:	d0b8      	beq.n	8006762 <d_maybe_print_fold_expression.isra.20+0xba>
 80067f0:	2bff      	cmp	r3, #255	; 0xff
 80067f2:	4619      	mov	r1, r3
 80067f4:	4620      	mov	r0, r4
 80067f6:	f815 9b01 	ldrb.w	r9, [r5], #1
 80067fa:	d0e3      	beq.n	80067c4 <d_maybe_print_fold_expression.isra.20+0x11c>
 80067fc:	461a      	mov	r2, r3
 80067fe:	3301      	adds	r3, #1
 8006800:	e7ee      	b.n	80067e0 <d_maybe_print_fold_expression.isra.20+0x138>
 8006802:	4e45      	ldr	r6, [pc, #276]	; (8006918 <d_maybe_print_fold_expression.isra.20+0x270>)
 8006804:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006808:	f106 0a04 	add.w	sl, r6, #4
 800680c:	e017      	b.n	800683e <d_maybe_print_fold_expression.isra.20+0x196>
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006816:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800681a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800681e:	4798      	blx	r3
 8006820:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006824:	3301      	adds	r3, #1
 8006826:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800682a:	2200      	movs	r2, #0
 800682c:	2301      	movs	r3, #1
 800682e:	45b2      	cmp	sl, r6
 8006830:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006834:	f804 b002 	strb.w	fp, [r4, r2]
 8006838:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 800683c:	d05e      	beq.n	80068fc <d_maybe_print_fold_expression.isra.20+0x254>
 800683e:	2bff      	cmp	r3, #255	; 0xff
 8006840:	4619      	mov	r1, r3
 8006842:	4620      	mov	r0, r4
 8006844:	f816 bb01 	ldrb.w	fp, [r6], #1
 8006848:	d0e1      	beq.n	800680e <d_maybe_print_fold_expression.isra.20+0x166>
 800684a:	461a      	mov	r2, r3
 800684c:	3301      	adds	r3, #1
 800684e:	e7ee      	b.n	800682e <d_maybe_print_fold_expression.isra.20+0x186>
 8006850:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006854:	2bff      	cmp	r3, #255	; 0xff
 8006856:	d110      	bne.n	800687a <d_maybe_print_fold_expression.isra.20+0x1d2>
 8006858:	2600      	movs	r6, #0
 800685a:	4619      	mov	r1, r3
 800685c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006860:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006864:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006868:	4798      	blx	r3
 800686a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800686e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006878:	4633      	mov	r3, r6
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006880:	464a      	mov	r2, r9
 8006882:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006886:	4620      	mov	r0, r4
 8006888:	f804 c003 	strb.w	ip, [r4, r3]
 800688c:	4629      	mov	r1, r5
 800688e:	f884 c104 	strb.w	ip, [r4, #260]	; 0x104
 8006892:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800691c <d_maybe_print_fold_expression.isra.20+0x274>
 8006896:	f7ff feb5 	bl	8006604 <d_print_subexpr>
 800689a:	4642      	mov	r2, r8
 800689c:	4629      	mov	r1, r5
 800689e:	4620      	mov	r0, r4
 80068a0:	f7ff fe70 	bl	8006584 <d_print_expr_op>
 80068a4:	f109 0a03 	add.w	sl, r9, #3
 80068a8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80068ac:	2600      	movs	r6, #0
 80068ae:	e016      	b.n	80068de <d_maybe_print_fold_expression.isra.20+0x236>
 80068b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80068b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80068b8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80068bc:	4798      	blx	r3
 80068be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80068c2:	3301      	adds	r3, #1
 80068c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80068c8:	2200      	movs	r2, #0
 80068ca:	2301      	movs	r3, #1
 80068cc:	45d1      	cmp	r9, sl
 80068ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80068d2:	f804 b002 	strb.w	fp, [r4, r2]
 80068d6:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80068da:	f43f af1d 	beq.w	8006718 <d_maybe_print_fold_expression.isra.20+0x70>
 80068de:	2bff      	cmp	r3, #255	; 0xff
 80068e0:	4619      	mov	r1, r3
 80068e2:	4620      	mov	r0, r4
 80068e4:	f819 bb01 	ldrb.w	fp, [r9], #1
 80068e8:	d0e2      	beq.n	80068b0 <d_maybe_print_fold_expression.isra.20+0x208>
 80068ea:	461a      	mov	r2, r3
 80068ec:	3301      	adds	r3, #1
 80068ee:	e7ed      	b.n	80068cc <d_maybe_print_fold_expression.isra.20+0x224>
 80068f0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80068fa:	e6eb      	b.n	80066d4 <d_maybe_print_fold_expression.isra.20+0x2c>
 80068fc:	4642      	mov	r2, r8
 80068fe:	4629      	mov	r1, r5
 8006900:	4620      	mov	r0, r4
 8006902:	f7ff fe3f 	bl	8006584 <d_print_expr_op>
 8006906:	464a      	mov	r2, r9
 8006908:	e70c      	b.n	8006724 <d_maybe_print_fold_expression.isra.20+0x7c>
 800690a:	1c4a      	adds	r2, r1, #1
 800690c:	e723      	b.n	8006756 <d_maybe_print_fold_expression.isra.20+0xae>
 800690e:	1c4a      	adds	r2, r1, #1
 8006910:	e741      	b.n	8006796 <d_maybe_print_fold_expression.isra.20+0xee>
 8006912:	bf00      	nop
 8006914:	08011e64 	.word	0x08011e64
 8006918:	08011e5c 	.word	0x08011e5c
 800691c:	08011d68 	.word	0x08011d68

08006920 <d_demangle_callback.constprop.22>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	b0e5      	sub	sp, #404	; 0x194
 8006926:	f890 a000 	ldrb.w	sl, [r0]
 800692a:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 800692e:	af00      	add	r7, sp, #0
 8006930:	4605      	mov	r5, r0
 8006932:	4688      	mov	r8, r1
 8006934:	4616      	mov	r6, r2
 8006936:	f000 80f3 	beq.w	8006b20 <d_demangle_callback.constprop.22+0x200>
 800693a:	2208      	movs	r2, #8
 800693c:	49bb      	ldr	r1, [pc, #748]	; (8006c2c <d_demangle_callback.constprop.22+0x30c>)
 800693e:	4628      	mov	r0, r5
 8006940:	f007 fb42 	bl	800dfc8 <strncmp>
 8006944:	b948      	cbnz	r0, 800695a <d_demangle_callback.constprop.22+0x3a>
 8006946:	7a2b      	ldrb	r3, [r5, #8]
 8006948:	2b2e      	cmp	r3, #46	; 0x2e
 800694a:	f000 80d8 	beq.w	8006afe <d_demangle_callback.constprop.22+0x1de>
 800694e:	2b5f      	cmp	r3, #95	; 0x5f
 8006950:	f000 80d5 	beq.w	8006afe <d_demangle_callback.constprop.22+0x1de>
 8006954:	2b24      	cmp	r3, #36	; 0x24
 8006956:	f000 80d2 	beq.w	8006afe <d_demangle_callback.constprop.22+0x1de>
 800695a:	f04f 0900 	mov.w	r9, #0
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fa38 	bl	8006dd4 <strlen>
 8006964:	0142      	lsls	r2, r0, #5
 8006966:	0083      	lsls	r3, r0, #2
 8006968:	3208      	adds	r2, #8
 800696a:	330a      	adds	r3, #10
 800696c:	ebad 0d02 	sub.w	sp, sp, r2
 8006970:	f023 0307 	bic.w	r3, r3, #7
 8006974:	2400      	movs	r4, #0
 8006976:	46eb      	mov	fp, sp
 8006978:	1829      	adds	r1, r5, r0
 800697a:	ebad 0d03 	sub.w	sp, sp, r3
 800697e:	2211      	movs	r2, #17
 8006980:	0043      	lsls	r3, r0, #1
 8006982:	f1b9 0f01 	cmp.w	r9, #1
 8006986:	f8c7 b01c 	str.w	fp, [r7, #28]
 800698a:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 800698e:	60fd      	str	r5, [r7, #12]
 8006990:	61bd      	str	r5, [r7, #24]
 8006992:	6338      	str	r0, [r7, #48]	; 0x30
 8006994:	6139      	str	r1, [r7, #16]
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
 8006998:	617a      	str	r2, [r7, #20]
 800699a:	623c      	str	r4, [r7, #32]
 800699c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800699e:	e9c7 440d 	strd	r4, r4, [r7, #52]	; 0x34
 80069a2:	e9c7 440f 	strd	r4, r4, [r7, #60]	; 0x3c
 80069a6:	647c      	str	r4, [r7, #68]	; 0x44
 80069a8:	f000 80a0 	beq.w	8006aec <d_demangle_callback.constprop.22+0x1cc>
 80069ac:	f0c0 80bf 	bcc.w	8006b2e <d_demangle_callback.constprop.22+0x20e>
 80069b0:	7aea      	ldrb	r2, [r5, #11]
 80069b2:	f1b9 0f02 	cmp.w	r9, #2
 80069b6:	f105 0a0b 	add.w	sl, r5, #11
 80069ba:	bf14      	ite	ne
 80069bc:	f04f 0944 	movne.w	r9, #68	; 0x44
 80069c0:	f04f 0943 	moveq.w	r9, #67	; 0x43
 80069c4:	2a5f      	cmp	r2, #95	; 0x5f
 80069c6:	f8c7 a018 	str.w	sl, [r7, #24]
 80069ca:	f000 80b9 	beq.w	8006b40 <d_demangle_callback.constprop.22+0x220>
 80069ce:	4650      	mov	r0, sl
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	f000 f9ff 	bl	8006dd4 <strlen>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f340 8123 	ble.w	8006c24 <d_demangle_callback.constprop.22+0x304>
 80069de:	2300      	movs	r3, #0
 80069e0:	2201      	movs	r2, #1
 80069e2:	f8cb 3004 	str.w	r3, [fp, #4]
 80069e6:	623a      	str	r2, [r7, #32]
 80069e8:	2800      	cmp	r0, #0
 80069ea:	f000 811b 	beq.w	8006c24 <d_demangle_callback.constprop.22+0x304>
 80069ee:	e9cb a002 	strd	sl, r0, [fp, #8]
 80069f2:	f88b 3000 	strb.w	r3, [fp]
 80069f6:	4649      	mov	r1, r9
 80069f8:	2300      	movs	r3, #0
 80069fa:	465a      	mov	r2, fp
 80069fc:	f107 000c 	add.w	r0, r7, #12
 8006a00:	f7f9 fc1e 	bl	8000240 <d_make_comp>
 8006a04:	69bc      	ldr	r4, [r7, #24]
 8006a06:	4605      	mov	r5, r0
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 f9e3 	bl	8006dd4 <strlen>
 8006a0e:	1823      	adds	r3, r4, r0
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	f814 9000 	ldrb.w	r9, [r4, r0]
 8006a16:	f1b9 0f00 	cmp.w	r9, #0
 8006a1a:	d16a      	bne.n	8006af2 <d_demangle_callback.constprop.22+0x1d2>
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	d068      	beq.n	8006af2 <d_demangle_callback.constprop.22+0x1d2>
 8006a20:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8006a24:	462a      	mov	r2, r5
 8006a26:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8006a2a:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8006a2e:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 8006a32:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 8006a36:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8006a3a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8006a3e:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 8006a42:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006a46:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 8006a4a:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 8006a4e:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 8006a52:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006a56:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006a5a:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8006a5e:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 8006a62:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006a66:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006a6a:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006a6e:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006a72:	f7f9 fc49 	bl	8000308 <d_count_templates_scopes>
 8006a76:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8006a7a:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
 8006a7e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	fb06 f603 	mul.w	r6, r6, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	bfb8      	it	lt
 8006a8c:	2201      	movlt	r2, #1
 8006a8e:	00d2      	lsls	r2, r2, #3
 8006a90:	2e01      	cmp	r6, #1
 8006a92:	4633      	mov	r3, r6
 8006a94:	f102 0208 	add.w	r2, r2, #8
 8006a98:	bfb8      	it	lt
 8006a9a:	2301      	movlt	r3, #1
 8006a9c:	46e8      	mov	r8, sp
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	ebad 0d02 	sub.w	sp, sp, r2
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	4669      	mov	r1, sp
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	ebad 0d03 	sub.w	sp, sp, r3
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8006ab4:	2111      	movs	r1, #17
 8006ab6:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006aba:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8006abe:	f7fc f899 	bl	8002bf4 <d_print_comp>
 8006ac2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006ac6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006aca:	f804 9001 	strb.w	r9, [r4, r1]
 8006ace:	4620      	mov	r0, r4
 8006ad0:	46c5      	mov	sp, r8
 8006ad2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006ad6:	4798      	blx	r3
 8006ad8:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8006adc:	fab0 f080 	clz	r0, r0
 8006ae0:	0940      	lsrs	r0, r0, #5
 8006ae2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aec:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 8006af0:	d033      	beq.n	8006b5a <d_demangle_callback.constprop.22+0x23a>
 8006af2:	2000      	movs	r0, #0
 8006af4:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006af8:	46bd      	mov	sp, r7
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	7a6b      	ldrb	r3, [r5, #9]
 8006b00:	2b44      	cmp	r3, #68	; 0x44
 8006b02:	d002      	beq.n	8006b0a <d_demangle_callback.constprop.22+0x1ea>
 8006b04:	2b49      	cmp	r3, #73	; 0x49
 8006b06:	f47f af28 	bne.w	800695a <d_demangle_callback.constprop.22+0x3a>
 8006b0a:	7aaa      	ldrb	r2, [r5, #10]
 8006b0c:	2a5f      	cmp	r2, #95	; 0x5f
 8006b0e:	f47f af24 	bne.w	800695a <d_demangle_callback.constprop.22+0x3a>
 8006b12:	2b49      	cmp	r3, #73	; 0x49
 8006b14:	bf14      	ite	ne
 8006b16:	f04f 0903 	movne.w	r9, #3
 8006b1a:	f04f 0902 	moveq.w	r9, #2
 8006b1e:	e71e      	b.n	800695e <d_demangle_callback.constprop.22+0x3e>
 8006b20:	7843      	ldrb	r3, [r0, #1]
 8006b22:	2b5a      	cmp	r3, #90	; 0x5a
 8006b24:	f47f af09 	bne.w	800693a <d_demangle_callback.constprop.22+0x1a>
 8006b28:	f04f 0901 	mov.w	r9, #1
 8006b2c:	e717      	b.n	800695e <d_demangle_callback.constprop.22+0x3e>
 8006b2e:	f107 000c 	add.w	r0, r7, #12
 8006b32:	f7fa fe05 	bl	8001740 <d_type>
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	4605      	mov	r5, r0
 8006b3a:	f893 9000 	ldrb.w	r9, [r3]
 8006b3e:	e76a      	b.n	8006a16 <d_demangle_callback.constprop.22+0xf6>
 8006b40:	7b2a      	ldrb	r2, [r5, #12]
 8006b42:	2a5a      	cmp	r2, #90	; 0x5a
 8006b44:	f47f af43 	bne.w	80069ce <d_demangle_callback.constprop.22+0xae>
 8006b48:	350d      	adds	r5, #13
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	f107 000c 	add.w	r0, r7, #12
 8006b50:	61bd      	str	r5, [r7, #24]
 8006b52:	f7fb fd37 	bl	80025c4 <d_encoding>
 8006b56:	4683      	mov	fp, r0
 8006b58:	e74d      	b.n	80069f6 <d_demangle_callback.constprop.22+0xd6>
 8006b5a:	786b      	ldrb	r3, [r5, #1]
 8006b5c:	2b5a      	cmp	r3, #90	; 0x5a
 8006b5e:	d1c8      	bne.n	8006af2 <d_demangle_callback.constprop.22+0x1d2>
 8006b60:	3502      	adds	r5, #2
 8006b62:	4649      	mov	r1, r9
 8006b64:	f107 000c 	add.w	r0, r7, #12
 8006b68:	61bd      	str	r5, [r7, #24]
 8006b6a:	f7fb fd2b 	bl	80025c4 <d_encoding>
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	07db      	lsls	r3, r3, #31
 8006b72:	4605      	mov	r5, r0
 8006b74:	d552      	bpl.n	8006c1c <d_demangle_callback.constprop.22+0x2fc>
 8006b76:	69b8      	ldr	r0, [r7, #24]
 8006b78:	f890 9000 	ldrb.w	r9, [r0]
 8006b7c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b80:	f47f af49 	bne.w	8006a16 <d_demangle_callback.constprop.22+0xf6>
 8006b84:	7843      	ldrb	r3, [r0, #1]
 8006b86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b8a:	2a19      	cmp	r2, #25
 8006b8c:	d93a      	bls.n	8006c04 <d_demangle_callback.constprop.22+0x2e4>
 8006b8e:	2b5f      	cmp	r3, #95	; 0x5f
 8006b90:	d038      	beq.n	8006c04 <d_demangle_callback.constprop.22+0x2e4>
 8006b92:	3b30      	subs	r3, #48	; 0x30
 8006b94:	2b09      	cmp	r3, #9
 8006b96:	d841      	bhi.n	8006c1c <d_demangle_callback.constprop.22+0x2fc>
 8006b98:	7803      	ldrb	r3, [r0, #0]
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b9e:	d112      	bne.n	8006bc6 <d_demangle_callback.constprop.22+0x2a6>
 8006ba0:	7853      	ldrb	r3, [r2, #1]
 8006ba2:	3b30      	subs	r3, #48	; 0x30
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	d80e      	bhi.n	8006bc6 <d_demangle_callback.constprop.22+0x2a6>
 8006ba8:	7893      	ldrb	r3, [r2, #2]
 8006baa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006bae:	2909      	cmp	r1, #9
 8006bb0:	f102 0202 	add.w	r2, r2, #2
 8006bb4:	d8f2      	bhi.n	8006b9c <d_demangle_callback.constprop.22+0x27c>
 8006bb6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006bba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006bbe:	2909      	cmp	r1, #9
 8006bc0:	d9f9      	bls.n	8006bb6 <d_demangle_callback.constprop.22+0x296>
 8006bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc4:	d0ec      	beq.n	8006ba0 <d_demangle_callback.constprop.22+0x280>
 8006bc6:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	61ba      	str	r2, [r7, #24]
 8006bce:	da17      	bge.n	8006c00 <d_demangle_callback.constprop.22+0x2e0>
 8006bd0:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8006bd4:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006bd8:	eb0e 030c 	add.w	r3, lr, ip
 8006bdc:	3101      	adds	r1, #1
 8006bde:	1a12      	subs	r2, r2, r0
 8006be0:	605c      	str	r4, [r3, #4]
 8006be2:	6239      	str	r1, [r7, #32]
 8006be4:	d00c      	beq.n	8006c00 <d_demangle_callback.constprop.22+0x2e0>
 8006be6:	605c      	str	r4, [r3, #4]
 8006be8:	f80e 400c 	strb.w	r4, [lr, ip]
 8006bec:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8006bf0:	462a      	mov	r2, r5
 8006bf2:	214d      	movs	r1, #77	; 0x4d
 8006bf4:	f107 000c 	add.w	r0, r7, #12
 8006bf8:	f7f9 fb22 	bl	8000240 <d_make_comp>
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	e7ba      	b.n	8006b76 <d_demangle_callback.constprop.22+0x256>
 8006c00:	2300      	movs	r3, #0
 8006c02:	e7f5      	b.n	8006bf0 <d_demangle_callback.constprop.22+0x2d0>
 8006c04:	1c81      	adds	r1, r0, #2
 8006c06:	460a      	mov	r2, r1
 8006c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c0c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006c10:	f1bc 0f19 	cmp.w	ip, #25
 8006c14:	d9f7      	bls.n	8006c06 <d_demangle_callback.constprop.22+0x2e6>
 8006c16:	2b5f      	cmp	r3, #95	; 0x5f
 8006c18:	d0f5      	beq.n	8006c06 <d_demangle_callback.constprop.22+0x2e6>
 8006c1a:	e7bf      	b.n	8006b9c <d_demangle_callback.constprop.22+0x27c>
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f893 9000 	ldrb.w	r9, [r3]
 8006c22:	e6f8      	b.n	8006a16 <d_demangle_callback.constprop.22+0xf6>
 8006c24:	f04f 0b00 	mov.w	fp, #0
 8006c28:	e6e5      	b.n	80069f6 <d_demangle_callback.constprop.22+0xd6>
 8006c2a:	bf00      	nop
 8006c2c:	08011af4 	.word	0x08011af4

08006c30 <__cxa_demangle>:
 8006c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	b380      	cbz	r0, 8006c9a <__cxa_demangle+0x6a>
 8006c38:	b101      	cbz	r1, 8006c3c <__cxa_demangle+0xc>
 8006c3a:	b372      	cbz	r2, 8006c9a <__cxa_demangle+0x6a>
 8006c3c:	2400      	movs	r4, #0
 8006c3e:	4617      	mov	r7, r2
 8006c40:	460e      	mov	r6, r1
 8006c42:	466a      	mov	r2, sp
 8006c44:	492b      	ldr	r1, [pc, #172]	; (8006cf4 <__cxa_demangle+0xc4>)
 8006c46:	461d      	mov	r5, r3
 8006c48:	e9cd 4400 	strd	r4, r4, [sp]
 8006c4c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006c50:	f7ff fe66 	bl	8006920 <d_demangle_callback.constprop.22>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d047      	beq.n	8006ce8 <__cxa_demangle+0xb8>
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	9c00      	ldr	r4, [sp, #0]
 8006c5c:	b9ab      	cbnz	r3, 8006c8a <__cxa_demangle+0x5a>
 8006c5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c62:	b36c      	cbz	r4, 8006cc0 <__cxa_demangle+0x90>
 8006c64:	b1b6      	cbz	r6, 8006c94 <__cxa_demangle+0x64>
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 f8b4 	bl	8006dd4 <strlen>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	4298      	cmp	r0, r3
 8006c70:	d31c      	bcc.n	8006cac <__cxa_demangle+0x7c>
 8006c72:	4630      	mov	r0, r6
 8006c74:	f006 fcc8 	bl	800d608 <free>
 8006c78:	f8c7 8000 	str.w	r8, [r7]
 8006c7c:	b195      	cbz	r5, 8006ca4 <__cxa_demangle+0x74>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4620      	mov	r0, r4
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	b004      	add	sp, #16
 8006c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8a:	b334      	cbz	r4, 8006cda <__cxa_demangle+0xaa>
 8006c8c:	f04f 0801 	mov.w	r8, #1
 8006c90:	2e00      	cmp	r6, #0
 8006c92:	d1e8      	bne.n	8006c66 <__cxa_demangle+0x36>
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	d1ef      	bne.n	8006c78 <__cxa_demangle+0x48>
 8006c98:	e7f0      	b.n	8006c7c <__cxa_demangle+0x4c>
 8006c9a:	b113      	cbz	r3, 8006ca2 <__cxa_demangle+0x72>
 8006c9c:	f06f 0202 	mvn.w	r2, #2
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	2400      	movs	r4, #0
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	b004      	add	sp, #16
 8006ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cac:	1c42      	adds	r2, r0, #1
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f006 fef6 	bl	800daa2 <memcpy>
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f006 fca6 	bl	800d608 <free>
 8006cbc:	4634      	mov	r4, r6
 8006cbe:	e7dd      	b.n	8006c7c <__cxa_demangle+0x4c>
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	d0ee      	beq.n	8006ca2 <__cxa_demangle+0x72>
 8006cc4:	f1b8 0f01 	cmp.w	r8, #1
 8006cc8:	d009      	beq.n	8006cde <__cxa_demangle+0xae>
 8006cca:	2400      	movs	r4, #0
 8006ccc:	f06f 0301 	mvn.w	r3, #1
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	b004      	add	sp, #16
 8006cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cda:	2d00      	cmp	r5, #0
 8006cdc:	d0e1      	beq.n	8006ca2 <__cxa_demangle+0x72>
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	2400      	movs	r4, #0
 8006ce6:	e7dd      	b.n	8006ca4 <__cxa_demangle+0x74>
 8006ce8:	9800      	ldr	r0, [sp, #0]
 8006cea:	f006 fc8d 	bl	800d608 <free>
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	d1eb      	bne.n	8006cca <__cxa_demangle+0x9a>
 8006cf2:	e7d6      	b.n	8006ca2 <__cxa_demangle+0x72>
 8006cf4:	080008b9 	.word	0x080008b9

08006cf8 <__gcclibcxx_demangle_callback>:
 8006cf8:	b160      	cbz	r0, 8006d14 <__gcclibcxx_demangle_callback+0x1c>
 8006cfa:	b508      	push	{r3, lr}
 8006cfc:	b139      	cbz	r1, 8006d0e <__gcclibcxx_demangle_callback+0x16>
 8006cfe:	f7ff fe0f 	bl	8006920 <d_demangle_callback.constprop.22>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	bf0c      	ite	eq
 8006d06:	f06f 0001 	mvneq.w	r0, #1
 8006d0a:	2000      	movne	r0, #0
 8006d0c:	bd08      	pop	{r3, pc}
 8006d0e:	f06f 0002 	mvn.w	r0, #2
 8006d12:	bd08      	pop	{r3, pc}
 8006d14:	f06f 0002 	mvn.w	r0, #2
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	0000      	movs	r0, r0
	...

08006d20 <memchr>:
 8006d20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d24:	2a10      	cmp	r2, #16
 8006d26:	db2b      	blt.n	8006d80 <memchr+0x60>
 8006d28:	f010 0f07 	tst.w	r0, #7
 8006d2c:	d008      	beq.n	8006d40 <memchr+0x20>
 8006d2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d32:	3a01      	subs	r2, #1
 8006d34:	428b      	cmp	r3, r1
 8006d36:	d02d      	beq.n	8006d94 <memchr+0x74>
 8006d38:	f010 0f07 	tst.w	r0, #7
 8006d3c:	b342      	cbz	r2, 8006d90 <memchr+0x70>
 8006d3e:	d1f6      	bne.n	8006d2e <memchr+0xe>
 8006d40:	b4f0      	push	{r4, r5, r6, r7}
 8006d42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006d46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006d4a:	f022 0407 	bic.w	r4, r2, #7
 8006d4e:	f07f 0700 	mvns.w	r7, #0
 8006d52:	2300      	movs	r3, #0
 8006d54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006d58:	3c08      	subs	r4, #8
 8006d5a:	ea85 0501 	eor.w	r5, r5, r1
 8006d5e:	ea86 0601 	eor.w	r6, r6, r1
 8006d62:	fa85 f547 	uadd8	r5, r5, r7
 8006d66:	faa3 f587 	sel	r5, r3, r7
 8006d6a:	fa86 f647 	uadd8	r6, r6, r7
 8006d6e:	faa5 f687 	sel	r6, r5, r7
 8006d72:	b98e      	cbnz	r6, 8006d98 <memchr+0x78>
 8006d74:	d1ee      	bne.n	8006d54 <memchr+0x34>
 8006d76:	bcf0      	pop	{r4, r5, r6, r7}
 8006d78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d7c:	f002 0207 	and.w	r2, r2, #7
 8006d80:	b132      	cbz	r2, 8006d90 <memchr+0x70>
 8006d82:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d86:	3a01      	subs	r2, #1
 8006d88:	ea83 0301 	eor.w	r3, r3, r1
 8006d8c:	b113      	cbz	r3, 8006d94 <memchr+0x74>
 8006d8e:	d1f8      	bne.n	8006d82 <memchr+0x62>
 8006d90:	2000      	movs	r0, #0
 8006d92:	4770      	bx	lr
 8006d94:	3801      	subs	r0, #1
 8006d96:	4770      	bx	lr
 8006d98:	2d00      	cmp	r5, #0
 8006d9a:	bf06      	itte	eq
 8006d9c:	4635      	moveq	r5, r6
 8006d9e:	3803      	subeq	r0, #3
 8006da0:	3807      	subne	r0, #7
 8006da2:	f015 0f01 	tst.w	r5, #1
 8006da6:	d107      	bne.n	8006db8 <memchr+0x98>
 8006da8:	3001      	adds	r0, #1
 8006daa:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006dae:	bf02      	ittt	eq
 8006db0:	3001      	addeq	r0, #1
 8006db2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006db6:	3001      	addeq	r0, #1
 8006db8:	bcf0      	pop	{r4, r5, r6, r7}
 8006dba:	3801      	subs	r0, #1
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop

08006dc0 <strcmp>:
 8006dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dc8:	2a01      	cmp	r2, #1
 8006dca:	bf28      	it	cs
 8006dcc:	429a      	cmpcs	r2, r3
 8006dce:	d0f7      	beq.n	8006dc0 <strcmp>
 8006dd0:	1ad0      	subs	r0, r2, r3
 8006dd2:	4770      	bx	lr

08006dd4 <strlen>:
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	d1fb      	bne.n	8006dd6 <strlen+0x2>
 8006dde:	1a18      	subs	r0, r3, r0
 8006de0:	3801      	subs	r0, #1
 8006de2:	4770      	bx	lr

08006de4 <__aeabi_uldivmod>:
 8006de4:	b953      	cbnz	r3, 8006dfc <__aeabi_uldivmod+0x18>
 8006de6:	b94a      	cbnz	r2, 8006dfc <__aeabi_uldivmod+0x18>
 8006de8:	2900      	cmp	r1, #0
 8006dea:	bf08      	it	eq
 8006dec:	2800      	cmpeq	r0, #0
 8006dee:	bf1c      	itt	ne
 8006df0:	f04f 31ff 	movne.w	r1, #4294967295
 8006df4:	f04f 30ff 	movne.w	r0, #4294967295
 8006df8:	f001 b8f8 	b.w	8007fec <__aeabi_idiv0>
 8006dfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8006e00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006e04:	f000 f806 	bl	8006e14 <__udivmoddi4>
 8006e08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e10:	b004      	add	sp, #16
 8006e12:	4770      	bx	lr

08006e14 <__udivmoddi4>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	9e08      	ldr	r6, [sp, #32]
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4688      	mov	r8, r1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d14b      	bne.n	8006eba <__udivmoddi4+0xa6>
 8006e22:	428a      	cmp	r2, r1
 8006e24:	4615      	mov	r5, r2
 8006e26:	d967      	bls.n	8006ef8 <__udivmoddi4+0xe4>
 8006e28:	fab2 f282 	clz	r2, r2
 8006e2c:	b14a      	cbz	r2, 8006e42 <__udivmoddi4+0x2e>
 8006e2e:	f1c2 0720 	rsb	r7, r2, #32
 8006e32:	fa01 f302 	lsl.w	r3, r1, r2
 8006e36:	fa20 f707 	lsr.w	r7, r0, r7
 8006e3a:	4095      	lsls	r5, r2
 8006e3c:	ea47 0803 	orr.w	r8, r7, r3
 8006e40:	4094      	lsls	r4, r2
 8006e42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006e46:	0c23      	lsrs	r3, r4, #16
 8006e48:	fbb8 f7fe 	udiv	r7, r8, lr
 8006e4c:	fa1f fc85 	uxth.w	ip, r5
 8006e50:	fb0e 8817 	mls	r8, lr, r7, r8
 8006e54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006e58:	fb07 f10c 	mul.w	r1, r7, ip
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	d909      	bls.n	8006e74 <__udivmoddi4+0x60>
 8006e60:	18eb      	adds	r3, r5, r3
 8006e62:	f107 30ff 	add.w	r0, r7, #4294967295
 8006e66:	f080 811b 	bcs.w	80070a0 <__udivmoddi4+0x28c>
 8006e6a:	4299      	cmp	r1, r3
 8006e6c:	f240 8118 	bls.w	80070a0 <__udivmoddi4+0x28c>
 8006e70:	3f02      	subs	r7, #2
 8006e72:	442b      	add	r3, r5
 8006e74:	1a5b      	subs	r3, r3, r1
 8006e76:	b2a4      	uxth	r4, r4
 8006e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8006e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8006e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006e84:	fb00 fc0c 	mul.w	ip, r0, ip
 8006e88:	45a4      	cmp	ip, r4
 8006e8a:	d909      	bls.n	8006ea0 <__udivmoddi4+0x8c>
 8006e8c:	192c      	adds	r4, r5, r4
 8006e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e92:	f080 8107 	bcs.w	80070a4 <__udivmoddi4+0x290>
 8006e96:	45a4      	cmp	ip, r4
 8006e98:	f240 8104 	bls.w	80070a4 <__udivmoddi4+0x290>
 8006e9c:	3802      	subs	r0, #2
 8006e9e:	442c      	add	r4, r5
 8006ea0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006ea4:	eba4 040c 	sub.w	r4, r4, ip
 8006ea8:	2700      	movs	r7, #0
 8006eaa:	b11e      	cbz	r6, 8006eb4 <__udivmoddi4+0xa0>
 8006eac:	40d4      	lsrs	r4, r2
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e9c6 4300 	strd	r4, r3, [r6]
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eba:	428b      	cmp	r3, r1
 8006ebc:	d909      	bls.n	8006ed2 <__udivmoddi4+0xbe>
 8006ebe:	2e00      	cmp	r6, #0
 8006ec0:	f000 80eb 	beq.w	800709a <__udivmoddi4+0x286>
 8006ec4:	2700      	movs	r7, #0
 8006ec6:	e9c6 0100 	strd	r0, r1, [r6]
 8006eca:	4638      	mov	r0, r7
 8006ecc:	4639      	mov	r1, r7
 8006ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed2:	fab3 f783 	clz	r7, r3
 8006ed6:	2f00      	cmp	r7, #0
 8006ed8:	d147      	bne.n	8006f6a <__udivmoddi4+0x156>
 8006eda:	428b      	cmp	r3, r1
 8006edc:	d302      	bcc.n	8006ee4 <__udivmoddi4+0xd0>
 8006ede:	4282      	cmp	r2, r0
 8006ee0:	f200 80fa 	bhi.w	80070d8 <__udivmoddi4+0x2c4>
 8006ee4:	1a84      	subs	r4, r0, r2
 8006ee6:	eb61 0303 	sbc.w	r3, r1, r3
 8006eea:	2001      	movs	r0, #1
 8006eec:	4698      	mov	r8, r3
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	d0e0      	beq.n	8006eb4 <__udivmoddi4+0xa0>
 8006ef2:	e9c6 4800 	strd	r4, r8, [r6]
 8006ef6:	e7dd      	b.n	8006eb4 <__udivmoddi4+0xa0>
 8006ef8:	b902      	cbnz	r2, 8006efc <__udivmoddi4+0xe8>
 8006efa:	deff      	udf	#255	; 0xff
 8006efc:	fab2 f282 	clz	r2, r2
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	f040 808f 	bne.w	8007024 <__udivmoddi4+0x210>
 8006f06:	1b49      	subs	r1, r1, r5
 8006f08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006f0c:	fa1f f885 	uxth.w	r8, r5
 8006f10:	2701      	movs	r7, #1
 8006f12:	fbb1 fcfe 	udiv	ip, r1, lr
 8006f16:	0c23      	lsrs	r3, r4, #16
 8006f18:	fb0e 111c 	mls	r1, lr, ip, r1
 8006f1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006f20:	fb08 f10c 	mul.w	r1, r8, ip
 8006f24:	4299      	cmp	r1, r3
 8006f26:	d907      	bls.n	8006f38 <__udivmoddi4+0x124>
 8006f28:	18eb      	adds	r3, r5, r3
 8006f2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8006f2e:	d202      	bcs.n	8006f36 <__udivmoddi4+0x122>
 8006f30:	4299      	cmp	r1, r3
 8006f32:	f200 80cd 	bhi.w	80070d0 <__udivmoddi4+0x2bc>
 8006f36:	4684      	mov	ip, r0
 8006f38:	1a59      	subs	r1, r3, r1
 8006f3a:	b2a3      	uxth	r3, r4
 8006f3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8006f40:	fb0e 1410 	mls	r4, lr, r0, r1
 8006f44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006f48:	fb08 f800 	mul.w	r8, r8, r0
 8006f4c:	45a0      	cmp	r8, r4
 8006f4e:	d907      	bls.n	8006f60 <__udivmoddi4+0x14c>
 8006f50:	192c      	adds	r4, r5, r4
 8006f52:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f56:	d202      	bcs.n	8006f5e <__udivmoddi4+0x14a>
 8006f58:	45a0      	cmp	r8, r4
 8006f5a:	f200 80b6 	bhi.w	80070ca <__udivmoddi4+0x2b6>
 8006f5e:	4618      	mov	r0, r3
 8006f60:	eba4 0408 	sub.w	r4, r4, r8
 8006f64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8006f68:	e79f      	b.n	8006eaa <__udivmoddi4+0x96>
 8006f6a:	f1c7 0c20 	rsb	ip, r7, #32
 8006f6e:	40bb      	lsls	r3, r7
 8006f70:	fa22 fe0c 	lsr.w	lr, r2, ip
 8006f74:	ea4e 0e03 	orr.w	lr, lr, r3
 8006f78:	fa01 f407 	lsl.w	r4, r1, r7
 8006f7c:	fa20 f50c 	lsr.w	r5, r0, ip
 8006f80:	fa21 f30c 	lsr.w	r3, r1, ip
 8006f84:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8006f88:	4325      	orrs	r5, r4
 8006f8a:	fbb3 f9f8 	udiv	r9, r3, r8
 8006f8e:	0c2c      	lsrs	r4, r5, #16
 8006f90:	fb08 3319 	mls	r3, r8, r9, r3
 8006f94:	fa1f fa8e 	uxth.w	sl, lr
 8006f98:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006f9c:	fb09 f40a 	mul.w	r4, r9, sl
 8006fa0:	429c      	cmp	r4, r3
 8006fa2:	fa02 f207 	lsl.w	r2, r2, r7
 8006fa6:	fa00 f107 	lsl.w	r1, r0, r7
 8006faa:	d90b      	bls.n	8006fc4 <__udivmoddi4+0x1b0>
 8006fac:	eb1e 0303 	adds.w	r3, lr, r3
 8006fb0:	f109 30ff 	add.w	r0, r9, #4294967295
 8006fb4:	f080 8087 	bcs.w	80070c6 <__udivmoddi4+0x2b2>
 8006fb8:	429c      	cmp	r4, r3
 8006fba:	f240 8084 	bls.w	80070c6 <__udivmoddi4+0x2b2>
 8006fbe:	f1a9 0902 	sub.w	r9, r9, #2
 8006fc2:	4473      	add	r3, lr
 8006fc4:	1b1b      	subs	r3, r3, r4
 8006fc6:	b2ad      	uxth	r5, r5
 8006fc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8006fcc:	fb08 3310 	mls	r3, r8, r0, r3
 8006fd0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8006fd4:	fb00 fa0a 	mul.w	sl, r0, sl
 8006fd8:	45a2      	cmp	sl, r4
 8006fda:	d908      	bls.n	8006fee <__udivmoddi4+0x1da>
 8006fdc:	eb1e 0404 	adds.w	r4, lr, r4
 8006fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fe4:	d26b      	bcs.n	80070be <__udivmoddi4+0x2aa>
 8006fe6:	45a2      	cmp	sl, r4
 8006fe8:	d969      	bls.n	80070be <__udivmoddi4+0x2aa>
 8006fea:	3802      	subs	r0, #2
 8006fec:	4474      	add	r4, lr
 8006fee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8006ff2:	fba0 8902 	umull	r8, r9, r0, r2
 8006ff6:	eba4 040a 	sub.w	r4, r4, sl
 8006ffa:	454c      	cmp	r4, r9
 8006ffc:	46c2      	mov	sl, r8
 8006ffe:	464b      	mov	r3, r9
 8007000:	d354      	bcc.n	80070ac <__udivmoddi4+0x298>
 8007002:	d051      	beq.n	80070a8 <__udivmoddi4+0x294>
 8007004:	2e00      	cmp	r6, #0
 8007006:	d069      	beq.n	80070dc <__udivmoddi4+0x2c8>
 8007008:	ebb1 050a 	subs.w	r5, r1, sl
 800700c:	eb64 0403 	sbc.w	r4, r4, r3
 8007010:	fa04 fc0c 	lsl.w	ip, r4, ip
 8007014:	40fd      	lsrs	r5, r7
 8007016:	40fc      	lsrs	r4, r7
 8007018:	ea4c 0505 	orr.w	r5, ip, r5
 800701c:	e9c6 5400 	strd	r5, r4, [r6]
 8007020:	2700      	movs	r7, #0
 8007022:	e747      	b.n	8006eb4 <__udivmoddi4+0xa0>
 8007024:	f1c2 0320 	rsb	r3, r2, #32
 8007028:	fa20 f703 	lsr.w	r7, r0, r3
 800702c:	4095      	lsls	r5, r2
 800702e:	fa01 f002 	lsl.w	r0, r1, r2
 8007032:	fa21 f303 	lsr.w	r3, r1, r3
 8007036:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800703a:	4338      	orrs	r0, r7
 800703c:	0c01      	lsrs	r1, r0, #16
 800703e:	fbb3 f7fe 	udiv	r7, r3, lr
 8007042:	fa1f f885 	uxth.w	r8, r5
 8007046:	fb0e 3317 	mls	r3, lr, r7, r3
 800704a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800704e:	fb07 f308 	mul.w	r3, r7, r8
 8007052:	428b      	cmp	r3, r1
 8007054:	fa04 f402 	lsl.w	r4, r4, r2
 8007058:	d907      	bls.n	800706a <__udivmoddi4+0x256>
 800705a:	1869      	adds	r1, r5, r1
 800705c:	f107 3cff 	add.w	ip, r7, #4294967295
 8007060:	d22f      	bcs.n	80070c2 <__udivmoddi4+0x2ae>
 8007062:	428b      	cmp	r3, r1
 8007064:	d92d      	bls.n	80070c2 <__udivmoddi4+0x2ae>
 8007066:	3f02      	subs	r7, #2
 8007068:	4429      	add	r1, r5
 800706a:	1acb      	subs	r3, r1, r3
 800706c:	b281      	uxth	r1, r0
 800706e:	fbb3 f0fe 	udiv	r0, r3, lr
 8007072:	fb0e 3310 	mls	r3, lr, r0, r3
 8007076:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800707a:	fb00 f308 	mul.w	r3, r0, r8
 800707e:	428b      	cmp	r3, r1
 8007080:	d907      	bls.n	8007092 <__udivmoddi4+0x27e>
 8007082:	1869      	adds	r1, r5, r1
 8007084:	f100 3cff 	add.w	ip, r0, #4294967295
 8007088:	d217      	bcs.n	80070ba <__udivmoddi4+0x2a6>
 800708a:	428b      	cmp	r3, r1
 800708c:	d915      	bls.n	80070ba <__udivmoddi4+0x2a6>
 800708e:	3802      	subs	r0, #2
 8007090:	4429      	add	r1, r5
 8007092:	1ac9      	subs	r1, r1, r3
 8007094:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007098:	e73b      	b.n	8006f12 <__udivmoddi4+0xfe>
 800709a:	4637      	mov	r7, r6
 800709c:	4630      	mov	r0, r6
 800709e:	e709      	b.n	8006eb4 <__udivmoddi4+0xa0>
 80070a0:	4607      	mov	r7, r0
 80070a2:	e6e7      	b.n	8006e74 <__udivmoddi4+0x60>
 80070a4:	4618      	mov	r0, r3
 80070a6:	e6fb      	b.n	8006ea0 <__udivmoddi4+0x8c>
 80070a8:	4541      	cmp	r1, r8
 80070aa:	d2ab      	bcs.n	8007004 <__udivmoddi4+0x1f0>
 80070ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80070b0:	eb69 020e 	sbc.w	r2, r9, lr
 80070b4:	3801      	subs	r0, #1
 80070b6:	4613      	mov	r3, r2
 80070b8:	e7a4      	b.n	8007004 <__udivmoddi4+0x1f0>
 80070ba:	4660      	mov	r0, ip
 80070bc:	e7e9      	b.n	8007092 <__udivmoddi4+0x27e>
 80070be:	4618      	mov	r0, r3
 80070c0:	e795      	b.n	8006fee <__udivmoddi4+0x1da>
 80070c2:	4667      	mov	r7, ip
 80070c4:	e7d1      	b.n	800706a <__udivmoddi4+0x256>
 80070c6:	4681      	mov	r9, r0
 80070c8:	e77c      	b.n	8006fc4 <__udivmoddi4+0x1b0>
 80070ca:	3802      	subs	r0, #2
 80070cc:	442c      	add	r4, r5
 80070ce:	e747      	b.n	8006f60 <__udivmoddi4+0x14c>
 80070d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80070d4:	442b      	add	r3, r5
 80070d6:	e72f      	b.n	8006f38 <__udivmoddi4+0x124>
 80070d8:	4638      	mov	r0, r7
 80070da:	e708      	b.n	8006eee <__udivmoddi4+0xda>
 80070dc:	4637      	mov	r7, r6
 80070de:	e6e9      	b.n	8006eb4 <__udivmoddi4+0xa0>

080070e0 <selfrel_offset31>:
 80070e0:	6803      	ldr	r3, [r0, #0]
 80070e2:	005a      	lsls	r2, r3, #1
 80070e4:	bf4c      	ite	mi
 80070e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80070ea:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	4418      	add	r0, r3
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop

080070f4 <search_EIT_table>:
 80070f4:	b361      	cbz	r1, 8007150 <search_EIT_table+0x5c>
 80070f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	f101 3aff 	add.w	sl, r1, #4294967295
 80070fe:	4690      	mov	r8, r2
 8007100:	4606      	mov	r6, r0
 8007102:	46d1      	mov	r9, sl
 8007104:	2700      	movs	r7, #0
 8007106:	eb07 0409 	add.w	r4, r7, r9
 800710a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800710e:	1064      	asrs	r4, r4, #1
 8007110:	00e5      	lsls	r5, r4, #3
 8007112:	1971      	adds	r1, r6, r5
 8007114:	4608      	mov	r0, r1
 8007116:	f7ff ffe3 	bl	80070e0 <selfrel_offset31>
 800711a:	45a2      	cmp	sl, r4
 800711c:	4683      	mov	fp, r0
 800711e:	f105 0008 	add.w	r0, r5, #8
 8007122:	4430      	add	r0, r6
 8007124:	d009      	beq.n	800713a <search_EIT_table+0x46>
 8007126:	f7ff ffdb 	bl	80070e0 <selfrel_offset31>
 800712a:	45c3      	cmp	fp, r8
 800712c:	f100 30ff 	add.w	r0, r0, #4294967295
 8007130:	d805      	bhi.n	800713e <search_EIT_table+0x4a>
 8007132:	4540      	cmp	r0, r8
 8007134:	d209      	bcs.n	800714a <search_EIT_table+0x56>
 8007136:	1c67      	adds	r7, r4, #1
 8007138:	e7e5      	b.n	8007106 <search_EIT_table+0x12>
 800713a:	45c3      	cmp	fp, r8
 800713c:	d905      	bls.n	800714a <search_EIT_table+0x56>
 800713e:	42a7      	cmp	r7, r4
 8007140:	d002      	beq.n	8007148 <search_EIT_table+0x54>
 8007142:	f104 39ff 	add.w	r9, r4, #4294967295
 8007146:	e7de      	b.n	8007106 <search_EIT_table+0x12>
 8007148:	2100      	movs	r1, #0
 800714a:	4608      	mov	r0, r1
 800714c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007150:	4608      	mov	r0, r1
 8007152:	4770      	bx	lr

08007154 <__gnu_unwind_get_pr_addr>:
 8007154:	2801      	cmp	r0, #1
 8007156:	d007      	beq.n	8007168 <__gnu_unwind_get_pr_addr+0x14>
 8007158:	2802      	cmp	r0, #2
 800715a:	d007      	beq.n	800716c <__gnu_unwind_get_pr_addr+0x18>
 800715c:	4b04      	ldr	r3, [pc, #16]	; (8007170 <__gnu_unwind_get_pr_addr+0x1c>)
 800715e:	2800      	cmp	r0, #0
 8007160:	bf0c      	ite	eq
 8007162:	4618      	moveq	r0, r3
 8007164:	2000      	movne	r0, #0
 8007166:	4770      	bx	lr
 8007168:	4802      	ldr	r0, [pc, #8]	; (8007174 <__gnu_unwind_get_pr_addr+0x20>)
 800716a:	4770      	bx	lr
 800716c:	4802      	ldr	r0, [pc, #8]	; (8007178 <__gnu_unwind_get_pr_addr+0x24>)
 800716e:	4770      	bx	lr
 8007170:	08007841 	.word	0x08007841
 8007174:	08007845 	.word	0x08007845
 8007178:	08007849 	.word	0x08007849

0800717c <get_eit_entry>:
 800717c:	b530      	push	{r4, r5, lr}
 800717e:	4b25      	ldr	r3, [pc, #148]	; (8007214 <get_eit_entry+0x98>)
 8007180:	b083      	sub	sp, #12
 8007182:	4604      	mov	r4, r0
 8007184:	1e8d      	subs	r5, r1, #2
 8007186:	b34b      	cbz	r3, 80071dc <get_eit_entry+0x60>
 8007188:	a901      	add	r1, sp, #4
 800718a:	4628      	mov	r0, r5
 800718c:	f3af 8000 	nop.w
 8007190:	b1f0      	cbz	r0, 80071d0 <get_eit_entry+0x54>
 8007192:	9901      	ldr	r1, [sp, #4]
 8007194:	462a      	mov	r2, r5
 8007196:	f7ff ffad 	bl	80070f4 <search_EIT_table>
 800719a:	4601      	mov	r1, r0
 800719c:	b1c0      	cbz	r0, 80071d0 <get_eit_entry+0x54>
 800719e:	f7ff ff9f 	bl	80070e0 <selfrel_offset31>
 80071a2:	684b      	ldr	r3, [r1, #4]
 80071a4:	64a0      	str	r0, [r4, #72]	; 0x48
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d02e      	beq.n	8007208 <get_eit_entry+0x8c>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f101 0004 	add.w	r0, r1, #4
 80071b0:	db26      	blt.n	8007200 <get_eit_entry+0x84>
 80071b2:	f7ff ff95 	bl	80070e0 <selfrel_offset31>
 80071b6:	2300      	movs	r3, #0
 80071b8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80071bc:	6803      	ldr	r3, [r0, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	db12      	blt.n	80071e8 <get_eit_entry+0x6c>
 80071c2:	f7ff ff8d 	bl	80070e0 <selfrel_offset31>
 80071c6:	2300      	movs	r3, #0
 80071c8:	6120      	str	r0, [r4, #16]
 80071ca:	4618      	mov	r0, r3
 80071cc:	b003      	add	sp, #12
 80071ce:	bd30      	pop	{r4, r5, pc}
 80071d0:	2300      	movs	r3, #0
 80071d2:	6123      	str	r3, [r4, #16]
 80071d4:	2309      	movs	r3, #9
 80071d6:	4618      	mov	r0, r3
 80071d8:	b003      	add	sp, #12
 80071da:	bd30      	pop	{r4, r5, pc}
 80071dc:	490e      	ldr	r1, [pc, #56]	; (8007218 <get_eit_entry+0x9c>)
 80071de:	480f      	ldr	r0, [pc, #60]	; (800721c <get_eit_entry+0xa0>)
 80071e0:	1a09      	subs	r1, r1, r0
 80071e2:	10c9      	asrs	r1, r1, #3
 80071e4:	9101      	str	r1, [sp, #4]
 80071e6:	e7d5      	b.n	8007194 <get_eit_entry+0x18>
 80071e8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80071ec:	f7ff ffb2 	bl	8007154 <__gnu_unwind_get_pr_addr>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	bf14      	ite	ne
 80071f4:	2300      	movne	r3, #0
 80071f6:	2309      	moveq	r3, #9
 80071f8:	6120      	str	r0, [r4, #16]
 80071fa:	4618      	mov	r0, r3
 80071fc:	b003      	add	sp, #12
 80071fe:	bd30      	pop	{r4, r5, pc}
 8007200:	2301      	movs	r3, #1
 8007202:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007206:	e7d9      	b.n	80071bc <get_eit_entry+0x40>
 8007208:	2300      	movs	r3, #0
 800720a:	6123      	str	r3, [r4, #16]
 800720c:	2305      	movs	r3, #5
 800720e:	4618      	mov	r0, r3
 8007210:	b003      	add	sp, #12
 8007212:	bd30      	pop	{r4, r5, pc}
 8007214:	00000000 	.word	0x00000000
 8007218:	08012b6c 	.word	0x08012b6c
 800721c:	08012844 	.word	0x08012844

08007220 <restore_non_core_regs>:
 8007220:	6803      	ldr	r3, [r0, #0]
 8007222:	07da      	lsls	r2, r3, #31
 8007224:	b510      	push	{r4, lr}
 8007226:	4604      	mov	r4, r0
 8007228:	d406      	bmi.n	8007238 <restore_non_core_regs+0x18>
 800722a:	079b      	lsls	r3, r3, #30
 800722c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007230:	d509      	bpl.n	8007246 <restore_non_core_regs+0x26>
 8007232:	f000 fc5f 	bl	8007af4 <__gnu_Unwind_Restore_VFP_D>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	0759      	lsls	r1, r3, #29
 800723a:	d509      	bpl.n	8007250 <restore_non_core_regs+0x30>
 800723c:	071a      	lsls	r2, r3, #28
 800723e:	d50e      	bpl.n	800725e <restore_non_core_regs+0x3e>
 8007240:	06db      	lsls	r3, r3, #27
 8007242:	d513      	bpl.n	800726c <restore_non_core_regs+0x4c>
 8007244:	bd10      	pop	{r4, pc}
 8007246:	f000 fc4d 	bl	8007ae4 <__gnu_Unwind_Restore_VFP>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	0759      	lsls	r1, r3, #29
 800724e:	d4f5      	bmi.n	800723c <restore_non_core_regs+0x1c>
 8007250:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007254:	f000 fc56 	bl	8007b04 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	071a      	lsls	r2, r3, #28
 800725c:	d4f0      	bmi.n	8007240 <restore_non_core_regs+0x20>
 800725e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007262:	f000 fc57 	bl	8007b14 <__gnu_Unwind_Restore_WMMXD>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	06db      	lsls	r3, r3, #27
 800726a:	d4eb      	bmi.n	8007244 <restore_non_core_regs+0x24>
 800726c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007274:	f000 bc92 	b.w	8007b9c <__gnu_Unwind_Restore_WMMXC>

08007278 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007278:	6803      	ldr	r3, [r0, #0]
 800727a:	b103      	cbz	r3, 800727e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 800727c:	4403      	add	r3, r0
 800727e:	4618      	mov	r0, r3
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop

08007284 <__gnu_unwind_24bit.isra.1>:
 8007284:	2009      	movs	r0, #9
 8007286:	4770      	bx	lr

08007288 <_Unwind_DebugHook>:
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop

0800728c <unwind_phase2>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	e008      	b.n	80072a6 <unwind_phase2+0x1a>
 8007294:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007296:	6163      	str	r3, [r4, #20]
 8007298:	462a      	mov	r2, r5
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	4621      	mov	r1, r4
 800729e:	2001      	movs	r0, #1
 80072a0:	4798      	blx	r3
 80072a2:	2808      	cmp	r0, #8
 80072a4:	d108      	bne.n	80072b8 <unwind_phase2+0x2c>
 80072a6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7ff ff67 	bl	800717c <get_eit_entry>
 80072ae:	4606      	mov	r6, r0
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d0ef      	beq.n	8007294 <unwind_phase2+0x8>
 80072b4:	f005 ff56 	bl	800d164 <abort>
 80072b8:	2807      	cmp	r0, #7
 80072ba:	d1fb      	bne.n	80072b4 <unwind_phase2+0x28>
 80072bc:	4630      	mov	r0, r6
 80072be:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80072c0:	f7ff ffe2 	bl	8007288 <_Unwind_DebugHook>
 80072c4:	1d28      	adds	r0, r5, #4
 80072c6:	f000 fc01 	bl	8007acc <__restore_core_regs>
 80072ca:	bf00      	nop

080072cc <unwind_phase2_forced>:
 80072cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	1d0c      	adds	r4, r1, #4
 80072d2:	4605      	mov	r5, r0
 80072d4:	4617      	mov	r7, r2
 80072d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072d8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80072dc:	ae03      	add	r6, sp, #12
 80072de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80072e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80072e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80072e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80072ec:	ac02      	add	r4, sp, #8
 80072ee:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80072f2:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80072f6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80072fa:	2300      	movs	r3, #0
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	e021      	b.n	8007344 <unwind_phase2_forced+0x78>
 8007300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007302:	616b      	str	r3, [r5, #20]
 8007304:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007308:	4621      	mov	r1, r4
 800730a:	a87a      	add	r0, sp, #488	; 0x1e8
 800730c:	f006 fbc9 	bl	800daa2 <memcpy>
 8007310:	692b      	ldr	r3, [r5, #16]
 8007312:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007314:	4629      	mov	r1, r5
 8007316:	4630      	mov	r0, r6
 8007318:	4798      	blx	r3
 800731a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800731c:	e9cd 4900 	strd	r4, r9, [sp]
 8007320:	4682      	mov	sl, r0
 8007322:	6463      	str	r3, [r4, #68]	; 0x44
 8007324:	4631      	mov	r1, r6
 8007326:	462b      	mov	r3, r5
 8007328:	462a      	mov	r2, r5
 800732a:	2001      	movs	r0, #1
 800732c:	47c0      	blx	r8
 800732e:	4607      	mov	r7, r0
 8007330:	b9f8      	cbnz	r0, 8007372 <unwind_phase2_forced+0xa6>
 8007332:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007336:	a97a      	add	r1, sp, #488	; 0x1e8
 8007338:	4620      	mov	r0, r4
 800733a:	f006 fbb2 	bl	800daa2 <memcpy>
 800733e:	f1ba 0f08 	cmp.w	sl, #8
 8007342:	d11c      	bne.n	800737e <unwind_phase2_forced+0xb2>
 8007344:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007346:	4628      	mov	r0, r5
 8007348:	f7ff ff18 	bl	800717c <get_eit_entry>
 800734c:	2f00      	cmp	r7, #0
 800734e:	bf08      	it	eq
 8007350:	2609      	moveq	r6, #9
 8007352:	4607      	mov	r7, r0
 8007354:	bf18      	it	ne
 8007356:	260a      	movne	r6, #10
 8007358:	2800      	cmp	r0, #0
 800735a:	d0d1      	beq.n	8007300 <unwind_phase2_forced+0x34>
 800735c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800735e:	f046 0110 	orr.w	r1, r6, #16
 8007362:	e9cd 4900 	strd	r4, r9, [sp]
 8007366:	462a      	mov	r2, r5
 8007368:	6463      	str	r3, [r4, #68]	; 0x44
 800736a:	2001      	movs	r0, #1
 800736c:	462b      	mov	r3, r5
 800736e:	47c0      	blx	r8
 8007370:	b100      	cbz	r0, 8007374 <unwind_phase2_forced+0xa8>
 8007372:	2709      	movs	r7, #9
 8007374:	4638      	mov	r0, r7
 8007376:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737e:	f1ba 0f07 	cmp.w	sl, #7
 8007382:	d1f6      	bne.n	8007372 <unwind_phase2_forced+0xa6>
 8007384:	4638      	mov	r0, r7
 8007386:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007388:	f7ff ff7e 	bl	8007288 <_Unwind_DebugHook>
 800738c:	a803      	add	r0, sp, #12
 800738e:	f000 fb9d 	bl	8007acc <__restore_core_regs>
 8007392:	bf00      	nop

08007394 <_Unwind_GetCFA>:
 8007394:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007396:	4770      	bx	lr

08007398 <__gnu_Unwind_RaiseException>:
 8007398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800739c:	640b      	str	r3, [r1, #64]	; 0x40
 800739e:	1d0d      	adds	r5, r1, #4
 80073a0:	460f      	mov	r7, r1
 80073a2:	4606      	mov	r6, r0
 80073a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073a6:	b0f9      	sub	sp, #484	; 0x1e4
 80073a8:	ac01      	add	r4, sp, #4
 80073aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80073b8:	f04f 35ff 	mov.w	r5, #4294967295
 80073bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80073c0:	9500      	str	r5, [sp, #0]
 80073c2:	e006      	b.n	80073d2 <__gnu_Unwind_RaiseException+0x3a>
 80073c4:	6933      	ldr	r3, [r6, #16]
 80073c6:	466a      	mov	r2, sp
 80073c8:	4631      	mov	r1, r6
 80073ca:	4798      	blx	r3
 80073cc:	2808      	cmp	r0, #8
 80073ce:	4604      	mov	r4, r0
 80073d0:	d108      	bne.n	80073e4 <__gnu_Unwind_RaiseException+0x4c>
 80073d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff fed1 	bl	800717c <get_eit_entry>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d0f2      	beq.n	80073c4 <__gnu_Unwind_RaiseException+0x2c>
 80073de:	2009      	movs	r0, #9
 80073e0:	b079      	add	sp, #484	; 0x1e4
 80073e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e4:	4668      	mov	r0, sp
 80073e6:	f7ff ff1b 	bl	8007220 <restore_non_core_regs>
 80073ea:	2c06      	cmp	r4, #6
 80073ec:	d1f7      	bne.n	80073de <__gnu_Unwind_RaiseException+0x46>
 80073ee:	4639      	mov	r1, r7
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff ff4b 	bl	800728c <unwind_phase2>
 80073f6:	bf00      	nop

080073f8 <__gnu_Unwind_ForcedUnwind>:
 80073f8:	b430      	push	{r4, r5}
 80073fa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80073fc:	60c1      	str	r1, [r0, #12]
 80073fe:	6182      	str	r2, [r0, #24]
 8007400:	4619      	mov	r1, r3
 8007402:	641d      	str	r5, [r3, #64]	; 0x40
 8007404:	2200      	movs	r2, #0
 8007406:	bc30      	pop	{r4, r5}
 8007408:	e760      	b.n	80072cc <unwind_phase2_forced>
 800740a:	bf00      	nop

0800740c <__gnu_Unwind_Resume>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	68c6      	ldr	r6, [r0, #12]
 8007410:	6943      	ldr	r3, [r0, #20]
 8007412:	640b      	str	r3, [r1, #64]	; 0x40
 8007414:	b9be      	cbnz	r6, 8007446 <__gnu_Unwind_Resume+0x3a>
 8007416:	6903      	ldr	r3, [r0, #16]
 8007418:	460a      	mov	r2, r1
 800741a:	4604      	mov	r4, r0
 800741c:	460d      	mov	r5, r1
 800741e:	4601      	mov	r1, r0
 8007420:	2002      	movs	r0, #2
 8007422:	4798      	blx	r3
 8007424:	2807      	cmp	r0, #7
 8007426:	d007      	beq.n	8007438 <__gnu_Unwind_Resume+0x2c>
 8007428:	2808      	cmp	r0, #8
 800742a:	d103      	bne.n	8007434 <__gnu_Unwind_Resume+0x28>
 800742c:	4629      	mov	r1, r5
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff ff2c 	bl	800728c <unwind_phase2>
 8007434:	f005 fe96 	bl	800d164 <abort>
 8007438:	4630      	mov	r0, r6
 800743a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800743c:	f7ff ff24 	bl	8007288 <_Unwind_DebugHook>
 8007440:	1d28      	adds	r0, r5, #4
 8007442:	f000 fb43 	bl	8007acc <__restore_core_regs>
 8007446:	2201      	movs	r2, #1
 8007448:	f7ff ff40 	bl	80072cc <unwind_phase2_forced>
 800744c:	f005 fe8a 	bl	800d164 <abort>

08007450 <__gnu_Unwind_Resume_or_Rethrow>:
 8007450:	68c2      	ldr	r2, [r0, #12]
 8007452:	b11a      	cbz	r2, 800745c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007454:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007456:	640a      	str	r2, [r1, #64]	; 0x40
 8007458:	2200      	movs	r2, #0
 800745a:	e737      	b.n	80072cc <unwind_phase2_forced>
 800745c:	e79c      	b.n	8007398 <__gnu_Unwind_RaiseException>
 800745e:	bf00      	nop

08007460 <_Unwind_Complete>:
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <_Unwind_DeleteException>:
 8007464:	6883      	ldr	r3, [r0, #8]
 8007466:	b113      	cbz	r3, 800746e <_Unwind_DeleteException+0xa>
 8007468:	4601      	mov	r1, r0
 800746a:	2001      	movs	r0, #1
 800746c:	4718      	bx	r3
 800746e:	4770      	bx	lr

08007470 <_Unwind_VRS_Get>:
 8007470:	2904      	cmp	r1, #4
 8007472:	d807      	bhi.n	8007484 <_Unwind_VRS_Get+0x14>
 8007474:	e8df f001 	tbb	[pc, r1]
 8007478:	08060803 	.word	0x08060803
 800747c:	08          	.byte	0x08
 800747d:	00          	.byte	0x00
 800747e:	b90b      	cbnz	r3, 8007484 <_Unwind_VRS_Get+0x14>
 8007480:	2a0f      	cmp	r2, #15
 8007482:	d903      	bls.n	800748c <_Unwind_VRS_Get+0x1c>
 8007484:	2002      	movs	r0, #2
 8007486:	4770      	bx	lr
 8007488:	2001      	movs	r0, #1
 800748a:	4770      	bx	lr
 800748c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007490:	4618      	mov	r0, r3
 8007492:	6853      	ldr	r3, [r2, #4]
 8007494:	9a00      	ldr	r2, [sp, #0]
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop

0800749c <_Unwind_GetGR>:
 800749c:	b510      	push	{r4, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	2300      	movs	r3, #0
 80074a2:	ac03      	add	r4, sp, #12
 80074a4:	460a      	mov	r2, r1
 80074a6:	9400      	str	r4, [sp, #0]
 80074a8:	4619      	mov	r1, r3
 80074aa:	f7ff ffe1 	bl	8007470 <_Unwind_VRS_Get>
 80074ae:	9803      	ldr	r0, [sp, #12]
 80074b0:	b004      	add	sp, #16
 80074b2:	bd10      	pop	{r4, pc}

080074b4 <_Unwind_VRS_Set>:
 80074b4:	2904      	cmp	r1, #4
 80074b6:	d807      	bhi.n	80074c8 <_Unwind_VRS_Set+0x14>
 80074b8:	e8df f001 	tbb	[pc, r1]
 80074bc:	08060803 	.word	0x08060803
 80074c0:	08          	.byte	0x08
 80074c1:	00          	.byte	0x00
 80074c2:	b90b      	cbnz	r3, 80074c8 <_Unwind_VRS_Set+0x14>
 80074c4:	2a0f      	cmp	r2, #15
 80074c6:	d903      	bls.n	80074d0 <_Unwind_VRS_Set+0x1c>
 80074c8:	2002      	movs	r0, #2
 80074ca:	4770      	bx	lr
 80074cc:	2001      	movs	r0, #1
 80074ce:	4770      	bx	lr
 80074d0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80074d4:	9a00      	ldr	r2, [sp, #0]
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	6042      	str	r2, [r0, #4]
 80074da:	4618      	mov	r0, r3
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <_Unwind_SetGR>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	ac04      	add	r4, sp, #16
 80074e6:	2300      	movs	r3, #0
 80074e8:	f844 2d04 	str.w	r2, [r4, #-4]!
 80074ec:	460a      	mov	r2, r1
 80074ee:	9400      	str	r4, [sp, #0]
 80074f0:	4619      	mov	r1, r3
 80074f2:	f7ff ffdf 	bl	80074b4 <_Unwind_VRS_Set>
 80074f6:	b004      	add	sp, #16
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop

080074fc <__gnu_Unwind_Backtrace>:
 80074fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007500:	6413      	str	r3, [r2, #64]	; 0x40
 8007502:	1d15      	adds	r5, r2, #4
 8007504:	4607      	mov	r7, r0
 8007506:	460e      	mov	r6, r1
 8007508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800750a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800750e:	ac17      	add	r4, sp, #92	; 0x5c
 8007510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800751a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800751e:	f04f 35ff 	mov.w	r5, #4294967295
 8007522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007526:	9516      	str	r5, [sp, #88]	; 0x58
 8007528:	e010      	b.n	800754c <__gnu_Unwind_Backtrace+0x50>
 800752a:	a816      	add	r0, sp, #88	; 0x58
 800752c:	f7ff ffd8 	bl	80074e0 <_Unwind_SetGR>
 8007530:	4631      	mov	r1, r6
 8007532:	a816      	add	r0, sp, #88	; 0x58
 8007534:	47b8      	blx	r7
 8007536:	aa16      	add	r2, sp, #88	; 0x58
 8007538:	4669      	mov	r1, sp
 800753a:	b978      	cbnz	r0, 800755c <__gnu_Unwind_Backtrace+0x60>
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	2008      	movs	r0, #8
 8007540:	4798      	blx	r3
 8007542:	2805      	cmp	r0, #5
 8007544:	4604      	mov	r4, r0
 8007546:	d00a      	beq.n	800755e <__gnu_Unwind_Backtrace+0x62>
 8007548:	2809      	cmp	r0, #9
 800754a:	d007      	beq.n	800755c <__gnu_Unwind_Backtrace+0x60>
 800754c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800754e:	4668      	mov	r0, sp
 8007550:	f7ff fe14 	bl	800717c <get_eit_entry>
 8007554:	466a      	mov	r2, sp
 8007556:	210c      	movs	r1, #12
 8007558:	2800      	cmp	r0, #0
 800755a:	d0e6      	beq.n	800752a <__gnu_Unwind_Backtrace+0x2e>
 800755c:	2409      	movs	r4, #9
 800755e:	a816      	add	r0, sp, #88	; 0x58
 8007560:	f7ff fe5e 	bl	8007220 <restore_non_core_regs>
 8007564:	4620      	mov	r0, r4
 8007566:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800756a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800756c <__gnu_unwind_pr_common>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	460d      	mov	r5, r1
 8007572:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007574:	b089      	sub	sp, #36	; 0x24
 8007576:	1d0c      	adds	r4, r1, #4
 8007578:	4616      	mov	r6, r2
 800757a:	f000 0b03 	and.w	fp, r0, #3
 800757e:	680a      	ldr	r2, [r1, #0]
 8007580:	9406      	str	r4, [sp, #24]
 8007582:	461f      	mov	r7, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d068      	beq.n	800765a <__gnu_unwind_pr_common+0xee>
 8007588:	0c13      	lsrs	r3, r2, #16
 800758a:	b2d9      	uxtb	r1, r3
 800758c:	0412      	lsls	r2, r2, #16
 800758e:	f88d 301d 	strb.w	r3, [sp, #29]
 8007592:	2302      	movs	r3, #2
 8007594:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007598:	9205      	str	r2, [sp, #20]
 800759a:	f88d 301c 	strb.w	r3, [sp, #28]
 800759e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80075a0:	f1bb 0f02 	cmp.w	fp, #2
 80075a4:	bf08      	it	eq
 80075a6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80075a8:	f013 0301 	ands.w	r3, r3, #1
 80075ac:	d146      	bne.n	800763c <__gnu_unwind_pr_common+0xd0>
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f000 0308 	and.w	r3, r0, #8
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	f8d4 9000 	ldr.w	r9, [r4]
 80075ba:	f1b9 0f00 	cmp.w	r9, #0
 80075be:	f000 80f3 	beq.w	80077a8 <__gnu_unwind_pr_common+0x23c>
 80075c2:	2f02      	cmp	r7, #2
 80075c4:	d045      	beq.n	8007652 <__gnu_unwind_pr_common+0xe6>
 80075c6:	f8b4 9000 	ldrh.w	r9, [r4]
 80075ca:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 80075ce:	3404      	adds	r4, #4
 80075d0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80075d2:	f028 0a01 	bic.w	sl, r8, #1
 80075d6:	210f      	movs	r1, #15
 80075d8:	4630      	mov	r0, r6
 80075da:	449a      	add	sl, r3
 80075dc:	f7ff ff5e 	bl	800749c <_Unwind_GetGR>
 80075e0:	4582      	cmp	sl, r0
 80075e2:	d834      	bhi.n	800764e <__gnu_unwind_pr_common+0xe2>
 80075e4:	f029 0301 	bic.w	r3, r9, #1
 80075e8:	4453      	add	r3, sl
 80075ea:	4283      	cmp	r3, r0
 80075ec:	bf94      	ite	ls
 80075ee:	2000      	movls	r0, #0
 80075f0:	2001      	movhi	r0, #1
 80075f2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80075f6:	f008 0802 	and.w	r8, r8, #2
 80075fa:	f009 0901 	and.w	r9, r9, #1
 80075fe:	ea48 0809 	orr.w	r8, r8, r9
 8007602:	f1b8 0f01 	cmp.w	r8, #1
 8007606:	d03a      	beq.n	800767e <__gnu_unwind_pr_common+0x112>
 8007608:	d331      	bcc.n	800766e <__gnu_unwind_pr_common+0x102>
 800760a:	f1b8 0f02 	cmp.w	r8, #2
 800760e:	d11a      	bne.n	8007646 <__gnu_unwind_pr_common+0xda>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8007616:	f1bb 0f00 	cmp.w	fp, #0
 800761a:	d166      	bne.n	80076ea <__gnu_unwind_pr_common+0x17e>
 800761c:	b130      	cbz	r0, 800762c <__gnu_unwind_pr_common+0xc0>
 800761e:	9a00      	ldr	r2, [sp, #0]
 8007620:	2a00      	cmp	r2, #0
 8007622:	d06c      	beq.n	80076fe <__gnu_unwind_pr_common+0x192>
 8007624:	f1ba 0f00 	cmp.w	sl, #0
 8007628:	f000 8090 	beq.w	800774c <__gnu_unwind_pr_common+0x1e0>
 800762c:	2b00      	cmp	r3, #0
 800762e:	da00      	bge.n	8007632 <__gnu_unwind_pr_common+0xc6>
 8007630:	3404      	adds	r4, #4
 8007632:	f10a 0301 	add.w	r3, sl, #1
 8007636:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800763a:	e7bc      	b.n	80075b6 <__gnu_unwind_pr_common+0x4a>
 800763c:	4630      	mov	r0, r6
 800763e:	a905      	add	r1, sp, #20
 8007640:	f000 fb46 	bl	8007cd0 <__gnu_unwind_execute>
 8007644:	b178      	cbz	r0, 8007666 <__gnu_unwind_pr_common+0xfa>
 8007646:	2009      	movs	r0, #9
 8007648:	b009      	add	sp, #36	; 0x24
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	2000      	movs	r0, #0
 8007650:	e7cf      	b.n	80075f2 <__gnu_unwind_pr_common+0x86>
 8007652:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007656:	3408      	adds	r4, #8
 8007658:	e7ba      	b.n	80075d0 <__gnu_unwind_pr_common+0x64>
 800765a:	0212      	lsls	r2, r2, #8
 800765c:	2303      	movs	r3, #3
 800765e:	9205      	str	r2, [sp, #20]
 8007660:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007664:	e79b      	b.n	800759e <__gnu_unwind_pr_common+0x32>
 8007666:	2008      	movs	r0, #8
 8007668:	b009      	add	sp, #36	; 0x24
 800766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766e:	f1bb 0f00 	cmp.w	fp, #0
 8007672:	d002      	beq.n	800767a <__gnu_unwind_pr_common+0x10e>
 8007674:	2800      	cmp	r0, #0
 8007676:	f040 80b4 	bne.w	80077e2 <__gnu_unwind_pr_common+0x276>
 800767a:	3404      	adds	r4, #4
 800767c:	e79b      	b.n	80075b6 <__gnu_unwind_pr_common+0x4a>
 800767e:	f1bb 0f00 	cmp.w	fp, #0
 8007682:	d118      	bne.n	80076b6 <__gnu_unwind_pr_common+0x14a>
 8007684:	b1a8      	cbz	r0, 80076b2 <__gnu_unwind_pr_common+0x146>
 8007686:	e9d4 2300 	ldrd	r2, r3, [r4]
 800768a:	1c99      	adds	r1, r3, #2
 800768c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007690:	d0d9      	beq.n	8007646 <__gnu_unwind_pr_common+0xda>
 8007692:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007696:	3301      	adds	r3, #1
 8007698:	9104      	str	r1, [sp, #16]
 800769a:	f000 80b5 	beq.w	8007808 <__gnu_unwind_pr_common+0x29c>
 800769e:	1d20      	adds	r0, r4, #4
 80076a0:	f7ff fdea 	bl	8007278 <_Unwind_decode_typeinfo_ptr.isra.0>
 80076a4:	ab04      	add	r3, sp, #16
 80076a6:	4601      	mov	r1, r0
 80076a8:	4628      	mov	r0, r5
 80076aa:	f004 fcbd 	bl	800c028 <__cxa_type_match>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d167      	bne.n	8007782 <__gnu_unwind_pr_common+0x216>
 80076b2:	3408      	adds	r4, #8
 80076b4:	e77f      	b.n	80075b6 <__gnu_unwind_pr_common+0x4a>
 80076b6:	210d      	movs	r1, #13
 80076b8:	4630      	mov	r0, r6
 80076ba:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80076be:	f7ff feed 	bl	800749c <_Unwind_GetGR>
 80076c2:	4580      	cmp	r8, r0
 80076c4:	d1f5      	bne.n	80076b2 <__gnu_unwind_pr_common+0x146>
 80076c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80076c8:	429c      	cmp	r4, r3
 80076ca:	d1f2      	bne.n	80076b2 <__gnu_unwind_pr_common+0x146>
 80076cc:	4620      	mov	r0, r4
 80076ce:	f7ff fd07 	bl	80070e0 <selfrel_offset31>
 80076d2:	210f      	movs	r1, #15
 80076d4:	4602      	mov	r2, r0
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7ff ff02 	bl	80074e0 <_Unwind_SetGR>
 80076dc:	4630      	mov	r0, r6
 80076de:	462a      	mov	r2, r5
 80076e0:	2100      	movs	r1, #0
 80076e2:	f7ff fefd 	bl	80074e0 <_Unwind_SetGR>
 80076e6:	2007      	movs	r0, #7
 80076e8:	e7ae      	b.n	8007648 <__gnu_unwind_pr_common+0xdc>
 80076ea:	210d      	movs	r1, #13
 80076ec:	4630      	mov	r0, r6
 80076ee:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80076f2:	f7ff fed3 	bl	800749c <_Unwind_GetGR>
 80076f6:	4580      	cmp	r8, r0
 80076f8:	d032      	beq.n	8007760 <__gnu_unwind_pr_common+0x1f4>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	e796      	b.n	800762c <__gnu_unwind_pr_common+0xc0>
 80076fe:	f1ba 0f00 	cmp.w	sl, #0
 8007702:	d023      	beq.n	800774c <__gnu_unwind_pr_common+0x1e0>
 8007704:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007708:	f104 0804 	add.w	r8, r4, #4
 800770c:	f8cd b008 	str.w	fp, [sp, #8]
 8007710:	f8dd 9000 	ldr.w	r9, [sp]
 8007714:	9703      	str	r7, [sp, #12]
 8007716:	46a3      	mov	fp, r4
 8007718:	461c      	mov	r4, r3
 800771a:	e002      	b.n	8007722 <__gnu_unwind_pr_common+0x1b6>
 800771c:	4557      	cmp	r7, sl
 800771e:	46b9      	mov	r9, r7
 8007720:	d040      	beq.n	80077a4 <__gnu_unwind_pr_common+0x238>
 8007722:	4640      	mov	r0, r8
 8007724:	9404      	str	r4, [sp, #16]
 8007726:	f7ff fda7 	bl	8007278 <_Unwind_decode_typeinfo_ptr.isra.0>
 800772a:	ab04      	add	r3, sp, #16
 800772c:	4601      	mov	r1, r0
 800772e:	2200      	movs	r2, #0
 8007730:	4628      	mov	r0, r5
 8007732:	f004 fc79 	bl	800c028 <__cxa_type_match>
 8007736:	f109 0701 	add.w	r7, r9, #1
 800773a:	f108 0804 	add.w	r8, r8, #4
 800773e:	2800      	cmp	r0, #0
 8007740:	d0ec      	beq.n	800771c <__gnu_unwind_pr_common+0x1b0>
 8007742:	45d1      	cmp	r9, sl
 8007744:	465c      	mov	r4, fp
 8007746:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 800774a:	d1d6      	bne.n	80076fa <__gnu_unwind_pr_common+0x18e>
 800774c:	4630      	mov	r0, r6
 800774e:	210d      	movs	r1, #13
 8007750:	f7ff fea4 	bl	800749c <_Unwind_GetGR>
 8007754:	9b04      	ldr	r3, [sp, #16]
 8007756:	6228      	str	r0, [r5, #32]
 8007758:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 800775c:	2006      	movs	r0, #6
 800775e:	e773      	b.n	8007648 <__gnu_unwind_pr_common+0xdc>
 8007760:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007762:	429c      	cmp	r4, r3
 8007764:	d1c9      	bne.n	80076fa <__gnu_unwind_pr_common+0x18e>
 8007766:	2204      	movs	r2, #4
 8007768:	f04f 0800 	mov.w	r8, #0
 800776c:	18a3      	adds	r3, r4, r2
 800776e:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 8007772:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	4543      	cmp	r3, r8
 800777a:	db4d      	blt.n	8007818 <__gnu_unwind_pr_common+0x2ac>
 800777c:	2301      	movs	r3, #1
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	e757      	b.n	8007632 <__gnu_unwind_pr_common+0xc6>
 8007782:	4680      	mov	r8, r0
 8007784:	210d      	movs	r1, #13
 8007786:	4630      	mov	r0, r6
 8007788:	f7ff fe88 	bl	800749c <_Unwind_GetGR>
 800778c:	f1b8 0f02 	cmp.w	r8, #2
 8007790:	6228      	str	r0, [r5, #32]
 8007792:	d13e      	bne.n	8007812 <__gnu_unwind_pr_common+0x2a6>
 8007794:	462b      	mov	r3, r5
 8007796:	9a04      	ldr	r2, [sp, #16]
 8007798:	f843 2f2c 	str.w	r2, [r3, #44]!
 800779c:	626b      	str	r3, [r5, #36]	; 0x24
 800779e:	62ac      	str	r4, [r5, #40]	; 0x28
 80077a0:	2006      	movs	r0, #6
 80077a2:	e751      	b.n	8007648 <__gnu_unwind_pr_common+0xdc>
 80077a4:	465c      	mov	r4, fp
 80077a6:	e7d1      	b.n	800774c <__gnu_unwind_pr_common+0x1e0>
 80077a8:	a905      	add	r1, sp, #20
 80077aa:	4630      	mov	r0, r6
 80077ac:	f000 fa90 	bl	8007cd0 <__gnu_unwind_execute>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	f47f af48 	bne.w	8007646 <__gnu_unwind_pr_common+0xda>
 80077b6:	9b01      	ldr	r3, [sp, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f43f af54 	beq.w	8007666 <__gnu_unwind_pr_common+0xfa>
 80077be:	210f      	movs	r1, #15
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7ff fe6b 	bl	800749c <_Unwind_GetGR>
 80077c6:	210e      	movs	r1, #14
 80077c8:	4602      	mov	r2, r0
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff fe88 	bl	80074e0 <_Unwind_SetGR>
 80077d0:	4630      	mov	r0, r6
 80077d2:	4a1a      	ldr	r2, [pc, #104]	; (800783c <__gnu_unwind_pr_common+0x2d0>)
 80077d4:	210f      	movs	r1, #15
 80077d6:	f7ff fe83 	bl	80074e0 <_Unwind_SetGR>
 80077da:	2007      	movs	r0, #7
 80077dc:	b009      	add	sp, #36	; 0x24
 80077de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7ff fc7c 	bl	80070e0 <selfrel_offset31>
 80077e8:	3404      	adds	r4, #4
 80077ea:	4607      	mov	r7, r0
 80077ec:	63ac      	str	r4, [r5, #56]	; 0x38
 80077ee:	4628      	mov	r0, r5
 80077f0:	f004 fc72 	bl	800c0d8 <__cxa_begin_cleanup>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f43f af26 	beq.w	8007646 <__gnu_unwind_pr_common+0xda>
 80077fa:	4630      	mov	r0, r6
 80077fc:	463a      	mov	r2, r7
 80077fe:	210f      	movs	r1, #15
 8007800:	f7ff fe6e 	bl	80074e0 <_Unwind_SetGR>
 8007804:	2007      	movs	r0, #7
 8007806:	e71f      	b.n	8007648 <__gnu_unwind_pr_common+0xdc>
 8007808:	4630      	mov	r0, r6
 800780a:	210d      	movs	r1, #13
 800780c:	f7ff fe46 	bl	800749c <_Unwind_GetGR>
 8007810:	6228      	str	r0, [r5, #32]
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	626b      	str	r3, [r5, #36]	; 0x24
 8007816:	e7c2      	b.n	800779e <__gnu_unwind_pr_common+0x232>
 8007818:	f10a 0001 	add.w	r0, sl, #1
 800781c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007820:	f7ff fc5e 	bl	80070e0 <selfrel_offset31>
 8007824:	210f      	movs	r1, #15
 8007826:	4602      	mov	r2, r0
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff fe59 	bl	80074e0 <_Unwind_SetGR>
 800782e:	4630      	mov	r0, r6
 8007830:	462a      	mov	r2, r5
 8007832:	4641      	mov	r1, r8
 8007834:	f7ff fe54 	bl	80074e0 <_Unwind_SetGR>
 8007838:	2007      	movs	r0, #7
 800783a:	e705      	b.n	8007648 <__gnu_unwind_pr_common+0xdc>
 800783c:	0800ce59 	.word	0x0800ce59

08007840 <__aeabi_unwind_cpp_pr0>:
 8007840:	2300      	movs	r3, #0
 8007842:	e693      	b.n	800756c <__gnu_unwind_pr_common>

08007844 <__aeabi_unwind_cpp_pr1>:
 8007844:	2301      	movs	r3, #1
 8007846:	e691      	b.n	800756c <__gnu_unwind_pr_common>

08007848 <__aeabi_unwind_cpp_pr2>:
 8007848:	2302      	movs	r3, #2
 800784a:	e68f      	b.n	800756c <__gnu_unwind_pr_common>

0800784c <_Unwind_VRS_Pop>:
 800784c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007850:	4605      	mov	r5, r0
 8007852:	b0c4      	sub	sp, #272	; 0x110
 8007854:	2904      	cmp	r1, #4
 8007856:	d806      	bhi.n	8007866 <_Unwind_VRS_Pop+0x1a>
 8007858:	e8df f001 	tbb	[pc, r1]
 800785c:	03052b4d 	.word	0x03052b4d
 8007860:	09          	.byte	0x09
 8007861:	00          	.byte	0x00
 8007862:	2b03      	cmp	r3, #3
 8007864:	d05f      	beq.n	8007926 <_Unwind_VRS_Pop+0xda>
 8007866:	2002      	movs	r0, #2
 8007868:	b044      	add	sp, #272	; 0x110
 800786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f9      	bne.n	8007866 <_Unwind_VRS_Pop+0x1a>
 8007872:	2a10      	cmp	r2, #16
 8007874:	d8f7      	bhi.n	8007866 <_Unwind_VRS_Pop+0x1a>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	06dc      	lsls	r4, r3, #27
 800787a:	f100 80f4 	bmi.w	8007a66 <_Unwind_VRS_Pop+0x21a>
 800787e:	ac22      	add	r4, sp, #136	; 0x88
 8007880:	4620      	mov	r0, r4
 8007882:	9201      	str	r2, [sp, #4]
 8007884:	f000 f994 	bl	8007bb0 <__gnu_Unwind_Save_WMMXC>
 8007888:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800788a:	9a01      	ldr	r2, [sp, #4]
 800788c:	2300      	movs	r3, #0
 800788e:	2601      	movs	r6, #1
 8007890:	fa06 f103 	lsl.w	r1, r6, r3
 8007894:	4211      	tst	r1, r2
 8007896:	d003      	beq.n	80078a0 <_Unwind_VRS_Pop+0x54>
 8007898:	6801      	ldr	r1, [r0, #0]
 800789a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 800789e:	3004      	adds	r0, #4
 80078a0:	3301      	adds	r3, #1
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d1f4      	bne.n	8007890 <_Unwind_VRS_Pop+0x44>
 80078a6:	63a8      	str	r0, [r5, #56]	; 0x38
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 f977 	bl	8007b9c <__gnu_Unwind_Restore_WMMXC>
 80078ae:	2000      	movs	r0, #0
 80078b0:	e7da      	b.n	8007868 <_Unwind_VRS_Pop+0x1c>
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80078b8:	b297      	uxth	r7, r2
 80078ba:	d052      	beq.n	8007962 <_Unwind_VRS_Pop+0x116>
 80078bc:	2b05      	cmp	r3, #5
 80078be:	d1d2      	bne.n	8007866 <_Unwind_VRS_Pop+0x1a>
 80078c0:	eb06 0807 	add.w	r8, r6, r7
 80078c4:	f1b8 0f20 	cmp.w	r8, #32
 80078c8:	d8cd      	bhi.n	8007866 <_Unwind_VRS_Pop+0x1a>
 80078ca:	2e0f      	cmp	r6, #15
 80078cc:	f240 8099 	bls.w	8007a02 <_Unwind_VRS_Pop+0x1b6>
 80078d0:	46b8      	mov	r8, r7
 80078d2:	2f00      	cmp	r7, #0
 80078d4:	f040 80db 	bne.w	8007a8e <_Unwind_VRS_Pop+0x242>
 80078d8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80078da:	63aa      	str	r2, [r5, #56]	; 0x38
 80078dc:	2e0f      	cmp	r6, #15
 80078de:	f240 80be 	bls.w	8007a5e <_Unwind_VRS_Pop+0x212>
 80078e2:	f1b8 0f00 	cmp.w	r8, #0
 80078e6:	d002      	beq.n	80078ee <_Unwind_VRS_Pop+0xa2>
 80078e8:	a802      	add	r0, sp, #8
 80078ea:	f000 f90b 	bl	8007b04 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80078ee:	2000      	movs	r0, #0
 80078f0:	b044      	add	sp, #272	; 0x110
 80078f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1b5      	bne.n	8007866 <_Unwind_VRS_Pop+0x1a>
 80078fa:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80078fc:	b297      	uxth	r7, r2
 80078fe:	1d28      	adds	r0, r5, #4
 8007900:	2601      	movs	r6, #1
 8007902:	fa06 f103 	lsl.w	r1, r6, r3
 8007906:	4239      	tst	r1, r7
 8007908:	f103 0301 	add.w	r3, r3, #1
 800790c:	d002      	beq.n	8007914 <_Unwind_VRS_Pop+0xc8>
 800790e:	6821      	ldr	r1, [r4, #0]
 8007910:	6001      	str	r1, [r0, #0]
 8007912:	3404      	adds	r4, #4
 8007914:	2b10      	cmp	r3, #16
 8007916:	f100 0004 	add.w	r0, r0, #4
 800791a:	d1f2      	bne.n	8007902 <_Unwind_VRS_Pop+0xb6>
 800791c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8007920:	d1e5      	bne.n	80078ee <_Unwind_VRS_Pop+0xa2>
 8007922:	63ac      	str	r4, [r5, #56]	; 0x38
 8007924:	e7a0      	b.n	8007868 <_Unwind_VRS_Pop+0x1c>
 8007926:	0c16      	lsrs	r6, r2, #16
 8007928:	b297      	uxth	r7, r2
 800792a:	19f3      	adds	r3, r6, r7
 800792c:	2b10      	cmp	r3, #16
 800792e:	d89a      	bhi.n	8007866 <_Unwind_VRS_Pop+0x1a>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	071a      	lsls	r2, r3, #28
 8007934:	d45d      	bmi.n	80079f2 <_Unwind_VRS_Pop+0x1a6>
 8007936:	ac22      	add	r4, sp, #136	; 0x88
 8007938:	4620      	mov	r0, r4
 800793a:	f000 f90d 	bl	8007b58 <__gnu_Unwind_Save_WMMXD>
 800793e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007942:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007944:	b13f      	cbz	r7, 8007956 <_Unwind_VRS_Pop+0x10a>
 8007946:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	f841 0b04 	str.w	r0, [r1], #4
 8007950:	3304      	adds	r3, #4
 8007952:	4293      	cmp	r3, r2
 8007954:	d1f9      	bne.n	800794a <_Unwind_VRS_Pop+0xfe>
 8007956:	4620      	mov	r0, r4
 8007958:	63ab      	str	r3, [r5, #56]	; 0x38
 800795a:	f000 f8db 	bl	8007b14 <__gnu_Unwind_Restore_WMMXD>
 800795e:	2000      	movs	r0, #0
 8007960:	e782      	b.n	8007868 <_Unwind_VRS_Pop+0x1c>
 8007962:	19f2      	adds	r2, r6, r7
 8007964:	2a10      	cmp	r2, #16
 8007966:	f63f af7e 	bhi.w	8007866 <_Unwind_VRS_Pop+0x1a>
 800796a:	2e0f      	cmp	r6, #15
 800796c:	f63f af7b 	bhi.w	8007866 <_Unwind_VRS_Pop+0x1a>
 8007970:	682a      	ldr	r2, [r5, #0]
 8007972:	07d1      	lsls	r1, r2, #31
 8007974:	d508      	bpl.n	8007988 <_Unwind_VRS_Pop+0x13c>
 8007976:	4628      	mov	r0, r5
 8007978:	f022 0203 	bic.w	r2, r2, #3
 800797c:	f840 2b48 	str.w	r2, [r0], #72
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	f000 f8b3 	bl	8007aec <__gnu_Unwind_Save_VFP>
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	ac22      	add	r4, sp, #136	; 0x88
 800798c:	4620      	mov	r0, r4
 800798e:	f000 f8ad 	bl	8007aec <__gnu_Unwind_Save_VFP>
 8007992:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8007994:	9b01      	ldr	r3, [sp, #4]
 8007996:	2f00      	cmp	r7, #0
 8007998:	f000 8095 	beq.w	8007ac6 <_Unwind_VRS_Pop+0x27a>
 800799c:	007f      	lsls	r7, r7, #1
 800799e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80079a2:	f04f 0800 	mov.w	r8, #0
 80079a6:	3c04      	subs	r4, #4
 80079a8:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 80079ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80079b0:	f844 0f04 	str.w	r0, [r4, #4]!
 80079b4:	4291      	cmp	r1, r2
 80079b6:	d1f9      	bne.n	80079ac <_Unwind_VRS_Pop+0x160>
 80079b8:	f1b8 0f00 	cmp.w	r8, #0
 80079bc:	d00f      	beq.n	80079de <_Unwind_VRS_Pop+0x192>
 80079be:	ac02      	add	r4, sp, #8
 80079c0:	2e10      	cmp	r6, #16
 80079c2:	4631      	mov	r1, r6
 80079c4:	bf38      	it	cc
 80079c6:	2110      	movcc	r1, #16
 80079c8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80079cc:	3984      	subs	r1, #132	; 0x84
 80079ce:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 80079d2:	f852 0b04 	ldr.w	r0, [r2], #4
 80079d6:	f841 0f04 	str.w	r0, [r1, #4]!
 80079da:	4294      	cmp	r4, r2
 80079dc:	d1f9      	bne.n	80079d2 <_Unwind_VRS_Pop+0x186>
 80079de:	2b01      	cmp	r3, #1
 80079e0:	f47f af7b 	bne.w	80078da <_Unwind_VRS_Pop+0x8e>
 80079e4:	ac22      	add	r4, sp, #136	; 0x88
 80079e6:	3204      	adds	r2, #4
 80079e8:	63aa      	str	r2, [r5, #56]	; 0x38
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 f87a 	bl	8007ae4 <__gnu_Unwind_Restore_VFP>
 80079f0:	e77d      	b.n	80078ee <_Unwind_VRS_Pop+0xa2>
 80079f2:	f023 0308 	bic.w	r3, r3, #8
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 80079fc:	f000 f8ac 	bl	8007b58 <__gnu_Unwind_Save_WMMXD>
 8007a00:	e799      	b.n	8007936 <_Unwind_VRS_Pop+0xea>
 8007a02:	f1b8 0f10 	cmp.w	r8, #16
 8007a06:	682a      	ldr	r2, [r5, #0]
 8007a08:	d943      	bls.n	8007a92 <_Unwind_VRS_Pop+0x246>
 8007a0a:	07d0      	lsls	r0, r2, #31
 8007a0c:	f1a8 0810 	sub.w	r8, r8, #16
 8007a10:	d50b      	bpl.n	8007a2a <_Unwind_VRS_Pop+0x1de>
 8007a12:	4628      	mov	r0, r5
 8007a14:	f022 0201 	bic.w	r2, r2, #1
 8007a18:	f042 0202 	orr.w	r2, r2, #2
 8007a1c:	f840 2b48 	str.w	r2, [r0], #72
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	f000 f86b 	bl	8007afc <__gnu_Unwind_Save_VFP_D>
 8007a26:	682a      	ldr	r2, [r5, #0]
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	0751      	lsls	r1, r2, #29
 8007a2c:	d425      	bmi.n	8007a7a <_Unwind_VRS_Pop+0x22e>
 8007a2e:	2e0f      	cmp	r6, #15
 8007a30:	d804      	bhi.n	8007a3c <_Unwind_VRS_Pop+0x1f0>
 8007a32:	a822      	add	r0, sp, #136	; 0x88
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	f000 f861 	bl	8007afc <__gnu_Unwind_Save_VFP_D>
 8007a3a:	9b01      	ldr	r3, [sp, #4]
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	ac02      	add	r4, sp, #8
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 f863 	bl	8007b0c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007a46:	f1c6 0110 	rsb	r1, r6, #16
 8007a4a:	2900      	cmp	r1, #0
 8007a4c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8007a4e:	9b01      	ldr	r3, [sp, #4]
 8007a50:	ddb6      	ble.n	80079c0 <_Unwind_VRS_Pop+0x174>
 8007a52:	ac22      	add	r4, sp, #136	; 0x88
 8007a54:	004f      	lsls	r7, r1, #1
 8007a56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	e7a3      	b.n	80079a6 <_Unwind_VRS_Pop+0x15a>
 8007a5e:	a822      	add	r0, sp, #136	; 0x88
 8007a60:	f000 f848 	bl	8007af4 <__gnu_Unwind_Restore_VFP_D>
 8007a64:	e73d      	b.n	80078e2 <_Unwind_VRS_Pop+0x96>
 8007a66:	f023 0310 	bic.w	r3, r3, #16
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8007a70:	9201      	str	r2, [sp, #4]
 8007a72:	f000 f89d 	bl	8007bb0 <__gnu_Unwind_Save_WMMXC>
 8007a76:	9a01      	ldr	r2, [sp, #4]
 8007a78:	e701      	b.n	800787e <_Unwind_VRS_Pop+0x32>
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f022 0204 	bic.w	r2, r2, #4
 8007a80:	f840 2bd0 	str.w	r2, [r0], #208
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	f000 f841 	bl	8007b0c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007a8a:	9b01      	ldr	r3, [sp, #4]
 8007a8c:	e7cf      	b.n	8007a2e <_Unwind_VRS_Pop+0x1e2>
 8007a8e:	682a      	ldr	r2, [r5, #0]
 8007a90:	e7cb      	b.n	8007a2a <_Unwind_VRS_Pop+0x1de>
 8007a92:	07d0      	lsls	r0, r2, #31
 8007a94:	d50a      	bpl.n	8007aac <_Unwind_VRS_Pop+0x260>
 8007a96:	4628      	mov	r0, r5
 8007a98:	f022 0201 	bic.w	r2, r2, #1
 8007a9c:	f042 0202 	orr.w	r2, r2, #2
 8007aa0:	f840 2b48 	str.w	r2, [r0], #72
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	f000 f829 	bl	8007afc <__gnu_Unwind_Save_VFP_D>
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	ac22      	add	r4, sp, #136	; 0x88
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 f823 	bl	8007afc <__gnu_Unwind_Save_VFP_D>
 8007ab6:	46b8      	mov	r8, r7
 8007ab8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8007aba:	9b01      	ldr	r3, [sp, #4]
 8007abc:	2f00      	cmp	r7, #0
 8007abe:	f47f af6d 	bne.w	800799c <_Unwind_VRS_Pop+0x150>
 8007ac2:	460a      	mov	r2, r1
 8007ac4:	e709      	b.n	80078da <_Unwind_VRS_Pop+0x8e>
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	e78d      	b.n	80079e6 <_Unwind_VRS_Pop+0x19a>
 8007aca:	bf00      	nop

08007acc <__restore_core_regs>:
 8007acc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8007ad0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007ad4:	469c      	mov	ip, r3
 8007ad6:	46a6      	mov	lr, r4
 8007ad8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8007adc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007ae0:	46e5      	mov	sp, ip
 8007ae2:	bd00      	pop	{pc}

08007ae4 <__gnu_Unwind_Restore_VFP>:
 8007ae4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop

08007aec <__gnu_Unwind_Save_VFP>:
 8007aec:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop

08007af4 <__gnu_Unwind_Restore_VFP_D>:
 8007af4:	ec90 0b20 	vldmia	r0, {d0-d15}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop

08007afc <__gnu_Unwind_Save_VFP_D>:
 8007afc:	ec80 0b20 	vstmia	r0, {d0-d15}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop

08007b04 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8007b04:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop

08007b0c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8007b0c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop

08007b14 <__gnu_Unwind_Restore_WMMXD>:
 8007b14:	ecf0 0102 	ldfe	f0, [r0], #8
 8007b18:	ecf0 1102 	ldfe	f1, [r0], #8
 8007b1c:	ecf0 2102 	ldfe	f2, [r0], #8
 8007b20:	ecf0 3102 	ldfe	f3, [r0], #8
 8007b24:	ecf0 4102 	ldfe	f4, [r0], #8
 8007b28:	ecf0 5102 	ldfe	f5, [r0], #8
 8007b2c:	ecf0 6102 	ldfe	f6, [r0], #8
 8007b30:	ecf0 7102 	ldfe	f7, [r0], #8
 8007b34:	ecf0 8102 	ldfp	f0, [r0], #8
 8007b38:	ecf0 9102 	ldfp	f1, [r0], #8
 8007b3c:	ecf0 a102 	ldfp	f2, [r0], #8
 8007b40:	ecf0 b102 	ldfp	f3, [r0], #8
 8007b44:	ecf0 c102 	ldfp	f4, [r0], #8
 8007b48:	ecf0 d102 	ldfp	f5, [r0], #8
 8007b4c:	ecf0 e102 	ldfp	f6, [r0], #8
 8007b50:	ecf0 f102 	ldfp	f7, [r0], #8
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop

08007b58 <__gnu_Unwind_Save_WMMXD>:
 8007b58:	ece0 0102 	stfe	f0, [r0], #8
 8007b5c:	ece0 1102 	stfe	f1, [r0], #8
 8007b60:	ece0 2102 	stfe	f2, [r0], #8
 8007b64:	ece0 3102 	stfe	f3, [r0], #8
 8007b68:	ece0 4102 	stfe	f4, [r0], #8
 8007b6c:	ece0 5102 	stfe	f5, [r0], #8
 8007b70:	ece0 6102 	stfe	f6, [r0], #8
 8007b74:	ece0 7102 	stfe	f7, [r0], #8
 8007b78:	ece0 8102 	stfp	f0, [r0], #8
 8007b7c:	ece0 9102 	stfp	f1, [r0], #8
 8007b80:	ece0 a102 	stfp	f2, [r0], #8
 8007b84:	ece0 b102 	stfp	f3, [r0], #8
 8007b88:	ece0 c102 	stfp	f4, [r0], #8
 8007b8c:	ece0 d102 	stfp	f5, [r0], #8
 8007b90:	ece0 e102 	stfp	f6, [r0], #8
 8007b94:	ece0 f102 	stfp	f7, [r0], #8
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop

08007b9c <__gnu_Unwind_Restore_WMMXC>:
 8007b9c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8007ba0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8007ba4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8007ba8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop

08007bb0 <__gnu_Unwind_Save_WMMXC>:
 8007bb0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8007bb4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8007bb8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8007bbc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop

08007bc4 <_Unwind_RaiseException>:
 8007bc4:	46ec      	mov	ip, sp
 8007bc6:	b500      	push	{lr}
 8007bc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007bcc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007bd8:	a901      	add	r1, sp, #4
 8007bda:	f7ff fbdd 	bl	8007398 <__gnu_Unwind_RaiseException>
 8007bde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007be2:	b012      	add	sp, #72	; 0x48
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop

08007be8 <_Unwind_Resume>:
 8007be8:	46ec      	mov	ip, sp
 8007bea:	b500      	push	{lr}
 8007bec:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007bf0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007bfc:	a901      	add	r1, sp, #4
 8007bfe:	f7ff fc05 	bl	800740c <__gnu_Unwind_Resume>
 8007c02:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007c06:	b012      	add	sp, #72	; 0x48
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop

08007c0c <_Unwind_Resume_or_Rethrow>:
 8007c0c:	46ec      	mov	ip, sp
 8007c0e:	b500      	push	{lr}
 8007c10:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007c14:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007c20:	a901      	add	r1, sp, #4
 8007c22:	f7ff fc15 	bl	8007450 <__gnu_Unwind_Resume_or_Rethrow>
 8007c26:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007c2a:	b012      	add	sp, #72	; 0x48
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop

08007c30 <_Unwind_ForcedUnwind>:
 8007c30:	46ec      	mov	ip, sp
 8007c32:	b500      	push	{lr}
 8007c34:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007c38:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007c44:	ab01      	add	r3, sp, #4
 8007c46:	f7ff fbd7 	bl	80073f8 <__gnu_Unwind_ForcedUnwind>
 8007c4a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007c4e:	b012      	add	sp, #72	; 0x48
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop

08007c54 <_Unwind_Backtrace>:
 8007c54:	46ec      	mov	ip, sp
 8007c56:	b500      	push	{lr}
 8007c58:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007c5c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007c68:	aa01      	add	r2, sp, #4
 8007c6a:	f7ff fc47 	bl	80074fc <__gnu_Unwind_Backtrace>
 8007c6e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007c72:	b012      	add	sp, #72	; 0x48
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop

08007c78 <next_unwind_byte>:
 8007c78:	7a02      	ldrb	r2, [r0, #8]
 8007c7a:	b982      	cbnz	r2, 8007c9e <next_unwind_byte+0x26>
 8007c7c:	7a43      	ldrb	r3, [r0, #9]
 8007c7e:	b1ab      	cbz	r3, 8007cac <next_unwind_byte+0x34>
 8007c80:	6842      	ldr	r2, [r0, #4]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b410      	push	{r4}
 8007c86:	7243      	strb	r3, [r0, #9]
 8007c88:	6813      	ldr	r3, [r2, #0]
 8007c8a:	2103      	movs	r1, #3
 8007c8c:	1d14      	adds	r4, r2, #4
 8007c8e:	7201      	strb	r1, [r0, #8]
 8007c90:	021a      	lsls	r2, r3, #8
 8007c92:	6044      	str	r4, [r0, #4]
 8007c94:	6002      	str	r2, [r0, #0]
 8007c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c9a:	0e18      	lsrs	r0, r3, #24
 8007c9c:	4770      	bx	lr
 8007c9e:	6803      	ldr	r3, [r0, #0]
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	7202      	strb	r2, [r0, #8]
 8007ca4:	021a      	lsls	r2, r3, #8
 8007ca6:	6002      	str	r2, [r0, #0]
 8007ca8:	0e18      	lsrs	r0, r3, #24
 8007caa:	4770      	bx	lr
 8007cac:	20b0      	movs	r0, #176	; 0xb0
 8007cae:	4770      	bx	lr

08007cb0 <_Unwind_GetGR.constprop.0>:
 8007cb0:	b500      	push	{lr}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	aa03      	add	r2, sp, #12
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	9200      	str	r2, [sp, #0]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	220c      	movs	r2, #12
 8007cbe:	f7ff fbd7 	bl	8007470 <_Unwind_VRS_Get>
 8007cc2:	9803      	ldr	r0, [sp, #12]
 8007cc4:	b005      	add	sp, #20
 8007cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cca:	bf00      	nop

08007ccc <unwind_UCB_from_context>:
 8007ccc:	e7f0      	b.n	8007cb0 <_Unwind_GetGR.constprop.0>
 8007cce:	bf00      	nop

08007cd0 <__gnu_unwind_execute>:
 8007cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	460e      	mov	r6, r1
 8007cda:	f04f 0800 	mov.w	r8, #0
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7ff ffca 	bl	8007c78 <next_unwind_byte>
 8007ce4:	28b0      	cmp	r0, #176	; 0xb0
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	f000 80b1 	beq.w	8007e4e <__gnu_unwind_execute+0x17e>
 8007cec:	0607      	lsls	r7, r0, #24
 8007cee:	d520      	bpl.n	8007d32 <__gnu_unwind_execute+0x62>
 8007cf0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007cf4:	2b80      	cmp	r3, #128	; 0x80
 8007cf6:	d065      	beq.n	8007dc4 <__gnu_unwind_execute+0xf4>
 8007cf8:	2b90      	cmp	r3, #144	; 0x90
 8007cfa:	d036      	beq.n	8007d6a <__gnu_unwind_execute+0x9a>
 8007cfc:	2ba0      	cmp	r3, #160	; 0xa0
 8007cfe:	d078      	beq.n	8007df2 <__gnu_unwind_execute+0x122>
 8007d00:	2bb0      	cmp	r3, #176	; 0xb0
 8007d02:	d047      	beq.n	8007d94 <__gnu_unwind_execute+0xc4>
 8007d04:	2bc0      	cmp	r3, #192	; 0xc0
 8007d06:	f000 808a 	beq.w	8007e1e <__gnu_unwind_execute+0x14e>
 8007d0a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007d0e:	2bd0      	cmp	r3, #208	; 0xd0
 8007d10:	d10b      	bne.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007d12:	f000 0207 	and.w	r2, r0, #7
 8007d16:	3201      	adds	r2, #1
 8007d18:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007d1c:	2305      	movs	r3, #5
 8007d1e:	2101      	movs	r1, #1
 8007d20:	4628      	mov	r0, r5
 8007d22:	f7ff fd93 	bl	800784c <_Unwind_VRS_Pop>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d0d9      	beq.n	8007cde <__gnu_unwind_execute+0xe>
 8007d2a:	2009      	movs	r0, #9
 8007d2c:	b005      	add	sp, #20
 8007d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d32:	f10d 090c 	add.w	r9, sp, #12
 8007d36:	2300      	movs	r3, #0
 8007d38:	4619      	mov	r1, r3
 8007d3a:	0087      	lsls	r7, r0, #2
 8007d3c:	f8cd 9000 	str.w	r9, [sp]
 8007d40:	220d      	movs	r2, #13
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7ff fb94 	bl	8007470 <_Unwind_VRS_Get>
 8007d48:	b2ff      	uxtb	r7, r7
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	f8cd 9000 	str.w	r9, [sp]
 8007d50:	3704      	adds	r7, #4
 8007d52:	0660      	lsls	r0, r4, #25
 8007d54:	bf4c      	ite	mi
 8007d56:	1bdf      	submi	r7, r3, r7
 8007d58:	18ff      	addpl	r7, r7, r3
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	220d      	movs	r2, #13
 8007d60:	4628      	mov	r0, r5
 8007d62:	9703      	str	r7, [sp, #12]
 8007d64:	f7ff fba6 	bl	80074b4 <_Unwind_VRS_Set>
 8007d68:	e7b9      	b.n	8007cde <__gnu_unwind_execute+0xe>
 8007d6a:	f000 030d 	and.w	r3, r0, #13
 8007d6e:	2b0d      	cmp	r3, #13
 8007d70:	d0db      	beq.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007d72:	af03      	add	r7, sp, #12
 8007d74:	2300      	movs	r3, #0
 8007d76:	f000 020f 	and.w	r2, r0, #15
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	9700      	str	r7, [sp, #0]
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f7ff fb76 	bl	8007470 <_Unwind_VRS_Get>
 8007d84:	2300      	movs	r3, #0
 8007d86:	9700      	str	r7, [sp, #0]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	220d      	movs	r2, #13
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	f7ff fb91 	bl	80074b4 <_Unwind_VRS_Set>
 8007d92:	e7a4      	b.n	8007cde <__gnu_unwind_execute+0xe>
 8007d94:	28b1      	cmp	r0, #177	; 0xb1
 8007d96:	d05f      	beq.n	8007e58 <__gnu_unwind_execute+0x188>
 8007d98:	28b2      	cmp	r0, #178	; 0xb2
 8007d9a:	f000 80cc 	beq.w	8007f36 <__gnu_unwind_execute+0x266>
 8007d9e:	28b3      	cmp	r0, #179	; 0xb3
 8007da0:	d07e      	beq.n	8007ea0 <__gnu_unwind_execute+0x1d0>
 8007da2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8007da6:	2bb4      	cmp	r3, #180	; 0xb4
 8007da8:	d0bf      	beq.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007daa:	f000 0207 	and.w	r2, r0, #7
 8007dae:	3201      	adds	r2, #1
 8007db0:	2301      	movs	r3, #1
 8007db2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007db6:	4619      	mov	r1, r3
 8007db8:	4628      	mov	r0, r5
 8007dba:	f7ff fd47 	bl	800784c <_Unwind_VRS_Pop>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d08d      	beq.n	8007cde <__gnu_unwind_execute+0xe>
 8007dc2:	e7b2      	b.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff ff57 	bl	8007c78 <next_unwind_byte>
 8007dca:	0224      	lsls	r4, r4, #8
 8007dcc:	4304      	orrs	r4, r0
 8007dce:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007dd2:	d0aa      	beq.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007dd4:	0124      	lsls	r4, r4, #4
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	b2a2      	uxth	r2, r4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f7ff fd35 	bl	800784c <_Unwind_VRS_Pop>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d1a1      	bne.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007de6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007dea:	bf18      	it	ne
 8007dec:	f04f 0801 	movne.w	r8, #1
 8007df0:	e775      	b.n	8007cde <__gnu_unwind_execute+0xe>
 8007df2:	43c2      	mvns	r2, r0
 8007df4:	f002 0307 	and.w	r3, r2, #7
 8007df8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8007dfc:	411a      	asrs	r2, r3
 8007dfe:	0701      	lsls	r1, r0, #28
 8007e00:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	bf48      	it	mi
 8007e0a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4628      	mov	r0, r5
 8007e12:	f7ff fd1b 	bl	800784c <_Unwind_VRS_Pop>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f43f af61 	beq.w	8007cde <__gnu_unwind_execute+0xe>
 8007e1c:	e785      	b.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007e1e:	28c6      	cmp	r0, #198	; 0xc6
 8007e20:	d051      	beq.n	8007ec6 <__gnu_unwind_execute+0x1f6>
 8007e22:	28c7      	cmp	r0, #199	; 0xc7
 8007e24:	d05a      	beq.n	8007edc <__gnu_unwind_execute+0x20c>
 8007e26:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e2c:	d069      	beq.n	8007f02 <__gnu_unwind_execute+0x232>
 8007e2e:	28c8      	cmp	r0, #200	; 0xc8
 8007e30:	d075      	beq.n	8007f1e <__gnu_unwind_execute+0x24e>
 8007e32:	28c9      	cmp	r0, #201	; 0xc9
 8007e34:	f47f af79 	bne.w	8007d2a <__gnu_unwind_execute+0x5a>
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f7ff ff1d 	bl	8007c78 <next_unwind_byte>
 8007e3e:	0302      	lsls	r2, r0, #12
 8007e40:	f000 000f 	and.w	r0, r0, #15
 8007e44:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007e48:	3001      	adds	r0, #1
 8007e4a:	4302      	orrs	r2, r0
 8007e4c:	e766      	b.n	8007d1c <__gnu_unwind_execute+0x4c>
 8007e4e:	f1b8 0f00 	cmp.w	r8, #0
 8007e52:	d014      	beq.n	8007e7e <__gnu_unwind_execute+0x1ae>
 8007e54:	2000      	movs	r0, #0
 8007e56:	e769      	b.n	8007d2c <__gnu_unwind_execute+0x5c>
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff ff0d 	bl	8007c78 <next_unwind_byte>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f43f af63 	beq.w	8007d2a <__gnu_unwind_execute+0x5a>
 8007e64:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007e68:	f47f af5f 	bne.w	8007d2a <__gnu_unwind_execute+0x5a>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4628      	mov	r0, r5
 8007e72:	f7ff fceb 	bl	800784c <_Unwind_VRS_Pop>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f43f af31 	beq.w	8007cde <__gnu_unwind_execute+0xe>
 8007e7c:	e755      	b.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007e7e:	ac03      	add	r4, sp, #12
 8007e80:	4643      	mov	r3, r8
 8007e82:	220e      	movs	r2, #14
 8007e84:	4641      	mov	r1, r8
 8007e86:	9400      	str	r4, [sp, #0]
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7ff faf1 	bl	8007470 <_Unwind_VRS_Get>
 8007e8e:	9400      	str	r4, [sp, #0]
 8007e90:	4628      	mov	r0, r5
 8007e92:	4643      	mov	r3, r8
 8007e94:	220f      	movs	r2, #15
 8007e96:	4641      	mov	r1, r8
 8007e98:	f7ff fb0c 	bl	80074b4 <_Unwind_VRS_Set>
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	e745      	b.n	8007d2c <__gnu_unwind_execute+0x5c>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff fee9 	bl	8007c78 <next_unwind_byte>
 8007ea6:	0301      	lsls	r1, r0, #12
 8007ea8:	f000 000f 	and.w	r0, r0, #15
 8007eac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8007eb0:	1c42      	adds	r2, r0, #1
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7ff fcc7 	bl	800784c <_Unwind_VRS_Pop>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f43f af0d 	beq.w	8007cde <__gnu_unwind_execute+0xe>
 8007ec4:	e731      	b.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff fed6 	bl	8007c78 <next_unwind_byte>
 8007ecc:	0301      	lsls	r1, r0, #12
 8007ece:	f000 000f 	and.w	r0, r0, #15
 8007ed2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8007ed6:	1c42      	adds	r2, r0, #1
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e7eb      	b.n	8007eb4 <__gnu_unwind_execute+0x1e4>
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7ff fecb 	bl	8007c78 <next_unwind_byte>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f43f af20 	beq.w	8007d2a <__gnu_unwind_execute+0x5a>
 8007eea:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007eee:	f47f af1c 	bne.w	8007d2a <__gnu_unwind_execute+0x5a>
 8007ef2:	2104      	movs	r1, #4
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f7ff fca9 	bl	800784c <_Unwind_VRS_Pop>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f43f aeef 	beq.w	8007cde <__gnu_unwind_execute+0xe>
 8007f00:	e713      	b.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007f02:	f000 020f 	and.w	r2, r0, #15
 8007f06:	3201      	adds	r2, #1
 8007f08:	2303      	movs	r3, #3
 8007f0a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4628      	mov	r0, r5
 8007f12:	f7ff fc9b 	bl	800784c <_Unwind_VRS_Pop>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	f43f aee1 	beq.w	8007cde <__gnu_unwind_execute+0xe>
 8007f1c:	e705      	b.n	8007d2a <__gnu_unwind_execute+0x5a>
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7ff feaa 	bl	8007c78 <next_unwind_byte>
 8007f24:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8007f28:	f000 030f 	and.w	r3, r0, #15
 8007f2c:	3210      	adds	r2, #16
 8007f2e:	3301      	adds	r3, #1
 8007f30:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8007f34:	e6f2      	b.n	8007d1c <__gnu_unwind_execute+0x4c>
 8007f36:	2300      	movs	r3, #0
 8007f38:	f10d 090c 	add.w	r9, sp, #12
 8007f3c:	220d      	movs	r2, #13
 8007f3e:	4619      	mov	r1, r3
 8007f40:	f8cd 9000 	str.w	r9, [sp]
 8007f44:	4628      	mov	r0, r5
 8007f46:	f7ff fa93 	bl	8007470 <_Unwind_VRS_Get>
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f7ff fe94 	bl	8007c78 <next_unwind_byte>
 8007f50:	0602      	lsls	r2, r0, #24
 8007f52:	f04f 0702 	mov.w	r7, #2
 8007f56:	d50c      	bpl.n	8007f72 <__gnu_unwind_execute+0x2a2>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007f5e:	40b8      	lsls	r0, r7
 8007f60:	4403      	add	r3, r0
 8007f62:	4630      	mov	r0, r6
 8007f64:	9303      	str	r3, [sp, #12]
 8007f66:	f7ff fe87 	bl	8007c78 <next_unwind_byte>
 8007f6a:	0603      	lsls	r3, r0, #24
 8007f6c:	f107 0707 	add.w	r7, r7, #7
 8007f70:	d4f2      	bmi.n	8007f58 <__gnu_unwind_execute+0x288>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	f8cd 9000 	str.w	r9, [sp]
 8007f78:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8007f7c:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8007f80:	40bc      	lsls	r4, r7
 8007f82:	2300      	movs	r3, #0
 8007f84:	4414      	add	r4, r2
 8007f86:	4619      	mov	r1, r3
 8007f88:	220d      	movs	r2, #13
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	9403      	str	r4, [sp, #12]
 8007f8e:	f7ff fa91 	bl	80074b4 <_Unwind_VRS_Set>
 8007f92:	e6a4      	b.n	8007cde <__gnu_unwind_execute+0xe>

08007f94 <__gnu_unwind_frame>:
 8007f94:	b510      	push	{r4, lr}
 8007f96:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007f98:	b084      	sub	sp, #16
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	2003      	movs	r0, #3
 8007f9e:	f88d 000c 	strb.w	r0, [sp, #12]
 8007fa2:	79dc      	ldrb	r4, [r3, #7]
 8007fa4:	f88d 400d 	strb.w	r4, [sp, #13]
 8007fa8:	0212      	lsls	r2, r2, #8
 8007faa:	3308      	adds	r3, #8
 8007fac:	4608      	mov	r0, r1
 8007fae:	a901      	add	r1, sp, #4
 8007fb0:	9201      	str	r2, [sp, #4]
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	f7ff fe8c 	bl	8007cd0 <__gnu_unwind_execute>
 8007fb8:	b004      	add	sp, #16
 8007fba:	bd10      	pop	{r4, pc}

08007fbc <_Unwind_GetRegionStart>:
 8007fbc:	b508      	push	{r3, lr}
 8007fbe:	f7ff fe85 	bl	8007ccc <unwind_UCB_from_context>
 8007fc2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007fc4:	bd08      	pop	{r3, pc}
 8007fc6:	bf00      	nop

08007fc8 <_Unwind_GetLanguageSpecificData>:
 8007fc8:	b508      	push	{r3, lr}
 8007fca:	f7ff fe7f 	bl	8007ccc <unwind_UCB_from_context>
 8007fce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007fd0:	79c3      	ldrb	r3, [r0, #7]
 8007fd2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007fd6:	3008      	adds	r0, #8
 8007fd8:	bd08      	pop	{r3, pc}
 8007fda:	bf00      	nop

08007fdc <_Unwind_GetDataRelBase>:
 8007fdc:	b508      	push	{r3, lr}
 8007fde:	f005 f8c1 	bl	800d164 <abort>
 8007fe2:	bf00      	nop

08007fe4 <_Unwind_GetTextRelBase>:
 8007fe4:	b508      	push	{r3, lr}
 8007fe6:	f7ff fff9 	bl	8007fdc <_Unwind_GetDataRelBase>
 8007fea:	bf00      	nop

08007fec <__aeabi_idiv0>:
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop

08007ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ff4:	2003      	movs	r0, #3
 8007ff6:	f000 f94d 	bl	8008294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f000 f806 	bl	800800c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008000:	f003 fdae 	bl	800bb60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008014:	4b12      	ldr	r3, [pc, #72]	; (8008060 <HAL_InitTick+0x54>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	4b12      	ldr	r3, [pc, #72]	; (8008064 <HAL_InitTick+0x58>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	4619      	mov	r1, r3
 800801e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008022:	fbb3 f3f1 	udiv	r3, r3, r1
 8008026:	fbb2 f3f3 	udiv	r3, r2, r3
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f968 	bl	8008300 <HAL_SYSTICK_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e00e      	b.n	8008058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b0f      	cmp	r3, #15
 800803e:	d80a      	bhi.n	8008056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008040:	2200      	movs	r2, #0
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	f000 f92f 	bl	80082aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800804c:	4a06      	ldr	r2, [pc, #24]	; (8008068 <HAL_InitTick+0x5c>)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	e000      	b.n	8008058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20000008 	.word	0x20000008
 8008064:	20000004 	.word	0x20000004
 8008068:	20000000 	.word	0x20000000

0800806c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <HAL_IncTick+0x20>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <HAL_IncTick+0x24>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4413      	add	r3, r2
 800807c:	4a04      	ldr	r2, [pc, #16]	; (8008090 <HAL_IncTick+0x24>)
 800807e:	6013      	str	r3, [r2, #0]
}
 8008080:	bf00      	nop
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	20000004 	.word	0x20000004
 8008090:	20000a34 	.word	0x20000a34

08008094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  return uwTick;
 8008098:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <HAL_GetTick+0x14>)
 800809a:	681b      	ldr	r3, [r3, #0]
}
 800809c:	4618      	mov	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20000a34 	.word	0x20000a34

080080ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80080b4:	f7ff ffee 	bl	8008094 <HAL_GetTick>
 80080b8:	4603      	mov	r3, r0
 80080ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d005      	beq.n	80080d4 <HAL_Delay+0x28>
  {
    wait += (uint32_t)(uwTickFreq);
 80080c8:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <HAL_Delay+0x44>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80080d4:	bf00      	nop
 80080d6:	f7ff ffdd 	bl	8008094 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d8f7      	bhi.n	80080d6 <HAL_Delay+0x2a>
  {
  }
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20000004 	.word	0x20000004

080080f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008104:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <__NVIC_SetPriorityGrouping+0x40>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008110:	4013      	ands	r3, r2
 8008112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <__NVIC_SetPriorityGrouping+0x44>)
 800811e:	4313      	orrs	r3, r2
 8008120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008122:	4a04      	ldr	r2, [pc, #16]	; (8008134 <__NVIC_SetPriorityGrouping+0x40>)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	60d3      	str	r3, [r2, #12]
}
 8008128:	bf00      	nop
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	e000ed00 	.word	0xe000ed00
 8008138:	05fa0000 	.word	0x05fa0000

0800813c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <__NVIC_GetPriorityGrouping+0x18>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	0a1b      	lsrs	r3, r3, #8
 8008146:	f003 0307 	and.w	r3, r3, #7
}
 800814a:	4618      	mov	r0, r3
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	e000ed00 	.word	0xe000ed00

08008158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	db0b      	blt.n	8008182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	f003 021f 	and.w	r2, r3, #31
 8008170:	4907      	ldr	r1, [pc, #28]	; (8008190 <__NVIC_EnableIRQ+0x38>)
 8008172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	2001      	movs	r0, #1
 800817a:	fa00 f202 	lsl.w	r2, r0, r2
 800817e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	e000e100 	.word	0xe000e100

08008194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db0a      	blt.n	80081be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <__NVIC_SetPriority+0x4c>)
 80081ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b2:	0112      	lsls	r2, r2, #4
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	440b      	add	r3, r1
 80081b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80081bc:	e00a      	b.n	80081d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	4908      	ldr	r1, [pc, #32]	; (80081e4 <__NVIC_SetPriority+0x50>)
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	f003 030f 	and.w	r3, r3, #15
 80081ca:	3b04      	subs	r3, #4
 80081cc:	0112      	lsls	r2, r2, #4
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	440b      	add	r3, r1
 80081d2:	761a      	strb	r2, [r3, #24]
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	e000e100 	.word	0xe000e100
 80081e4:	e000ed00 	.word	0xe000ed00

080081e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b089      	sub	sp, #36	; 0x24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f1c3 0307 	rsb	r3, r3, #7
 8008202:	2b04      	cmp	r3, #4
 8008204:	bf28      	it	cs
 8008206:	2304      	movcs	r3, #4
 8008208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	3304      	adds	r3, #4
 800820e:	2b06      	cmp	r3, #6
 8008210:	d902      	bls.n	8008218 <NVIC_EncodePriority+0x30>
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	3b03      	subs	r3, #3
 8008216:	e000      	b.n	800821a <NVIC_EncodePriority+0x32>
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800821c:	f04f 32ff 	mov.w	r2, #4294967295
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	43da      	mvns	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	401a      	ands	r2, r3
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008230:	f04f 31ff 	mov.w	r1, #4294967295
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	fa01 f303 	lsl.w	r3, r1, r3
 800823a:	43d9      	mvns	r1, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008240:	4313      	orrs	r3, r2
         );
}
 8008242:	4618      	mov	r0, r3
 8008244:	3724      	adds	r7, #36	; 0x24
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
	...

08008250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3b01      	subs	r3, #1
 800825c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008260:	d301      	bcc.n	8008266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008262:	2301      	movs	r3, #1
 8008264:	e00f      	b.n	8008286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008266:	4a0a      	ldr	r2, [pc, #40]	; (8008290 <SysTick_Config+0x40>)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3b01      	subs	r3, #1
 800826c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800826e:	210f      	movs	r1, #15
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	f7ff ff8e 	bl	8008194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <SysTick_Config+0x40>)
 800827a:	2200      	movs	r2, #0
 800827c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800827e:	4b04      	ldr	r3, [pc, #16]	; (8008290 <SysTick_Config+0x40>)
 8008280:	2207      	movs	r2, #7
 8008282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	e000e010 	.word	0xe000e010

08008294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff ff29 	bl	80080f4 <__NVIC_SetPriorityGrouping>
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b086      	sub	sp, #24
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	4603      	mov	r3, r0
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80082bc:	f7ff ff3e 	bl	800813c <__NVIC_GetPriorityGrouping>
 80082c0:	4603      	mov	r3, r0
 80082c2:	617b      	str	r3, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	6978      	ldr	r0, [r7, #20]
 80082ca:	f7ff ff8d 	bl	80081e8 <NVIC_EncodePriority>
 80082ce:	4602      	mov	r2, r0
 80082d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff ff5c 	bl	8008194 <__NVIC_SetPriority>
}
 80082dc:	bf00      	nop
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80082ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff ff30 	bl	8008158 <__NVIC_EnableIRQ>
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff ffa1 	bl	8008250 <SysTick_Config>
 800830e:	4603      	mov	r3, r0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d004      	beq.n	8008336 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2280      	movs	r2, #128	; 0x80
 8008330:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e00c      	b.n	8008350 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2205      	movs	r2, #5
 800833a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0201 	bic.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	2300      	movs	r3, #0
 800836a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800836c:	4bab      	ldr	r3, [pc, #684]	; (800861c <HAL_ETH_Init+0x2c0>)
 800836e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8008374:	2300      	movs	r3, #0
 8008376:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e187      	b.n	8008692 <HAL_ETH_Init+0x336>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f003 f9a4 	bl	800b6e4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800839c:	4ba0      	ldr	r3, [pc, #640]	; (8008620 <HAL_ETH_Init+0x2c4>)
 800839e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a0:	4a9f      	ldr	r2, [pc, #636]	; (8008620 <HAL_ETH_Init+0x2c4>)
 80083a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083a6:	6453      	str	r3, [r2, #68]	; 0x44
 80083a8:	4b9d      	ldr	r3, [pc, #628]	; (8008620 <HAL_ETH_Init+0x2c4>)
 80083aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80083b4:	4b9b      	ldr	r3, [pc, #620]	; (8008624 <HAL_ETH_Init+0x2c8>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4a9a      	ldr	r2, [pc, #616]	; (8008624 <HAL_ETH_Init+0x2c8>)
 80083ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083be:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80083c0:	4b98      	ldr	r3, [pc, #608]	; (8008624 <HAL_ETH_Init+0x2c8>)
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	4996      	ldr	r1, [pc, #600]	; (8008624 <HAL_ETH_Init+0x2c8>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0201 	orr.w	r2, r2, #1
 80083e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80083e6:	f7ff fe55 	bl	8008094 <HAL_GetTick>
 80083ea:	4603      	mov	r3, r0
 80083ec:	617b      	str	r3, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80083ee:	e011      	b.n	8008414 <HAL_ETH_Init+0xb8>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80083f0:	f7ff fe50 	bl	8008094 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80083fe:	d909      	bls.n	8008414 <HAL_ETH_Init+0xb8>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2203      	movs	r2, #3
 8008404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e13e      	b.n	8008692 <HAL_ETH_Init+0x336>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e4      	bne.n	80083f0 <HAL_ETH_Init+0x94>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f023 031c 	bic.w	r3, r3, #28
 8008434:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008436:	f001 fbef 	bl	8009c18 <HAL_RCC_GetHCLKFreq>
 800843a:	4603      	mov	r3, r0
 800843c:	61bb      	str	r3, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	4a79      	ldr	r2, [pc, #484]	; (8008628 <HAL_ETH_Init+0x2cc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d908      	bls.n	8008458 <HAL_ETH_Init+0xfc>
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	4a78      	ldr	r2, [pc, #480]	; (800862c <HAL_ETH_Init+0x2d0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d804      	bhi.n	8008458 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	f043 0308 	orr.w	r3, r3, #8
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	e027      	b.n	80084a8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	4a74      	ldr	r2, [pc, #464]	; (800862c <HAL_ETH_Init+0x2d0>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d908      	bls.n	8008472 <HAL_ETH_Init+0x116>
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	4a73      	ldr	r2, [pc, #460]	; (8008630 <HAL_ETH_Init+0x2d4>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d804      	bhi.n	8008472 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	f043 030c 	orr.w	r3, r3, #12
 800846e:	61fb      	str	r3, [r7, #28]
 8008470:	e01a      	b.n	80084a8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	4a6e      	ldr	r2, [pc, #440]	; (8008630 <HAL_ETH_Init+0x2d4>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d903      	bls.n	8008482 <HAL_ETH_Init+0x126>
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	4a6d      	ldr	r2, [pc, #436]	; (8008634 <HAL_ETH_Init+0x2d8>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d911      	bls.n	80084a6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	4a6b      	ldr	r2, [pc, #428]	; (8008634 <HAL_ETH_Init+0x2d8>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d908      	bls.n	800849c <HAL_ETH_Init+0x140>
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	4a6a      	ldr	r2, [pc, #424]	; (8008638 <HAL_ETH_Init+0x2dc>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d804      	bhi.n	800849c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	f043 0304 	orr.w	r3, r3, #4
 8008498:	61fb      	str	r3, [r7, #28]
 800849a:	e005      	b.n	80084a8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f043 0310 	orr.w	r3, r3, #16
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	e000      	b.n	80084a8 <HAL_ETH_Init+0x14c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80084a6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80084b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084b4:	2100      	movs	r1, #0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f959 	bl	800876e <HAL_ETH_WritePHYRegister>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00b      	beq.n	80084da <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80084c6:	6939      	ldr	r1, [r7, #16]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f9b7 	bl	800883c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e0db      	b.n	8008692 <HAL_ETH_Init+0x336>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80084da:	20ff      	movs	r0, #255	; 0xff
 80084dc:	f7ff fde6 	bl	80080ac <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80a9 	beq.w	800863c <HAL_ETH_Init+0x2e0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80084ea:	f7ff fdd3 	bl	8008094 <HAL_GetTick>
 80084ee:	4603      	mov	r3, r0
 80084f0:	617b      	str	r3, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80084f2:	f107 030c 	add.w	r3, r7, #12
 80084f6:	461a      	mov	r2, r3
 80084f8:	2101      	movs	r1, #1
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f8ce 	bl	800869c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008500:	f7ff fdc8 	bl	8008094 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	f241 3288 	movw	r2, #5000	; 0x1388
 800850e:	4293      	cmp	r3, r2
 8008510:	d90f      	bls.n	8008532 <HAL_ETH_Init+0x1d6>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008516:	6939      	ldr	r1, [r7, #16]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f98f 	bl	800883c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e0af      	b.n	8008692 <HAL_ETH_Init+0x336>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0da      	beq.n	80084f2 <HAL_ETH_Init+0x196>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800853c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008540:	2100      	movs	r1, #0
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f913 	bl	800876e <HAL_ETH_WritePHYRegister>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <HAL_ETH_Init+0x20a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008552:	6939      	ldr	r1, [r7, #16]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f971 	bl	800883c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008562:	2301      	movs	r3, #1
 8008564:	e095      	b.n	8008692 <HAL_ETH_Init+0x336>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008566:	f7ff fd95 	bl	8008094 <HAL_GetTick>
 800856a:	4603      	mov	r3, r0
 800856c:	617b      	str	r3, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800856e:	f107 030c 	add.w	r3, r7, #12
 8008572:	461a      	mov	r2, r3
 8008574:	2101      	movs	r1, #1
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f890 	bl	800869c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800857c:	f7ff fd8a 	bl	8008094 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	f241 3288 	movw	r2, #5000	; 0x1388
 800858a:	4293      	cmp	r3, r2
 800858c:	d90f      	bls.n	80085ae <HAL_ETH_Init+0x252>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008592:	6939      	ldr	r1, [r7, #16]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f951 	bl	800883c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e071      	b.n	8008692 <HAL_ETH_Init+0x336>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0da      	beq.n	800856e <HAL_ETH_Init+0x212>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80085b8:	f107 030c 	add.w	r3, r7, #12
 80085bc:	461a      	mov	r2, r3
 80085be:	211f      	movs	r1, #31
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f86b 	bl	800869c <HAL_ETH_ReadPHYRegister>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00b      	beq.n	80085e4 <HAL_ETH_Init+0x288>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80085d0:	6939      	ldr	r1, [r7, #16]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f932 	bl	800883c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80085e0:	2301      	movs	r3, #1
 80085e2:	e056      	b.n	8008692 <HAL_ETH_Init+0x336>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <HAL_ETH_Init+0x29c>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	e002      	b.n	80085fe <HAL_ETH_Init+0x2a2>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <HAL_ETH_Init+0x2b4>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	609a      	str	r2, [r3, #8]
 800860e:	e037      	b.n	8008680 <HAL_ETH_Init+0x324>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	e032      	b.n	8008680 <HAL_ETH_Init+0x324>
 800861a:	bf00      	nop
 800861c:	03938700 	.word	0x03938700
 8008620:	40023800 	.word	0x40023800
 8008624:	40013800 	.word	0x40013800
 8008628:	01312cff 	.word	0x01312cff
 800862c:	02160ebf 	.word	0x02160ebf
 8008630:	039386ff 	.word	0x039386ff
 8008634:	05f5e0ff 	.word	0x05f5e0ff
 8008638:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	08db      	lsrs	r3, r3, #3
 8008642:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800864c:	4313      	orrs	r3, r2
 800864e:	b29b      	uxth	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	2100      	movs	r1, #0
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f88a 	bl	800876e <HAL_ETH_WritePHYRegister>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <HAL_ETH_Init+0x31c>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008664:	6939      	ldr	r1, [r7, #16]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f8e8 	bl	800883c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e00c      	b.n	8008692 <HAL_ETH_Init+0x336>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8008678:	f640 70ff 	movw	r0, #4095	; 0xfff
 800867c:	f7ff fd16 	bl	80080ac <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8008680:	6939      	ldr	r1, [r7, #16]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8da 	bl	800883c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3720      	adds	r7, #32
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop

0800869c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	460b      	mov	r3, r1
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80086aa:	2300      	movs	r3, #0
 80086ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b82      	cmp	r3, #130	; 0x82
 80086bc:	d101      	bne.n	80086c2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80086be:	2302      	movs	r3, #2
 80086c0:	e051      	b.n	8008766 <HAL_ETH_ReadPHYRegister+0xca>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2282      	movs	r2, #130	; 0x82
 80086c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f003 031c 	and.w	r3, r3, #28
 80086d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8a1b      	ldrh	r3, [r3, #16]
 80086de:	02db      	lsls	r3, r3, #11
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80086e8:	897b      	ldrh	r3, [r7, #10]
 80086ea:	019b      	lsls	r3, r3, #6
 80086ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f023 0302 	bic.w	r3, r3, #2
 80086fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800870e:	f7ff fcc1 	bl	8008094 <HAL_GetTick>
 8008712:	4603      	mov	r3, r0
 8008714:	613b      	str	r3, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008716:	e015      	b.n	8008744 <HAL_ETH_ReadPHYRegister+0xa8>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8008718:	f7ff fcbc 	bl	8008094 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008726:	d309      	bcc.n	800873c <HAL_ETH_ReadPHYRegister+0xa0>
    {
      heth->State= HAL_ETH_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e014      	b.n	8008766 <HAL_ETH_ReadPHYRegister+0xca>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e4      	bne.n	8008718 <HAL_ETH_ReadPHYRegister+0x7c>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	b29b      	uxth	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b086      	sub	sp, #24
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	460b      	mov	r3, r1
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b42      	cmp	r3, #66	; 0x42
 800878e:	d101      	bne.n	8008794 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8008790:	2302      	movs	r3, #2
 8008792:	e04f      	b.n	8008834 <HAL_ETH_WritePHYRegister+0xc6>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2242      	movs	r2, #66	; 0x42
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f003 031c 	and.w	r3, r3, #28
 80087aa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8a1b      	ldrh	r3, [r3, #16]
 80087b0:	02db      	lsls	r3, r3, #11
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80087ba:	897b      	ldrh	r3, [r7, #10]
 80087bc:	019b      	lsls	r3, r3, #6
 80087be:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f043 0302 	orr.w	r3, r3, #2
 80087ce:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f043 0301 	orr.w	r3, r3, #1
 80087d6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80087ea:	f7ff fc53 	bl	8008094 <HAL_GetTick>
 80087ee:	4603      	mov	r3, r0
 80087f0:	613b      	str	r3, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80087f2:	e015      	b.n	8008820 <HAL_ETH_WritePHYRegister+0xb2>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80087f4:	f7ff fc4e 	bl	8008094 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008802:	d309      	bcc.n	8008818 <HAL_ETH_WritePHYRegister+0xaa>
    {
      heth->State= HAL_ETH_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e00d      	b.n	8008834 <HAL_ETH_WritePHYRegister+0xc6>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e4      	bne.n	80087f4 <HAL_ETH_WritePHYRegister+0x86>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b0b0      	sub	sp, #192	; 0xc0
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008858:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008860:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8008862:	2300      	movs	r3, #0
 8008864:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8008866:	2300      	movs	r3, #0
 8008868:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800886a:	2300      	movs	r3, #0
 800886c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800886e:	2300      	movs	r3, #0
 8008870:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8008872:	2300      	movs	r3, #0
 8008874:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8008876:	2300      	movs	r3, #0
 8008878:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8008882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008886:	663b      	str	r3, [r7, #96]	; 0x60
 8008888:	e001      	b.n	800888e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800888a:	2300      	movs	r3, #0
 800888c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800888e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008892:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8008894:	2300      	movs	r3, #0
 8008896:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008898:	2300      	movs	r3, #0
 800889a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800889c:	2300      	movs	r3, #0
 800889e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80088a0:	2300      	movs	r3, #0
 80088a2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80088a8:	2340      	movs	r3, #64	; 0x40
 80088aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80088b8:	2300      	movs	r3, #0
 80088ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80088be:	2300      	movs	r3, #0
 80088c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80088dc:	2380      	movs	r3, #128	; 0x80
 80088de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80088e2:	2300      	movs	r3, #0
 80088e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80088ee:	2300      	movs	r3, #0
 80088f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80088f4:	2300      	movs	r3, #0
 80088f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80088fa:	2300      	movs	r3, #0
 80088fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008910:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008914:	4bab      	ldr	r3, [pc, #684]	; (8008bc4 <ETH_MACDMAConfig+0x388>)
 8008916:	4013      	ands	r3, r2
 8008918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800891c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800891e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8008920:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8008922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8008924:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8008926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8008928:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800892e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8008930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8008932:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8008934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8008936:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800893c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800893e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8008940:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8008942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8008944:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8008946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8008948:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800894a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800894c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800894e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8008950:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8008952:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008956:	4313      	orrs	r3, r2
 8008958:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008964:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008970:	2001      	movs	r0, #1
 8008972:	f7ff fb9b 	bl	80080ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800897e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008980:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8008982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008984:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8008986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8008988:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800898a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800898e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8008990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8008994:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8008996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800899a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800899c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80089a0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80089a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80089ac:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80089ae:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80089ba:	2001      	movs	r0, #1
 80089bc:	f7ff fb76 	bl	80080ac <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80089c8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089d2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80089dc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80089e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80089ec:	f64f 7341 	movw	r3, #65345	; 0xff41
 80089f0:	4013      	ands	r3, r2
 80089f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80089f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089fa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80089fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8008a00:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8008a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8008a06:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8008a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8008a0c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8008a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8008a12:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8008a14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8008a18:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8008a1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a2c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008a38:	2001      	movs	r0, #1
 8008a3a:	f7ff fb37 	bl	80080ac <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a46:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008a48:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8008a4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008a62:	2001      	movs	r0, #1
 8008a64:	f7ff fb22 	bl	80080ac <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a70:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8008a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a7a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8008a80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a84:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008a92:	2300      	movs	r3, #0
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8008a96:	2304      	movs	r3, #4
 8008a98:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8008a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8008aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008aa4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008aaa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ab0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8008ab2:	2380      	movs	r3, #128	; 0x80
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008aba:	2300      	movs	r3, #0
 8008abc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	f241 0318 	movw	r3, #4120	; 0x1018
 8008ac6:	4413      	add	r3, r2
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8008ace:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008ad2:	4b3d      	ldr	r3, [pc, #244]	; (8008bc8 <ETH_MACDMAConfig+0x38c>)
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008ada:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8008adc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008ade:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8008ae0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8008ae2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8008ae4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8008ae6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8008ae8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8008aea:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8008aec:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8008aee:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8008af0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8008af2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8008af6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8008afa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008afc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b00:	4313      	orrs	r3, r2
 8008b02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	f241 0318 	movw	r3, #4120	; 0x1018
 8008b0e:	4413      	add	r3, r2
 8008b10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b14:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8008b1e:	4413      	add	r3, r2
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008b26:	2001      	movs	r0, #1
 8008b28:	f7ff fac0 	bl	80080ac <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	f241 0318 	movw	r3, #4120	; 0x1018
 8008b34:	4413      	add	r3, r2
 8008b36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b3a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008b40:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8008b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8008b44:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8008b48:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8008b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8008b4c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8008b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b50:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8008b52:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8008b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8008b56:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b64:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008b74:	2001      	movs	r0, #1
 8008b76:	f7ff fa99 	bl	80080ac <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b86:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d10d      	bne.n	8008bac <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	f241 031c 	movw	r3, #4124	; 0x101c
 8008b98:	4413      	add	r3, r2
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6811      	ldr	r1, [r2, #0]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <ETH_MACDMAConfig+0x390>)
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	f241 031c 	movw	r3, #4124	; 0x101c
 8008ba8:	440b      	add	r3, r1
 8008baa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f80b 	bl	8008bd0 <ETH_MACAddressConfig>
}
 8008bba:	bf00      	nop
 8008bbc:	37c0      	adds	r7, #192	; 0xc0
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	ff20810f 	.word	0xff20810f
 8008bc8:	f8de3f23 	.word	0xf8de3f23
 8008bcc:	00010040 	.word	0x00010040

08008bd0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3305      	adds	r3, #5
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	021b      	lsls	r3, r3, #8
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	3204      	adds	r2, #4
 8008be8:	7812      	ldrb	r2, [r2, #0]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <ETH_MACAddressConfig+0x68>)
 8008bf2:	4413      	add	r3, r2
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	3303      	adds	r3, #3
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	061a      	lsls	r2, r3, #24
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3302      	adds	r3, #2
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	4313      	orrs	r3, r2
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	7812      	ldrb	r2, [r2, #0]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <ETH_MACAddressConfig+0x6c>)
 8008c22:	4413      	add	r3, r2
 8008c24:	461a      	mov	r2, r3
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	6013      	str	r3, [r2, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	40028040 	.word	0x40028040
 8008c3c:	40028044 	.word	0x40028044

08008c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b089      	sub	sp, #36	; 0x24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008c56:	2300      	movs	r3, #0
 8008c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	e175      	b.n	8008f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008c60:	2201      	movs	r2, #1
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4013      	ands	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	f040 8164 	bne.w	8008f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d00b      	beq.n	8008c9e <HAL_GPIO_Init+0x5e>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d007      	beq.n	8008c9e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c92:	2b11      	cmp	r3, #17
 8008c94:	d003      	beq.n	8008c9e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2b12      	cmp	r3, #18
 8008c9c:	d130      	bne.n	8008d00 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	2203      	movs	r2, #3
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	091b      	lsrs	r3, r3, #4
 8008cea:	f003 0201 	and.w	r2, r3, #1
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d10:	43db      	mvns	r3, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4013      	ands	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689a      	ldr	r2, [r3, #8]
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d003      	beq.n	8008d40 <HAL_GPIO_Init+0x100>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b12      	cmp	r3, #18
 8008d3e:	d123      	bne.n	8008d88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	08da      	lsrs	r2, r3, #3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3208      	adds	r2, #8
 8008d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	220f      	movs	r2, #15
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4013      	ands	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	08da      	lsrs	r2, r3, #3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3208      	adds	r2, #8
 8008d82:	69b9      	ldr	r1, [r7, #24]
 8008d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	2203      	movs	r2, #3
 8008d94:	fa02 f303 	lsl.w	r3, r2, r3
 8008d98:	43db      	mvns	r3, r3
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f003 0203 	and.w	r2, r3, #3
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	fa02 f303 	lsl.w	r3, r2, r3
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 80be 	beq.w	8008f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dca:	4b65      	ldr	r3, [pc, #404]	; (8008f60 <HAL_GPIO_Init+0x320>)
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dce:	4a64      	ldr	r2, [pc, #400]	; (8008f60 <HAL_GPIO_Init+0x320>)
 8008dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8008dd6:	4b62      	ldr	r3, [pc, #392]	; (8008f60 <HAL_GPIO_Init+0x320>)
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008de2:	4a60      	ldr	r2, [pc, #384]	; (8008f64 <HAL_GPIO_Init+0x324>)
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	089b      	lsrs	r3, r3, #2
 8008de8:	3302      	adds	r3, #2
 8008dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	220f      	movs	r2, #15
 8008dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfe:	43db      	mvns	r3, r3
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	4013      	ands	r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a57      	ldr	r2, [pc, #348]	; (8008f68 <HAL_GPIO_Init+0x328>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d037      	beq.n	8008e7e <HAL_GPIO_Init+0x23e>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a56      	ldr	r2, [pc, #344]	; (8008f6c <HAL_GPIO_Init+0x32c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d031      	beq.n	8008e7a <HAL_GPIO_Init+0x23a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a55      	ldr	r2, [pc, #340]	; (8008f70 <HAL_GPIO_Init+0x330>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d02b      	beq.n	8008e76 <HAL_GPIO_Init+0x236>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a54      	ldr	r2, [pc, #336]	; (8008f74 <HAL_GPIO_Init+0x334>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d025      	beq.n	8008e72 <HAL_GPIO_Init+0x232>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a53      	ldr	r2, [pc, #332]	; (8008f78 <HAL_GPIO_Init+0x338>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d01f      	beq.n	8008e6e <HAL_GPIO_Init+0x22e>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a52      	ldr	r2, [pc, #328]	; (8008f7c <HAL_GPIO_Init+0x33c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d019      	beq.n	8008e6a <HAL_GPIO_Init+0x22a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a51      	ldr	r2, [pc, #324]	; (8008f80 <HAL_GPIO_Init+0x340>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d013      	beq.n	8008e66 <HAL_GPIO_Init+0x226>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a50      	ldr	r2, [pc, #320]	; (8008f84 <HAL_GPIO_Init+0x344>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d00d      	beq.n	8008e62 <HAL_GPIO_Init+0x222>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a4f      	ldr	r2, [pc, #316]	; (8008f88 <HAL_GPIO_Init+0x348>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d007      	beq.n	8008e5e <HAL_GPIO_Init+0x21e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a4e      	ldr	r2, [pc, #312]	; (8008f8c <HAL_GPIO_Init+0x34c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d101      	bne.n	8008e5a <HAL_GPIO_Init+0x21a>
 8008e56:	2309      	movs	r3, #9
 8008e58:	e012      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	e010      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e5e:	2308      	movs	r3, #8
 8008e60:	e00e      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e62:	2307      	movs	r3, #7
 8008e64:	e00c      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e66:	2306      	movs	r3, #6
 8008e68:	e00a      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e6a:	2305      	movs	r3, #5
 8008e6c:	e008      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e6e:	2304      	movs	r3, #4
 8008e70:	e006      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e72:	2303      	movs	r3, #3
 8008e74:	e004      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e002      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <HAL_GPIO_Init+0x240>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	f002 0203 	and.w	r2, r2, #3
 8008e86:	0092      	lsls	r2, r2, #2
 8008e88:	4093      	lsls	r3, r2
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008e90:	4934      	ldr	r1, [pc, #208]	; (8008f64 <HAL_GPIO_Init+0x324>)
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	089b      	lsrs	r3, r3, #2
 8008e96:	3302      	adds	r3, #2
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e9e:	4b3c      	ldr	r3, [pc, #240]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	43db      	mvns	r3, r3
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ec2:	4a33      	ldr	r2, [pc, #204]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ec8:	4b31      	ldr	r3, [pc, #196]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008eec:	4a28      	ldr	r2, [pc, #160]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008ef2:	4b27      	ldr	r3, [pc, #156]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	43db      	mvns	r3, r3
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	4013      	ands	r3, r2
 8008f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f16:	4a1e      	ldr	r2, [pc, #120]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f1c:	4b1c      	ldr	r3, [pc, #112]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	43db      	mvns	r3, r3
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f40:	4a13      	ldr	r2, [pc, #76]	; (8008f90 <HAL_GPIO_Init+0x350>)
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	61fb      	str	r3, [r7, #28]
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	2b0f      	cmp	r3, #15
 8008f50:	f67f ae86 	bls.w	8008c60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008f54:	bf00      	nop
 8008f56:	3724      	adds	r7, #36	; 0x24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	40023800 	.word	0x40023800
 8008f64:	40013800 	.word	0x40013800
 8008f68:	40020000 	.word	0x40020000
 8008f6c:	40020400 	.word	0x40020400
 8008f70:	40020800 	.word	0x40020800
 8008f74:	40020c00 	.word	0x40020c00
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	40021400 	.word	0x40021400
 8008f80:	40021800 	.word	0x40021800
 8008f84:	40021c00 	.word	0x40021c00
 8008f88:	40022000 	.word	0x40022000
 8008f8c:	40022400 	.word	0x40022400
 8008f90:	40013c00 	.word	0x40013c00

08008f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	807b      	strh	r3, [r7, #2]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fa4:	787b      	ldrb	r3, [r7, #1]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008faa:	887a      	ldrh	r2, [r7, #2]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008fb0:	e003      	b.n	8008fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008fb2:	887b      	ldrh	r3, [r7, #2]
 8008fb4:	041a      	lsls	r2, r3, #16
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	619a      	str	r2, [r3, #24]
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fc8:	b08f      	sub	sp, #60	; 0x3c
 8008fca:	af0a      	add	r7, sp, #40	; 0x28
 8008fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e116      	b.n	8009206 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d106      	bne.n	8008ff8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f002 ff8c 	bl	800bf10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4618      	mov	r0, r3
 8009018:	f002 f8cc 	bl	800b1b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	603b      	str	r3, [r7, #0]
 8009022:	687e      	ldr	r6, [r7, #4]
 8009024:	466d      	mov	r5, sp
 8009026:	f106 0410 	add.w	r4, r6, #16
 800902a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800902c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800902e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009036:	e885 0003 	stmia.w	r5, {r0, r1}
 800903a:	1d33      	adds	r3, r6, #4
 800903c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800903e:	6838      	ldr	r0, [r7, #0]
 8009040:	f002 f860 	bl	800b104 <USB_CoreInit>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d005      	beq.n	8009056 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2202      	movs	r2, #2
 800904e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e0d7      	b.n	8009206 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f002 f8ba 	bl	800b1d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
 8009066:	e04a      	b.n	80090fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009068:	7bfa      	ldrb	r2, [r7, #15]
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	1a9b      	subs	r3, r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	333d      	adds	r3, #61	; 0x3d
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800907c:	7bfa      	ldrb	r2, [r7, #15]
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	4613      	mov	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	440b      	add	r3, r1
 800908a:	333c      	adds	r3, #60	; 0x3c
 800908c:	7bfa      	ldrb	r2, [r7, #15]
 800908e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009090:	7bfa      	ldrb	r2, [r7, #15]
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	b298      	uxth	r0, r3
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	3342      	adds	r3, #66	; 0x42
 80090a4:	4602      	mov	r2, r0
 80090a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80090a8:	7bfa      	ldrb	r2, [r7, #15]
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4613      	mov	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	333f      	adds	r3, #63	; 0x3f
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80090bc:	7bfa      	ldrb	r2, [r7, #15]
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	4613      	mov	r3, r2
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	3344      	adds	r3, #68	; 0x44
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80090d0:	7bfa      	ldrb	r2, [r7, #15]
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	3348      	adds	r3, #72	; 0x48
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80090e4:	7bfa      	ldrb	r2, [r7, #15]
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4613      	mov	r3, r2
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	3350      	adds	r3, #80	; 0x50
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	3301      	adds	r3, #1
 80090fc:	73fb      	strb	r3, [r7, #15]
 80090fe:	7bfa      	ldrb	r2, [r7, #15]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	429a      	cmp	r2, r3
 8009106:	d3af      	bcc.n	8009068 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
 800910c:	e044      	b.n	8009198 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800910e:	7bfa      	ldrb	r2, [r7, #15]
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	4613      	mov	r3, r2
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	1a9b      	subs	r3, r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	440b      	add	r3, r1
 800911c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009120:	2200      	movs	r2, #0
 8009122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009124:	7bfa      	ldrb	r2, [r7, #15]
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	4613      	mov	r3, r2
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	440b      	add	r3, r1
 8009132:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009136:	7bfa      	ldrb	r2, [r7, #15]
 8009138:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800913a:	7bfa      	ldrb	r2, [r7, #15]
 800913c:	6879      	ldr	r1, [r7, #4]
 800913e:	4613      	mov	r3, r2
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	1a9b      	subs	r3, r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	440b      	add	r3, r1
 8009148:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009150:	7bfa      	ldrb	r2, [r7, #15]
 8009152:	6879      	ldr	r1, [r7, #4]
 8009154:	4613      	mov	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009166:	7bfa      	ldrb	r2, [r7, #15]
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	440b      	add	r3, r1
 8009174:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800917c:	7bfa      	ldrb	r2, [r7, #15]
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	3301      	adds	r3, #1
 8009196:	73fb      	strb	r3, [r7, #15]
 8009198:	7bfa      	ldrb	r2, [r7, #15]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d3b5      	bcc.n	800910e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	687e      	ldr	r6, [r7, #4]
 80091aa:	466d      	mov	r5, sp
 80091ac:	f106 0410 	add.w	r4, r6, #16
 80091b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80091bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80091c0:	1d33      	adds	r3, r6, #4
 80091c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091c4:	6838      	ldr	r0, [r7, #0]
 80091c6:	f002 f831 	bl	800b22c <USB_DevInit>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d005      	beq.n	80091dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e014      	b.n	8009206 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d102      	bne.n	80091fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f80b 	bl	8009210 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f002 f9e3 	bl	800b5ca <USB_DevDisconnect>

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <HAL_PCDEx_ActivateLPM+0x44>)
 8009240:	4313      	orrs	r3, r2
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	10000003 	.word	0x10000003

08009258 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a04      	ldr	r2, [pc, #16]	; (8009274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009266:	6013      	str	r3, [r2, #0]
}
 8009268:	bf00      	nop
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40007000 	.word	0x40007000

08009278 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009282:	4b24      	ldr	r3, [pc, #144]	; (8009314 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	4a23      	ldr	r2, [pc, #140]	; (8009314 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800928c:	6413      	str	r3, [r2, #64]	; 0x40
 800928e:	4b21      	ldr	r3, [pc, #132]	; (8009314 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800929a:	4b1f      	ldr	r3, [pc, #124]	; (8009318 <HAL_PWREx_EnableOverDrive+0xa0>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a1e      	ldr	r2, [pc, #120]	; (8009318 <HAL_PWREx_EnableOverDrive+0xa0>)
 80092a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092a6:	f7fe fef5 	bl	8008094 <HAL_GetTick>
 80092aa:	4603      	mov	r3, r0
 80092ac:	607b      	str	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80092ae:	e009      	b.n	80092c4 <HAL_PWREx_EnableOverDrive+0x4c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80092b0:	f7fe fef0 	bl	8008094 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092be:	d901      	bls.n	80092c4 <HAL_PWREx_EnableOverDrive+0x4c>
    {
      return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e023      	b.n	800930c <HAL_PWREx_EnableOverDrive+0x94>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80092c4:	4b14      	ldr	r3, [pc, #80]	; (8009318 <HAL_PWREx_EnableOverDrive+0xa0>)
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d0:	d1ee      	bne.n	80092b0 <HAL_PWREx_EnableOverDrive+0x38>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80092d2:	4b11      	ldr	r3, [pc, #68]	; (8009318 <HAL_PWREx_EnableOverDrive+0xa0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a10      	ldr	r2, [pc, #64]	; (8009318 <HAL_PWREx_EnableOverDrive+0xa0>)
 80092d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092de:	f7fe fed9 	bl	8008094 <HAL_GetTick>
 80092e2:	4603      	mov	r3, r0
 80092e4:	607b      	str	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80092e6:	e009      	b.n	80092fc <HAL_PWREx_EnableOverDrive+0x84>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80092e8:	f7fe fed4 	bl	8008094 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092f6:	d901      	bls.n	80092fc <HAL_PWREx_EnableOverDrive+0x84>
    {
      return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e007      	b.n	800930c <HAL_PWREx_EnableOverDrive+0x94>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80092fc:	4b06      	ldr	r3, [pc, #24]	; (8009318 <HAL_PWREx_EnableOverDrive+0xa0>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009308:	d1ee      	bne.n	80092e8 <HAL_PWREx_EnableOverDrive+0x70>
    }
  } 
  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	40023800 	.word	0x40023800
 8009318:	40007000 	.word	0x40007000

0800931c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009324:	2300      	movs	r3, #0
 8009326:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e2a7      	b.n	8009882 <HAL_RCC_OscConfig+0x566>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 8089 	beq.w	8009452 <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009340:	4b99      	ldr	r3, [pc, #612]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f003 030c 	and.w	r3, r3, #12
 8009348:	2b04      	cmp	r3, #4
 800934a:	d00c      	beq.n	8009366 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800934c:	4b96      	ldr	r3, [pc, #600]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 030c 	and.w	r3, r3, #12
 8009354:	2b08      	cmp	r3, #8
 8009356:	d112      	bne.n	800937e <HAL_RCC_OscConfig+0x62>
 8009358:	4b93      	ldr	r3, [pc, #588]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009364:	d10b      	bne.n	800937e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009366:	4b90      	ldr	r3, [pc, #576]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d06e      	beq.n	8009450 <HAL_RCC_OscConfig+0x134>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d16a      	bne.n	8009450 <HAL_RCC_OscConfig+0x134>
      {
        return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e281      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009386:	d106      	bne.n	8009396 <HAL_RCC_OscConfig+0x7a>
 8009388:	4b87      	ldr	r3, [pc, #540]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a86      	ldr	r2, [pc, #536]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800938e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	e02e      	b.n	80093f4 <HAL_RCC_OscConfig+0xd8>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10c      	bne.n	80093b8 <HAL_RCC_OscConfig+0x9c>
 800939e:	4b82      	ldr	r3, [pc, #520]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a81      	ldr	r2, [pc, #516]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	4b7f      	ldr	r3, [pc, #508]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a7e      	ldr	r2, [pc, #504]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	e01d      	b.n	80093f4 <HAL_RCC_OscConfig+0xd8>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093c0:	d10c      	bne.n	80093dc <HAL_RCC_OscConfig+0xc0>
 80093c2:	4b79      	ldr	r3, [pc, #484]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a78      	ldr	r2, [pc, #480]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	4b76      	ldr	r3, [pc, #472]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a75      	ldr	r2, [pc, #468]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	e00b      	b.n	80093f4 <HAL_RCC_OscConfig+0xd8>
 80093dc:	4b72      	ldr	r3, [pc, #456]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a71      	ldr	r2, [pc, #452]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	4b6f      	ldr	r3, [pc, #444]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a6e      	ldr	r2, [pc, #440]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80093ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d014      	beq.n	8009426 <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093fc:	f7fe fe4a 	bl	8008094 <HAL_GetTick>
 8009400:	4603      	mov	r3, r0
 8009402:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009404:	e008      	b.n	8009418 <HAL_RCC_OscConfig+0xfc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009406:	f7fe fe45 	bl	8008094 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b64      	cmp	r3, #100	; 0x64
 8009412:	d901      	bls.n	8009418 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e234      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009418:	4b63      	ldr	r3, [pc, #396]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0f0      	beq.n	8009406 <HAL_RCC_OscConfig+0xea>
 8009424:	e015      	b.n	8009452 <HAL_RCC_OscConfig+0x136>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009426:	f7fe fe35 	bl	8008094 <HAL_GetTick>
 800942a:	4603      	mov	r3, r0
 800942c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x126>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009430:	f7fe fe30 	bl	8008094 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b64      	cmp	r3, #100	; 0x64
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e21f      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009442:	4b59      	ldr	r3, [pc, #356]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f0      	bne.n	8009430 <HAL_RCC_OscConfig+0x114>
 800944e:	e000      	b.n	8009452 <HAL_RCC_OscConfig+0x136>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d06b      	beq.n	8009536 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800945e:	4b52      	ldr	r3, [pc, #328]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f003 030c 	and.w	r3, r3, #12
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00b      	beq.n	8009482 <HAL_RCC_OscConfig+0x166>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800946a:	4b4f      	ldr	r3, [pc, #316]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f003 030c 	and.w	r3, r3, #12
 8009472:	2b08      	cmp	r3, #8
 8009474:	d11c      	bne.n	80094b0 <HAL_RCC_OscConfig+0x194>
 8009476:	4b4c      	ldr	r3, [pc, #304]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d116      	bne.n	80094b0 <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009482:	4b49      	ldr	r3, [pc, #292]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 0302 	and.w	r3, r3, #2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d005      	beq.n	800949a <HAL_RCC_OscConfig+0x17e>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d001      	beq.n	800949a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e1f3      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800949a:	4b43      	ldr	r3, [pc, #268]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	493f      	ldr	r1, [pc, #252]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094ae:	e042      	b.n	8009536 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d024      	beq.n	8009502 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094b8:	4b3b      	ldr	r3, [pc, #236]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a3a      	ldr	r2, [pc, #232]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80094be:	f043 0301 	orr.w	r3, r3, #1
 80094c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c4:	f7fe fde6 	bl	8008094 <HAL_GetTick>
 80094c8:	4603      	mov	r3, r0
 80094ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094cc:	e008      	b.n	80094e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094ce:	f7fe fde1 	bl	8008094 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d901      	bls.n	80094e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e1d0      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094e0:	4b31      	ldr	r3, [pc, #196]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0302 	and.w	r3, r3, #2
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d0f0      	beq.n	80094ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ec:	4b2e      	ldr	r3, [pc, #184]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	492b      	ldr	r1, [pc, #172]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	600b      	str	r3, [r1, #0]
 8009500:	e019      	b.n	8009536 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009502:	4b29      	ldr	r3, [pc, #164]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a28      	ldr	r2, [pc, #160]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950e:	f7fe fdc1 	bl	8008094 <HAL_GetTick>
 8009512:	4603      	mov	r3, r0
 8009514:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009516:	e008      	b.n	800952a <HAL_RCC_OscConfig+0x20e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009518:	f7fe fdbc 	bl	8008094 <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	2b02      	cmp	r3, #2
 8009524:	d901      	bls.n	800952a <HAL_RCC_OscConfig+0x20e>
          {
            return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e1ab      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800952a:	4b1f      	ldr	r3, [pc, #124]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1f0      	bne.n	8009518 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0308 	and.w	r3, r3, #8
 800953e:	2b00      	cmp	r3, #0
 8009540:	d03a      	beq.n	80095b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d01a      	beq.n	8009580 <HAL_RCC_OscConfig+0x264>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800954a:	4b17      	ldr	r3, [pc, #92]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 800954c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800954e:	4a16      	ldr	r2, [pc, #88]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009550:	f043 0301 	orr.w	r3, r3, #1
 8009554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009556:	f7fe fd9d 	bl	8008094 <HAL_GetTick>
 800955a:	4603      	mov	r3, r0
 800955c:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800955e:	e008      	b.n	8009572 <HAL_RCC_OscConfig+0x256>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009560:	f7fe fd98 	bl	8008094 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d901      	bls.n	8009572 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e187      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009572:	4b0d      	ldr	r3, [pc, #52]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0f0      	beq.n	8009560 <HAL_RCC_OscConfig+0x244>
 800957e:	e01b      	b.n	80095b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009580:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009584:	4a08      	ldr	r2, [pc, #32]	; (80095a8 <HAL_RCC_OscConfig+0x28c>)
 8009586:	f023 0301 	bic.w	r3, r3, #1
 800958a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800958c:	f7fe fd82 	bl	8008094 <HAL_GetTick>
 8009590:	4603      	mov	r3, r0
 8009592:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009594:	e00a      	b.n	80095ac <HAL_RCC_OscConfig+0x290>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009596:	f7fe fd7d 	bl	8008094 <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d903      	bls.n	80095ac <HAL_RCC_OscConfig+0x290>
        {
          return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e16c      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
 80095a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095ac:	4b95      	ldr	r3, [pc, #596]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80095ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1ee      	bne.n	8009596 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 80a7 	beq.w	8009714 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095c6:	4b8f      	ldr	r3, [pc, #572]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10d      	bne.n	80095ee <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80095d2:	4b8c      	ldr	r3, [pc, #560]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	4a8b      	ldr	r2, [pc, #556]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80095d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095dc:	6413      	str	r3, [r2, #64]	; 0x40
 80095de:	4b89      	ldr	r3, [pc, #548]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e6:	60bb      	str	r3, [r7, #8]
 80095e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095ea:	2301      	movs	r3, #1
 80095ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095ee:	4b86      	ldr	r3, [pc, #536]	; (8009808 <HAL_RCC_OscConfig+0x4ec>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d119      	bne.n	800962e <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80095fa:	4b83      	ldr	r3, [pc, #524]	; (8009808 <HAL_RCC_OscConfig+0x4ec>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a82      	ldr	r2, [pc, #520]	; (8009808 <HAL_RCC_OscConfig+0x4ec>)
 8009600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009606:	f7fe fd45 	bl	8008094 <HAL_GetTick>
 800960a:	4603      	mov	r3, r0
 800960c:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800960e:	e008      	b.n	8009622 <HAL_RCC_OscConfig+0x306>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009610:	f7fe fd40 	bl	8008094 <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b64      	cmp	r3, #100	; 0x64
 800961c:	d901      	bls.n	8009622 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e12f      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009622:	4b79      	ldr	r3, [pc, #484]	; (8009808 <HAL_RCC_OscConfig+0x4ec>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0f0      	beq.n	8009610 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d106      	bne.n	8009644 <HAL_RCC_OscConfig+0x328>
 8009636:	4b73      	ldr	r3, [pc, #460]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963a:	4a72      	ldr	r2, [pc, #456]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800963c:	f043 0301 	orr.w	r3, r3, #1
 8009640:	6713      	str	r3, [r2, #112]	; 0x70
 8009642:	e02d      	b.n	80096a0 <HAL_RCC_OscConfig+0x384>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10c      	bne.n	8009666 <HAL_RCC_OscConfig+0x34a>
 800964c:	4b6d      	ldr	r3, [pc, #436]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800964e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009650:	4a6c      	ldr	r2, [pc, #432]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009652:	f023 0301 	bic.w	r3, r3, #1
 8009656:	6713      	str	r3, [r2, #112]	; 0x70
 8009658:	4b6a      	ldr	r3, [pc, #424]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800965a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965c:	4a69      	ldr	r2, [pc, #420]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800965e:	f023 0304 	bic.w	r3, r3, #4
 8009662:	6713      	str	r3, [r2, #112]	; 0x70
 8009664:	e01c      	b.n	80096a0 <HAL_RCC_OscConfig+0x384>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	2b05      	cmp	r3, #5
 800966c:	d10c      	bne.n	8009688 <HAL_RCC_OscConfig+0x36c>
 800966e:	4b65      	ldr	r3, [pc, #404]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009672:	4a64      	ldr	r2, [pc, #400]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009674:	f043 0304 	orr.w	r3, r3, #4
 8009678:	6713      	str	r3, [r2, #112]	; 0x70
 800967a:	4b62      	ldr	r3, [pc, #392]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800967c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967e:	4a61      	ldr	r2, [pc, #388]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009680:	f043 0301 	orr.w	r3, r3, #1
 8009684:	6713      	str	r3, [r2, #112]	; 0x70
 8009686:	e00b      	b.n	80096a0 <HAL_RCC_OscConfig+0x384>
 8009688:	4b5e      	ldr	r3, [pc, #376]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800968a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968c:	4a5d      	ldr	r2, [pc, #372]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800968e:	f023 0301 	bic.w	r3, r3, #1
 8009692:	6713      	str	r3, [r2, #112]	; 0x70
 8009694:	4b5b      	ldr	r3, [pc, #364]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009698:	4a5a      	ldr	r2, [pc, #360]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800969a:	f023 0304 	bic.w	r3, r3, #4
 800969e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d016      	beq.n	80096d6 <HAL_RCC_OscConfig+0x3ba>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096a8:	f7fe fcf4 	bl	8008094 <HAL_GetTick>
 80096ac:	4603      	mov	r3, r0
 80096ae:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096b0:	e00a      	b.n	80096c8 <HAL_RCC_OscConfig+0x3ac>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096b2:	f7fe fcef 	bl	8008094 <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d901      	bls.n	80096c8 <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e0dc      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096c8:	4b4e      	ldr	r3, [pc, #312]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80096ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0ee      	beq.n	80096b2 <HAL_RCC_OscConfig+0x396>
 80096d4:	e015      	b.n	8009702 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d6:	f7fe fcdd 	bl	8008094 <HAL_GetTick>
 80096da:	4603      	mov	r3, r0
 80096dc:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096de:	e00a      	b.n	80096f6 <HAL_RCC_OscConfig+0x3da>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096e0:	f7fe fcd8 	bl	8008094 <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d901      	bls.n	80096f6 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e0c5      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096f6:	4b43      	ldr	r3, [pc, #268]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80096f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1ee      	bne.n	80096e0 <HAL_RCC_OscConfig+0x3c4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009702:	7dfb      	ldrb	r3, [r7, #23]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d105      	bne.n	8009714 <HAL_RCC_OscConfig+0x3f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009708:	4b3e      	ldr	r3, [pc, #248]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800970a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970c:	4a3d      	ldr	r2, [pc, #244]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800970e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80b1 	beq.w	8009880 <HAL_RCC_OscConfig+0x564>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800971e:	4b39      	ldr	r3, [pc, #228]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 030c 	and.w	r3, r3, #12
 8009726:	2b08      	cmp	r3, #8
 8009728:	d070      	beq.n	800980c <HAL_RCC_OscConfig+0x4f0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	2b02      	cmp	r3, #2
 8009730:	d14d      	bne.n	80097ce <HAL_RCC_OscConfig+0x4b2>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009732:	4b34      	ldr	r3, [pc, #208]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a33      	ldr	r2, [pc, #204]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800973c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973e:	f7fe fca9 	bl	8008094 <HAL_GetTick>
 8009742:	4603      	mov	r3, r0
 8009744:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009746:	e008      	b.n	800975a <HAL_RCC_OscConfig+0x43e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009748:	f7fe fca4 	bl	8008094 <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	2b02      	cmp	r3, #2
 8009754:	d901      	bls.n	800975a <HAL_RCC_OscConfig+0x43e>
          {
            return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e093      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800975a:	4b2a      	ldr	r3, [pc, #168]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1f0      	bne.n	8009748 <HAL_RCC_OscConfig+0x42c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69da      	ldr	r2, [r3, #28]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	019b      	lsls	r3, r3, #6
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977c:	085b      	lsrs	r3, r3, #1
 800977e:	3b01      	subs	r3, #1
 8009780:	041b      	lsls	r3, r3, #16
 8009782:	431a      	orrs	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	061b      	lsls	r3, r3, #24
 800978a:	431a      	orrs	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	071b      	lsls	r3, r3, #28
 8009792:	491c      	ldr	r1, [pc, #112]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 8009794:	4313      	orrs	r3, r2
 8009796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009798:	4b1a      	ldr	r3, [pc, #104]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a19      	ldr	r2, [pc, #100]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 800979e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a4:	f7fe fc76 	bl	8008094 <HAL_GetTick>
 80097a8:	4603      	mov	r3, r0
 80097aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097ac:	e008      	b.n	80097c0 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097ae:	f7fe fc71 	bl	8008094 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d901      	bls.n	80097c0 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e060      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097c0:	4b10      	ldr	r3, [pc, #64]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0f0      	beq.n	80097ae <HAL_RCC_OscConfig+0x492>
 80097cc:	e058      	b.n	8009880 <HAL_RCC_OscConfig+0x564>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a0c      	ldr	r2, [pc, #48]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80097d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097da:	f7fe fc5b 	bl	8008094 <HAL_GetTick>
 80097de:	4603      	mov	r3, r0
 80097e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097e2:	e008      	b.n	80097f6 <HAL_RCC_OscConfig+0x4da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097e4:	f7fe fc56 	bl	8008094 <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d901      	bls.n	80097f6 <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e045      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097f6:	4b03      	ldr	r3, [pc, #12]	; (8009804 <HAL_RCC_OscConfig+0x4e8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1f0      	bne.n	80097e4 <HAL_RCC_OscConfig+0x4c8>
 8009802:	e03d      	b.n	8009880 <HAL_RCC_OscConfig+0x564>
 8009804:	40023800 	.word	0x40023800
 8009808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800980c:	4b1f      	ldr	r3, [pc, #124]	; (800988c <HAL_RCC_OscConfig+0x570>)
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d030      	beq.n	800987c <HAL_RCC_OscConfig+0x560>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009824:	429a      	cmp	r2, r3
 8009826:	d129      	bne.n	800987c <HAL_RCC_OscConfig+0x560>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009832:	429a      	cmp	r2, r3
 8009834:	d122      	bne.n	800987c <HAL_RCC_OscConfig+0x560>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800983c:	4013      	ands	r3, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009842:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009844:	4293      	cmp	r3, r2
 8009846:	d119      	bne.n	800987c <HAL_RCC_OscConfig+0x560>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	3b01      	subs	r3, #1
 8009856:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009858:	429a      	cmp	r2, r3
 800985a:	d10f      	bne.n	800987c <HAL_RCC_OscConfig+0x560>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009866:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009868:	429a      	cmp	r2, r3
 800986a:	d107      	bne.n	800987c <HAL_RCC_OscConfig+0x560>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009876:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009878:	429a      	cmp	r2, r3
 800987a:	d001      	beq.n	8009880 <HAL_RCC_OscConfig+0x564>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e000      	b.n	8009882 <HAL_RCC_OscConfig+0x566>
      }
    }
  }
  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3718      	adds	r7, #24
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	40023800 	.word	0x40023800

08009890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e0d1      	b.n	8009a4c <HAL_RCC_ClockConfig+0x1bc>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098a8:	4b6a      	ldr	r3, [pc, #424]	; (8009a54 <HAL_RCC_ClockConfig+0x1c4>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d910      	bls.n	80098d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098b6:	4b67      	ldr	r3, [pc, #412]	; (8009a54 <HAL_RCC_ClockConfig+0x1c4>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f023 020f 	bic.w	r2, r3, #15
 80098be:	4965      	ldr	r1, [pc, #404]	; (8009a54 <HAL_RCC_ClockConfig+0x1c4>)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098c6:	4b63      	ldr	r3, [pc, #396]	; (8009a54 <HAL_RCC_ClockConfig+0x1c4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d001      	beq.n	80098d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e0b9      	b.n	8009a4c <HAL_RCC_ClockConfig+0x1bc>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0302 	and.w	r3, r3, #2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d020      	beq.n	8009926 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d005      	beq.n	80098fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098f0:	4b59      	ldr	r3, [pc, #356]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	4a58      	ldr	r2, [pc, #352]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 80098f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80098fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009908:	4b53      	ldr	r3, [pc, #332]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	4a52      	ldr	r2, [pc, #328]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 800990e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009912:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009914:	4b50      	ldr	r3, [pc, #320]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	494d      	ldr	r1, [pc, #308]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009922:	4313      	orrs	r3, r2
 8009924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d041      	beq.n	80099b6 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d107      	bne.n	800994a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800993a:	4b47      	ldr	r3, [pc, #284]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d115      	bne.n	8009972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e080      	b.n	8009a4c <HAL_RCC_ClockConfig+0x1bc>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	2b02      	cmp	r3, #2
 8009950:	d107      	bne.n	8009962 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009952:	4b41      	ldr	r3, [pc, #260]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d109      	bne.n	8009972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e074      	b.n	8009a4c <HAL_RCC_ClockConfig+0x1bc>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009962:	4b3d      	ldr	r3, [pc, #244]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e06c      	b.n	8009a4c <HAL_RCC_ClockConfig+0x1bc>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009972:	4b39      	ldr	r3, [pc, #228]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f023 0203 	bic.w	r2, r3, #3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	4936      	ldr	r1, [pc, #216]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009980:	4313      	orrs	r3, r2
 8009982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009984:	f7fe fb86 	bl	8008094 <HAL_GetTick>
 8009988:	4603      	mov	r3, r0
 800998a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800998c:	e00a      	b.n	80099a4 <HAL_RCC_ClockConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800998e:	f7fe fb81 	bl	8008094 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	f241 3288 	movw	r2, #5000	; 0x1388
 800999c:	4293      	cmp	r3, r2
 800999e:	d901      	bls.n	80099a4 <HAL_RCC_ClockConfig+0x114>
      {
        return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e053      	b.n	8009a4c <HAL_RCC_ClockConfig+0x1bc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099a4:	4b2c      	ldr	r3, [pc, #176]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f003 020c 	and.w	r2, r3, #12
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d1eb      	bne.n	800998e <HAL_RCC_ClockConfig+0xfe>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80099b6:	4b27      	ldr	r3, [pc, #156]	; (8009a54 <HAL_RCC_ClockConfig+0x1c4>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d210      	bcs.n	80099e6 <HAL_RCC_ClockConfig+0x156>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099c4:	4b23      	ldr	r3, [pc, #140]	; (8009a54 <HAL_RCC_ClockConfig+0x1c4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f023 020f 	bic.w	r2, r3, #15
 80099cc:	4921      	ldr	r1, [pc, #132]	; (8009a54 <HAL_RCC_ClockConfig+0x1c4>)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099d4:	4b1f      	ldr	r3, [pc, #124]	; (8009a54 <HAL_RCC_ClockConfig+0x1c4>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 030f 	and.w	r3, r3, #15
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d001      	beq.n	80099e6 <HAL_RCC_ClockConfig+0x156>
    {
      return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e032      	b.n	8009a4c <HAL_RCC_ClockConfig+0x1bc>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0304 	and.w	r3, r3, #4
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d008      	beq.n	8009a04 <HAL_RCC_ClockConfig+0x174>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099f2:	4b19      	ldr	r3, [pc, #100]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	4916      	ldr	r1, [pc, #88]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d009      	beq.n	8009a24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009a10:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	490e      	ldr	r1, [pc, #56]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009a24:	f000 f820 	bl	8009a68 <HAL_RCC_GetSysClockFreq>
 8009a28:	4601      	mov	r1, r0
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	; (8009a58 <HAL_RCC_ClockConfig+0x1c8>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	091b      	lsrs	r3, r3, #4
 8009a30:	f003 030f 	and.w	r3, r3, #15
 8009a34:	4a09      	ldr	r2, [pc, #36]	; (8009a5c <HAL_RCC_ClockConfig+0x1cc>)
 8009a36:	5cd3      	ldrb	r3, [r2, r3]
 8009a38:	fa21 f303 	lsr.w	r3, r1, r3
 8009a3c:	4a08      	ldr	r2, [pc, #32]	; (8009a60 <HAL_RCC_ClockConfig+0x1d0>)
 8009a3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009a40:	4b08      	ldr	r3, [pc, #32]	; (8009a64 <HAL_RCC_ClockConfig+0x1d4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe fae1 	bl	800800c <HAL_InitTick>

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	40023c00 	.word	0x40023c00
 8009a58:	40023800 	.word	0x40023800
 8009a5c:	08011860 	.word	0x08011860
 8009a60:	20000008 	.word	0x20000008
 8009a64:	20000000 	.word	0x20000000

08009a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	607b      	str	r3, [r7, #4]
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	2300      	movs	r3, #0
 8009a78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a7e:	4b63      	ldr	r3, [pc, #396]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 030c 	and.w	r3, r3, #12
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	d007      	beq.n	8009a9a <HAL_RCC_GetSysClockFreq+0x32>
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	d008      	beq.n	8009aa0 <HAL_RCC_GetSysClockFreq+0x38>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f040 80b4 	bne.w	8009bfc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a94:	4b5e      	ldr	r3, [pc, #376]	; (8009c10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009a96:	60bb      	str	r3, [r7, #8]
      break;
 8009a98:	e0b3      	b.n	8009c02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a9a:	4b5e      	ldr	r3, [pc, #376]	; (8009c14 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009a9c:	60bb      	str	r3, [r7, #8]
      break;
 8009a9e:	e0b0      	b.n	8009c02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009aa0:	4b5a      	ldr	r3, [pc, #360]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aa8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009aaa:	4b58      	ldr	r3, [pc, #352]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d04a      	beq.n	8009b4c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ab6:	4b55      	ldr	r3, [pc, #340]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	099b      	lsrs	r3, r3, #6
 8009abc:	f04f 0400 	mov.w	r4, #0
 8009ac0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	ea03 0501 	and.w	r5, r3, r1
 8009acc:	ea04 0602 	and.w	r6, r4, r2
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	f04f 0300 	mov.w	r3, #0
 8009ad8:	f04f 0400 	mov.w	r4, #0
 8009adc:	0154      	lsls	r4, r2, #5
 8009ade:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009ae2:	014b      	lsls	r3, r1, #5
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	1b49      	subs	r1, r1, r5
 8009aea:	eb62 0206 	sbc.w	r2, r2, r6
 8009aee:	f04f 0300 	mov.w	r3, #0
 8009af2:	f04f 0400 	mov.w	r4, #0
 8009af6:	0194      	lsls	r4, r2, #6
 8009af8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009afc:	018b      	lsls	r3, r1, #6
 8009afe:	1a5b      	subs	r3, r3, r1
 8009b00:	eb64 0402 	sbc.w	r4, r4, r2
 8009b04:	f04f 0100 	mov.w	r1, #0
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	00e2      	lsls	r2, r4, #3
 8009b0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009b12:	00d9      	lsls	r1, r3, #3
 8009b14:	460b      	mov	r3, r1
 8009b16:	4614      	mov	r4, r2
 8009b18:	195b      	adds	r3, r3, r5
 8009b1a:	eb44 0406 	adc.w	r4, r4, r6
 8009b1e:	f04f 0100 	mov.w	r1, #0
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	0262      	lsls	r2, r4, #9
 8009b28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009b2c:	0259      	lsls	r1, r3, #9
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4614      	mov	r4, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	4621      	mov	r1, r4
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f04f 0400 	mov.w	r4, #0
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4623      	mov	r3, r4
 8009b40:	f7fd f950 	bl	8006de4 <__aeabi_uldivmod>
 8009b44:	4603      	mov	r3, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	e049      	b.n	8009be0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b4c:	4b2f      	ldr	r3, [pc, #188]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	099b      	lsrs	r3, r3, #6
 8009b52:	f04f 0400 	mov.w	r4, #0
 8009b56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	ea03 0501 	and.w	r5, r3, r1
 8009b62:	ea04 0602 	and.w	r6, r4, r2
 8009b66:	4629      	mov	r1, r5
 8009b68:	4632      	mov	r2, r6
 8009b6a:	f04f 0300 	mov.w	r3, #0
 8009b6e:	f04f 0400 	mov.w	r4, #0
 8009b72:	0154      	lsls	r4, r2, #5
 8009b74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009b78:	014b      	lsls	r3, r1, #5
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	1b49      	subs	r1, r1, r5
 8009b80:	eb62 0206 	sbc.w	r2, r2, r6
 8009b84:	f04f 0300 	mov.w	r3, #0
 8009b88:	f04f 0400 	mov.w	r4, #0
 8009b8c:	0194      	lsls	r4, r2, #6
 8009b8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009b92:	018b      	lsls	r3, r1, #6
 8009b94:	1a5b      	subs	r3, r3, r1
 8009b96:	eb64 0402 	sbc.w	r4, r4, r2
 8009b9a:	f04f 0100 	mov.w	r1, #0
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	00e2      	lsls	r2, r4, #3
 8009ba4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009ba8:	00d9      	lsls	r1, r3, #3
 8009baa:	460b      	mov	r3, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	195b      	adds	r3, r3, r5
 8009bb0:	eb44 0406 	adc.w	r4, r4, r6
 8009bb4:	f04f 0100 	mov.w	r1, #0
 8009bb8:	f04f 0200 	mov.w	r2, #0
 8009bbc:	02a2      	lsls	r2, r4, #10
 8009bbe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009bc2:	0299      	lsls	r1, r3, #10
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4614      	mov	r4, r2
 8009bc8:	4618      	mov	r0, r3
 8009bca:	4621      	mov	r1, r4
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f04f 0400 	mov.w	r4, #0
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	4623      	mov	r3, r4
 8009bd6:	f7fd f905 	bl	8006de4 <__aeabi_uldivmod>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	460c      	mov	r4, r1
 8009bde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	3301      	adds	r3, #1
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	60bb      	str	r3, [r7, #8]
      break;
 8009bfa:	e002      	b.n	8009c02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009bfc:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009bfe:	60bb      	str	r3, [r7, #8]
      break;
 8009c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c02:	68bb      	ldr	r3, [r7, #8]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c0c:	40023800 	.word	0x40023800
 8009c10:	00f42400 	.word	0x00f42400
 8009c14:	007a1200 	.word	0x007a1200

08009c18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c1c:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	20000008 	.word	0x20000008

08009c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009c34:	f7ff fff0 	bl	8009c18 <HAL_RCC_GetHCLKFreq>
 8009c38:	4601      	mov	r1, r0
 8009c3a:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	0a9b      	lsrs	r3, r3, #10
 8009c40:	f003 0307 	and.w	r3, r3, #7
 8009c44:	4a03      	ldr	r2, [pc, #12]	; (8009c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c46:	5cd3      	ldrb	r3, [r2, r3]
 8009c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	40023800 	.word	0x40023800
 8009c54:	08011870 	.word	0x08011870

08009c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009c5c:	f7ff ffdc 	bl	8009c18 <HAL_RCC_GetHCLKFreq>
 8009c60:	4601      	mov	r1, r0
 8009c62:	4b05      	ldr	r3, [pc, #20]	; (8009c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	0b5b      	lsrs	r3, r3, #13
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	4a03      	ldr	r2, [pc, #12]	; (8009c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c6e:	5cd3      	ldrb	r3, [r2, r3]
 8009c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	40023800 	.word	0x40023800
 8009c7c:	08011870 	.word	0x08011870

08009c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009c94:	2300      	movs	r3, #0
 8009c96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d012      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009ca8:	4b6a      	ldr	r3, [pc, #424]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	4a69      	ldr	r2, [pc, #420]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009cae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009cb2:	6093      	str	r3, [r2, #8]
 8009cb4:	4b67      	ldr	r3, [pc, #412]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009cb6:	689a      	ldr	r2, [r3, #8]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbc:	4965      	ldr	r1, [pc, #404]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d017      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cda:	4b5e      	ldr	r3, [pc, #376]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce8:	495a      	ldr	r1, [pc, #360]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cf8:	d101      	bne.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009d06:	2301      	movs	r3, #1
 8009d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d017      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009d16:	4b4f      	ldr	r3, [pc, #316]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d24:	494b      	ldr	r1, [pc, #300]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009d26:	4313      	orrs	r3, r2
 8009d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d34:	d101      	bne.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009d36:	2301      	movs	r3, #1
 8009d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009d42:	2301      	movs	r3, #1
 8009d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009d52:	2301      	movs	r3, #1
 8009d54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0320 	and.w	r3, r3, #32
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 808d 	beq.w	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d64:	4b3b      	ldr	r3, [pc, #236]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d68:	4a3a      	ldr	r2, [pc, #232]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8009d70:	4b38      	ldr	r3, [pc, #224]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d7c:	4b36      	ldr	r3, [pc, #216]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a35      	ldr	r2, [pc, #212]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d88:	f7fe f984 	bl	8008094 <HAL_GetTick>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	617b      	str	r3, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009d90:	e008      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d92:	f7fe f97f 	bl	8008094 <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	2b64      	cmp	r3, #100	; 0x64
 8009d9e:	d901      	bls.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e393      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009da4:	4b2c      	ldr	r3, [pc, #176]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0f0      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x112>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009db0:	4b28      	ldr	r3, [pc, #160]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009db8:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d036      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d02f      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dce:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd6:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009dd8:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ddc:	4a1d      	ldr	r2, [pc, #116]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009de2:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009de4:	4b1b      	ldr	r3, [pc, #108]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de8:	4a1a      	ldr	r2, [pc, #104]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009df0:	4a18      	ldr	r2, [pc, #96]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009df6:	4b17      	ldr	r3, [pc, #92]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d115      	bne.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e02:	f7fe f947 	bl	8008094 <HAL_GetTick>
 8009e06:	4603      	mov	r3, r0
 8009e08:	617b      	str	r3, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e0a:	e00a      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e0c:	f7fe f942 	bl	8008094 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d901      	bls.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
          {
            return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e354      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0ee      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e3a:	d111      	bne.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009e48:	4b04      	ldr	r3, [pc, #16]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009e4a:	400b      	ands	r3, r1
 8009e4c:	4901      	ldr	r1, [pc, #4]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	608b      	str	r3, [r1, #8]
 8009e52:	e00b      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8009e54:	40023800 	.word	0x40023800
 8009e58:	40007000 	.word	0x40007000
 8009e5c:	0ffffcff 	.word	0x0ffffcff
 8009e60:	4bb3      	ldr	r3, [pc, #716]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	4ab2      	ldr	r2, [pc, #712]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009e66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009e6a:	6093      	str	r3, [r2, #8]
 8009e6c:	4bb0      	ldr	r3, [pc, #704]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e78:	49ad      	ldr	r1, [pc, #692]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0310 	and.w	r3, r3, #16
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d010      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e8a:	4ba9      	ldr	r3, [pc, #676]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e90:	4aa7      	ldr	r2, [pc, #668]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009e9a:	4ba5      	ldr	r3, [pc, #660]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009e9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea4:	49a2      	ldr	r1, [pc, #648]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009eb8:	4b9d      	ldr	r3, [pc, #628]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ebe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ec6:	499a      	ldr	r1, [pc, #616]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009eda:	4b95      	ldr	r3, [pc, #596]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee8:	4991      	ldr	r1, [pc, #580]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009efc:	4b8c      	ldr	r3, [pc, #560]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f0a:	4989      	ldr	r1, [pc, #548]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f1e:	4b84      	ldr	r3, [pc, #528]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2c:	4980      	ldr	r1, [pc, #512]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009f40:	4b7b      	ldr	r3, [pc, #492]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f46:	f023 0203 	bic.w	r2, r3, #3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4e:	4978      	ldr	r1, [pc, #480]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009f62:	4b73      	ldr	r3, [pc, #460]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f68:	f023 020c 	bic.w	r2, r3, #12
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f70:	496f      	ldr	r1, [pc, #444]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f72:	4313      	orrs	r3, r2
 8009f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00a      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f84:	4b6a      	ldr	r3, [pc, #424]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f92:	4967      	ldr	r1, [pc, #412]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009f94:	4313      	orrs	r3, r2
 8009f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00a      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009fa6:	4b62      	ldr	r3, [pc, #392]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb4:	495e      	ldr	r1, [pc, #376]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00a      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009fc8:	4b59      	ldr	r3, [pc, #356]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd6:	4956      	ldr	r1, [pc, #344]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009fea:	4b51      	ldr	r3, [pc, #324]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff8:	494d      	ldr	r1, [pc, #308]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a00c:	4b48      	ldr	r3, [pc, #288]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a012:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a01a:	4945      	ldr	r1, [pc, #276]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00a      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a02e:	4b40      	ldr	r3, [pc, #256]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a034:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a03c:	493c      	ldr	r1, [pc, #240]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00a      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a050:	4b37      	ldr	r3, [pc, #220]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a056:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a05e:	4934      	ldr	r1, [pc, #208]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a060:	4313      	orrs	r3, r2
 800a062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d011      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a072:	4b2f      	ldr	r3, [pc, #188]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a078:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a080:	492b      	ldr	r1, [pc, #172]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a082:	4313      	orrs	r3, r2
 800a084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a08c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a090:	d101      	bne.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      pllsaiused = 1;
 800a092:	2301      	movs	r3, #1
 800a094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    pllsaiused = 1;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00a      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a0b2:	4b1f      	ldr	r3, [pc, #124]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c0:	491b      	ldr	r1, [pc, #108]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a0d4:	4b16      	ldr	r3, [pc, #88]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0e4:	4912      	ldr	r1, [pc, #72]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a108:	4909      	ldr	r1, [pc, #36]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00f      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a11c:	4b04      	ldr	r3, [pc, #16]	; (800a130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a122:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12c:	e002      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
 800a12e:	bf00      	nop
 800a130:	40023800 	.word	0x40023800
 800a134:	4987      	ldr	r1, [pc, #540]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a136:	4313      	orrs	r3, r2
 800a138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00b      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a148:	4b82      	ldr	r3, [pc, #520]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a14a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a14e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a158:	497e      	ldr	r1, [pc, #504]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d005      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a16e:	f040 80d8 	bne.w	800a322 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a172:	4b78      	ldr	r3, [pc, #480]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a77      	ldr	r2, [pc, #476]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a178:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a17e:	f7fd ff89 	bl	8008094 <HAL_GetTick>
 800a182:	4603      	mov	r3, r0
 800a184:	617b      	str	r3, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a186:	e008      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a188:	f7fd ff84 	bl	8008094 <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b64      	cmp	r3, #100	; 0x64
 800a194:	d901      	bls.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e198      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a19a:	4b6e      	ldr	r3, [pc, #440]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1f0      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x508>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d021      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x576>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d11d      	bne.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x576>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a1ba:	4b66      	ldr	r3, [pc, #408]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a1bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1c0:	0c1b      	lsrs	r3, r3, #16
 800a1c2:	f003 0303 	and.w	r3, r3, #3
 800a1c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a1c8:	4b62      	ldr	r3, [pc, #392]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a1ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1ce:	0e1b      	lsrs	r3, r3, #24
 800a1d0:	f003 030f 	and.w	r3, r3, #15
 800a1d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	019a      	lsls	r2, r3, #6
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	041b      	lsls	r3, r3, #16
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	061b      	lsls	r3, r3, #24
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	071b      	lsls	r3, r3, #28
 800a1ee:	4959      	ldr	r1, [pc, #356]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x58c>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a20a:	d00a      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a214:	2b00      	cmp	r3, #0
 800a216:	d02e      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a220:	d129      	bne.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a222:	4b4c      	ldr	r3, [pc, #304]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a228:	0c1b      	lsrs	r3, r3, #16
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a230:	4b48      	ldr	r3, [pc, #288]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a236:	0f1b      	lsrs	r3, r3, #28
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	019a      	lsls	r2, r3, #6
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	041b      	lsls	r3, r3, #16
 800a248:	431a      	orrs	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	061b      	lsls	r3, r3, #24
 800a250:	431a      	orrs	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	071b      	lsls	r3, r3, #28
 800a256:	493f      	ldr	r1, [pc, #252]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a25e:	4b3d      	ldr	r3, [pc, #244]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a264:	f023 021f 	bic.w	r2, r3, #31
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	3b01      	subs	r3, #1
 800a26e:	4939      	ldr	r1, [pc, #228]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a270:	4313      	orrs	r3, r2
 800a272:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01d      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x63e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a282:	4b34      	ldr	r3, [pc, #208]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a288:	0e1b      	lsrs	r3, r3, #24
 800a28a:	f003 030f 	and.w	r3, r3, #15
 800a28e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a290:	4b30      	ldr	r3, [pc, #192]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a296:	0f1b      	lsrs	r3, r3, #28
 800a298:	f003 0307 	and.w	r3, r3, #7
 800a29c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	019a      	lsls	r2, r3, #6
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	041b      	lsls	r3, r3, #16
 800a2aa:	431a      	orrs	r2, r3
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	061b      	lsls	r3, r3, #24
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	071b      	lsls	r3, r3, #28
 800a2b6:	4927      	ldr	r1, [pc, #156]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d011      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	019a      	lsls	r2, r3, #6
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	041b      	lsls	r3, r3, #16
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	061b      	lsls	r3, r3, #24
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	071b      	lsls	r3, r3, #28
 800a2e6:	491b      	ldr	r1, [pc, #108]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a2ee:	4b19      	ldr	r3, [pc, #100]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a18      	ldr	r2, [pc, #96]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a2f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2fa:	f7fd fecb 	bl	8008094 <HAL_GetTick>
 800a2fe:	4603      	mov	r3, r0
 800a300:	617b      	str	r3, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a302:	e008      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x696>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a304:	f7fd fec6 	bl	8008094 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	2b64      	cmp	r3, #100	; 0x64
 800a310:	d901      	bls.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x696>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e0da      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a316:	4b0f      	ldr	r3, [pc, #60]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0f0      	beq.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x684>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b01      	cmp	r3, #1
 800a326:	f040 80d0 	bne.w	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x84a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a32a:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a09      	ldr	r2, [pc, #36]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a336:	f7fd fead 	bl	8008094 <HAL_GetTick>
 800a33a:	4603      	mov	r3, r0
 800a33c:	617b      	str	r3, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a33e:	e00b      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a340:	f7fd fea8 	bl	8008094 <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	2b64      	cmp	r3, #100	; 0x64
 800a34c:	d904      	bls.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e0bc      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800a352:	bf00      	nop
 800a354:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a358:	4b5e      	ldr	r3, [pc, #376]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a364:	d0ec      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x6c0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a376:	2b00      	cmp	r3, #0
 800a378:	d009      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x70e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a382:	2b00      	cmp	r3, #0
 800a384:	d02e      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x764>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d12a      	bne.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x764>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a38e:	4b51      	ldr	r3, [pc, #324]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a394:	0c1b      	lsrs	r3, r3, #16
 800a396:	f003 0303 	and.w	r3, r3, #3
 800a39a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a39c:	4b4d      	ldr	r3, [pc, #308]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a2:	0f1b      	lsrs	r3, r3, #28
 800a3a4:	f003 0307 	and.w	r3, r3, #7
 800a3a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	019a      	lsls	r2, r3, #6
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	041b      	lsls	r3, r3, #16
 800a3b4:	431a      	orrs	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	061b      	lsls	r3, r3, #24
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	071b      	lsls	r3, r3, #28
 800a3c2:	4944      	ldr	r1, [pc, #272]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a3ca:	4b42      	ldr	r3, [pc, #264]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	021b      	lsls	r3, r3, #8
 800a3dc:	493d      	ldr	r1, [pc, #244]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d022      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3f8:	d11d      	bne.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a3fa:	4b36      	ldr	r3, [pc, #216]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a400:	0e1b      	lsrs	r3, r3, #24
 800a402:	f003 030f 	and.w	r3, r3, #15
 800a406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a408:	4b32      	ldr	r3, [pc, #200]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a40e:	0f1b      	lsrs	r3, r3, #28
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	019a      	lsls	r2, r3, #6
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	041b      	lsls	r3, r3, #16
 800a422:	431a      	orrs	r2, r3
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	061b      	lsls	r3, r3, #24
 800a428:	431a      	orrs	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	071b      	lsls	r3, r3, #28
 800a42e:	4929      	ldr	r1, [pc, #164]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a430:	4313      	orrs	r3, r2
 800a432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0308 	and.w	r3, r3, #8
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d028      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a442:	4b24      	ldr	r3, [pc, #144]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a448:	0e1b      	lsrs	r3, r3, #24
 800a44a:	f003 030f 	and.w	r3, r3, #15
 800a44e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a450:	4b20      	ldr	r3, [pc, #128]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a456:	0c1b      	lsrs	r3, r3, #16
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	019a      	lsls	r2, r3, #6
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	041b      	lsls	r3, r3, #16
 800a468:	431a      	orrs	r2, r3
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	061b      	lsls	r3, r3, #24
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	69db      	ldr	r3, [r3, #28]
 800a474:	071b      	lsls	r3, r3, #28
 800a476:	4917      	ldr	r1, [pc, #92]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a478:	4313      	orrs	r3, r2
 800a47a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a47e:	4b15      	ldr	r3, [pc, #84]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	4911      	ldr	r1, [pc, #68]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a494:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a0e      	ldr	r2, [pc, #56]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a49a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a49e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4a0:	f7fd fdf8 	bl	8008094 <HAL_GetTick>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	617b      	str	r3, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a4a8:	e008      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a4aa:	f7fd fdf3 	bl	8008094 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b64      	cmp	r3, #100	; 0x64
 800a4b6:	d901      	bls.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e007      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a4bc:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x854>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4c8:	d1ef      	bne.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x82a>
      }
    }
  }
  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	40023800 	.word	0x40023800

0800a4d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e040      	b.n	800a56c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 fc8e 	bl	800be1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2224      	movs	r2, #36	; 0x24
 800a504:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0201 	bic.w	r2, r2, #1
 800a514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f990 	bl	800a83c <UART_SetConfig>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e022      	b.n	800a56c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fc36 	bl	800ada0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0201 	orr.w	r2, r2, #1
 800a562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fcbd 	bl	800aee4 <UART_CheckIdleState>
 800a56a:	4603      	mov	r3, r0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	f640 030f 	movw	r3, #2063	; 0x80f
 800a59a:	4013      	ands	r3, r2
 800a59c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d113      	bne.n	800a5cc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f003 0320 	and.w	r3, r3, #32
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00e      	beq.n	800a5cc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	f003 0320 	and.w	r3, r3, #32
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d009      	beq.n	800a5cc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 8114 	beq.w	800a7ea <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	4798      	blx	r3
      }
      return;
 800a5ca:	e10e      	b.n	800a7ea <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 80d6 	beq.w	800a780 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80cb 	beq.w	800a780 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00e      	beq.n	800a612 <HAL_UART_IRQHandler+0x9e>
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d009      	beq.n	800a612 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2201      	movs	r2, #1
 800a604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a60a:	f043 0201 	orr.w	r2, r3, #1
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	f003 0302 	and.w	r3, r3, #2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00e      	beq.n	800a63a <HAL_UART_IRQHandler+0xc6>
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2202      	movs	r2, #2
 800a62c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a632:	f043 0204 	orr.w	r2, r3, #4
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00e      	beq.n	800a662 <HAL_UART_IRQHandler+0xee>
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d009      	beq.n	800a662 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2204      	movs	r2, #4
 800a654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a65a:	f043 0202 	orr.w	r2, r3, #2
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d013      	beq.n	800a694 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2208      	movs	r2, #8
 800a686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a68c:	f043 0208 	orr.w	r2, r3, #8
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00f      	beq.n	800a6be <HAL_UART_IRQHandler+0x14a>
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00a      	beq.n	800a6be <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b6:	f043 0220 	orr.w	r2, r3, #32
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 8093 	beq.w	800a7ee <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00c      	beq.n	800a6ec <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	f003 0320 	and.w	r3, r3, #32
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fc:	2b40      	cmp	r3, #64	; 0x40
 800a6fe:	d004      	beq.n	800a70a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a706:	2b00      	cmp	r3, #0
 800a708:	d031      	beq.n	800a76e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fcab 	bl	800b066 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71a:	2b40      	cmp	r3, #64	; 0x40
 800a71c:	d123      	bne.n	800a766 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	689a      	ldr	r2, [r3, #8]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a72c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d013      	beq.n	800a75e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a73a:	4a30      	ldr	r2, [pc, #192]	; (800a7fc <HAL_UART_IRQHandler+0x288>)
 800a73c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a742:	4618      	mov	r0, r3
 800a744:	f7fd fde8 	bl	8008318 <HAL_DMA_Abort_IT>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d016      	beq.n	800a77c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a75c:	e00e      	b.n	800a77c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f858 	bl	800a814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a764:	e00a      	b.n	800a77c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f854 	bl	800a814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a76c:	e006      	b.n	800a77c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f850 	bl	800a814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a77a:	e038      	b.n	800a7ee <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a77c:	bf00      	nop
    return;
 800a77e:	e036      	b.n	800a7ee <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00d      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x232>
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d008      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a79c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f842 	bl	800a828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7a4:	e026      	b.n	800a7f4 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00d      	beq.n	800a7cc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d008      	beq.n	800a7cc <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d017      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	4798      	blx	r3
    }
    return;
 800a7ca:	e012      	b.n	800a7f2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00e      	beq.n	800a7f4 <HAL_UART_IRQHandler+0x280>
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d009      	beq.n	800a7f4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fc76 	bl	800b0d2 <UART_EndTransmit_IT>
    return;
 800a7e6:	bf00      	nop
 800a7e8:	e004      	b.n	800a7f4 <HAL_UART_IRQHandler+0x280>
      return;
 800a7ea:	bf00      	nop
 800a7ec:	e002      	b.n	800a7f4 <HAL_UART_IRQHandler+0x280>
    return;
 800a7ee:	bf00      	nop
 800a7f0:	e000      	b.n	800a7f4 <HAL_UART_IRQHandler+0x280>
    return;
 800a7f2:	bf00      	nop
  }

}
 800a7f4:	3720      	adds	r7, #32
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	0800b0a7 	.word	0x0800b0a7

0800a800 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a844:	2300      	movs	r3, #0
 800a846:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	689a      	ldr	r2, [r3, #8]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	431a      	orrs	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	431a      	orrs	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	4313      	orrs	r3, r2
 800a862:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	4bb1      	ldr	r3, [pc, #708]	; (800ab30 <UART_SetConfig+0x2f4>)
 800a86c:	4013      	ands	r3, r2
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	6812      	ldr	r2, [r2, #0]
 800a872:	6939      	ldr	r1, [r7, #16]
 800a874:	430b      	orrs	r3, r1
 800a876:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a9f      	ldr	r2, [pc, #636]	; (800ab34 <UART_SetConfig+0x2f8>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d121      	bne.n	800a900 <UART_SetConfig+0xc4>
 800a8bc:	4b9e      	ldr	r3, [pc, #632]	; (800ab38 <UART_SetConfig+0x2fc>)
 800a8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c2:	f003 0303 	and.w	r3, r3, #3
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d816      	bhi.n	800a8f8 <UART_SetConfig+0xbc>
 800a8ca:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <UART_SetConfig+0x94>)
 800a8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d0:	0800a8e1 	.word	0x0800a8e1
 800a8d4:	0800a8ed 	.word	0x0800a8ed
 800a8d8:	0800a8e7 	.word	0x0800a8e7
 800a8dc:	0800a8f3 	.word	0x0800a8f3
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	77fb      	strb	r3, [r7, #31]
 800a8e4:	e151      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	77fb      	strb	r3, [r7, #31]
 800a8ea:	e14e      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	77fb      	strb	r3, [r7, #31]
 800a8f0:	e14b      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a8f2:	2308      	movs	r3, #8
 800a8f4:	77fb      	strb	r3, [r7, #31]
 800a8f6:	e148      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a8f8:	2310      	movs	r3, #16
 800a8fa:	77fb      	strb	r3, [r7, #31]
 800a8fc:	bf00      	nop
 800a8fe:	e144      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a8d      	ldr	r2, [pc, #564]	; (800ab3c <UART_SetConfig+0x300>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d134      	bne.n	800a974 <UART_SetConfig+0x138>
 800a90a:	4b8b      	ldr	r3, [pc, #556]	; (800ab38 <UART_SetConfig+0x2fc>)
 800a90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a910:	f003 030c 	and.w	r3, r3, #12
 800a914:	2b0c      	cmp	r3, #12
 800a916:	d829      	bhi.n	800a96c <UART_SetConfig+0x130>
 800a918:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <UART_SetConfig+0xe4>)
 800a91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91e:	bf00      	nop
 800a920:	0800a955 	.word	0x0800a955
 800a924:	0800a96d 	.word	0x0800a96d
 800a928:	0800a96d 	.word	0x0800a96d
 800a92c:	0800a96d 	.word	0x0800a96d
 800a930:	0800a961 	.word	0x0800a961
 800a934:	0800a96d 	.word	0x0800a96d
 800a938:	0800a96d 	.word	0x0800a96d
 800a93c:	0800a96d 	.word	0x0800a96d
 800a940:	0800a95b 	.word	0x0800a95b
 800a944:	0800a96d 	.word	0x0800a96d
 800a948:	0800a96d 	.word	0x0800a96d
 800a94c:	0800a96d 	.word	0x0800a96d
 800a950:	0800a967 	.word	0x0800a967
 800a954:	2300      	movs	r3, #0
 800a956:	77fb      	strb	r3, [r7, #31]
 800a958:	e117      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a95a:	2302      	movs	r3, #2
 800a95c:	77fb      	strb	r3, [r7, #31]
 800a95e:	e114      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a960:	2304      	movs	r3, #4
 800a962:	77fb      	strb	r3, [r7, #31]
 800a964:	e111      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a966:	2308      	movs	r3, #8
 800a968:	77fb      	strb	r3, [r7, #31]
 800a96a:	e10e      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a96c:	2310      	movs	r3, #16
 800a96e:	77fb      	strb	r3, [r7, #31]
 800a970:	bf00      	nop
 800a972:	e10a      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a71      	ldr	r2, [pc, #452]	; (800ab40 <UART_SetConfig+0x304>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d120      	bne.n	800a9c0 <UART_SetConfig+0x184>
 800a97e:	4b6e      	ldr	r3, [pc, #440]	; (800ab38 <UART_SetConfig+0x2fc>)
 800a980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a984:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a988:	2b10      	cmp	r3, #16
 800a98a:	d00f      	beq.n	800a9ac <UART_SetConfig+0x170>
 800a98c:	2b10      	cmp	r3, #16
 800a98e:	d802      	bhi.n	800a996 <UART_SetConfig+0x15a>
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <UART_SetConfig+0x164>
 800a994:	e010      	b.n	800a9b8 <UART_SetConfig+0x17c>
 800a996:	2b20      	cmp	r3, #32
 800a998:	d005      	beq.n	800a9a6 <UART_SetConfig+0x16a>
 800a99a:	2b30      	cmp	r3, #48	; 0x30
 800a99c:	d009      	beq.n	800a9b2 <UART_SetConfig+0x176>
 800a99e:	e00b      	b.n	800a9b8 <UART_SetConfig+0x17c>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	77fb      	strb	r3, [r7, #31]
 800a9a4:	e0f1      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	77fb      	strb	r3, [r7, #31]
 800a9aa:	e0ee      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a9ac:	2304      	movs	r3, #4
 800a9ae:	77fb      	strb	r3, [r7, #31]
 800a9b0:	e0eb      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a9b2:	2308      	movs	r3, #8
 800a9b4:	77fb      	strb	r3, [r7, #31]
 800a9b6:	e0e8      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a9b8:	2310      	movs	r3, #16
 800a9ba:	77fb      	strb	r3, [r7, #31]
 800a9bc:	bf00      	nop
 800a9be:	e0e4      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a5f      	ldr	r2, [pc, #380]	; (800ab44 <UART_SetConfig+0x308>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d120      	bne.n	800aa0c <UART_SetConfig+0x1d0>
 800a9ca:	4b5b      	ldr	r3, [pc, #364]	; (800ab38 <UART_SetConfig+0x2fc>)
 800a9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a9d4:	2b40      	cmp	r3, #64	; 0x40
 800a9d6:	d00f      	beq.n	800a9f8 <UART_SetConfig+0x1bc>
 800a9d8:	2b40      	cmp	r3, #64	; 0x40
 800a9da:	d802      	bhi.n	800a9e2 <UART_SetConfig+0x1a6>
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d005      	beq.n	800a9ec <UART_SetConfig+0x1b0>
 800a9e0:	e010      	b.n	800aa04 <UART_SetConfig+0x1c8>
 800a9e2:	2b80      	cmp	r3, #128	; 0x80
 800a9e4:	d005      	beq.n	800a9f2 <UART_SetConfig+0x1b6>
 800a9e6:	2bc0      	cmp	r3, #192	; 0xc0
 800a9e8:	d009      	beq.n	800a9fe <UART_SetConfig+0x1c2>
 800a9ea:	e00b      	b.n	800aa04 <UART_SetConfig+0x1c8>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	77fb      	strb	r3, [r7, #31]
 800a9f0:	e0cb      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	77fb      	strb	r3, [r7, #31]
 800a9f6:	e0c8      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e0c5      	b.n	800ab8a <UART_SetConfig+0x34e>
 800a9fe:	2308      	movs	r3, #8
 800aa00:	77fb      	strb	r3, [r7, #31]
 800aa02:	e0c2      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aa04:	2310      	movs	r3, #16
 800aa06:	77fb      	strb	r3, [r7, #31]
 800aa08:	bf00      	nop
 800aa0a:	e0be      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a4d      	ldr	r2, [pc, #308]	; (800ab48 <UART_SetConfig+0x30c>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d124      	bne.n	800aa60 <UART_SetConfig+0x224>
 800aa16:	4b48      	ldr	r3, [pc, #288]	; (800ab38 <UART_SetConfig+0x2fc>)
 800aa18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa24:	d012      	beq.n	800aa4c <UART_SetConfig+0x210>
 800aa26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa2a:	d802      	bhi.n	800aa32 <UART_SetConfig+0x1f6>
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <UART_SetConfig+0x204>
 800aa30:	e012      	b.n	800aa58 <UART_SetConfig+0x21c>
 800aa32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa36:	d006      	beq.n	800aa46 <UART_SetConfig+0x20a>
 800aa38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa3c:	d009      	beq.n	800aa52 <UART_SetConfig+0x216>
 800aa3e:	e00b      	b.n	800aa58 <UART_SetConfig+0x21c>
 800aa40:	2300      	movs	r3, #0
 800aa42:	77fb      	strb	r3, [r7, #31]
 800aa44:	e0a1      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aa46:	2302      	movs	r3, #2
 800aa48:	77fb      	strb	r3, [r7, #31]
 800aa4a:	e09e      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aa4c:	2304      	movs	r3, #4
 800aa4e:	77fb      	strb	r3, [r7, #31]
 800aa50:	e09b      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aa52:	2308      	movs	r3, #8
 800aa54:	77fb      	strb	r3, [r7, #31]
 800aa56:	e098      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aa58:	2310      	movs	r3, #16
 800aa5a:	77fb      	strb	r3, [r7, #31]
 800aa5c:	bf00      	nop
 800aa5e:	e094      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a39      	ldr	r2, [pc, #228]	; (800ab4c <UART_SetConfig+0x310>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d124      	bne.n	800aab4 <UART_SetConfig+0x278>
 800aa6a:	4b33      	ldr	r3, [pc, #204]	; (800ab38 <UART_SetConfig+0x2fc>)
 800aa6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa78:	d012      	beq.n	800aaa0 <UART_SetConfig+0x264>
 800aa7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa7e:	d802      	bhi.n	800aa86 <UART_SetConfig+0x24a>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d007      	beq.n	800aa94 <UART_SetConfig+0x258>
 800aa84:	e012      	b.n	800aaac <UART_SetConfig+0x270>
 800aa86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa8a:	d006      	beq.n	800aa9a <UART_SetConfig+0x25e>
 800aa8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa90:	d009      	beq.n	800aaa6 <UART_SetConfig+0x26a>
 800aa92:	e00b      	b.n	800aaac <UART_SetConfig+0x270>
 800aa94:	2301      	movs	r3, #1
 800aa96:	77fb      	strb	r3, [r7, #31]
 800aa98:	e077      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	77fb      	strb	r3, [r7, #31]
 800aa9e:	e074      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aaa0:	2304      	movs	r3, #4
 800aaa2:	77fb      	strb	r3, [r7, #31]
 800aaa4:	e071      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aaa6:	2308      	movs	r3, #8
 800aaa8:	77fb      	strb	r3, [r7, #31]
 800aaaa:	e06e      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aaac:	2310      	movs	r3, #16
 800aaae:	77fb      	strb	r3, [r7, #31]
 800aab0:	bf00      	nop
 800aab2:	e06a      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a25      	ldr	r2, [pc, #148]	; (800ab50 <UART_SetConfig+0x314>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d124      	bne.n	800ab08 <UART_SetConfig+0x2cc>
 800aabe:	4b1e      	ldr	r3, [pc, #120]	; (800ab38 <UART_SetConfig+0x2fc>)
 800aac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aacc:	d012      	beq.n	800aaf4 <UART_SetConfig+0x2b8>
 800aace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad2:	d802      	bhi.n	800aada <UART_SetConfig+0x29e>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d007      	beq.n	800aae8 <UART_SetConfig+0x2ac>
 800aad8:	e012      	b.n	800ab00 <UART_SetConfig+0x2c4>
 800aada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aade:	d006      	beq.n	800aaee <UART_SetConfig+0x2b2>
 800aae0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aae4:	d009      	beq.n	800aafa <UART_SetConfig+0x2be>
 800aae6:	e00b      	b.n	800ab00 <UART_SetConfig+0x2c4>
 800aae8:	2300      	movs	r3, #0
 800aaea:	77fb      	strb	r3, [r7, #31]
 800aaec:	e04d      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aaee:	2302      	movs	r3, #2
 800aaf0:	77fb      	strb	r3, [r7, #31]
 800aaf2:	e04a      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aaf4:	2304      	movs	r3, #4
 800aaf6:	77fb      	strb	r3, [r7, #31]
 800aaf8:	e047      	b.n	800ab8a <UART_SetConfig+0x34e>
 800aafa:	2308      	movs	r3, #8
 800aafc:	77fb      	strb	r3, [r7, #31]
 800aafe:	e044      	b.n	800ab8a <UART_SetConfig+0x34e>
 800ab00:	2310      	movs	r3, #16
 800ab02:	77fb      	strb	r3, [r7, #31]
 800ab04:	bf00      	nop
 800ab06:	e040      	b.n	800ab8a <UART_SetConfig+0x34e>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a11      	ldr	r2, [pc, #68]	; (800ab54 <UART_SetConfig+0x318>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d139      	bne.n	800ab86 <UART_SetConfig+0x34a>
 800ab12:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <UART_SetConfig+0x2fc>)
 800ab14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab20:	d027      	beq.n	800ab72 <UART_SetConfig+0x336>
 800ab22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab26:	d817      	bhi.n	800ab58 <UART_SetConfig+0x31c>
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d01c      	beq.n	800ab66 <UART_SetConfig+0x32a>
 800ab2c:	e027      	b.n	800ab7e <UART_SetConfig+0x342>
 800ab2e:	bf00      	nop
 800ab30:	efff69f3 	.word	0xefff69f3
 800ab34:	40011000 	.word	0x40011000
 800ab38:	40023800 	.word	0x40023800
 800ab3c:	40004400 	.word	0x40004400
 800ab40:	40004800 	.word	0x40004800
 800ab44:	40004c00 	.word	0x40004c00
 800ab48:	40005000 	.word	0x40005000
 800ab4c:	40011400 	.word	0x40011400
 800ab50:	40007800 	.word	0x40007800
 800ab54:	40007c00 	.word	0x40007c00
 800ab58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab5c:	d006      	beq.n	800ab6c <UART_SetConfig+0x330>
 800ab5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab62:	d009      	beq.n	800ab78 <UART_SetConfig+0x33c>
 800ab64:	e00b      	b.n	800ab7e <UART_SetConfig+0x342>
 800ab66:	2300      	movs	r3, #0
 800ab68:	77fb      	strb	r3, [r7, #31]
 800ab6a:	e00e      	b.n	800ab8a <UART_SetConfig+0x34e>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	77fb      	strb	r3, [r7, #31]
 800ab70:	e00b      	b.n	800ab8a <UART_SetConfig+0x34e>
 800ab72:	2304      	movs	r3, #4
 800ab74:	77fb      	strb	r3, [r7, #31]
 800ab76:	e008      	b.n	800ab8a <UART_SetConfig+0x34e>
 800ab78:	2308      	movs	r3, #8
 800ab7a:	77fb      	strb	r3, [r7, #31]
 800ab7c:	e005      	b.n	800ab8a <UART_SetConfig+0x34e>
 800ab7e:	2310      	movs	r3, #16
 800ab80:	77fb      	strb	r3, [r7, #31]
 800ab82:	bf00      	nop
 800ab84:	e001      	b.n	800ab8a <UART_SetConfig+0x34e>
 800ab86:	2310      	movs	r3, #16
 800ab88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab92:	f040 8084 	bne.w	800ac9e <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800ab96:	7ffb      	ldrb	r3, [r7, #31]
 800ab98:	2b08      	cmp	r3, #8
 800ab9a:	d860      	bhi.n	800ac5e <UART_SetConfig+0x422>
 800ab9c:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <UART_SetConfig+0x368>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800abc9 	.word	0x0800abc9
 800aba8:	0800abeb 	.word	0x0800abeb
 800abac:	0800ac0d 	.word	0x0800ac0d
 800abb0:	0800ac5f 	.word	0x0800ac5f
 800abb4:	0800ac25 	.word	0x0800ac25
 800abb8:	0800ac5f 	.word	0x0800ac5f
 800abbc:	0800ac5f 	.word	0x0800ac5f
 800abc0:	0800ac5f 	.word	0x0800ac5f
 800abc4:	0800ac47 	.word	0x0800ac47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abc8:	f7ff f832 	bl	8009c30 <HAL_RCC_GetPCLK1Freq>
 800abcc:	4603      	mov	r3, r0
 800abce:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	005a      	lsls	r2, r3, #1
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	085b      	lsrs	r3, r3, #1
 800abda:	441a      	add	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	61bb      	str	r3, [r7, #24]
        break;
 800abe8:	e03c      	b.n	800ac64 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abea:	f7ff f835 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800abee:	4603      	mov	r3, r0
 800abf0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	005a      	lsls	r2, r3, #1
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	085b      	lsrs	r3, r3, #1
 800abfc:	441a      	add	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	61bb      	str	r3, [r7, #24]
        break;
 800ac0a:	e02b      	b.n	800ac64 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	085a      	lsrs	r2, r3, #1
 800ac12:	4b61      	ldr	r3, [pc, #388]	; (800ad98 <UART_SetConfig+0x55c>)
 800ac14:	4413      	add	r3, r2
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	6852      	ldr	r2, [r2, #4]
 800ac1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	61bb      	str	r3, [r7, #24]
        break;
 800ac22:	e01f      	b.n	800ac64 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac24:	f7fe ff20 	bl	8009a68 <HAL_RCC_GetSysClockFreq>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	005a      	lsls	r2, r3, #1
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	085b      	lsrs	r3, r3, #1
 800ac36:	441a      	add	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	61bb      	str	r3, [r7, #24]
        break;
 800ac44:	e00e      	b.n	800ac64 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	085b      	lsrs	r3, r3, #1
 800ac4c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	61bb      	str	r3, [r7, #24]
        break;
 800ac5c:	e002      	b.n	800ac64 <UART_SetConfig+0x428>
      default:
        ret = HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	75fb      	strb	r3, [r7, #23]
        break;
 800ac62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	2b0f      	cmp	r3, #15
 800ac68:	d916      	bls.n	800ac98 <UART_SetConfig+0x45c>
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac70:	d212      	bcs.n	800ac98 <UART_SetConfig+0x45c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	f023 030f 	bic.w	r3, r3, #15
 800ac7a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	085b      	lsrs	r3, r3, #1
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	897b      	ldrh	r3, [r7, #10]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	897a      	ldrh	r2, [r7, #10]
 800ac94:	60da      	str	r2, [r3, #12]
 800ac96:	e074      	b.n	800ad82 <UART_SetConfig+0x546>
    }
    else
    {
      ret = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	75fb      	strb	r3, [r7, #23]
 800ac9c:	e071      	b.n	800ad82 <UART_SetConfig+0x546>
    }
  }
  else
  {
    switch (clocksource)
 800ac9e:	7ffb      	ldrb	r3, [r7, #31]
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	d85d      	bhi.n	800ad60 <UART_SetConfig+0x524>
 800aca4:	a201      	add	r2, pc, #4	; (adr r2, 800acac <UART_SetConfig+0x470>)
 800aca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acaa:	bf00      	nop
 800acac:	0800acd1 	.word	0x0800acd1
 800acb0:	0800acf1 	.word	0x0800acf1
 800acb4:	0800ad11 	.word	0x0800ad11
 800acb8:	0800ad61 	.word	0x0800ad61
 800acbc:	0800ad29 	.word	0x0800ad29
 800acc0:	0800ad61 	.word	0x0800ad61
 800acc4:	0800ad61 	.word	0x0800ad61
 800acc8:	0800ad61 	.word	0x0800ad61
 800accc:	0800ad49 	.word	0x0800ad49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acd0:	f7fe ffae 	bl	8009c30 <HAL_RCC_GetPCLK1Freq>
 800acd4:	4603      	mov	r3, r0
 800acd6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	085a      	lsrs	r2, r3, #1
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	441a      	add	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acea:	b29b      	uxth	r3, r3
 800acec:	61bb      	str	r3, [r7, #24]
        break;
 800acee:	e03a      	b.n	800ad66 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acf0:	f7fe ffb2 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800acf4:	4603      	mov	r3, r0
 800acf6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	085a      	lsrs	r2, r3, #1
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	441a      	add	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	61bb      	str	r3, [r7, #24]
        break;
 800ad0e:	e02a      	b.n	800ad66 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	085a      	lsrs	r2, r3, #1
 800ad16:	4b21      	ldr	r3, [pc, #132]	; (800ad9c <UART_SetConfig+0x560>)
 800ad18:	4413      	add	r3, r2
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	6852      	ldr	r2, [r2, #4]
 800ad1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	61bb      	str	r3, [r7, #24]
        break;
 800ad26:	e01e      	b.n	800ad66 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad28:	f7fe fe9e 	bl	8009a68 <HAL_RCC_GetSysClockFreq>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	085a      	lsrs	r2, r3, #1
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	441a      	add	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	61bb      	str	r3, [r7, #24]
        break;
 800ad46:	e00e      	b.n	800ad66 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	085b      	lsrs	r3, r3, #1
 800ad4e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	61bb      	str	r3, [r7, #24]
        break;
 800ad5e:	e002      	b.n	800ad66 <UART_SetConfig+0x52a>
      default:
        ret = HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	75fb      	strb	r3, [r7, #23]
        break;
 800ad64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b0f      	cmp	r3, #15
 800ad6a:	d908      	bls.n	800ad7e <UART_SetConfig+0x542>
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad72:	d204      	bcs.n	800ad7e <UART_SetConfig+0x542>
    {
      huart->Instance->BRR = usartdiv;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	60da      	str	r2, [r3, #12]
 800ad7c:	e001      	b.n	800ad82 <UART_SetConfig+0x546>
    }
    else
    {
      ret = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3720      	adds	r7, #32
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	01e84800 	.word	0x01e84800
 800ad9c:	00f42400 	.word	0x00f42400

0800ada0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00a      	beq.n	800adca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	430a      	orrs	r2, r1
 800adc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adce:	f003 0302 	and.w	r3, r3, #2
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00a      	beq.n	800adec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	430a      	orrs	r2, r1
 800adea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00a      	beq.n	800ae0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae12:	f003 0308 	and.w	r3, r3, #8
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	f003 0310 	and.w	r3, r3, #16
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00a      	beq.n	800ae52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	f003 0320 	and.w	r3, r3, #32
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d01a      	beq.n	800aeb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae9e:	d10a      	bne.n	800aeb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	430a      	orrs	r2, r1
 800aeb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00a      	beq.n	800aed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	430a      	orrs	r2, r1
 800aed6:	605a      	str	r2, [r3, #4]
  }
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aef2:	f7fd f8cf 	bl	8008094 <HAL_GetTick>
 800aef6:	4603      	mov	r3, r0
 800aef8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0308 	and.w	r3, r3, #8
 800af04:	2b08      	cmp	r3, #8
 800af06:	d10e      	bne.n	800af26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f82a 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af22:	2303      	movs	r3, #3
 800af24:	e020      	b.n	800af68 <UART_CheckIdleState+0x84>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0304 	and.w	r3, r3, #4
 800af30:	2b04      	cmp	r3, #4
 800af32:	d10e      	bne.n	800af52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f814 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e00a      	b.n	800af68 <UART_CheckIdleState+0x84>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2220      	movs	r2, #32
 800af56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2220      	movs	r2, #32
 800af5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	4613      	mov	r3, r2
 800af7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af80:	e05d      	b.n	800b03e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af88:	d059      	beq.n	800b03e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af8a:	f7fd f883 	bl	8008094 <HAL_GetTick>
 800af8e:	4602      	mov	r2, r0
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	69ba      	ldr	r2, [r7, #24]
 800af96:	429a      	cmp	r2, r3
 800af98:	d302      	bcc.n	800afa0 <UART_WaitOnFlagUntilTimeout+0x30>
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d11b      	bne.n	800afd8 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800afae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 0201 	bic.w	r2, r2, #1
 800afbe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2220      	movs	r2, #32
 800afc4:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2220      	movs	r2, #32
 800afca:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e042      	b.n	800b05e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0304 	and.w	r3, r3, #4
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d02b      	beq.n	800b03e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	69db      	ldr	r3, [r3, #28]
 800afec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aff4:	d123      	bne.n	800b03e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800affe:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b00e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689a      	ldr	r2, [r3, #8]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f022 0201 	bic.w	r2, r2, #1
 800b01e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2220      	movs	r2, #32
 800b024:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2220      	movs	r2, #32
 800b02a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2220      	movs	r2, #32
 800b030:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e00f      	b.n	800b05e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69da      	ldr	r2, [r3, #28]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	4013      	ands	r3, r2
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	bf0c      	ite	eq
 800b04e:	2301      	moveq	r3, #1
 800b050:	2300      	movne	r3, #0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	461a      	mov	r2, r3
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d092      	beq.n	800af82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b07c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f022 0201 	bic.w	r2, r2, #1
 800b08c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2220      	movs	r2, #32
 800b092:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff fba5 	bl	800a814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2220      	movs	r2, #32
 800b0ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff fb82 	bl	800a800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0fc:	bf00      	nop
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b104:	b084      	sub	sp, #16
 800b106:	b580      	push	{r7, lr}
 800b108:	b084      	sub	sp, #16
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	f107 001c 	add.w	r0, r7, #28
 800b112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d120      	bne.n	800b15e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68da      	ldr	r2, [r3, #12]
 800b12c:	4b20      	ldr	r3, [pc, #128]	; (800b1b0 <USB_CoreInit+0xac>)
 800b12e:	4013      	ands	r3, r2
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b142:	2b01      	cmp	r3, #1
 800b144:	d105      	bne.n	800b152 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa52 	bl	800b5fc <USB_CoreReset>
 800b158:	4603      	mov	r3, r0
 800b15a:	73fb      	strb	r3, [r7, #15]
 800b15c:	e010      	b.n	800b180 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fa46 	bl	800b5fc <USB_CoreReset>
 800b170:	4603      	mov	r3, r0
 800b172:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b178:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	2b01      	cmp	r3, #1
 800b184:	d10b      	bne.n	800b19e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f043 0206 	orr.w	r2, r3, #6
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	f043 0220 	orr.w	r2, r3, #32
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1aa:	b004      	add	sp, #16
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	ffbdffbf 	.word	0xffbdffbf

0800b1b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f023 0201 	bic.w	r2, r3, #1
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b082      	sub	sp, #8
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b1ee:	78fb      	ldrb	r3, [r7, #3]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d106      	bne.n	800b202 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	60da      	str	r2, [r3, #12]
 800b200:	e00b      	b.n	800b21a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b202:	78fb      	ldrb	r3, [r7, #3]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d106      	bne.n	800b216 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	60da      	str	r2, [r3, #12]
 800b214:	e001      	b.n	800b21a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e003      	b.n	800b222 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b21a:	2032      	movs	r0, #50	; 0x32
 800b21c:	f7fc ff46 	bl	80080ac <HAL_Delay>

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b22c:	b084      	sub	sp, #16
 800b22e:	b580      	push	{r7, lr}
 800b230:	b086      	sub	sp, #24
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b23a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b246:	2300      	movs	r3, #0
 800b248:	613b      	str	r3, [r7, #16]
 800b24a:	e009      	b.n	800b260 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	3340      	adds	r3, #64	; 0x40
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	2200      	movs	r2, #0
 800b258:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	3301      	adds	r3, #1
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	2b0e      	cmp	r3, #14
 800b264:	d9f2      	bls.n	800b24c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d11c      	bne.n	800b2a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b27a:	f043 0302 	orr.w	r3, r3, #2
 800b27e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b284:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	e005      	b.n	800b2b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	680b      	ldr	r3, [r1, #0]
 800b2d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d10c      	bne.n	800b2f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d104      	bne.n	800b2e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b2de:	2100      	movs	r1, #0
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f959 	bl	800b598 <USB_SetDevSpeed>
 800b2e6:	e018      	b.n	800b31a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f954 	bl	800b598 <USB_SetDevSpeed>
 800b2f0:	e013      	b.n	800b31a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800b2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d10c      	bne.n	800b312 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d104      	bne.n	800b308 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b2fe:	2100      	movs	r1, #0
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f949 	bl	800b598 <USB_SetDevSpeed>
 800b306:	e008      	b.n	800b31a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b308:	2101      	movs	r1, #1
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f944 	bl	800b598 <USB_SetDevSpeed>
 800b310:	e003      	b.n	800b31a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b312:	2103      	movs	r1, #3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f93f 	bl	800b598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b31a:	2110      	movs	r1, #16
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f8f3 	bl	800b508 <USB_FlushTxFifo>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f911 	bl	800b554 <USB_FlushRxFifo>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b342:	461a      	mov	r2, r3
 800b344:	2300      	movs	r3, #0
 800b346:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34e:	461a      	mov	r2, r3
 800b350:	2300      	movs	r3, #0
 800b352:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b35a:	461a      	mov	r2, r3
 800b35c:	2300      	movs	r3, #0
 800b35e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b360:	2300      	movs	r3, #0
 800b362:	613b      	str	r3, [r7, #16]
 800b364:	e043      	b.n	800b3ee <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b37c:	d118      	bne.n	800b3b0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b390:	461a      	mov	r2, r3
 800b392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	e013      	b.n	800b3c2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	e008      	b.n	800b3c2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3bc:	461a      	mov	r2, r3
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	015a      	lsls	r2, r3, #5
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	613b      	str	r3, [r7, #16]
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d3b7      	bcc.n	800b366 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	613b      	str	r3, [r7, #16]
 800b3fa:	e043      	b.n	800b484 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b40e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b412:	d118      	bne.n	800b446 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10a      	bne.n	800b430 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b426:	461a      	mov	r2, r3
 800b428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	e013      	b.n	800b458 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43c:	461a      	mov	r2, r3
 800b43e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	e008      	b.n	800b458 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b452:	461a      	mov	r2, r3
 800b454:	2300      	movs	r3, #0
 800b456:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b464:	461a      	mov	r2, r3
 800b466:	2300      	movs	r3, #0
 800b468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b476:	461a      	mov	r2, r3
 800b478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b47c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	3301      	adds	r3, #1
 800b482:	613b      	str	r3, [r7, #16]
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d3b7      	bcc.n	800b3fc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b49a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b49e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b4ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d105      	bne.n	800b4c0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	f043 0210 	orr.w	r2, r3, #16
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	699a      	ldr	r2, [r3, #24]
 800b4c4:	4b0e      	ldr	r3, [pc, #56]	; (800b500 <USB_DevInit+0x2d4>)
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d005      	beq.n	800b4de <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	f043 0208 	orr.w	r2, r3, #8
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d105      	bne.n	800b4f0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	699a      	ldr	r2, [r3, #24]
 800b4e8:	4b06      	ldr	r3, [pc, #24]	; (800b504 <USB_DevInit+0x2d8>)
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4fc:	b004      	add	sp, #16
 800b4fe:	4770      	bx	lr
 800b500:	803c3800 	.word	0x803c3800
 800b504:	40000004 	.word	0x40000004

0800b508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b512:	2300      	movs	r3, #0
 800b514:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	019b      	lsls	r3, r3, #6
 800b51a:	f043 0220 	orr.w	r2, r3, #32
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	3301      	adds	r3, #1
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4a09      	ldr	r2, [pc, #36]	; (800b550 <USB_FlushTxFifo+0x48>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d901      	bls.n	800b534 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	e006      	b.n	800b542 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	f003 0320 	and.w	r3, r3, #32
 800b53c:	2b20      	cmp	r3, #32
 800b53e:	d0f0      	beq.n	800b522 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	00030d40 	.word	0x00030d40

0800b554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2210      	movs	r2, #16
 800b564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	3301      	adds	r3, #1
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4a09      	ldr	r2, [pc, #36]	; (800b594 <USB_FlushRxFifo+0x40>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d901      	bls.n	800b578 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b574:	2303      	movs	r3, #3
 800b576:	e006      	b.n	800b586 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	f003 0310 	and.w	r3, r3, #16
 800b580:	2b10      	cmp	r3, #16
 800b582:	d0f0      	beq.n	800b566 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	00030d40 	.word	0x00030d40

0800b598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	68f9      	ldr	r1, [r7, #12]
 800b5b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5e4:	f043 0302 	orr.w	r3, r3, #2
 800b5e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b5ea:	2003      	movs	r0, #3
 800b5ec:	f7fc fd5e 	bl	80080ac <HAL_Delay>

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
	...

0800b5fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	3301      	adds	r3, #1
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	4a13      	ldr	r2, [pc, #76]	; (800b660 <USB_CoreReset+0x64>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d901      	bls.n	800b61a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b616:	2303      	movs	r3, #3
 800b618:	e01b      	b.n	800b652 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	daf2      	bge.n	800b608 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b622:	2300      	movs	r3, #0
 800b624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	f043 0201 	orr.w	r2, r3, #1
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	3301      	adds	r3, #1
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	4a09      	ldr	r2, [pc, #36]	; (800b660 <USB_CoreReset+0x64>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d901      	bls.n	800b644 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	e006      	b.n	800b652 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d0f0      	beq.n	800b632 <USB_CoreReset+0x36>

  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3714      	adds	r7, #20
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	00030d40 	.word	0x00030d40

0800b664 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800b668:	4b1c      	ldr	r3, [pc, #112]	; (800b6dc <MX_ETH_Init+0x78>)
 800b66a:	4a1d      	ldr	r2, [pc, #116]	; (800b6e0 <MX_ETH_Init+0x7c>)
 800b66c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b66e:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <MX_ETH_Init+0x78>)
 800b670:	2201      	movs	r2, #1
 800b672:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b674:	4b19      	ldr	r3, [pc, #100]	; (800b6dc <MX_ETH_Init+0x78>)
 800b676:	2200      	movs	r2, #0
 800b678:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800b67a:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <MX_ETH_Init+0x78>)
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	2200      	movs	r2, #0
 800b680:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800b682:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <MX_ETH_Init+0x78>)
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	3301      	adds	r3, #1
 800b688:	2280      	movs	r2, #128	; 0x80
 800b68a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800b68c:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <MX_ETH_Init+0x78>)
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	3302      	adds	r3, #2
 800b692:	22e1      	movs	r2, #225	; 0xe1
 800b694:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800b696:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <MX_ETH_Init+0x78>)
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	3303      	adds	r3, #3
 800b69c:	2200      	movs	r2, #0
 800b69e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800b6a0:	4b0e      	ldr	r3, [pc, #56]	; (800b6dc <MX_ETH_Init+0x78>)
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800b6aa:	4b0c      	ldr	r3, [pc, #48]	; (800b6dc <MX_ETH_Init+0x78>)
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	3305      	adds	r3, #5
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800b6b4:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <MX_ETH_Init+0x78>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b6ba:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <MX_ETH_Init+0x78>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b6c0:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <MX_ETH_Init+0x78>)
 800b6c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b6c6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800b6c8:	4804      	ldr	r0, [pc, #16]	; (800b6dc <MX_ETH_Init+0x78>)
 800b6ca:	f7fc fe47 	bl	800835c <HAL_ETH_Init>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800b6d4:	f000 fa3c 	bl	800bb50 <Error_Handler>
  }

}
 800b6d8:	bf00      	nop
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	20000a38 	.word	0x20000a38
 800b6e0:	40028000 	.word	0x40028000

0800b6e4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08e      	sub	sp, #56	; 0x38
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	605a      	str	r2, [r3, #4]
 800b6f6:	609a      	str	r2, [r3, #8]
 800b6f8:	60da      	str	r2, [r3, #12]
 800b6fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a4e      	ldr	r2, [pc, #312]	; (800b83c <HAL_ETH_MspInit+0x158>)
 800b702:	4293      	cmp	r3, r2
 800b704:	f040 8096 	bne.w	800b834 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b708:	4b4d      	ldr	r3, [pc, #308]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70c:	4a4c      	ldr	r2, [pc, #304]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b70e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b712:	6313      	str	r3, [r2, #48]	; 0x30
 800b714:	4b4a      	ldr	r3, [pc, #296]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b71c:	623b      	str	r3, [r7, #32]
 800b71e:	6a3b      	ldr	r3, [r7, #32]
 800b720:	4b47      	ldr	r3, [pc, #284]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b724:	4a46      	ldr	r2, [pc, #280]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b726:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b72a:	6313      	str	r3, [r2, #48]	; 0x30
 800b72c:	4b44      	ldr	r3, [pc, #272]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b734:	61fb      	str	r3, [r7, #28]
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	4b41      	ldr	r3, [pc, #260]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73c:	4a40      	ldr	r2, [pc, #256]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b73e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b742:	6313      	str	r3, [r2, #48]	; 0x30
 800b744:	4b3e      	ldr	r3, [pc, #248]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b74c:	61bb      	str	r3, [r7, #24]
 800b74e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b750:	4b3b      	ldr	r3, [pc, #236]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b754:	4a3a      	ldr	r2, [pc, #232]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b756:	f043 0304 	orr.w	r3, r3, #4
 800b75a:	6313      	str	r3, [r2, #48]	; 0x30
 800b75c:	4b38      	ldr	r3, [pc, #224]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	617b      	str	r3, [r7, #20]
 800b766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b768:	4b35      	ldr	r3, [pc, #212]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76c:	4a34      	ldr	r2, [pc, #208]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b76e:	f043 0301 	orr.w	r3, r3, #1
 800b772:	6313      	str	r3, [r2, #48]	; 0x30
 800b774:	4b32      	ldr	r3, [pc, #200]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b778:	f003 0301 	and.w	r3, r3, #1
 800b77c:	613b      	str	r3, [r7, #16]
 800b77e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b780:	4b2f      	ldr	r3, [pc, #188]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b784:	4a2e      	ldr	r2, [pc, #184]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b786:	f043 0302 	orr.w	r3, r3, #2
 800b78a:	6313      	str	r3, [r2, #48]	; 0x30
 800b78c:	4b2c      	ldr	r3, [pc, #176]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b790:	f003 0302 	and.w	r3, r3, #2
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b798:	4b29      	ldr	r3, [pc, #164]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79c:	4a28      	ldr	r2, [pc, #160]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7a2:	6313      	str	r3, [r2, #48]	; 0x30
 800b7a4:	4b26      	ldr	r3, [pc, #152]	; (800b840 <HAL_ETH_MspInit+0x15c>)
 800b7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ac:	60bb      	str	r3, [r7, #8]
 800b7ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b7b0:	2332      	movs	r3, #50	; 0x32
 800b7b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b7c0:	230b      	movs	r3, #11
 800b7c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	481e      	ldr	r0, [pc, #120]	; (800b844 <HAL_ETH_MspInit+0x160>)
 800b7cc:	f7fd fa38 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b7d0:	2386      	movs	r3, #134	; 0x86
 800b7d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b7e0:	230b      	movs	r3, #11
 800b7e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4817      	ldr	r0, [pc, #92]	; (800b848 <HAL_ETH_MspInit+0x164>)
 800b7ec:	f7fd fa28 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b7f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7fe:	2303      	movs	r3, #3
 800b800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b802:	230b      	movs	r3, #11
 800b804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b80a:	4619      	mov	r1, r3
 800b80c:	480f      	ldr	r0, [pc, #60]	; (800b84c <HAL_ETH_MspInit+0x168>)
 800b80e:	f7fd fa17 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b812:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b818:	2302      	movs	r3, #2
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b81c:	2300      	movs	r3, #0
 800b81e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b820:	2303      	movs	r3, #3
 800b822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b824:	230b      	movs	r3, #11
 800b826:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b82c:	4619      	mov	r1, r3
 800b82e:	4808      	ldr	r0, [pc, #32]	; (800b850 <HAL_ETH_MspInit+0x16c>)
 800b830:	f7fd fa06 	bl	8008c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b834:	bf00      	nop
 800b836:	3738      	adds	r7, #56	; 0x38
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	40028000 	.word	0x40028000
 800b840:	40023800 	.word	0x40023800
 800b844:	40020800 	.word	0x40020800
 800b848:	40020000 	.word	0x40020000
 800b84c:	40020400 	.word	0x40020400
 800b850:	40021800 	.word	0x40021800

0800b854 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08c      	sub	sp, #48	; 0x30
 800b858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b85a:	f107 031c 	add.w	r3, r7, #28
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	605a      	str	r2, [r3, #4]
 800b864:	609a      	str	r2, [r3, #8]
 800b866:	60da      	str	r2, [r3, #12]
 800b868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b86a:	4b46      	ldr	r3, [pc, #280]	; (800b984 <MX_GPIO_Init+0x130>)
 800b86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86e:	4a45      	ldr	r2, [pc, #276]	; (800b984 <MX_GPIO_Init+0x130>)
 800b870:	f043 0304 	orr.w	r3, r3, #4
 800b874:	6313      	str	r3, [r2, #48]	; 0x30
 800b876:	4b43      	ldr	r3, [pc, #268]	; (800b984 <MX_GPIO_Init+0x130>)
 800b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87a:	f003 0304 	and.w	r3, r3, #4
 800b87e:	61bb      	str	r3, [r7, #24]
 800b880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b882:	4b40      	ldr	r3, [pc, #256]	; (800b984 <MX_GPIO_Init+0x130>)
 800b884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b886:	4a3f      	ldr	r2, [pc, #252]	; (800b984 <MX_GPIO_Init+0x130>)
 800b888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b88c:	6313      	str	r3, [r2, #48]	; 0x30
 800b88e:	4b3d      	ldr	r3, [pc, #244]	; (800b984 <MX_GPIO_Init+0x130>)
 800b890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b89a:	4b3a      	ldr	r3, [pc, #232]	; (800b984 <MX_GPIO_Init+0x130>)
 800b89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89e:	4a39      	ldr	r2, [pc, #228]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8a0:	f043 0301 	orr.w	r3, r3, #1
 800b8a4:	6313      	str	r3, [r2, #48]	; 0x30
 800b8a6:	4b37      	ldr	r3, [pc, #220]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8aa:	f003 0301 	and.w	r3, r3, #1
 800b8ae:	613b      	str	r3, [r7, #16]
 800b8b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b8b2:	4b34      	ldr	r3, [pc, #208]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b6:	4a33      	ldr	r2, [pc, #204]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8b8:	f043 0302 	orr.w	r3, r3, #2
 800b8bc:	6313      	str	r3, [r2, #48]	; 0x30
 800b8be:	4b31      	ldr	r3, [pc, #196]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c2:	f003 0302 	and.w	r3, r3, #2
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b8ca:	4b2e      	ldr	r3, [pc, #184]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ce:	4a2d      	ldr	r2, [pc, #180]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8d0:	f043 0308 	orr.w	r3, r3, #8
 800b8d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b8d6:	4b2b      	ldr	r3, [pc, #172]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8da:	f003 0308 	and.w	r3, r3, #8
 800b8de:	60bb      	str	r3, [r7, #8]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b8e2:	4b28      	ldr	r3, [pc, #160]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e6:	4a27      	ldr	r2, [pc, #156]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b8ee:	4b25      	ldr	r3, [pc, #148]	; (800b984 <MX_GPIO_Init+0x130>)
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f6:	607b      	str	r3, [r7, #4]
 800b8f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800b900:	4821      	ldr	r0, [pc, #132]	; (800b988 <MX_GPIO_Init+0x134>)
 800b902:	f7fd fb47 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800b906:	2200      	movs	r2, #0
 800b908:	2140      	movs	r1, #64	; 0x40
 800b90a:	4820      	ldr	r0, [pc, #128]	; (800b98c <MX_GPIO_Init+0x138>)
 800b90c:	f7fd fb42 	bl	8008f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800b910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b916:	4b1e      	ldr	r3, [pc, #120]	; (800b990 <MX_GPIO_Init+0x13c>)
 800b918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800b91e:	f107 031c 	add.w	r3, r7, #28
 800b922:	4619      	mov	r1, r3
 800b924:	481b      	ldr	r0, [pc, #108]	; (800b994 <MX_GPIO_Init+0x140>)
 800b926:	f7fd f98b 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800b92a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800b92e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b930:	2301      	movs	r3, #1
 800b932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b934:	2300      	movs	r3, #0
 800b936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b938:	2300      	movs	r3, #0
 800b93a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b93c:	f107 031c 	add.w	r3, r7, #28
 800b940:	4619      	mov	r1, r3
 800b942:	4811      	ldr	r0, [pc, #68]	; (800b988 <MX_GPIO_Init+0x134>)
 800b944:	f7fd f97c 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800b948:	2340      	movs	r3, #64	; 0x40
 800b94a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b94c:	2301      	movs	r3, #1
 800b94e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b950:	2300      	movs	r3, #0
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b954:	2300      	movs	r3, #0
 800b956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800b958:	f107 031c 	add.w	r3, r7, #28
 800b95c:	4619      	mov	r1, r3
 800b95e:	480b      	ldr	r0, [pc, #44]	; (800b98c <MX_GPIO_Init+0x138>)
 800b960:	f7fd f96e 	bl	8008c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b964:	2380      	movs	r3, #128	; 0x80
 800b966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b968:	2300      	movs	r3, #0
 800b96a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b970:	f107 031c 	add.w	r3, r7, #28
 800b974:	4619      	mov	r1, r3
 800b976:	4805      	ldr	r0, [pc, #20]	; (800b98c <MX_GPIO_Init+0x138>)
 800b978:	f7fd f962 	bl	8008c40 <HAL_GPIO_Init>

}
 800b97c:	bf00      	nop
 800b97e:	3730      	adds	r7, #48	; 0x30
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	40023800 	.word	0x40023800
 800b988:	40020400 	.word	0x40020400
 800b98c:	40021800 	.word	0x40021800
 800b990:	10110000 	.word	0x10110000
 800b994:	40020800 	.word	0x40020800

0800b998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int test = 0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	607b      	str	r3, [r7, #4]
	try{
		throw 1;
 800b9a2:	2004      	movs	r0, #4
 800b9a4:	f001 f9c2 	bl	800cd2c <__cxa_allocate_exception>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	6003      	str	r3, [r0, #0]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	4911      	ldr	r1, [pc, #68]	; (800b9f8 <main+0x60>)
 800b9b4:	f000 ff88 	bl	800c8c8 <__cxa_throw>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b9b8:	e7fe      	b.n	800b9b8 <main+0x20>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d001      	beq.n	800b9c6 <main+0x2e>
 800b9c2:	f000 fb2a 	bl	800c01a <__cxa_end_cleanup>
	}catch (int e){
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 ffd1 	bl	800c970 <__cxa_begin_catch>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	603b      	str	r3, [r7, #0]
		test = 1;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	607b      	str	r3, [r7, #4]
	}catch (int e){
 800b9d8:	f001 f80a 	bl	800c9f0 <__cxa_end_catch>
  HAL_Init();
 800b9dc:	f7fc fb08 	bl	8007ff0 <HAL_Init>
  SystemClock_Config();
 800b9e0:	f000 f80c 	bl	800b9fc <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800b9e4:	f7ff ff36 	bl	800b854 <MX_GPIO_Init>
  MX_ETH_Init();
 800b9e8:	f7ff fe3c 	bl	800b664 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800b9ec:	f000 f9e6 	bl	800bdbc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800b9f0:	f000 fa60 	bl	800beb4 <MX_USB_OTG_FS_PCD_Init>
 800b9f4:	e7e0      	b.n	800b9b8 <main+0x20>
 800b9f6:	bf00      	nop
 800b9f8:	0801187c 	.word	0x0801187c

0800b9fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b0b8      	sub	sp, #224	; 0xe0
 800ba00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ba06:	2234      	movs	r2, #52	; 0x34
 800ba08:	2100      	movs	r1, #0
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f002 f86d 	bl	800daea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ba10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	609a      	str	r2, [r3, #8]
 800ba1c:	60da      	str	r2, [r3, #12]
 800ba1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ba20:	f107 0308 	add.w	r3, r7, #8
 800ba24:	2290      	movs	r2, #144	; 0x90
 800ba26:	2100      	movs	r1, #0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f002 f85e 	bl	800daea <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800ba2e:	f7fd fc13 	bl	8009258 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ba32:	4b44      	ldr	r3, [pc, #272]	; (800bb44 <_Z18SystemClock_Configv+0x148>)
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	4a43      	ldr	r2, [pc, #268]	; (800bb44 <_Z18SystemClock_Configv+0x148>)
 800ba38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba3c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba3e:	4b41      	ldr	r3, [pc, #260]	; (800bb44 <_Z18SystemClock_Configv+0x148>)
 800ba40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba46:	607b      	str	r3, [r7, #4]
 800ba48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ba4a:	4b3f      	ldr	r3, [pc, #252]	; (800bb48 <_Z18SystemClock_Configv+0x14c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ba52:	4a3d      	ldr	r2, [pc, #244]	; (800bb48 <_Z18SystemClock_Configv+0x14c>)
 800ba54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba58:	6013      	str	r3, [r2, #0]
 800ba5a:	4b3b      	ldr	r3, [pc, #236]	; (800bb48 <_Z18SystemClock_Configv+0x14c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ba62:	603b      	str	r3, [r7, #0]
 800ba64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ba66:	2301      	movs	r3, #1
 800ba68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ba6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ba70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ba74:	2302      	movs	r3, #2
 800ba76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ba7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ba82:	2304      	movs	r3, #4
 800ba84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800ba88:	2360      	movs	r3, #96	; 0x60
 800ba8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ba8e:	2302      	movs	r3, #2
 800ba90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ba94:	2304      	movs	r3, #4
 800ba96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ba9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fd fc3c 	bl	800931c <HAL_RCC_OscConfig>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bf14      	ite	ne
 800baaa:	2301      	movne	r3, #1
 800baac:	2300      	moveq	r3, #0
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800bab4:	f000 f84c 	bl	800bb50 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800bab8:	f7fd fbde 	bl	8009278 <HAL_PWREx_EnableOverDrive>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bf14      	ite	ne
 800bac2:	2301      	movne	r3, #1
 800bac4:	2300      	moveq	r3, #0
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800bacc:	f000 f840 	bl	800bb50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bad0:	230f      	movs	r3, #15
 800bad2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bad6:	2302      	movs	r3, #2
 800bad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800badc:	2300      	movs	r3, #0
 800bade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800bae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800baea:	2300      	movs	r3, #0
 800baec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800baf0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800baf4:	2103      	movs	r1, #3
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fd feca 	bl	8009890 <HAL_RCC_ClockConfig>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bf14      	ite	ne
 800bb02:	2301      	movne	r3, #1
 800bb04:	2300      	moveq	r3, #0
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 800bb0c:	f000 f820 	bl	800bb50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800bb10:	4b0e      	ldr	r3, [pc, #56]	; (800bb4c <_Z18SystemClock_Configv+0x150>)
 800bb12:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800bb14:	2300      	movs	r3, #0
 800bb16:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb1e:	f107 0308 	add.w	r3, r7, #8
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fe f8ac 	bl	8009c80 <HAL_RCCEx_PeriphCLKConfig>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bf14      	ite	ne
 800bb2e:	2301      	movne	r3, #1
 800bb30:	2300      	moveq	r3, #0
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <_Z18SystemClock_Configv+0x140>
  {
    Error_Handler();
 800bb38:	f000 f80a 	bl	800bb50 <Error_Handler>
  }
}
 800bb3c:	bf00      	nop
 800bb3e:	37e0      	adds	r7, #224	; 0xe0
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	40023800 	.word	0x40023800
 800bb48:	40007000 	.word	0x40007000
 800bb4c:	00200100 	.word	0x00200100

0800bb50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bb50:	b480      	push	{r7}
 800bb52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bb54:	bf00      	nop
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
	...

0800bb60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800bb66:	4b0f      	ldr	r3, [pc, #60]	; (800bba4 <HAL_MspInit+0x44>)
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	4a0e      	ldr	r2, [pc, #56]	; (800bba4 <HAL_MspInit+0x44>)
 800bb6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb70:	6413      	str	r3, [r2, #64]	; 0x40
 800bb72:	4b0c      	ldr	r3, [pc, #48]	; (800bba4 <HAL_MspInit+0x44>)
 800bb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb7a:	607b      	str	r3, [r7, #4]
 800bb7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb7e:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <HAL_MspInit+0x44>)
 800bb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb82:	4a08      	ldr	r2, [pc, #32]	; (800bba4 <HAL_MspInit+0x44>)
 800bb84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb88:	6453      	str	r3, [r2, #68]	; 0x44
 800bb8a:	4b06      	ldr	r3, [pc, #24]	; (800bba4 <HAL_MspInit+0x44>)
 800bb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bb96:	bf00      	nop
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	40023800 	.word	0x40023800

0800bba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bbac:	bf00      	nop
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bbba:	e7fe      	b.n	800bbba <HardFault_Handler+0x4>

0800bbbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bbc0:	e7fe      	b.n	800bbc0 <MemManage_Handler+0x4>

0800bbc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bbc6:	e7fe      	b.n	800bbc6 <BusFault_Handler+0x4>

0800bbc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bbcc:	e7fe      	b.n	800bbcc <UsageFault_Handler+0x4>

0800bbce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bbd2:	bf00      	nop
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bbe0:	bf00      	nop
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bbea:	b480      	push	{r7}
 800bbec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bbee:	bf00      	nop
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bbfc:	f7fc fa36 	bl	800806c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bc00:	bf00      	nop
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800bc08:	4802      	ldr	r0, [pc, #8]	; (800bc14 <USART3_IRQHandler+0x10>)
 800bc0a:	f7fe fcb3 	bl	800a574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800bc0e:	bf00      	nop
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	20000a80 	.word	0x20000a80

0800bc18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	af00      	add	r7, sp, #0
	return 1;
 800bc1c:	2301      	movs	r3, #1
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <_kill>:

int _kill(int pid, int sig)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bc32:	f001 fa9f 	bl	800d174 <__errno>
 800bc36:	4602      	mov	r2, r0
 800bc38:	2316      	movs	r3, #22
 800bc3a:	6013      	str	r3, [r2, #0]
	return -1;
 800bc3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <_exit>:

void _exit (int status)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bc50:	f04f 31ff 	mov.w	r1, #4294967295
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff ffe7 	bl	800bc28 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bc5a:	e7fe      	b.n	800bc5a <_exit+0x12>

0800bc5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	e00a      	b.n	800bc84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bc6e:	f3af 8000 	nop.w
 800bc72:	4601      	mov	r1, r0
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	60ba      	str	r2, [r7, #8]
 800bc7a:	b2ca      	uxtb	r2, r1
 800bc7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	3301      	adds	r3, #1
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	dbf0      	blt.n	800bc6e <_read+0x12>
	}

return len;
 800bc8c:	687b      	ldr	r3, [r7, #4]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b086      	sub	sp, #24
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bca2:	2300      	movs	r3, #0
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	e009      	b.n	800bcbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	60ba      	str	r2, [r7, #8]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	697a      	ldr	r2, [r7, #20]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	dbf1      	blt.n	800bca8 <_write+0x12>
	}
	return len;
 800bcc4:	687b      	ldr	r3, [r7, #4]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <_close>:

int _close(int file)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b083      	sub	sp, #12
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
	return -1;
 800bcd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b083      	sub	sp, #12
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bcf6:	605a      	str	r2, [r3, #4]
	return 0;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <_isatty>:

int _isatty(int file)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
	return 1;
 800bd0e:	2301      	movs	r3, #1
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
	return 0;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3714      	adds	r7, #20
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
	...

0800bd38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bd40:	4b11      	ldr	r3, [pc, #68]	; (800bd88 <_sbrk+0x50>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d102      	bne.n	800bd4e <_sbrk+0x16>
		heap_end = &end;
 800bd48:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <_sbrk+0x50>)
 800bd4a:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <_sbrk+0x54>)
 800bd4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800bd4e:	4b0e      	ldr	r3, [pc, #56]	; (800bd88 <_sbrk+0x50>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800bd54:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <_sbrk+0x50>)
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	466a      	mov	r2, sp
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d907      	bls.n	800bd72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800bd62:	f001 fa07 	bl	800d174 <__errno>
 800bd66:	4602      	mov	r2, r0
 800bd68:	230c      	movs	r3, #12
 800bd6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800bd6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd70:	e006      	b.n	800bd80 <_sbrk+0x48>
	}

	heap_end += incr;
 800bd72:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <_sbrk+0x50>)
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4413      	add	r3, r2
 800bd7a:	4a03      	ldr	r2, [pc, #12]	; (800bd88 <_sbrk+0x50>)
 800bd7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	200009dc 	.word	0x200009dc
 800bd8c:	20000f18 	.word	0x20000f18

0800bd90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bd90:	b480      	push	{r7}
 800bd92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bd94:	4b08      	ldr	r3, [pc, #32]	; (800bdb8 <SystemInit+0x28>)
 800bd96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd9a:	4a07      	ldr	r2, [pc, #28]	; (800bdb8 <SystemInit+0x28>)
 800bd9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bda0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bda4:	4b04      	ldr	r3, [pc, #16]	; (800bdb8 <SystemInit+0x28>)
 800bda6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bdaa:	609a      	str	r2, [r3, #8]
#endif
}
 800bdac:	bf00      	nop
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	e000ed00 	.word	0xe000ed00

0800bdbc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800bdc0:	4b14      	ldr	r3, [pc, #80]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bdc2:	4a15      	ldr	r2, [pc, #84]	; (800be18 <MX_USART3_UART_Init+0x5c>)
 800bdc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800bdc6:	4b13      	ldr	r3, [pc, #76]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bdc8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800bdcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800bdce:	4b11      	ldr	r3, [pc, #68]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800bdd4:	4b0f      	ldr	r3, [pc, #60]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800bdda:	4b0e      	ldr	r3, [pc, #56]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800bde0:	4b0c      	ldr	r3, [pc, #48]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bde2:	220c      	movs	r2, #12
 800bde4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bde6:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800bdec:	4b09      	ldr	r3, [pc, #36]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800bdf2:	4b08      	ldr	r3, [pc, #32]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800bdf8:	4b06      	ldr	r3, [pc, #24]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800bdfe:	4805      	ldr	r0, [pc, #20]	; (800be14 <MX_USART3_UART_Init+0x58>)
 800be00:	f7fe fb6a 	bl	800a4d8 <HAL_UART_Init>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800be0a:	f7ff fea1 	bl	800bb50 <Error_Handler>
  }

}
 800be0e:	bf00      	nop
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	20000a80 	.word	0x20000a80
 800be18:	40004800 	.word	0x40004800

0800be1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b08a      	sub	sp, #40	; 0x28
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be24:	f107 0314 	add.w	r3, r7, #20
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	605a      	str	r2, [r3, #4]
 800be2e:	609a      	str	r2, [r3, #8]
 800be30:	60da      	str	r2, [r3, #12]
 800be32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a1b      	ldr	r2, [pc, #108]	; (800bea8 <HAL_UART_MspInit+0x8c>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d130      	bne.n	800bea0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800be3e:	4b1b      	ldr	r3, [pc, #108]	; (800beac <HAL_UART_MspInit+0x90>)
 800be40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be42:	4a1a      	ldr	r2, [pc, #104]	; (800beac <HAL_UART_MspInit+0x90>)
 800be44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be48:	6413      	str	r3, [r2, #64]	; 0x40
 800be4a:	4b18      	ldr	r3, [pc, #96]	; (800beac <HAL_UART_MspInit+0x90>)
 800be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be52:	613b      	str	r3, [r7, #16]
 800be54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800be56:	4b15      	ldr	r3, [pc, #84]	; (800beac <HAL_UART_MspInit+0x90>)
 800be58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5a:	4a14      	ldr	r2, [pc, #80]	; (800beac <HAL_UART_MspInit+0x90>)
 800be5c:	f043 0308 	orr.w	r3, r3, #8
 800be60:	6313      	str	r3, [r2, #48]	; 0x30
 800be62:	4b12      	ldr	r3, [pc, #72]	; (800beac <HAL_UART_MspInit+0x90>)
 800be64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be66:	f003 0308 	and.w	r3, r3, #8
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800be6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be74:	2302      	movs	r3, #2
 800be76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be78:	2300      	movs	r3, #0
 800be7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be7c:	2303      	movs	r3, #3
 800be7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800be80:	2307      	movs	r3, #7
 800be82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800be84:	f107 0314 	add.w	r3, r7, #20
 800be88:	4619      	mov	r1, r3
 800be8a:	4809      	ldr	r0, [pc, #36]	; (800beb0 <HAL_UART_MspInit+0x94>)
 800be8c:	f7fc fed8 	bl	8008c40 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800be90:	2200      	movs	r2, #0
 800be92:	2100      	movs	r1, #0
 800be94:	2027      	movs	r0, #39	; 0x27
 800be96:	f7fc fa08 	bl	80082aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800be9a:	2027      	movs	r0, #39	; 0x27
 800be9c:	f7fc fa22 	bl	80082e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800bea0:	bf00      	nop
 800bea2:	3728      	adds	r7, #40	; 0x28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	40004800 	.word	0x40004800
 800beac:	40023800 	.word	0x40023800
 800beb0:	40020c00 	.word	0x40020c00

0800beb4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800beb8:	4b14      	ldr	r3, [pc, #80]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800beba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bebe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bec0:	4b12      	ldr	r3, [pc, #72]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800bec2:	2206      	movs	r2, #6
 800bec4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bec6:	4b11      	ldr	r3, [pc, #68]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800bec8:	2202      	movs	r2, #2
 800beca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800becc:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800bece:	2200      	movs	r2, #0
 800bed0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bed2:	4b0e      	ldr	r3, [pc, #56]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800bed4:	2202      	movs	r2, #2
 800bed6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800bed8:	4b0c      	ldr	r3, [pc, #48]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800beda:	2201      	movs	r2, #1
 800bedc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bede:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bee4:	4b09      	ldr	r3, [pc, #36]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800beea:	4b08      	ldr	r3, [pc, #32]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800beec:	2201      	movs	r2, #1
 800beee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bef0:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bef6:	4805      	ldr	r0, [pc, #20]	; (800bf0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800bef8:	f7fd f865 	bl	8008fc6 <HAL_PCD_Init>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800bf02:	f7ff fe25 	bl	800bb50 <Error_Handler>
  }

}
 800bf06:	bf00      	nop
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20000b00 	.word	0x20000b00

0800bf10 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08a      	sub	sp, #40	; 0x28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf18:	f107 0314 	add.w	r3, r7, #20
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	605a      	str	r2, [r3, #4]
 800bf22:	609a      	str	r2, [r3, #8]
 800bf24:	60da      	str	r2, [r3, #12]
 800bf26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf30:	d141      	bne.n	800bfb6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf32:	4b23      	ldr	r3, [pc, #140]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf36:	4a22      	ldr	r2, [pc, #136]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bf38:	f043 0301 	orr.w	r3, r3, #1
 800bf3c:	6313      	str	r3, [r2, #48]	; 0x30
 800bf3e:	4b20      	ldr	r3, [pc, #128]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	613b      	str	r3, [r7, #16]
 800bf48:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800bf4a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800bf4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf50:	2302      	movs	r3, #2
 800bf52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf5c:	230a      	movs	r3, #10
 800bf5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf60:	f107 0314 	add.w	r3, r7, #20
 800bf64:	4619      	mov	r1, r3
 800bf66:	4817      	ldr	r0, [pc, #92]	; (800bfc4 <HAL_PCD_MspInit+0xb4>)
 800bf68:	f7fc fe6a 	bl	8008c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800bf6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf72:	2300      	movs	r3, #0
 800bf74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800bf7a:	f107 0314 	add.w	r3, r7, #20
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4810      	ldr	r0, [pc, #64]	; (800bfc4 <HAL_PCD_MspInit+0xb4>)
 800bf82:	f7fc fe5d 	bl	8008c40 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf86:	4b0e      	ldr	r3, [pc, #56]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bf88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf8a:	4a0d      	ldr	r2, [pc, #52]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bf8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf90:	6353      	str	r3, [r2, #52]	; 0x34
 800bf92:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9a:	60fb      	str	r3, [r7, #12]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4b08      	ldr	r3, [pc, #32]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bfa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa2:	4a07      	ldr	r2, [pc, #28]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bfa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfa8:	6453      	str	r3, [r2, #68]	; 0x44
 800bfaa:	4b05      	ldr	r3, [pc, #20]	; (800bfc0 <HAL_PCD_MspInit+0xb0>)
 800bfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfb2:	60bb      	str	r3, [r7, #8]
 800bfb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfb6:	bf00      	nop
 800bfb8:	3728      	adds	r7, #40	; 0x28
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	40023800 	.word	0x40023800
 800bfc4:	40020000 	.word	0x40020000

0800bfc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bfc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c000 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bfcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bfce:	e003      	b.n	800bfd8 <LoopCopyDataInit>

0800bfd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bfd0:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bfd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bfd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bfd6:	3104      	adds	r1, #4

0800bfd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bfd8:	480b      	ldr	r0, [pc, #44]	; (800c008 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bfda:	4b0c      	ldr	r3, [pc, #48]	; (800c00c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bfdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bfde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bfe0:	d3f6      	bcc.n	800bfd0 <CopyDataInit>
  ldr  r2, =_sbss
 800bfe2:	4a0b      	ldr	r2, [pc, #44]	; (800c010 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bfe4:	e002      	b.n	800bfec <LoopFillZerobss>

0800bfe6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bfe6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bfe8:	f842 3b04 	str.w	r3, [r2], #4

0800bfec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bfec:	4b09      	ldr	r3, [pc, #36]	; (800c014 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bfee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bff0:	d3f9      	bcc.n	800bfe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800bff2:	f7ff fecd 	bl	800bd90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bff6:	f001 fad7 	bl	800d5a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bffa:	f7ff fccd 	bl	800b998 <main>
  bx  lr    
 800bffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c000:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800c004:	08012b7c 	.word	0x08012b7c
  ldr  r0, =_sdata
 800c008:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c00c:	200009c0 	.word	0x200009c0
  ldr  r2, =_sbss
 800c010:	200009c0 	.word	0x200009c0
  ldr  r3, = _ebss
 800c014:	20000f14 	.word	0x20000f14

0800c018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c018:	e7fe      	b.n	800c018 <ADC_IRQHandler>

0800c01a <__cxa_end_cleanup>:
 800c01a:	b41e      	push	{r1, r2, r3, r4}
 800c01c:	f000 f88e 	bl	800c13c <__gnu_end_cleanup>
 800c020:	bc1e      	pop	{r1, r2, r3, r4}
 800c022:	f7fb fde1 	bl	8007be8 <_Unwind_Resume>
	...

0800c028 <__cxa_type_match>:
 800c028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c02a:	7802      	ldrb	r2, [r0, #0]
 800c02c:	2a47      	cmp	r2, #71	; 0x47
 800c02e:	b083      	sub	sp, #12
 800c030:	460d      	mov	r5, r1
 800c032:	461f      	mov	r7, r3
 800c034:	d01e      	beq.n	800c074 <__cxa_type_match+0x4c>
 800c036:	2300      	movs	r3, #0
 800c038:	4c25      	ldr	r4, [pc, #148]	; (800c0d0 <__cxa_type_match+0xa8>)
 800c03a:	9301      	str	r3, [sp, #4]
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	4620      	mov	r0, r4
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	4798      	blx	r3
 800c044:	b180      	cbz	r0, 800c068 <__cxa_type_match+0x40>
 800c046:	9b01      	ldr	r3, [sp, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	2602      	movs	r6, #2
 800c04e:	682b      	ldr	r3, [r5, #0]
 800c050:	4621      	mov	r1, r4
 800c052:	4628      	mov	r0, r5
 800c054:	691c      	ldr	r4, [r3, #16]
 800c056:	aa01      	add	r2, sp, #4
 800c058:	2301      	movs	r3, #1
 800c05a:	47a0      	blx	r4
 800c05c:	b130      	cbz	r0, 800c06c <__cxa_type_match+0x44>
 800c05e:	9b01      	ldr	r3, [sp, #4]
 800c060:	603b      	str	r3, [r7, #0]
 800c062:	4630      	mov	r0, r6
 800c064:	b003      	add	sp, #12
 800c066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c068:	2601      	movs	r6, #1
 800c06a:	e7f0      	b.n	800c04e <__cxa_type_match+0x26>
 800c06c:	4606      	mov	r6, r0
 800c06e:	4630      	mov	r0, r6
 800c070:	b003      	add	sp, #12
 800c072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c074:	7843      	ldrb	r3, [r0, #1]
 800c076:	2b4e      	cmp	r3, #78	; 0x4e
 800c078:	d1dd      	bne.n	800c036 <__cxa_type_match+0xe>
 800c07a:	7883      	ldrb	r3, [r0, #2]
 800c07c:	2b55      	cmp	r3, #85	; 0x55
 800c07e:	d1da      	bne.n	800c036 <__cxa_type_match+0xe>
 800c080:	78c3      	ldrb	r3, [r0, #3]
 800c082:	2b43      	cmp	r3, #67	; 0x43
 800c084:	d1d7      	bne.n	800c036 <__cxa_type_match+0xe>
 800c086:	7903      	ldrb	r3, [r0, #4]
 800c088:	2b46      	cmp	r3, #70	; 0x46
 800c08a:	d015      	beq.n	800c0b8 <__cxa_type_match+0x90>
 800c08c:	7903      	ldrb	r3, [r0, #4]
 800c08e:	2b43      	cmp	r3, #67	; 0x43
 800c090:	d1d1      	bne.n	800c036 <__cxa_type_match+0xe>
 800c092:	7943      	ldrb	r3, [r0, #5]
 800c094:	2b2b      	cmp	r3, #43	; 0x2b
 800c096:	d1ce      	bne.n	800c036 <__cxa_type_match+0xe>
 800c098:	7983      	ldrb	r3, [r0, #6]
 800c09a:	2b2b      	cmp	r3, #43	; 0x2b
 800c09c:	d1cb      	bne.n	800c036 <__cxa_type_match+0xe>
 800c09e:	79c3      	ldrb	r3, [r0, #7]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d8c8      	bhi.n	800c036 <__cxa_type_match+0xe>
 800c0a4:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800c0a8:	d002      	beq.n	800c0b0 <__cxa_type_match+0x88>
 800c0aa:	3058      	adds	r0, #88	; 0x58
 800c0ac:	9001      	str	r0, [sp, #4]
 800c0ae:	e7c5      	b.n	800c03c <__cxa_type_match+0x14>
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f854 4c78 	ldr.w	r4, [r4, #-120]
 800c0b6:	e7f9      	b.n	800c0ac <__cxa_type_match+0x84>
 800c0b8:	7943      	ldrb	r3, [r0, #5]
 800c0ba:	2b4f      	cmp	r3, #79	; 0x4f
 800c0bc:	d1e6      	bne.n	800c08c <__cxa_type_match+0x64>
 800c0be:	7983      	ldrb	r3, [r0, #6]
 800c0c0:	2b52      	cmp	r3, #82	; 0x52
 800c0c2:	d1e3      	bne.n	800c08c <__cxa_type_match+0x64>
 800c0c4:	79c3      	ldrb	r3, [r0, #7]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e0      	bne.n	800c08c <__cxa_type_match+0x64>
 800c0ca:	9301      	str	r3, [sp, #4]
 800c0cc:	4c01      	ldr	r4, [pc, #4]	; (800c0d4 <__cxa_type_match+0xac>)
 800c0ce:	e7b5      	b.n	800c03c <__cxa_type_match+0x14>
 800c0d0:	08011954 	.word	0x08011954
 800c0d4:	0801194c 	.word	0x0801194c

0800c0d8 <__cxa_begin_cleanup>:
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	4604      	mov	r4, r0
 800c0dc:	f000 f86a 	bl	800c1b4 <__cxa_get_globals>
 800c0e0:	7823      	ldrb	r3, [r4, #0]
 800c0e2:	2b47      	cmp	r3, #71	; 0x47
 800c0e4:	f1a4 0220 	sub.w	r2, r4, #32
 800c0e8:	d004      	beq.n	800c0f4 <__cxa_begin_cleanup+0x1c>
 800c0ea:	6883      	ldr	r3, [r0, #8]
 800c0ec:	bb23      	cbnz	r3, 800c138 <__cxa_begin_cleanup+0x60>
 800c0ee:	6082      	str	r2, [r0, #8]
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	bd10      	pop	{r4, pc}
 800c0f4:	7863      	ldrb	r3, [r4, #1]
 800c0f6:	2b4e      	cmp	r3, #78	; 0x4e
 800c0f8:	d1f7      	bne.n	800c0ea <__cxa_begin_cleanup+0x12>
 800c0fa:	78a3      	ldrb	r3, [r4, #2]
 800c0fc:	2b55      	cmp	r3, #85	; 0x55
 800c0fe:	d1f4      	bne.n	800c0ea <__cxa_begin_cleanup+0x12>
 800c100:	78e3      	ldrb	r3, [r4, #3]
 800c102:	2b43      	cmp	r3, #67	; 0x43
 800c104:	d1f1      	bne.n	800c0ea <__cxa_begin_cleanup+0x12>
 800c106:	7923      	ldrb	r3, [r4, #4]
 800c108:	2b43      	cmp	r3, #67	; 0x43
 800c10a:	d1ee      	bne.n	800c0ea <__cxa_begin_cleanup+0x12>
 800c10c:	7963      	ldrb	r3, [r4, #5]
 800c10e:	2b2b      	cmp	r3, #43	; 0x2b
 800c110:	d1eb      	bne.n	800c0ea <__cxa_begin_cleanup+0x12>
 800c112:	79a3      	ldrb	r3, [r4, #6]
 800c114:	2b2b      	cmp	r3, #43	; 0x2b
 800c116:	d1e8      	bne.n	800c0ea <__cxa_begin_cleanup+0x12>
 800c118:	79e3      	ldrb	r3, [r4, #7]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d8e5      	bhi.n	800c0ea <__cxa_begin_cleanup+0x12>
 800c11e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c122:	3301      	adds	r3, #1
 800c124:	2b01      	cmp	r3, #1
 800c126:	f844 3c04 	str.w	r3, [r4, #-4]
 800c12a:	d1e1      	bne.n	800c0f0 <__cxa_begin_cleanup+0x18>
 800c12c:	6883      	ldr	r3, [r0, #8]
 800c12e:	f844 3c08 	str.w	r3, [r4, #-8]
 800c132:	6082      	str	r2, [r0, #8]
 800c134:	2001      	movs	r0, #1
 800c136:	bd10      	pop	{r4, pc}
 800c138:	f000 fd56 	bl	800cbe8 <_ZSt9terminatev>

0800c13c <__gnu_end_cleanup>:
 800c13c:	b508      	push	{r3, lr}
 800c13e:	f000 f839 	bl	800c1b4 <__cxa_get_globals>
 800c142:	6883      	ldr	r3, [r0, #8]
 800c144:	b383      	cbz	r3, 800c1a8 <__gnu_end_cleanup+0x6c>
 800c146:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c14a:	2a47      	cmp	r2, #71	; 0x47
 800c14c:	d004      	beq.n	800c158 <__gnu_end_cleanup+0x1c>
 800c14e:	2200      	movs	r2, #0
 800c150:	6082      	str	r2, [r0, #8]
 800c152:	f103 0020 	add.w	r0, r3, #32
 800c156:	bd08      	pop	{r3, pc}
 800c158:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c15c:	2a4e      	cmp	r2, #78	; 0x4e
 800c15e:	d1f6      	bne.n	800c14e <__gnu_end_cleanup+0x12>
 800c160:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c164:	2a55      	cmp	r2, #85	; 0x55
 800c166:	d1f2      	bne.n	800c14e <__gnu_end_cleanup+0x12>
 800c168:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800c16c:	2a43      	cmp	r2, #67	; 0x43
 800c16e:	d1ee      	bne.n	800c14e <__gnu_end_cleanup+0x12>
 800c170:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c174:	2a43      	cmp	r2, #67	; 0x43
 800c176:	d1ea      	bne.n	800c14e <__gnu_end_cleanup+0x12>
 800c178:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800c17c:	2a2b      	cmp	r2, #43	; 0x2b
 800c17e:	d1e6      	bne.n	800c14e <__gnu_end_cleanup+0x12>
 800c180:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800c184:	2a2b      	cmp	r2, #43	; 0x2b
 800c186:	d1e2      	bne.n	800c14e <__gnu_end_cleanup+0x12>
 800c188:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800c18c:	2a01      	cmp	r2, #1
 800c18e:	d8de      	bhi.n	800c14e <__gnu_end_cleanup+0x12>
 800c190:	69da      	ldr	r2, [r3, #28]
 800c192:	3a01      	subs	r2, #1
 800c194:	61da      	str	r2, [r3, #28]
 800c196:	2a00      	cmp	r2, #0
 800c198:	d1db      	bne.n	800c152 <__gnu_end_cleanup+0x16>
 800c19a:	699a      	ldr	r2, [r3, #24]
 800c19c:	6082      	str	r2, [r0, #8]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	619a      	str	r2, [r3, #24]
 800c1a2:	f103 0020 	add.w	r0, r3, #32
 800c1a6:	bd08      	pop	{r3, pc}
 800c1a8:	f000 fd1e 	bl	800cbe8 <_ZSt9terminatev>

0800c1ac <__cxa_get_globals_fast>:
 800c1ac:	4800      	ldr	r0, [pc, #0]	; (800c1b0 <__cxa_get_globals_fast+0x4>)
 800c1ae:	4770      	bx	lr
 800c1b0:	200009e0 	.word	0x200009e0

0800c1b4 <__cxa_get_globals>:
 800c1b4:	4800      	ldr	r0, [pc, #0]	; (800c1b8 <__cxa_get_globals+0x4>)
 800c1b6:	4770      	bx	lr
 800c1b8:	200009e0 	.word	0x200009e0

0800c1bc <_ZL28read_encoded_value_with_basehjPKhPj>:
 800c1bc:	2850      	cmp	r0, #80	; 0x50
 800c1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c0:	d01c      	beq.n	800c1fc <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 800c1c2:	f000 040f 	and.w	r4, r0, #15
 800c1c6:	2c0c      	cmp	r4, #12
 800c1c8:	d856      	bhi.n	800c278 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 800c1ca:	e8df f004 	tbb	[pc, r4]
 800c1ce:	4107      	.short	0x4107
 800c1d0:	551f0751 	.word	0x551f0751
 800c1d4:	27555555 	.word	0x27555555
 800c1d8:	0723      	.short	0x0723
 800c1da:	1f          	.byte	0x1f
 800c1db:	00          	.byte	0x00
 800c1dc:	4614      	mov	r4, r2
 800c1de:	f854 5b04 	ldr.w	r5, [r4], #4
 800c1e2:	b145      	cbz	r5, 800c1f6 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 800c1e4:	f000 0670 	and.w	r6, r0, #112	; 0x70
 800c1e8:	2e10      	cmp	r6, #16
 800c1ea:	bf08      	it	eq
 800c1ec:	4611      	moveq	r1, r2
 800c1ee:	440d      	add	r5, r1
 800c1f0:	0602      	lsls	r2, r0, #24
 800c1f2:	bf48      	it	mi
 800c1f4:	682d      	ldrmi	r5, [r5, #0]
 800c1f6:	601d      	str	r5, [r3, #0]
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1fc:	3203      	adds	r2, #3
 800c1fe:	f022 0403 	bic.w	r4, r2, #3
 800c202:	f854 5b04 	ldr.w	r5, [r4], #4
 800c206:	601d      	str	r5, [r3, #0]
 800c208:	4620      	mov	r0, r4
 800c20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c20c:	4614      	mov	r4, r2
 800c20e:	f854 5b08 	ldr.w	r5, [r4], #8
 800c212:	e7e6      	b.n	800c1e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800c214:	4614      	mov	r4, r2
 800c216:	f934 5b02 	ldrsh.w	r5, [r4], #2
 800c21a:	e7e2      	b.n	800c1e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800c21c:	2500      	movs	r5, #0
 800c21e:	462f      	mov	r7, r5
 800c220:	4614      	mov	r4, r2
 800c222:	f814 cb01 	ldrb.w	ip, [r4], #1
 800c226:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 800c22a:	40be      	lsls	r6, r7
 800c22c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c230:	ea45 0506 	orr.w	r5, r5, r6
 800c234:	f107 0707 	add.w	r7, r7, #7
 800c238:	d1f3      	bne.n	800c222 <_ZL28read_encoded_value_with_basehjPKhPj+0x66>
 800c23a:	2f1f      	cmp	r7, #31
 800c23c:	d8d1      	bhi.n	800c1e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800c23e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c242:	d0ce      	beq.n	800c1e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800c244:	f04f 36ff 	mov.w	r6, #4294967295
 800c248:	fa06 f707 	lsl.w	r7, r6, r7
 800c24c:	433d      	orrs	r5, r7
 800c24e:	e7c9      	b.n	800c1e4 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800c250:	2500      	movs	r5, #0
 800c252:	462f      	mov	r7, r5
 800c254:	4614      	mov	r4, r2
 800c256:	f814 cb01 	ldrb.w	ip, [r4], #1
 800c25a:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 800c25e:	40be      	lsls	r6, r7
 800c260:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c264:	ea45 0506 	orr.w	r5, r5, r6
 800c268:	f107 0707 	add.w	r7, r7, #7
 800c26c:	d1f3      	bne.n	800c256 <_ZL28read_encoded_value_with_basehjPKhPj+0x9a>
 800c26e:	e7b8      	b.n	800c1e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800c270:	4614      	mov	r4, r2
 800c272:	f834 5b02 	ldrh.w	r5, [r4], #2
 800c276:	e7b4      	b.n	800c1e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800c278:	f000 ff74 	bl	800d164 <abort>

0800c27c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 800c27c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800c280:	2820      	cmp	r0, #32
 800c282:	d011      	beq.n	800c2a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 800c284:	d90b      	bls.n	800c29e <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x22>
 800c286:	2840      	cmp	r0, #64	; 0x40
 800c288:	d006      	beq.n	800c298 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x1c>
 800c28a:	2850      	cmp	r0, #80	; 0x50
 800c28c:	d00a      	beq.n	800c2a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 800c28e:	2830      	cmp	r0, #48	; 0x30
 800c290:	d10d      	bne.n	800c2ae <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 800c292:	4608      	mov	r0, r1
 800c294:	f7fb bea2 	b.w	8007fdc <_Unwind_GetDataRelBase>
 800c298:	4608      	mov	r0, r1
 800c29a:	f7fb be8f 	b.w	8007fbc <_Unwind_GetRegionStart>
 800c29e:	b108      	cbz	r0, 800c2a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 800c2a0:	2810      	cmp	r0, #16
 800c2a2:	d104      	bne.n	800c2ae <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	4770      	bx	lr
 800c2a8:	4608      	mov	r0, r1
 800c2aa:	f7fb be9b 	b.w	8007fe4 <_Unwind_GetTextRelBase>
 800c2ae:	b508      	push	{r3, lr}
 800c2b0:	f000 ff58 	bl	800d164 <abort>

0800c2b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	4615      	mov	r5, r2
 800c2ba:	4607      	mov	r7, r0
 800c2bc:	b108      	cbz	r0, 800c2c2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800c2be:	f7fb fe7d 	bl	8007fbc <_Unwind_GetRegionStart>
 800c2c2:	6028      	str	r0, [r5, #0]
 800c2c4:	7826      	ldrb	r6, [r4, #0]
 800c2c6:	2eff      	cmp	r6, #255	; 0xff
 800c2c8:	f104 0401 	add.w	r4, r4, #1
 800c2cc:	d129      	bne.n	800c322 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6e>
 800c2ce:	6068      	str	r0, [r5, #4]
 800c2d0:	7823      	ldrb	r3, [r4, #0]
 800c2d2:	752b      	strb	r3, [r5, #20]
 800c2d4:	2bff      	cmp	r3, #255	; 0xff
 800c2d6:	f104 0001 	add.w	r0, r4, #1
 800c2da:	d032      	beq.n	800c342 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 800c2dc:	2310      	movs	r3, #16
 800c2de:	2400      	movs	r4, #0
 800c2e0:	752b      	strb	r3, [r5, #20]
 800c2e2:	4622      	mov	r2, r4
 800c2e4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c2e8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c2ec:	4093      	lsls	r3, r2
 800c2ee:	0609      	lsls	r1, r1, #24
 800c2f0:	ea44 0403 	orr.w	r4, r4, r3
 800c2f4:	f102 0207 	add.w	r2, r2, #7
 800c2f8:	d4f4      	bmi.n	800c2e4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 800c2fa:	4404      	add	r4, r0
 800c2fc:	60ec      	str	r4, [r5, #12]
 800c2fe:	7803      	ldrb	r3, [r0, #0]
 800c300:	756b      	strb	r3, [r5, #21]
 800c302:	2400      	movs	r4, #0
 800c304:	3001      	adds	r0, #1
 800c306:	4622      	mov	r2, r4
 800c308:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c30c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c310:	4093      	lsls	r3, r2
 800c312:	431c      	orrs	r4, r3
 800c314:	060b      	lsls	r3, r1, #24
 800c316:	f102 0207 	add.w	r2, r2, #7
 800c31a:	d4f5      	bmi.n	800c308 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 800c31c:	4404      	add	r4, r0
 800c31e:	612c      	str	r4, [r5, #16]
 800c320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c322:	4639      	mov	r1, r7
 800c324:	4630      	mov	r0, r6
 800c326:	f7ff ffa9 	bl	800c27c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800c32a:	4622      	mov	r2, r4
 800c32c:	4601      	mov	r1, r0
 800c32e:	1d2b      	adds	r3, r5, #4
 800c330:	4630      	mov	r0, r6
 800c332:	f7ff ff43 	bl	800c1bc <_ZL28read_encoded_value_with_basehjPKhPj>
 800c336:	4604      	mov	r4, r0
 800c338:	1c60      	adds	r0, r4, #1
 800c33a:	7823      	ldrb	r3, [r4, #0]
 800c33c:	752b      	strb	r3, [r5, #20]
 800c33e:	2bff      	cmp	r3, #255	; 0xff
 800c340:	d1cc      	bne.n	800c2dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
 800c342:	2300      	movs	r3, #0
 800c344:	60eb      	str	r3, [r5, #12]
 800c346:	e7da      	b.n	800c2fe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4a>

0800c348 <__gxx_personality_v0>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	f000 0403 	and.w	r4, r0, #3
 800c350:	b099      	sub	sp, #100	; 0x64
 800c352:	2300      	movs	r3, #0
 800c354:	2c01      	cmp	r4, #1
 800c356:	4688      	mov	r8, r1
 800c358:	4617      	mov	r7, r2
 800c35a:	930c      	str	r3, [sp, #48]	; 0x30
 800c35c:	f000 8096 	beq.w	800c48c <__gxx_personality_v0+0x144>
 800c360:	d30d      	bcc.n	800c37e <__gxx_personality_v0+0x36>
 800c362:	2c02      	cmp	r4, #2
 800c364:	f040 825f 	bne.w	800c826 <__gxx_personality_v0+0x4de>
 800c368:	4639      	mov	r1, r7
 800c36a:	4640      	mov	r0, r8
 800c36c:	f7fb fe12 	bl	8007f94 <__gnu_unwind_frame>
 800c370:	2800      	cmp	r0, #0
 800c372:	f000 809b 	beq.w	800c4ac <__gxx_personality_v0+0x164>
 800c376:	2009      	movs	r0, #9
 800c378:	b019      	add	sp, #100	; 0x64
 800c37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37e:	0702      	lsls	r2, r0, #28
 800c380:	d4f2      	bmi.n	800c368 <__gxx_personality_v0+0x20>
 800c382:	2301      	movs	r3, #1
 800c384:	9304      	str	r3, [sp, #16]
 800c386:	aa18      	add	r2, sp, #96	; 0x60
 800c388:	2300      	movs	r3, #0
 800c38a:	f842 8d2c 	str.w	r8, [r2, #-44]!
 800c38e:	4619      	mov	r1, r3
 800c390:	9200      	str	r2, [sp, #0]
 800c392:	4638      	mov	r0, r7
 800c394:	220c      	movs	r2, #12
 800c396:	f7fb f88d 	bl	80074b4 <_Unwind_VRS_Set>
 800c39a:	4638      	mov	r0, r7
 800c39c:	f7fb fe14 	bl	8007fc8 <_Unwind_GetLanguageSpecificData>
 800c3a0:	9005      	str	r0, [sp, #20]
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d0e0      	beq.n	800c368 <__gxx_personality_v0+0x20>
 800c3a6:	ab12      	add	r3, sp, #72	; 0x48
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	9905      	ldr	r1, [sp, #20]
 800c3ac:	9306      	str	r3, [sp, #24]
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	f7ff ff80 	bl	800c2b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800c3ba:	28ff      	cmp	r0, #255	; 0xff
 800c3bc:	f000 80e5 	beq.w	800c58a <__gxx_personality_v0+0x242>
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	f7ff ff5b 	bl	800c27c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	f8cd b000 	str.w	fp, [sp]
 800c3d4:	220f      	movs	r2, #15
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	9414      	str	r4, [sp, #80]	; 0x50
 800c3da:	f7fb f849 	bl	8007470 <_Unwind_VRS_Get>
 800c3de:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c3e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c3e2:	f026 0601 	bic.w	r6, r6, #1
 800c3e6:	429d      	cmp	r5, r3
 800c3e8:	f106 36ff 	add.w	r6, r6, #4294967295
 800c3ec:	f080 80d4 	bcs.w	800c598 <__gxx_personality_v0+0x250>
 800c3f0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 800c3f4:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 800c3f8:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 800c3fc:	2cff      	cmp	r4, #255	; 0xff
 800c3fe:	f04f 0100 	mov.w	r1, #0
 800c402:	d003      	beq.n	800c40c <__gxx_personality_v0+0xc4>
 800c404:	4620      	mov	r0, r4
 800c406:	f7ff ff39 	bl	800c27c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800c40a:	4601      	mov	r1, r0
 800c40c:	462a      	mov	r2, r5
 800c40e:	4620      	mov	r0, r4
 800c410:	4653      	mov	r3, sl
 800c412:	f7ff fed3 	bl	800c1bc <_ZL28read_encoded_value_with_basehjPKhPj>
 800c416:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 800c41a:	2cff      	cmp	r4, #255	; 0xff
 800c41c:	4605      	mov	r5, r0
 800c41e:	f04f 0100 	mov.w	r1, #0
 800c422:	d003      	beq.n	800c42c <__gxx_personality_v0+0xe4>
 800c424:	4620      	mov	r0, r4
 800c426:	f7ff ff29 	bl	800c27c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800c42a:	4601      	mov	r1, r0
 800c42c:	462a      	mov	r2, r5
 800c42e:	4620      	mov	r0, r4
 800c430:	464b      	mov	r3, r9
 800c432:	f7ff fec3 	bl	800c1bc <_ZL28read_encoded_value_with_basehjPKhPj>
 800c436:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 800c43a:	2cff      	cmp	r4, #255	; 0xff
 800c43c:	4605      	mov	r5, r0
 800c43e:	f04f 0100 	mov.w	r1, #0
 800c442:	d003      	beq.n	800c44c <__gxx_personality_v0+0x104>
 800c444:	4620      	mov	r0, r4
 800c446:	f7ff ff19 	bl	800c27c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800c44a:	4601      	mov	r1, r0
 800c44c:	462a      	mov	r2, r5
 800c44e:	4620      	mov	r0, r4
 800c450:	465b      	mov	r3, fp
 800c452:	f7ff feb3 	bl	800c1bc <_ZL28read_encoded_value_with_basehjPKhPj>
 800c456:	2400      	movs	r4, #0
 800c458:	4605      	mov	r5, r0
 800c45a:	4621      	mov	r1, r4
 800c45c:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c460:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800c464:	408b      	lsls	r3, r1
 800c466:	431c      	orrs	r4, r3
 800c468:	0613      	lsls	r3, r2, #24
 800c46a:	f101 0107 	add.w	r1, r1, #7
 800c46e:	d4f5      	bmi.n	800c45c <__gxx_personality_v0+0x114>
 800c470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c472:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c474:	4413      	add	r3, r2
 800c476:	42b3      	cmp	r3, r6
 800c478:	d91f      	bls.n	800c4ba <__gxx_personality_v0+0x172>
 800c47a:	9b04      	ldr	r3, [sp, #16]
 800c47c:	07db      	lsls	r3, r3, #31
 800c47e:	f100 8091 	bmi.w	800c5a4 <__gxx_personality_v0+0x25c>
 800c482:	9b04      	ldr	r3, [sp, #16]
 800c484:	071c      	lsls	r4, r3, #28
 800c486:	d515      	bpl.n	800c4b4 <__gxx_personality_v0+0x16c>
 800c488:	f000 fbae 	bl	800cbe8 <_ZSt9terminatev>
 800c48c:	f010 0408 	ands.w	r4, r0, #8
 800c490:	d01c      	beq.n	800c4cc <__gxx_personality_v0+0x184>
 800c492:	aa18      	add	r2, sp, #96	; 0x60
 800c494:	f044 0402 	orr.w	r4, r4, #2
 800c498:	f842 1d2c 	str.w	r1, [r2, #-44]!
 800c49c:	4638      	mov	r0, r7
 800c49e:	9200      	str	r2, [sp, #0]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	220c      	movs	r2, #12
 800c4a4:	9404      	str	r4, [sp, #16]
 800c4a6:	f7fb f805 	bl	80074b4 <_Unwind_VRS_Set>
 800c4aa:	e776      	b.n	800c39a <__gxx_personality_v0+0x52>
 800c4ac:	2008      	movs	r0, #8
 800c4ae:	b019      	add	sp, #100	; 0x64
 800c4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b4:	4640      	mov	r0, r8
 800c4b6:	f000 fcbf 	bl	800ce38 <__cxa_call_terminate>
 800c4ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4bc:	4413      	add	r3, r2
 800c4be:	42b3      	cmp	r3, r6
 800c4c0:	f200 8088 	bhi.w	800c5d4 <__gxx_personality_v0+0x28c>
 800c4c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c4c6:	42ab      	cmp	r3, r5
 800c4c8:	d896      	bhi.n	800c3f8 <__gxx_personality_v0+0xb0>
 800c4ca:	e7d6      	b.n	800c47a <__gxx_personality_v0+0x132>
 800c4cc:	ab12      	add	r3, sp, #72	; 0x48
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	9306      	str	r3, [sp, #24]
 800c4d2:	220d      	movs	r2, #13
 800c4d4:	4623      	mov	r3, r4
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800c4de:	f7fa ffc7 	bl	8007470 <_Unwind_VRS_Get>
 800c4e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4e4:	429d      	cmp	r5, r3
 800c4e6:	d002      	beq.n	800c4ee <__gxx_personality_v0+0x1a6>
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	e74b      	b.n	800c386 <__gxx_personality_v0+0x3e>
 800c4ee:	aa18      	add	r2, sp, #96	; 0x60
 800c4f0:	4623      	mov	r3, r4
 800c4f2:	f842 8d2c 	str.w	r8, [r2, #-44]!
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	9200      	str	r2, [sp, #0]
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	220c      	movs	r2, #12
 800c4fe:	f7fa ffd9 	bl	80074b4 <_Unwind_VRS_Set>
 800c502:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800c506:	9303      	str	r3, [sp, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d0d3      	beq.n	800c4b4 <__gxx_personality_v0+0x16c>
 800c50c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c510:	461a      	mov	r2, r3
 800c512:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800c516:	9305      	str	r3, [sp, #20]
 800c518:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 800c51c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 800c520:	4613      	mov	r3, r2
 800c522:	2b00      	cmp	r3, #0
 800c524:	461c      	mov	r4, r3
 800c526:	f2c0 8127 	blt.w	800c778 <__gxx_personality_v0+0x430>
 800c52a:	2503      	movs	r5, #3
 800c52c:	a918      	add	r1, sp, #96	; 0x60
 800c52e:	2300      	movs	r3, #0
 800c530:	f841 8d28 	str.w	r8, [r1, #-40]!
 800c534:	461a      	mov	r2, r3
 800c536:	9100      	str	r1, [sp, #0]
 800c538:	4638      	mov	r0, r7
 800c53a:	4619      	mov	r1, r3
 800c53c:	f7fa ffba 	bl	80074b4 <_Unwind_VRS_Set>
 800c540:	2300      	movs	r3, #0
 800c542:	4619      	mov	r1, r3
 800c544:	2201      	movs	r2, #1
 800c546:	f8cd a000 	str.w	sl, [sp]
 800c54a:	4638      	mov	r0, r7
 800c54c:	940f      	str	r4, [sp, #60]	; 0x3c
 800c54e:	f7fa ffb1 	bl	80074b4 <_Unwind_VRS_Set>
 800c552:	2300      	movs	r3, #0
 800c554:	4619      	mov	r1, r3
 800c556:	220f      	movs	r2, #15
 800c558:	f8cd 9000 	str.w	r9, [sp]
 800c55c:	4638      	mov	r0, r7
 800c55e:	f7fa ff87 	bl	8007470 <_Unwind_VRS_Get>
 800c562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c564:	9a03      	ldr	r2, [sp, #12]
 800c566:	f8cd 9000 	str.w	r9, [sp]
 800c56a:	f003 0401 	and.w	r4, r3, #1
 800c56e:	2300      	movs	r3, #0
 800c570:	4314      	orrs	r4, r2
 800c572:	4638      	mov	r0, r7
 800c574:	4619      	mov	r1, r3
 800c576:	220f      	movs	r2, #15
 800c578:	9410      	str	r4, [sp, #64]	; 0x40
 800c57a:	f7fa ff9b 	bl	80074b4 <_Unwind_VRS_Set>
 800c57e:	2d02      	cmp	r5, #2
 800c580:	d005      	beq.n	800c58e <__gxx_personality_v0+0x246>
 800c582:	2007      	movs	r0, #7
 800c584:	b019      	add	sp, #100	; 0x64
 800c586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58a:	2400      	movs	r4, #0
 800c58c:	e71c      	b.n	800c3c8 <__gxx_personality_v0+0x80>
 800c58e:	4640      	mov	r0, r8
 800c590:	f7ff fda2 	bl	800c0d8 <__cxa_begin_cleanup>
 800c594:	2007      	movs	r0, #7
 800c596:	e6ef      	b.n	800c378 <__gxx_personality_v0+0x30>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	07d9      	lsls	r1, r3, #31
 800c59c:	f57f af71 	bpl.w	800c482 <__gxx_personality_v0+0x13a>
 800c5a0:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 800c5a4:	2400      	movs	r4, #0
 800c5a6:	9403      	str	r4, [sp, #12]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	220d      	movs	r2, #13
 800c5ae:	f8cd 9000 	str.w	r9, [sp]
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5b6:	f7fa ff5b 	bl	8007470 <_Unwind_VRS_Get>
 800c5ba:	9a05      	ldr	r2, [sp, #20]
 800c5bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5be:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800c5c2:	9a03      	ldr	r2, [sp, #12]
 800c5c4:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 800c5c8:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
 800c5cc:	f8c8 3020 	str.w	r3, [r8, #32]
 800c5d0:	2006      	movs	r0, #6
 800c5d2:	e6d1      	b.n	800c378 <__gxx_personality_v0+0x30>
 800c5d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f43f aec6 	beq.w	800c368 <__gxx_personality_v0+0x20>
 800c5dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5de:	189a      	adds	r2, r3, r2
 800c5e0:	9203      	str	r2, [sp, #12]
 800c5e2:	2c00      	cmp	r4, #0
 800c5e4:	f000 80f0 	beq.w	800c7c8 <__gxx_personality_v0+0x480>
 800c5e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c5ea:	3c01      	subs	r4, #1
 800c5ec:	4423      	add	r3, r4
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	f43f aeba 	beq.w	800c368 <__gxx_personality_v0+0x20>
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 80f8 	beq.w	800c7ea <__gxx_personality_v0+0x4a2>
 800c5fa:	9a04      	ldr	r2, [sp, #16]
 800c5fc:	f012 0208 	ands.w	r2, r2, #8
 800c600:	9209      	str	r2, [sp, #36]	; 0x24
 800c602:	f000 8103 	beq.w	800c80c <__gxx_personality_v0+0x4c4>
 800c606:	2147      	movs	r1, #71	; 0x47
 800c608:	224e      	movs	r2, #78	; 0x4e
 800c60a:	f888 1000 	strb.w	r1, [r8]
 800c60e:	f888 2001 	strb.w	r2, [r8, #1]
 800c612:	2155      	movs	r1, #85	; 0x55
 800c614:	2243      	movs	r2, #67	; 0x43
 800c616:	f888 1002 	strb.w	r1, [r8, #2]
 800c61a:	f888 2003 	strb.w	r2, [r8, #3]
 800c61e:	2146      	movs	r1, #70	; 0x46
 800c620:	224f      	movs	r2, #79	; 0x4f
 800c622:	f888 1004 	strb.w	r1, [r8, #4]
 800c626:	f888 2005 	strb.w	r2, [r8, #5]
 800c62a:	2152      	movs	r1, #82	; 0x52
 800c62c:	2200      	movs	r2, #0
 800c62e:	f888 1006 	strb.w	r1, [r8, #6]
 800c632:	f888 2007 	strb.w	r2, [r8, #7]
 800c636:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 800c63a:	2200      	movs	r2, #0
 800c63c:	9207      	str	r2, [sp, #28]
 800c63e:	f8cd 9020 	str.w	r9, [sp, #32]
 800c642:	2400      	movs	r4, #0
 800c644:	4621      	mov	r1, r4
 800c646:	e000      	b.n	800c64a <__gxx_personality_v0+0x302>
 800c648:	462b      	mov	r3, r5
 800c64a:	461d      	mov	r5, r3
 800c64c:	f815 0b01 	ldrb.w	r0, [r5], #1
 800c650:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800c654:	408a      	lsls	r2, r1
 800c656:	0606      	lsls	r6, r0, #24
 800c658:	ea44 0402 	orr.w	r4, r4, r2
 800c65c:	f101 0107 	add.w	r1, r1, #7
 800c660:	d4f2      	bmi.n	800c648 <__gxx_personality_v0+0x300>
 800c662:	291f      	cmp	r1, #31
 800c664:	d805      	bhi.n	800c672 <__gxx_personality_v0+0x32a>
 800c666:	0640      	lsls	r0, r0, #25
 800c668:	d503      	bpl.n	800c672 <__gxx_personality_v0+0x32a>
 800c66a:	2201      	movs	r2, #1
 800c66c:	408a      	lsls	r2, r1
 800c66e:	4252      	negs	r2, r2
 800c670:	4314      	orrs	r4, r2
 800c672:	2600      	movs	r6, #0
 800c674:	4631      	mov	r1, r6
 800c676:	46a1      	mov	r9, r4
 800c678:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800c67c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800c680:	408a      	lsls	r2, r1
 800c682:	4316      	orrs	r6, r2
 800c684:	0602      	lsls	r2, r0, #24
 800c686:	f101 0107 	add.w	r1, r1, #7
 800c68a:	d4f5      	bmi.n	800c678 <__gxx_personality_v0+0x330>
 800c68c:	291f      	cmp	r1, #31
 800c68e:	d805      	bhi.n	800c69c <__gxx_personality_v0+0x354>
 800c690:	0647      	lsls	r7, r0, #25
 800c692:	d503      	bpl.n	800c69c <__gxx_personality_v0+0x354>
 800c694:	2301      	movs	r3, #1
 800c696:	408b      	lsls	r3, r1
 800c698:	425b      	negs	r3, r3
 800c69a:	431e      	orrs	r6, r3
 800c69c:	2c00      	cmp	r4, #0
 800c69e:	d04c      	beq.n	800c73a <__gxx_personality_v0+0x3f2>
 800c6a0:	dc4e      	bgt.n	800c740 <__gxx_personality_v0+0x3f8>
 800c6a2:	f104 0a01 	add.w	sl, r4, #1
 800c6a6:	ebca 728a 	rsb	r2, sl, sl, lsl #30
 800c6aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6ac:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800c6b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6b4:	f1b8 0f00 	cmp.w	r8, #0
 800c6b8:	d001      	beq.n	800c6be <__gxx_personality_v0+0x376>
 800c6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6bc:	b12b      	cbz	r3, 800c6ca <__gxx_personality_v0+0x382>
 800c6be:	b351      	cbz	r1, 800c716 <__gxx_personality_v0+0x3ce>
 800c6c0:	2e00      	cmp	r6, #0
 800c6c2:	f000 808b 	beq.w	800c7dc <__gxx_personality_v0+0x494>
 800c6c6:	19ab      	adds	r3, r5, r6
 800c6c8:	e7bb      	b.n	800c642 <__gxx_personality_v0+0x2fa>
 800c6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6cc:	9311      	str	r3, [sp, #68]	; 0x44
 800c6ce:	b929      	cbnz	r1, 800c6dc <__gxx_personality_v0+0x394>
 800c6d0:	e091      	b.n	800c7f6 <__gxx_personality_v0+0x4ae>
 800c6d2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800c6d6:	2900      	cmp	r1, #0
 800c6d8:	f000 808d 	beq.w	800c7f6 <__gxx_personality_v0+0x4ae>
 800c6dc:	4439      	add	r1, r7
 800c6de:	465b      	mov	r3, fp
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	4640      	mov	r0, r8
 800c6e4:	f7ff fca0 	bl	800c028 <__cxa_type_match>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d0f2      	beq.n	800c6d2 <__gxx_personality_v0+0x38a>
 800c6ec:	e7e8      	b.n	800c6c0 <__gxx_personality_v0+0x378>
 800c6ee:	00e2      	lsls	r2, r4, #3
 800c6f0:	4252      	negs	r2, r2
 800c6f2:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	; 0x50
 800c6f6:	441a      	add	r2, r3
 800c6f8:	9b08      	ldr	r3, [sp, #32]
 800c6fa:	f7ff fd5f 	bl	800c1bc <_ZL28read_encoded_value_with_basehjPKhPj>
 800c6fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c700:	b149      	cbz	r1, 800c716 <__gxx_personality_v0+0x3ce>
 800c702:	f1b8 0f00 	cmp.w	r8, #0
 800c706:	d0db      	beq.n	800c6c0 <__gxx_personality_v0+0x378>
 800c708:	ab0c      	add	r3, sp, #48	; 0x30
 800c70a:	2200      	movs	r2, #0
 800c70c:	4640      	mov	r0, r8
 800c70e:	f7ff fc8b 	bl	800c028 <__cxa_type_match>
 800c712:	2800      	cmp	r0, #0
 800c714:	d0d4      	beq.n	800c6c0 <__gxx_personality_v0+0x378>
 800c716:	9b04      	ldr	r3, [sp, #16]
 800c718:	07d8      	lsls	r0, r3, #31
 800c71a:	464a      	mov	r2, r9
 800c71c:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 800c720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c724:	f53f af40 	bmi.w	800c5a8 <__gxx_personality_v0+0x260>
 800c728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f43f aef8 	beq.w	800c520 <__gxx_personality_v0+0x1d8>
 800c730:	2c00      	cmp	r4, #0
 800c732:	f6bf aefa 	bge.w	800c52a <__gxx_personality_v0+0x1e2>
 800c736:	f000 fa65 	bl	800cc04 <_ZSt10unexpectedv>
 800c73a:	2301      	movs	r3, #1
 800c73c:	9307      	str	r3, [sp, #28]
 800c73e:	e7bf      	b.n	800c6c0 <__gxx_personality_v0+0x378>
 800c740:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800c744:	28ff      	cmp	r0, #255	; 0xff
 800c746:	d03b      	beq.n	800c7c0 <__gxx_personality_v0+0x478>
 800c748:	f000 0307 	and.w	r3, r0, #7
 800c74c:	2b04      	cmp	r3, #4
 800c74e:	d86a      	bhi.n	800c826 <__gxx_personality_v0+0x4de>
 800c750:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <__gxx_personality_v0+0x410>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c773 	.word	0x0800c773
 800c75c:	0800c827 	.word	0x0800c827
 800c760:	0800c76d 	.word	0x0800c76d
 800c764:	0800c773 	.word	0x0800c773
 800c768:	0800c6ef 	.word	0x0800c6ef
 800c76c:	0062      	lsls	r2, r4, #1
 800c76e:	4252      	negs	r2, r2
 800c770:	e7bf      	b.n	800c6f2 <__gxx_personality_v0+0x3aa>
 800c772:	00a2      	lsls	r2, r4, #2
 800c774:	4252      	negs	r2, r2
 800c776:	e7bc      	b.n	800c6f2 <__gxx_personality_v0+0x3aa>
 800c778:	3301      	adds	r3, #1
 800c77a:	461d      	mov	r5, r3
 800c77c:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800c780:	4638      	mov	r0, r7
 800c782:	f7ff fd97 	bl	800c2b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800c786:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800c78a:	28ff      	cmp	r0, #255	; 0xff
 800c78c:	d01a      	beq.n	800c7c4 <__gxx_personality_v0+0x47c>
 800c78e:	4639      	mov	r1, r7
 800c790:	f7ff fd74 	bl	800c27c <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800c794:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
 800c798:	0092      	lsls	r2, r2, #2
 800c79a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c79c:	9014      	str	r0, [sp, #80]	; 0x50
 800c79e:	58ab      	ldr	r3, [r5, r2]
 800c7a0:	4415      	add	r5, r2
 800c7a2:	b133      	cbz	r3, 800c7b2 <__gxx_personality_v0+0x46a>
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	2900      	cmp	r1, #0
 800c7b0:	d1fa      	bne.n	800c7a8 <__gxx_personality_v0+0x460>
 800c7b2:	2204      	movs	r2, #4
 800c7b4:	e9c8 250c 	strd	r2, r5, [r8, #48]	; 0x30
 800c7b8:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 800c7bc:	2503      	movs	r5, #3
 800c7be:	e6b5      	b.n	800c52c <__gxx_personality_v0+0x1e4>
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	e796      	b.n	800c6f2 <__gxx_personality_v0+0x3aa>
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	e7e5      	b.n	800c794 <__gxx_personality_v0+0x44c>
 800c7c8:	9b03      	ldr	r3, [sp, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f43f adcc 	beq.w	800c368 <__gxx_personality_v0+0x20>
 800c7d0:	9b04      	ldr	r3, [sp, #16]
 800c7d2:	07da      	lsls	r2, r3, #31
 800c7d4:	f53f adc8 	bmi.w	800c368 <__gxx_personality_v0+0x20>
 800c7d8:	2502      	movs	r5, #2
 800c7da:	e6a7      	b.n	800c52c <__gxx_personality_v0+0x1e4>
 800c7dc:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
 800c7e0:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f43f adbf 	beq.w	800c368 <__gxx_personality_v0+0x20>
 800c7ea:	9b04      	ldr	r3, [sp, #16]
 800c7ec:	07dd      	lsls	r5, r3, #31
 800c7ee:	f53f adbb 	bmi.w	800c368 <__gxx_personality_v0+0x20>
 800c7f2:	2400      	movs	r4, #0
 800c7f4:	e7f0      	b.n	800c7d8 <__gxx_personality_v0+0x490>
 800c7f6:	9b04      	ldr	r3, [sp, #16]
 800c7f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c7fa:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7fe:	07de      	lsls	r6, r3, #31
 800c800:	4655      	mov	r5, sl
 800c802:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800c806:	f53f aecf 	bmi.w	800c5a8 <__gxx_personality_v0+0x260>
 800c80a:	e7b7      	b.n	800c77c <__gxx_personality_v0+0x434>
 800c80c:	f898 2007 	ldrb.w	r2, [r8, #7]
 800c810:	2a01      	cmp	r2, #1
 800c812:	bf0c      	ite	eq
 800c814:	f858 2c20 	ldreq.w	r2, [r8, #-32]
 800c818:	f108 0258 	addne.w	r2, r8, #88	; 0x58
 800c81c:	920c      	str	r2, [sp, #48]	; 0x30
 800c81e:	e70a      	b.n	800c636 <__gxx_personality_v0+0x2ee>
 800c820:	f000 f8a6 	bl	800c970 <__cxa_begin_catch>
 800c824:	e630      	b.n	800c488 <__gxx_personality_v0+0x140>
 800c826:	f000 fc9d 	bl	800d164 <abort>
 800c82a:	bf00      	nop

0800c82c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800c82c:	2801      	cmp	r0, #1
 800c82e:	b510      	push	{r4, lr}
 800c830:	d81a      	bhi.n	800c868 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 800c832:	f3bf 8f5b 	dmb	ish
 800c836:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800c83a:	e853 2f00 	ldrex	r2, [r3]
 800c83e:	3a01      	subs	r2, #1
 800c840:	e843 2000 	strex	r0, r2, [r3]
 800c844:	2800      	cmp	r0, #0
 800c846:	d1f8      	bne.n	800c83a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800c848:	f3bf 8f5b 	dmb	ish
 800c84c:	b95a      	cbnz	r2, 800c866 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800c84e:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800c852:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800c856:	b10b      	cbz	r3, 800c85c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 800c858:	4620      	mov	r0, r4
 800c85a:	4798      	blx	r3
 800c85c:	4620      	mov	r0, r4
 800c85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c862:	f000 ba7b 	b.w	800cd5c <__cxa_free_exception>
 800c866:	bd10      	pop	{r4, pc}
 800c868:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800c86c:	f000 f9a8 	bl	800cbc0 <_ZN10__cxxabiv111__terminateEPFvvE>

0800c870 <__cxa_init_primary_exception>:
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c872:	2500      	movs	r5, #0
 800c874:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 800c878:	f840 5c80 	str.w	r5, [r0, #-128]
 800c87c:	4604      	mov	r4, r0
 800c87e:	f000 f9d3 	bl	800cc28 <_ZSt14get_unexpectedv>
 800c882:	f844 0c70 	str.w	r0, [r4, #-112]
 800c886:	f000 f9c7 	bl	800cc18 <_ZSt13get_terminatev>
 800c88a:	2347      	movs	r3, #71	; 0x47
 800c88c:	2243      	movs	r2, #67	; 0x43
 800c88e:	274e      	movs	r7, #78	; 0x4e
 800c890:	2655      	movs	r6, #85	; 0x55
 800c892:	490c      	ldr	r1, [pc, #48]	; (800c8c4 <__cxa_init_primary_exception+0x54>)
 800c894:	f804 3c58 	strb.w	r3, [r4, #-88]
 800c898:	232b      	movs	r3, #43	; 0x2b
 800c89a:	f804 5c51 	strb.w	r5, [r4, #-81]
 800c89e:	f804 7c57 	strb.w	r7, [r4, #-87]
 800c8a2:	f804 6c56 	strb.w	r6, [r4, #-86]
 800c8a6:	f844 1c50 	str.w	r1, [r4, #-80]
 800c8aa:	f804 2c55 	strb.w	r2, [r4, #-85]
 800c8ae:	f804 2c54 	strb.w	r2, [r4, #-84]
 800c8b2:	f804 3c53 	strb.w	r3, [r4, #-83]
 800c8b6:	f804 3c52 	strb.w	r3, [r4, #-82]
 800c8ba:	f844 0c6c 	str.w	r0, [r4, #-108]
 800c8be:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 800c8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8c4:	0800c82d 	.word	0x0800c82d

0800c8c8 <__cxa_throw>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	460e      	mov	r6, r1
 800c8ce:	4617      	mov	r7, r2
 800c8d0:	f7ff fc70 	bl	800c1b4 <__cxa_get_globals>
 800c8d4:	6843      	ldr	r3, [r0, #4]
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	3301      	adds	r3, #1
 800c8da:	463a      	mov	r2, r7
 800c8dc:	4631      	mov	r1, r6
 800c8de:	6063      	str	r3, [r4, #4]
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f7ff ffc5 	bl	800c870 <__cxa_init_primary_exception>
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	f844 3b28 	str.w	r3, [r4], #40
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f7fb f968 	bl	8007bc4 <_Unwind_RaiseException>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 f83b 	bl	800c970 <__cxa_begin_catch>
 800c8fa:	f000 f975 	bl	800cbe8 <_ZSt9terminatev>
 800c8fe:	bf00      	nop

0800c900 <__cxa_rethrow>:
 800c900:	b510      	push	{r4, lr}
 800c902:	f7ff fc57 	bl	800c1b4 <__cxa_get_globals>
 800c906:	e9d0 4200 	ldrd	r4, r2, [r0]
 800c90a:	3201      	adds	r2, #1
 800c90c:	6042      	str	r2, [r0, #4]
 800c90e:	b164      	cbz	r4, 800c92a <__cxa_rethrow+0x2a>
 800c910:	f894 2020 	ldrb.w	r2, [r4, #32]
 800c914:	2a47      	cmp	r2, #71	; 0x47
 800c916:	d00a      	beq.n	800c92e <__cxa_rethrow+0x2e>
 800c918:	2200      	movs	r2, #0
 800c91a:	6002      	str	r2, [r0, #0]
 800c91c:	3420      	adds	r4, #32
 800c91e:	4620      	mov	r0, r4
 800c920:	f7fb f974 	bl	8007c0c <_Unwind_Resume_or_Rethrow>
 800c924:	4620      	mov	r0, r4
 800c926:	f000 f823 	bl	800c970 <__cxa_begin_catch>
 800c92a:	f000 f95d 	bl	800cbe8 <_ZSt9terminatev>
 800c92e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800c932:	2a4e      	cmp	r2, #78	; 0x4e
 800c934:	d1f0      	bne.n	800c918 <__cxa_rethrow+0x18>
 800c936:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800c93a:	2a55      	cmp	r2, #85	; 0x55
 800c93c:	d1ec      	bne.n	800c918 <__cxa_rethrow+0x18>
 800c93e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800c942:	2a43      	cmp	r2, #67	; 0x43
 800c944:	d1e8      	bne.n	800c918 <__cxa_rethrow+0x18>
 800c946:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800c94a:	2a43      	cmp	r2, #67	; 0x43
 800c94c:	d1e4      	bne.n	800c918 <__cxa_rethrow+0x18>
 800c94e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800c952:	2a2b      	cmp	r2, #43	; 0x2b
 800c954:	d1e0      	bne.n	800c918 <__cxa_rethrow+0x18>
 800c956:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800c95a:	2a2b      	cmp	r2, #43	; 0x2b
 800c95c:	d1dc      	bne.n	800c918 <__cxa_rethrow+0x18>
 800c95e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800c962:	2a01      	cmp	r2, #1
 800c964:	d8d8      	bhi.n	800c918 <__cxa_rethrow+0x18>
 800c966:	6962      	ldr	r2, [r4, #20]
 800c968:	4252      	negs	r2, r2
 800c96a:	6162      	str	r2, [r4, #20]
 800c96c:	e7d6      	b.n	800c91c <__cxa_rethrow+0x1c>
 800c96e:	bf00      	nop

0800c970 <__cxa_begin_catch>:
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4604      	mov	r4, r0
 800c974:	f7ff fc1e 	bl	800c1b4 <__cxa_get_globals>
 800c978:	7822      	ldrb	r2, [r4, #0]
 800c97a:	6803      	ldr	r3, [r0, #0]
 800c97c:	2a47      	cmp	r2, #71	; 0x47
 800c97e:	f1a4 0120 	sub.w	r1, r4, #32
 800c982:	d004      	beq.n	800c98e <__cxa_begin_catch+0x1e>
 800c984:	bb8b      	cbnz	r3, 800c9ea <__cxa_begin_catch+0x7a>
 800c986:	461c      	mov	r4, r3
 800c988:	6001      	str	r1, [r0, #0]
 800c98a:	4620      	mov	r0, r4
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	7862      	ldrb	r2, [r4, #1]
 800c990:	2a4e      	cmp	r2, #78	; 0x4e
 800c992:	d1f7      	bne.n	800c984 <__cxa_begin_catch+0x14>
 800c994:	78a2      	ldrb	r2, [r4, #2]
 800c996:	2a55      	cmp	r2, #85	; 0x55
 800c998:	d1f4      	bne.n	800c984 <__cxa_begin_catch+0x14>
 800c99a:	78e2      	ldrb	r2, [r4, #3]
 800c99c:	2a43      	cmp	r2, #67	; 0x43
 800c99e:	d1f1      	bne.n	800c984 <__cxa_begin_catch+0x14>
 800c9a0:	7922      	ldrb	r2, [r4, #4]
 800c9a2:	2a43      	cmp	r2, #67	; 0x43
 800c9a4:	d1ee      	bne.n	800c984 <__cxa_begin_catch+0x14>
 800c9a6:	7962      	ldrb	r2, [r4, #5]
 800c9a8:	2a2b      	cmp	r2, #43	; 0x2b
 800c9aa:	d1eb      	bne.n	800c984 <__cxa_begin_catch+0x14>
 800c9ac:	79a2      	ldrb	r2, [r4, #6]
 800c9ae:	2a2b      	cmp	r2, #43	; 0x2b
 800c9b0:	d1e8      	bne.n	800c984 <__cxa_begin_catch+0x14>
 800c9b2:	79e2      	ldrb	r2, [r4, #7]
 800c9b4:	2a01      	cmp	r2, #1
 800c9b6:	d8e5      	bhi.n	800c984 <__cxa_begin_catch+0x14>
 800c9b8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800c9bc:	2a00      	cmp	r2, #0
 800c9be:	db11      	blt.n	800c9e4 <__cxa_begin_catch+0x74>
 800c9c0:	3201      	adds	r2, #1
 800c9c2:	6845      	ldr	r5, [r0, #4]
 800c9c4:	f844 2c0c 	str.w	r2, [r4, #-12]
 800c9c8:	428b      	cmp	r3, r1
 800c9ca:	f105 35ff 	add.w	r5, r5, #4294967295
 800c9ce:	6045      	str	r5, [r0, #4]
 800c9d0:	bf1c      	itt	ne
 800c9d2:	f844 3c10 	strne.w	r3, [r4, #-16]
 800c9d6:	6001      	strne	r1, [r0, #0]
 800c9d8:	4620      	mov	r0, r4
 800c9da:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800c9dc:	f7fa fd40 	bl	8007460 <_Unwind_Complete>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}
 800c9e4:	f1c2 0201 	rsb	r2, r2, #1
 800c9e8:	e7eb      	b.n	800c9c2 <__cxa_begin_catch+0x52>
 800c9ea:	f000 f8fd 	bl	800cbe8 <_ZSt9terminatev>
 800c9ee:	bf00      	nop

0800c9f0 <__cxa_end_catch>:
 800c9f0:	b508      	push	{r3, lr}
 800c9f2:	f7ff fbdb 	bl	800c1ac <__cxa_get_globals_fast>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	6800      	ldr	r0, [r0, #0]
 800c9fa:	b370      	cbz	r0, 800ca5a <__cxa_end_catch+0x6a>
 800c9fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ca00:	2b47      	cmp	r3, #71	; 0x47
 800ca02:	d006      	beq.n	800ca12 <__cxa_end_catch+0x22>
 800ca04:	2300      	movs	r3, #0
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	3020      	adds	r0, #32
 800ca0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca0e:	f7fa bd29 	b.w	8007464 <_Unwind_DeleteException>
 800ca12:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800ca16:	2b4e      	cmp	r3, #78	; 0x4e
 800ca18:	d1f4      	bne.n	800ca04 <__cxa_end_catch+0x14>
 800ca1a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800ca1e:	2b55      	cmp	r3, #85	; 0x55
 800ca20:	d1f0      	bne.n	800ca04 <__cxa_end_catch+0x14>
 800ca22:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800ca26:	2b43      	cmp	r3, #67	; 0x43
 800ca28:	d1ec      	bne.n	800ca04 <__cxa_end_catch+0x14>
 800ca2a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ca2e:	2b43      	cmp	r3, #67	; 0x43
 800ca30:	d1e8      	bne.n	800ca04 <__cxa_end_catch+0x14>
 800ca32:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ca36:	2b2b      	cmp	r3, #43	; 0x2b
 800ca38:	d1e4      	bne.n	800ca04 <__cxa_end_catch+0x14>
 800ca3a:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800ca3e:	2b2b      	cmp	r3, #43	; 0x2b
 800ca40:	d1e0      	bne.n	800ca04 <__cxa_end_catch+0x14>
 800ca42:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d8dc      	bhi.n	800ca04 <__cxa_end_catch+0x14>
 800ca4a:	6943      	ldr	r3, [r0, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	db05      	blt.n	800ca5c <__cxa_end_catch+0x6c>
 800ca50:	3b01      	subs	r3, #1
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d007      	beq.n	800ca66 <__cxa_end_catch+0x76>
 800ca56:	db0d      	blt.n	800ca74 <__cxa_end_catch+0x84>
 800ca58:	6143      	str	r3, [r0, #20]
 800ca5a:	bd08      	pop	{r3, pc}
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	d1fb      	bne.n	800ca58 <__cxa_end_catch+0x68>
 800ca60:	6901      	ldr	r1, [r0, #16]
 800ca62:	6011      	str	r1, [r2, #0]
 800ca64:	e7f8      	b.n	800ca58 <__cxa_end_catch+0x68>
 800ca66:	6903      	ldr	r3, [r0, #16]
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	3020      	adds	r0, #32
 800ca6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca70:	f7fa bcf8 	b.w	8007464 <_Unwind_DeleteException>
 800ca74:	f000 f8b8 	bl	800cbe8 <_ZSt9terminatev>

0800ca78 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 800ca78:	b510      	push	{r4, lr}
 800ca7a:	4b03      	ldr	r3, [pc, #12]	; (800ca88 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 800ca7c:	6003      	str	r3, [r0, #0]
 800ca7e:	4604      	mov	r4, r0
 800ca80:	f000 f99e 	bl	800cdc0 <_ZNSt9type_infoD1Ev>
 800ca84:	4620      	mov	r0, r4
 800ca86:	bd10      	pop	{r4, pc}
 800ca88:	080118c0 	.word	0x080118c0

0800ca8c <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
 800ca90:	6003      	str	r3, [r0, #0]
 800ca92:	4604      	mov	r4, r0
 800ca94:	f000 f994 	bl	800cdc0 <_ZNSt9type_infoD1Ev>
 800ca98:	4620      	mov	r0, r4
 800ca9a:	2108      	movs	r1, #8
 800ca9c:	f000 fa4a 	bl	800cf34 <_ZdlPvj>
 800caa0:	4620      	mov	r0, r4
 800caa2:	bd10      	pop	{r4, pc}
 800caa4:	080118c0 	.word	0x080118c0

0800caa8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	4b03      	ldr	r3, [pc, #12]	; (800cab8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800caac:	6003      	str	r3, [r0, #0]
 800caae:	4604      	mov	r4, r0
 800cab0:	f000 fa64 	bl	800cf7c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800cab4:	4620      	mov	r0, r4
 800cab6:	bd10      	pop	{r4, pc}
 800cab8:	08011914 	.word	0x08011914

0800cabc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800cabc:	b510      	push	{r4, lr}
 800cabe:	4b05      	ldr	r3, [pc, #20]	; (800cad4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800cac0:	6003      	str	r3, [r0, #0]
 800cac2:	4604      	mov	r4, r0
 800cac4:	f000 fa5a 	bl	800cf7c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800cac8:	4620      	mov	r0, r4
 800caca:	210c      	movs	r1, #12
 800cacc:	f000 fa32 	bl	800cf34 <_ZdlPvj>
 800cad0:	4620      	mov	r0, r4
 800cad2:	bd10      	pop	{r4, pc}
 800cad4:	08011914 	.word	0x08011914

0800cad8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800cad8:	b570      	push	{r4, r5, r6, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	460e      	mov	r6, r1
 800cade:	9c06      	ldr	r4, [sp, #24]
 800cae0:	4294      	cmp	r4, r2
 800cae2:	4605      	mov	r5, r0
 800cae4:	d009      	beq.n	800cafa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800cae6:	68a8      	ldr	r0, [r5, #8]
 800cae8:	6805      	ldr	r5, [r0, #0]
 800caea:	9406      	str	r4, [sp, #24]
 800caec:	6a2c      	ldr	r4, [r5, #32]
 800caee:	4631      	mov	r1, r6
 800caf0:	46a4      	mov	ip, r4
 800caf2:	b002      	add	sp, #8
 800caf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800caf8:	4760      	bx	ip
 800cafa:	4619      	mov	r1, r3
 800cafc:	9201      	str	r2, [sp, #4]
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	f000 f964 	bl	800cdcc <_ZNKSt9type_infoeqERKS_>
 800cb04:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d0ec      	beq.n	800cae6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800cb0c:	2006      	movs	r0, #6
 800cb0e:	b002      	add	sp, #8
 800cb10:	bd70      	pop	{r4, r5, r6, pc}
 800cb12:	bf00      	nop

0800cb14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	460e      	mov	r6, r1
 800cb1a:	b081      	sub	sp, #4
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	461f      	mov	r7, r3
 800cb20:	4691      	mov	r9, r2
 800cb22:	4683      	mov	fp, r0
 800cb24:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 800cb28:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 800cb2c:	f000 f94e 	bl	800cdcc <_ZNKSt9type_infoeqERKS_>
 800cb30:	b170      	cbz	r0, 800cb50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 800cb32:	2e00      	cmp	r6, #0
 800cb34:	602c      	str	r4, [r5, #0]
 800cb36:	f885 9004 	strb.w	r9, [r5, #4]
 800cb3a:	db1d      	blt.n	800cb78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 800cb3c:	4434      	add	r4, r6
 800cb3e:	45a0      	cmp	r8, r4
 800cb40:	bf0c      	ite	eq
 800cb42:	2406      	moveq	r4, #6
 800cb44:	2401      	movne	r4, #1
 800cb46:	71ac      	strb	r4, [r5, #6]
 800cb48:	2000      	movs	r0, #0
 800cb4a:	b001      	add	sp, #4
 800cb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb50:	4544      	cmp	r4, r8
 800cb52:	d016      	beq.n	800cb82 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 800cb54:	f8db 0008 	ldr.w	r0, [fp, #8]
 800cb58:	f8d0 c000 	ldr.w	ip, [r0]
 800cb5c:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 800cb60:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 800cb64:	f8dc 401c 	ldr.w	r4, [ip, #28]
 800cb68:	463b      	mov	r3, r7
 800cb6a:	464a      	mov	r2, r9
 800cb6c:	4631      	mov	r1, r6
 800cb6e:	46a4      	mov	ip, r4
 800cb70:	b001      	add	sp, #4
 800cb72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb76:	4760      	bx	ip
 800cb78:	3602      	adds	r6, #2
 800cb7a:	d1e5      	bne.n	800cb48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	71ab      	strb	r3, [r5, #6]
 800cb80:	e7e2      	b.n	800cb48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800cb82:	4651      	mov	r1, sl
 800cb84:	4658      	mov	r0, fp
 800cb86:	f000 f921 	bl	800cdcc <_ZNKSt9type_infoeqERKS_>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d0e2      	beq.n	800cb54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800cb8e:	f885 9005 	strb.w	r9, [r5, #5]
 800cb92:	e7d9      	b.n	800cb48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0800cb94 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800cb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb98:	4607      	mov	r7, r0
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	4615      	mov	r5, r2
 800cb9e:	461e      	mov	r6, r3
 800cba0:	f000 fa26 	bl	800cff0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800cba4:	b108      	cbz	r0, 800cbaa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800cba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbaa:	68b8      	ldr	r0, [r7, #8]
 800cbac:	6807      	ldr	r7, [r0, #0]
 800cbae:	4621      	mov	r1, r4
 800cbb0:	69bc      	ldr	r4, [r7, #24]
 800cbb2:	4633      	mov	r3, r6
 800cbb4:	462a      	mov	r2, r5
 800cbb6:	46a4      	mov	ip, r4
 800cbb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbc:	4760      	bx	ip
 800cbbe:	bf00      	nop

0800cbc0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cbc0:	b508      	push	{r3, lr}
 800cbc2:	4780      	blx	r0
 800cbc4:	f000 face 	bl	800d164 <abort>
 800cbc8:	f7ff fed2 	bl	800c970 <__cxa_begin_catch>
 800cbcc:	f000 faca 	bl	800d164 <abort>
 800cbd0:	460d      	mov	r5, r1
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	f7ff ff0c 	bl	800c9f0 <__cxa_end_catch>
 800cbd8:	3501      	adds	r5, #1
 800cbda:	d001      	beq.n	800cbe0 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 800cbdc:	f7ff fa1d 	bl	800c01a <__cxa_end_cleanup>
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f000 f939 	bl	800ce58 <__cxa_call_unexpected>
 800cbe6:	bf00      	nop

0800cbe8 <_ZSt9terminatev>:
 800cbe8:	b508      	push	{r3, lr}
 800cbea:	4b03      	ldr	r3, [pc, #12]	; (800cbf8 <_ZSt9terminatev+0x10>)
 800cbec:	6818      	ldr	r0, [r3, #0]
 800cbee:	f3bf 8f5b 	dmb	ish
 800cbf2:	f7ff ffe5 	bl	800cbc0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800cbf6:	bf00      	nop
 800cbf8:	20000010 	.word	0x20000010

0800cbfc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800cbfc:	b508      	push	{r3, lr}
 800cbfe:	4780      	blx	r0
 800cc00:	f7ff fff2 	bl	800cbe8 <_ZSt9terminatev>

0800cc04 <_ZSt10unexpectedv>:
 800cc04:	b508      	push	{r3, lr}
 800cc06:	4b03      	ldr	r3, [pc, #12]	; (800cc14 <_ZSt10unexpectedv+0x10>)
 800cc08:	6818      	ldr	r0, [r3, #0]
 800cc0a:	f3bf 8f5b 	dmb	ish
 800cc0e:	f7ff fff5 	bl	800cbfc <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800cc12:	bf00      	nop
 800cc14:	2000000c 	.word	0x2000000c

0800cc18 <_ZSt13get_terminatev>:
 800cc18:	4b02      	ldr	r3, [pc, #8]	; (800cc24 <_ZSt13get_terminatev+0xc>)
 800cc1a:	6818      	ldr	r0, [r3, #0]
 800cc1c:	f3bf 8f5b 	dmb	ish
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	20000010 	.word	0x20000010

0800cc28 <_ZSt14get_unexpectedv>:
 800cc28:	4b02      	ldr	r3, [pc, #8]	; (800cc34 <_ZSt14get_unexpectedv+0xc>)
 800cc2a:	6818      	ldr	r0, [r3, #0]
 800cc2c:	f3bf 8f5b 	dmb	ish
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	2000000c 	.word	0x2000000c

0800cc38 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 800cc38:	b4f0      	push	{r4, r5, r6, r7}
 800cc3a:	4c22      	ldr	r4, [pc, #136]	; (800ccc4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>)
 800cc3c:	6863      	ldr	r3, [r4, #4]
 800cc3e:	f1a0 0608 	sub.w	r6, r0, #8
 800cc42:	b31b      	cbz	r3, 800cc8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 800cc44:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800cc48:	19f5      	adds	r5, r6, r7
 800cc4a:	42ab      	cmp	r3, r5
 800cc4c:	d81e      	bhi.n	800cc8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 800cc4e:	d022      	beq.n	800cc96 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5e>
 800cc50:	6859      	ldr	r1, [r3, #4]
 800cc52:	2900      	cmp	r1, #0
 800cc54:	d031      	beq.n	800ccba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 800cc56:	428d      	cmp	r5, r1
 800cc58:	d303      	bcc.n	800cc62 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x2a>
 800cc5a:	e02e      	b.n	800ccba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 800cc5c:	4295      	cmp	r5, r2
 800cc5e:	d205      	bcs.n	800cc6c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 800cc60:	4611      	mov	r1, r2
 800cc62:	684a      	ldr	r2, [r1, #4]
 800cc64:	1d1c      	adds	r4, r3, #4
 800cc66:	460b      	mov	r3, r1
 800cc68:	2a00      	cmp	r2, #0
 800cc6a:	d1f7      	bne.n	800cc5c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x24>
 800cc6c:	4295      	cmp	r5, r2
 800cc6e:	d01c      	beq.n	800ccaa <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x72>
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	1899      	adds	r1, r3, r2
 800cc76:	428e      	cmp	r6, r1
 800cc78:	d01c      	beq.n	800ccb4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	f840 3c04 	str.w	r3, [r0, #-4]
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	f840 7c08 	str.w	r7, [r0, #-8]
 800cc86:	605e      	str	r6, [r3, #4]
 800cc88:	bcf0      	pop	{r4, r5, r6, r7}
 800cc8a:	4770      	bx	lr
 800cc8c:	f840 3c04 	str.w	r3, [r0, #-4]
 800cc90:	6066      	str	r6, [r4, #4]
 800cc92:	bcf0      	pop	{r4, r5, r6, r7}
 800cc94:	4770      	bx	lr
 800cc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9a:	4417      	add	r7, r2
 800cc9c:	f840 7c08 	str.w	r7, [r0, #-8]
 800cca0:	f840 3c04 	str.w	r3, [r0, #-4]
 800cca4:	6066      	str	r6, [r4, #4]
 800cca6:	bcf0      	pop	{r4, r5, r6, r7}
 800cca8:	4770      	bx	lr
 800ccaa:	e9d5 3200 	ldrd	r3, r2, [r5]
 800ccae:	604a      	str	r2, [r1, #4]
 800ccb0:	441f      	add	r7, r3
 800ccb2:	e7dd      	b.n	800cc70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 800ccb4:	4417      	add	r7, r2
 800ccb6:	601f      	str	r7, [r3, #0]
 800ccb8:	e7eb      	b.n	800cc92 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5a>
 800ccba:	460a      	mov	r2, r1
 800ccbc:	3404      	adds	r4, #4
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	e7d4      	b.n	800cc6c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 800ccc2:	bf00      	nop
 800ccc4:	200009ec 	.word	0x200009ec

0800ccc8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 800ccc8:	b430      	push	{r4, r5}
 800ccca:	4c17      	ldr	r4, [pc, #92]	; (800cd28 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 800cccc:	f100 0208 	add.w	r2, r0, #8
 800ccd0:	6863      	ldr	r3, [r4, #4]
 800ccd2:	2a08      	cmp	r2, #8
 800ccd4:	bf38      	it	cc
 800ccd6:	2208      	movcc	r2, #8
 800ccd8:	b303      	cbz	r3, 800cd1c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 800ccda:	3207      	adds	r2, #7
 800ccdc:	6819      	ldr	r1, [r3, #0]
 800ccde:	f022 0207 	bic.w	r2, r2, #7
 800cce2:	428a      	cmp	r2, r1
 800cce4:	d804      	bhi.n	800ccf0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 800cce6:	e01b      	b.n	800cd20 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 800cce8:	6801      	ldr	r1, [r0, #0]
 800ccea:	428a      	cmp	r2, r1
 800ccec:	d905      	bls.n	800ccfa <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	6858      	ldr	r0, [r3, #4]
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d1f8      	bne.n	800cce8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 800ccf6:	bc30      	pop	{r4, r5}
 800ccf8:	4770      	bx	lr
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	1a8c      	subs	r4, r1, r2
 800ccfe:	2c07      	cmp	r4, #7
 800cd00:	6845      	ldr	r5, [r0, #4]
 800cd02:	d908      	bls.n	800cd16 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4e>
 800cd04:	1881      	adds	r1, r0, r2
 800cd06:	604d      	str	r5, [r1, #4]
 800cd08:	5084      	str	r4, [r0, r2]
 800cd0a:	6818      	ldr	r0, [r3, #0]
 800cd0c:	6002      	str	r2, [r0, #0]
 800cd0e:	6019      	str	r1, [r3, #0]
 800cd10:	3008      	adds	r0, #8
 800cd12:	bc30      	pop	{r4, r5}
 800cd14:	4770      	bx	lr
 800cd16:	6001      	str	r1, [r0, #0]
 800cd18:	601d      	str	r5, [r3, #0]
 800cd1a:	e7f9      	b.n	800cd10 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	e7ea      	b.n	800ccf6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 800cd20:	4618      	mov	r0, r3
 800cd22:	1d23      	adds	r3, r4, #4
 800cd24:	e7ea      	b.n	800ccfc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 800cd26:	bf00      	nop
 800cd28:	200009ec 	.word	0x200009ec

0800cd2c <__cxa_allocate_exception>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	f100 0480 	add.w	r4, r0, #128	; 0x80
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 fc60 	bl	800d5f8 <malloc>
 800cd38:	b138      	cbz	r0, 800cd4a <__cxa_allocate_exception+0x1e>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2280      	movs	r2, #128	; 0x80
 800cd3e:	2100      	movs	r1, #0
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 fed2 	bl	800daea <memset>
 800cd46:	3080      	adds	r0, #128	; 0x80
 800cd48:	bd10      	pop	{r4, pc}
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f7ff ffbc 	bl	800ccc8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d1f2      	bne.n	800cd3c <__cxa_allocate_exception+0x10>
 800cd56:	f7ff ff47 	bl	800cbe8 <_ZSt9terminatev>
 800cd5a:	bf00      	nop

0800cd5c <__cxa_free_exception>:
 800cd5c:	4a06      	ldr	r2, [pc, #24]	; (800cd78 <__cxa_free_exception+0x1c>)
 800cd5e:	6893      	ldr	r3, [r2, #8]
 800cd60:	3880      	subs	r0, #128	; 0x80
 800cd62:	4298      	cmp	r0, r3
 800cd64:	d903      	bls.n	800cd6e <__cxa_free_exception+0x12>
 800cd66:	68d2      	ldr	r2, [r2, #12]
 800cd68:	4413      	add	r3, r2
 800cd6a:	4298      	cmp	r0, r3
 800cd6c:	d301      	bcc.n	800cd72 <__cxa_free_exception+0x16>
 800cd6e:	f000 bc4b 	b.w	800d608 <free>
 800cd72:	f7ff bf61 	b.w	800cc38 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 800cd76:	bf00      	nop
 800cd78:	200009ec 	.word	0x200009ec

0800cd7c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4c08      	ldr	r4, [pc, #32]	; (800cda0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 800cd80:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 800cd84:	4628      	mov	r0, r5
 800cd86:	60e5      	str	r5, [r4, #12]
 800cd88:	f000 fc36 	bl	800d5f8 <malloc>
 800cd8c:	60a0      	str	r0, [r4, #8]
 800cd8e:	b120      	cbz	r0, 800cd9a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 800cd90:	2300      	movs	r3, #0
 800cd92:	6060      	str	r0, [r4, #4]
 800cd94:	e9c0 5300 	strd	r5, r3, [r0]
 800cd98:	bd38      	pop	{r3, r4, r5, pc}
 800cd9a:	60e0      	str	r0, [r4, #12]
 800cd9c:	6060      	str	r0, [r4, #4]
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	200009ec 	.word	0x200009ec

0800cda4 <_ZNSt13bad_exceptionD1Ev>:
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop

0800cda8 <_ZGTtNKSt13bad_exception4whatEv>:
 800cda8:	4800      	ldr	r0, [pc, #0]	; (800cdac <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 800cdaa:	4770      	bx	lr
 800cdac:	08011938 	.word	0x08011938

0800cdb0 <_ZNSt13bad_exceptionD0Ev>:
 800cdb0:	b510      	push	{r4, lr}
 800cdb2:	2104      	movs	r1, #4
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	f000 f8bd 	bl	800cf34 <_ZdlPvj>
 800cdba:	4620      	mov	r0, r4
 800cdbc:	bd10      	pop	{r4, pc}
 800cdbe:	bf00      	nop

0800cdc0 <_ZNSt9type_infoD1Ev>:
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop

0800cdc4 <_ZNKSt9type_info14__is_pointer_pEv>:
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	4770      	bx	lr

0800cdc8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800cdc8:	2000      	movs	r0, #0
 800cdca:	4770      	bx	lr

0800cdcc <_ZNKSt9type_infoeqERKS_>:
 800cdcc:	4281      	cmp	r1, r0
 800cdce:	d00f      	beq.n	800cdf0 <_ZNKSt9type_infoeqERKS_+0x24>
 800cdd0:	b508      	push	{r3, lr}
 800cdd2:	6840      	ldr	r0, [r0, #4]
 800cdd4:	7803      	ldrb	r3, [r0, #0]
 800cdd6:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd8:	d00c      	beq.n	800cdf4 <_ZNKSt9type_infoeqERKS_+0x28>
 800cdda:	6849      	ldr	r1, [r1, #4]
 800cddc:	780b      	ldrb	r3, [r1, #0]
 800cdde:	2b2a      	cmp	r3, #42	; 0x2a
 800cde0:	bf08      	it	eq
 800cde2:	3101      	addeq	r1, #1
 800cde4:	f7f9 ffec 	bl	8006dc0 <strcmp>
 800cde8:	fab0 f080 	clz	r0, r0
 800cdec:	0940      	lsrs	r0, r0, #5
 800cdee:	bd08      	pop	{r3, pc}
 800cdf0:	2001      	movs	r0, #1
 800cdf2:	4770      	bx	lr
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	bd08      	pop	{r3, pc}

0800cdf8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800cdf8:	f7ff bfe8 	b.w	800cdcc <_ZNKSt9type_infoeqERKS_>

0800cdfc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800cdfc:	7803      	ldrb	r3, [r0, #0]
 800cdfe:	2b47      	cmp	r3, #71	; 0x47
 800ce00:	d001      	beq.n	800ce06 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 800ce02:	2000      	movs	r0, #0
 800ce04:	4770      	bx	lr
 800ce06:	7843      	ldrb	r3, [r0, #1]
 800ce08:	2b4e      	cmp	r3, #78	; 0x4e
 800ce0a:	d1fa      	bne.n	800ce02 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800ce0c:	7883      	ldrb	r3, [r0, #2]
 800ce0e:	2b55      	cmp	r3, #85	; 0x55
 800ce10:	d1f7      	bne.n	800ce02 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800ce12:	78c3      	ldrb	r3, [r0, #3]
 800ce14:	2b43      	cmp	r3, #67	; 0x43
 800ce16:	d1f4      	bne.n	800ce02 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800ce18:	7903      	ldrb	r3, [r0, #4]
 800ce1a:	2b43      	cmp	r3, #67	; 0x43
 800ce1c:	d1f1      	bne.n	800ce02 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800ce1e:	7943      	ldrb	r3, [r0, #5]
 800ce20:	2b2b      	cmp	r3, #43	; 0x2b
 800ce22:	d1ee      	bne.n	800ce02 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800ce24:	7983      	ldrb	r3, [r0, #6]
 800ce26:	2b2b      	cmp	r3, #43	; 0x2b
 800ce28:	d1eb      	bne.n	800ce02 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800ce2a:	79c0      	ldrb	r0, [r0, #7]
 800ce2c:	2801      	cmp	r0, #1
 800ce2e:	bf8c      	ite	hi
 800ce30:	2000      	movhi	r0, #0
 800ce32:	2001      	movls	r0, #1
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop

0800ce38 <__cxa_call_terminate>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	b130      	cbz	r0, 800ce4a <__cxa_call_terminate+0x12>
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	f7ff fd97 	bl	800c970 <__cxa_begin_catch>
 800ce42:	4620      	mov	r0, r4
 800ce44:	f7ff ffda 	bl	800cdfc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800ce48:	b908      	cbnz	r0, 800ce4e <__cxa_call_terminate+0x16>
 800ce4a:	f7ff fecd 	bl	800cbe8 <_ZSt9terminatev>
 800ce4e:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800ce52:	f7ff feb5 	bl	800cbc0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800ce56:	bf00      	nop

0800ce58 <__cxa_call_unexpected>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	b085      	sub	sp, #20
 800ce5e:	4602      	mov	r2, r0
 800ce60:	f7ff ffcc 	bl	800cdfc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800ce64:	b150      	cbz	r0, 800ce7c <__cxa_call_unexpected+0x24>
 800ce66:	e952 8506 	ldrd	r8, r5, [r2, #-24]
 800ce6a:	4610      	mov	r0, r2
 800ce6c:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800ce6e:	e9d2 740c 	ldrd	r7, r4, [r2, #48]	; 0x30
 800ce72:	f7ff fd7d 	bl	800c970 <__cxa_begin_catch>
 800ce76:	4640      	mov	r0, r8
 800ce78:	f7ff fec0 	bl	800cbfc <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	f7ff fd77 	bl	800c970 <__cxa_begin_catch>
 800ce82:	f7ff febf 	bl	800cc04 <_ZSt10unexpectedv>
 800ce86:	f7ff fd73 	bl	800c970 <__cxa_begin_catch>
 800ce8a:	f7ff fead 	bl	800cbe8 <_ZSt9terminatev>
 800ce8e:	f7ff fd6f 	bl	800c970 <__cxa_begin_catch>
 800ce92:	f7ff f98b 	bl	800c1ac <__cxa_get_globals_fast>
 800ce96:	6803      	ldr	r3, [r0, #0]
 800ce98:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800ce9c:	f10d 0a10 	add.w	sl, sp, #16
 800cea0:	2a01      	cmp	r2, #1
 800cea2:	bf0c      	ite	eq
 800cea4:	681a      	ldreq	r2, [r3, #0]
 800cea6:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 800ceaa:	f04f 0800 	mov.w	r8, #0
 800ceae:	3320      	adds	r3, #32
 800ceb0:	f84a 2d08 	str.w	r2, [sl, #-8]!
 800ceb4:	f027 0b03 	bic.w	fp, r7, #3
 800ceb8:	9301      	str	r3, [sp, #4]
 800ceba:	46c1      	mov	r9, r8
 800cebc:	45b1      	cmp	r9, r6
 800cebe:	da1b      	bge.n	800cef8 <__cxa_call_unexpected+0xa0>
 800cec0:	6827      	ldr	r7, [r4, #0]
 800cec2:	b107      	cbz	r7, 800cec6 <__cxa_call_unexpected+0x6e>
 800cec4:	4427      	add	r7, r4
 800cec6:	4653      	mov	r3, sl
 800cec8:	2200      	movs	r2, #0
 800ceca:	4639      	mov	r1, r7
 800cecc:	9801      	ldr	r0, [sp, #4]
 800cece:	f7ff f8ab 	bl	800c028 <__cxa_type_match>
 800ced2:	b9e8      	cbnz	r0, 800cf10 <__cxa_call_unexpected+0xb8>
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	4914      	ldr	r1, [pc, #80]	; (800cf28 <__cxa_call_unexpected+0xd0>)
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	aa04      	add	r2, sp, #16
 800cede:	2301      	movs	r3, #1
 800cee0:	f842 0d04 	str.w	r0, [r2, #-4]!
 800cee4:	4638      	mov	r0, r7
 800cee6:	9f00      	ldr	r7, [sp, #0]
 800cee8:	47b8      	blx	r7
 800ceea:	2800      	cmp	r0, #0
 800ceec:	bf18      	it	ne
 800ceee:	4680      	movne	r8, r0
 800cef0:	f109 0901 	add.w	r9, r9, #1
 800cef4:	445c      	add	r4, fp
 800cef6:	e7e1      	b.n	800cebc <__cxa_call_unexpected+0x64>
 800cef8:	f1b8 0f00 	cmp.w	r8, #0
 800cefc:	d010      	beq.n	800cf20 <__cxa_call_unexpected+0xc8>
 800cefe:	2004      	movs	r0, #4
 800cf00:	f7ff ff14 	bl	800cd2c <__cxa_allocate_exception>
 800cf04:	4b09      	ldr	r3, [pc, #36]	; (800cf2c <__cxa_call_unexpected+0xd4>)
 800cf06:	6003      	str	r3, [r0, #0]
 800cf08:	4a09      	ldr	r2, [pc, #36]	; (800cf30 <__cxa_call_unexpected+0xd8>)
 800cf0a:	4907      	ldr	r1, [pc, #28]	; (800cf28 <__cxa_call_unexpected+0xd0>)
 800cf0c:	f7ff fcdc 	bl	800c8c8 <__cxa_throw>
 800cf10:	f7ff fcf6 	bl	800c900 <__cxa_rethrow>
 800cf14:	f7ff fd6c 	bl	800c9f0 <__cxa_end_catch>
 800cf18:	f7ff fd6a 	bl	800c9f0 <__cxa_end_catch>
 800cf1c:	f7ff f87d 	bl	800c01a <__cxa_end_cleanup>
 800cf20:	4628      	mov	r0, r5
 800cf22:	f7ff fe4d 	bl	800cbc0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800cf26:	bf00      	nop
 800cf28:	0801195c 	.word	0x0801195c
 800cf2c:	080119e0 	.word	0x080119e0
 800cf30:	0800cda5 	.word	0x0800cda5

0800cf34 <_ZdlPvj>:
 800cf34:	f000 b87e 	b.w	800d034 <_ZdlPv>

0800cf38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	6803      	ldr	r3, [r0, #0]
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	2400      	movs	r4, #0
 800cf40:	699e      	ldr	r6, [r3, #24]
 800cf42:	9400      	str	r4, [sp, #0]
 800cf44:	2310      	movs	r3, #16
 800cf46:	4615      	mov	r5, r2
 800cf48:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cf4c:	6812      	ldr	r2, [r2, #0]
 800cf4e:	f88d 4004 	strb.w	r4, [sp, #4]
 800cf52:	466b      	mov	r3, sp
 800cf54:	47b0      	blx	r6
 800cf56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf5a:	f003 0306 	and.w	r3, r3, #6
 800cf5e:	2b06      	cmp	r3, #6
 800cf60:	bf03      	ittte	eq
 800cf62:	9b00      	ldreq	r3, [sp, #0]
 800cf64:	602b      	streq	r3, [r5, #0]
 800cf66:	2001      	moveq	r0, #1
 800cf68:	4620      	movne	r0, r4
 800cf6a:	b004      	add	sp, #16
 800cf6c:	bd70      	pop	{r4, r5, r6, pc}
 800cf6e:	bf00      	nop

0800cf70 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800cf70:	9800      	ldr	r0, [sp, #0]
 800cf72:	4290      	cmp	r0, r2
 800cf74:	bf0c      	ite	eq
 800cf76:	2006      	moveq	r0, #6
 800cf78:	2001      	movne	r0, #1
 800cf7a:	4770      	bx	lr

0800cf7c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800cf7c:	b510      	push	{r4, lr}
 800cf7e:	4b03      	ldr	r3, [pc, #12]	; (800cf8c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800cf80:	6003      	str	r3, [r0, #0]
 800cf82:	4604      	mov	r4, r0
 800cf84:	f7ff ff1c 	bl	800cdc0 <_ZNSt9type_infoD1Ev>
 800cf88:	4620      	mov	r0, r4
 800cf8a:	bd10      	pop	{r4, pc}
 800cf8c:	08011a3c 	.word	0x08011a3c

0800cf90 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800cf90:	b510      	push	{r4, lr}
 800cf92:	4b05      	ldr	r3, [pc, #20]	; (800cfa8 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800cf94:	6003      	str	r3, [r0, #0]
 800cf96:	4604      	mov	r4, r0
 800cf98:	f7ff ff12 	bl	800cdc0 <_ZNSt9type_infoD1Ev>
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	2108      	movs	r1, #8
 800cfa0:	f7ff ffc8 	bl	800cf34 <_ZdlPvj>
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	bd10      	pop	{r4, pc}
 800cfa8:	08011a3c 	.word	0x08011a3c

0800cfac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800cfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb0:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
 800cfb4:	9d06      	ldr	r5, [sp, #24]
 800cfb6:	428d      	cmp	r5, r1
 800cfb8:	4690      	mov	r8, r2
 800cfba:	461f      	mov	r7, r3
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	d00c      	beq.n	800cfda <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff ff02 	bl	800cdcc <_ZNKSt9type_infoeqERKS_>
 800cfc8:	b120      	cbz	r0, 800cfd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	6025      	str	r5, [r4, #0]
 800cfce:	f884 8004 	strb.w	r8, [r4, #4]
 800cfd2:	71a3      	strb	r3, [r4, #6]
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfda:	9907      	ldr	r1, [sp, #28]
 800cfdc:	f7ff fef6 	bl	800cdcc <_ZNKSt9type_infoeqERKS_>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d0ed      	beq.n	800cfc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 800cfe4:	f884 8005 	strb.w	r8, [r4, #5]
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfee:	bf00      	nop

0800cff0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4615      	mov	r5, r2
 800cff4:	461c      	mov	r4, r3
 800cff6:	f7ff fee9 	bl	800cdcc <_ZNKSt9type_infoeqERKS_>
 800cffa:	b120      	cbz	r0, 800d006 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800cffc:	2208      	movs	r2, #8
 800cffe:	2306      	movs	r3, #6
 800d000:	6025      	str	r5, [r4, #0]
 800d002:	60e2      	str	r2, [r4, #12]
 800d004:	7123      	strb	r3, [r4, #4]
 800d006:	bd38      	pop	{r3, r4, r5, pc}

0800d008 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800d008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d00c:	4617      	mov	r7, r2
 800d00e:	461c      	mov	r4, r3
 800d010:	4606      	mov	r6, r0
 800d012:	460d      	mov	r5, r1
 800d014:	f7ff feda 	bl	800cdcc <_ZNKSt9type_infoeqERKS_>
 800d018:	b908      	cbnz	r0, 800d01e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800d01a:	2c03      	cmp	r4, #3
 800d01c:	d901      	bls.n	800d022 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800d01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d022:	682b      	ldr	r3, [r5, #0]
 800d024:	463a      	mov	r2, r7
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	695b      	ldr	r3, [r3, #20]
 800d02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d030:	4718      	bx	r3
 800d032:	bf00      	nop

0800d034 <_ZdlPv>:
 800d034:	f000 bae8 	b.w	800d608 <free>

0800d038 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 800d038:	b570      	push	{r4, r5, r6, lr}
 800d03a:	4b3c      	ldr	r3, [pc, #240]	; (800d12c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 800d03c:	781a      	ldrb	r2, [r3, #0]
 800d03e:	b082      	sub	sp, #8
 800d040:	2a00      	cmp	r2, #0
 800d042:	d135      	bne.n	800d0b0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 800d044:	2401      	movs	r4, #1
 800d046:	701c      	strb	r4, [r3, #0]
 800d048:	f000 f87e 	bl	800d148 <__cxa_current_exception_type>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d03d      	beq.n	800d0cc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>
 800d050:	6844      	ldr	r4, [r0, #4]
 800d052:	4d37      	ldr	r5, [pc, #220]	; (800d130 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800d054:	7823      	ldrb	r3, [r4, #0]
 800d056:	2b2a      	cmp	r3, #42	; 0x2a
 800d058:	ab02      	add	r3, sp, #8
 800d05a:	f04f 32ff 	mov.w	r2, #4294967295
 800d05e:	bf08      	it	eq
 800d060:	3401      	addeq	r4, #1
 800d062:	f843 2d04 	str.w	r2, [r3, #-4]!
 800d066:	2200      	movs	r2, #0
 800d068:	4611      	mov	r1, r2
 800d06a:	4620      	mov	r0, r4
 800d06c:	f7f9 fde0 	bl	8006c30 <__cxa_demangle>
 800d070:	682b      	ldr	r3, [r5, #0]
 800d072:	4606      	mov	r6, r0
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	482f      	ldr	r0, [pc, #188]	; (800d134 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800d078:	2230      	movs	r2, #48	; 0x30
 800d07a:	2101      	movs	r1, #1
 800d07c:	f000 fa86 	bl	800d58c <fwrite>
 800d080:	9b01      	ldr	r3, [sp, #4]
 800d082:	b17b      	cbz	r3, 800d0a4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	4620      	mov	r0, r4
 800d088:	68d9      	ldr	r1, [r3, #12]
 800d08a:	f000 f8df 	bl	800d24c <fputs>
 800d08e:	682b      	ldr	r3, [r5, #0]
 800d090:	4829      	ldr	r0, [pc, #164]	; (800d138 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	2202      	movs	r2, #2
 800d096:	2101      	movs	r1, #1
 800d098:	f000 fa78 	bl	800d58c <fwrite>
 800d09c:	9b01      	ldr	r3, [sp, #4]
 800d09e:	b18b      	cbz	r3, 800d0c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 800d0a0:	f7ff fc2e 	bl	800c900 <__cxa_rethrow>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	68d9      	ldr	r1, [r3, #12]
 800d0aa:	f000 f8cf 	bl	800d24c <fputs>
 800d0ae:	e7ee      	b.n	800d08e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 800d0b0:	4b1f      	ldr	r3, [pc, #124]	; (800d130 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800d0b2:	4822      	ldr	r0, [pc, #136]	; (800d13c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	221d      	movs	r2, #29
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	f000 fa66 	bl	800d58c <fwrite>
 800d0c0:	f000 f850 	bl	800d164 <abort>
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f000 fa9f 	bl	800d608 <free>
 800d0ca:	e7e9      	b.n	800d0a0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 800d0cc:	4b18      	ldr	r3, [pc, #96]	; (800d130 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800d0ce:	481c      	ldr	r0, [pc, #112]	; (800d140 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	222d      	movs	r2, #45	; 0x2d
 800d0d8:	f000 fa58 	bl	800d58c <fwrite>
 800d0dc:	f000 f842 	bl	800d164 <abort>
 800d0e0:	2901      	cmp	r1, #1
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	d119      	bne.n	800d11a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe2>
 800d0e6:	f7ff fc43 	bl	800c970 <__cxa_begin_catch>
 800d0ea:	6803      	ldr	r3, [r0, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	4798      	blx	r3
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	4813      	ldr	r0, [pc, #76]	; (800d144 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	220b      	movs	r2, #11
 800d0fc:	f000 fa46 	bl	800d58c <fwrite>
 800d100:	682b      	ldr	r3, [r5, #0]
 800d102:	4630      	mov	r0, r6
 800d104:	68d9      	ldr	r1, [r3, #12]
 800d106:	f000 f8a1 	bl	800d24c <fputs>
 800d10a:	682b      	ldr	r3, [r5, #0]
 800d10c:	200a      	movs	r0, #10
 800d10e:	68d9      	ldr	r1, [r3, #12]
 800d110:	f000 f85a 	bl	800d1c8 <fputc>
 800d114:	f7ff fc6c 	bl	800c9f0 <__cxa_end_catch>
 800d118:	e7e0      	b.n	800d0dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 800d11a:	f7ff fc29 	bl	800c970 <__cxa_begin_catch>
 800d11e:	f7ff fc67 	bl	800c9f0 <__cxa_end_catch>
 800d122:	e7db      	b.n	800d0dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 800d124:	f7ff fc64 	bl	800c9f0 <__cxa_end_catch>
 800d128:	f7fe ff77 	bl	800c01a <__cxa_end_cleanup>
 800d12c:	200009fc 	.word	0x200009fc
 800d130:	20000014 	.word	0x20000014
 800d134:	08011a80 	.word	0x08011a80
 800d138:	08011ab4 	.word	0x08011ab4
 800d13c:	08011a60 	.word	0x08011a60
 800d140:	08011ab8 	.word	0x08011ab8
 800d144:	08011ae8 	.word	0x08011ae8

0800d148 <__cxa_current_exception_type>:
 800d148:	b508      	push	{r3, lr}
 800d14a:	f7ff f833 	bl	800c1b4 <__cxa_get_globals>
 800d14e:	6800      	ldr	r0, [r0, #0]
 800d150:	b130      	cbz	r0, 800d160 <__cxa_current_exception_type+0x18>
 800d152:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800d156:	6800      	ldr	r0, [r0, #0]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	bf08      	it	eq
 800d15c:	f850 0c78 	ldreq.w	r0, [r0, #-120]
 800d160:	bd08      	pop	{r3, pc}
 800d162:	bf00      	nop

0800d164 <abort>:
 800d164:	b508      	push	{r3, lr}
 800d166:	2006      	movs	r0, #6
 800d168:	f000 fef2 	bl	800df50 <raise>
 800d16c:	2001      	movs	r0, #1
 800d16e:	f7fe fd6b 	bl	800bc48 <_exit>
	...

0800d174 <__errno>:
 800d174:	4b01      	ldr	r3, [pc, #4]	; (800d17c <__errno+0x8>)
 800d176:	6818      	ldr	r0, [r3, #0]
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	20000014 	.word	0x20000014

0800d180 <_fputc_r>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	460e      	mov	r6, r1
 800d184:	4614      	mov	r4, r2
 800d186:	4605      	mov	r5, r0
 800d188:	b118      	cbz	r0, 800d192 <_fputc_r+0x12>
 800d18a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d18c:	b90b      	cbnz	r3, 800d192 <_fputc_r+0x12>
 800d18e:	f003 f89d 	bl	80102cc <__sinit>
 800d192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d194:	07d8      	lsls	r0, r3, #31
 800d196:	d405      	bmi.n	800d1a4 <_fputc_r+0x24>
 800d198:	89a3      	ldrh	r3, [r4, #12]
 800d19a:	0599      	lsls	r1, r3, #22
 800d19c:	d402      	bmi.n	800d1a4 <_fputc_r+0x24>
 800d19e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1a0:	f000 fa28 	bl	800d5f4 <__retarget_lock_acquire_recursive>
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	4631      	mov	r1, r6
 800d1aa:	f000 fcb3 	bl	800db14 <_putc_r>
 800d1ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1b0:	07da      	lsls	r2, r3, #31
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	d405      	bmi.n	800d1c2 <_fputc_r+0x42>
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	059b      	lsls	r3, r3, #22
 800d1ba:	d402      	bmi.n	800d1c2 <_fputc_r+0x42>
 800d1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1be:	f000 fa1a 	bl	800d5f6 <__retarget_lock_release_recursive>
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d1c8 <fputc>:
 800d1c8:	4b02      	ldr	r3, [pc, #8]	; (800d1d4 <fputc+0xc>)
 800d1ca:	460a      	mov	r2, r1
 800d1cc:	4601      	mov	r1, r0
 800d1ce:	6818      	ldr	r0, [r3, #0]
 800d1d0:	f7ff bfd6 	b.w	800d180 <_fputc_r>
 800d1d4:	20000014 	.word	0x20000014

0800d1d8 <_fputs_r>:
 800d1d8:	b530      	push	{r4, r5, lr}
 800d1da:	b087      	sub	sp, #28
 800d1dc:	4605      	mov	r5, r0
 800d1de:	4608      	mov	r0, r1
 800d1e0:	4614      	mov	r4, r2
 800d1e2:	9101      	str	r1, [sp, #4]
 800d1e4:	f7f9 fdf6 	bl	8006dd4 <strlen>
 800d1e8:	ab01      	add	r3, sp, #4
 800d1ea:	9303      	str	r3, [sp, #12]
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	9005      	str	r0, [sp, #20]
 800d1f0:	9002      	str	r0, [sp, #8]
 800d1f2:	9304      	str	r3, [sp, #16]
 800d1f4:	b125      	cbz	r5, 800d200 <_fputs_r+0x28>
 800d1f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d1f8:	b913      	cbnz	r3, 800d200 <_fputs_r+0x28>
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f003 f866 	bl	80102cc <__sinit>
 800d200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d202:	07db      	lsls	r3, r3, #31
 800d204:	d405      	bmi.n	800d212 <_fputs_r+0x3a>
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	0598      	lsls	r0, r3, #22
 800d20a:	d402      	bmi.n	800d212 <_fputs_r+0x3a>
 800d20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d20e:	f000 f9f1 	bl	800d5f4 <__retarget_lock_acquire_recursive>
 800d212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d216:	0499      	lsls	r1, r3, #18
 800d218:	d406      	bmi.n	800d228 <_fputs_r+0x50>
 800d21a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d21e:	81a3      	strh	r3, [r4, #12]
 800d220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d226:	6663      	str	r3, [r4, #100]	; 0x64
 800d228:	aa03      	add	r2, sp, #12
 800d22a:	4628      	mov	r0, r5
 800d22c:	4621      	mov	r1, r4
 800d22e:	f000 f815 	bl	800d25c <__sfvwrite_r>
 800d232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d234:	07da      	lsls	r2, r3, #31
 800d236:	4605      	mov	r5, r0
 800d238:	d405      	bmi.n	800d246 <_fputs_r+0x6e>
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	059b      	lsls	r3, r3, #22
 800d23e:	d402      	bmi.n	800d246 <_fputs_r+0x6e>
 800d240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d242:	f000 f9d8 	bl	800d5f6 <__retarget_lock_release_recursive>
 800d246:	4628      	mov	r0, r5
 800d248:	b007      	add	sp, #28
 800d24a:	bd30      	pop	{r4, r5, pc}

0800d24c <fputs>:
 800d24c:	4b02      	ldr	r3, [pc, #8]	; (800d258 <fputs+0xc>)
 800d24e:	460a      	mov	r2, r1
 800d250:	4601      	mov	r1, r0
 800d252:	6818      	ldr	r0, [r3, #0]
 800d254:	f7ff bfc0 	b.w	800d1d8 <_fputs_r>
 800d258:	20000014 	.word	0x20000014

0800d25c <__sfvwrite_r>:
 800d25c:	6893      	ldr	r3, [r2, #8]
 800d25e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d262:	4680      	mov	r8, r0
 800d264:	460c      	mov	r4, r1
 800d266:	4691      	mov	r9, r2
 800d268:	b91b      	cbnz	r3, 800d272 <__sfvwrite_r+0x16>
 800d26a:	2000      	movs	r0, #0
 800d26c:	b003      	add	sp, #12
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	898b      	ldrh	r3, [r1, #12]
 800d274:	0718      	lsls	r0, r3, #28
 800d276:	d54f      	bpl.n	800d318 <__sfvwrite_r+0xbc>
 800d278:	690b      	ldr	r3, [r1, #16]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d04c      	beq.n	800d318 <__sfvwrite_r+0xbc>
 800d27e:	89a5      	ldrh	r5, [r4, #12]
 800d280:	f8d9 6000 	ldr.w	r6, [r9]
 800d284:	f015 0702 	ands.w	r7, r5, #2
 800d288:	d169      	bne.n	800d35e <__sfvwrite_r+0x102>
 800d28a:	f015 0501 	ands.w	r5, r5, #1
 800d28e:	f000 809a 	beq.w	800d3c6 <__sfvwrite_r+0x16a>
 800d292:	4638      	mov	r0, r7
 800d294:	46ba      	mov	sl, r7
 800d296:	46bb      	mov	fp, r7
 800d298:	f1bb 0f00 	cmp.w	fp, #0
 800d29c:	f000 8103 	beq.w	800d4a6 <__sfvwrite_r+0x24a>
 800d2a0:	b950      	cbnz	r0, 800d2b8 <__sfvwrite_r+0x5c>
 800d2a2:	465a      	mov	r2, fp
 800d2a4:	210a      	movs	r1, #10
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	f7f9 fd3a 	bl	8006d20 <memchr>
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	f000 80ff 	beq.w	800d4b0 <__sfvwrite_r+0x254>
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	eba0 070a 	sub.w	r7, r0, sl
 800d2b8:	6820      	ldr	r0, [r4, #0]
 800d2ba:	6921      	ldr	r1, [r4, #16]
 800d2bc:	6962      	ldr	r2, [r4, #20]
 800d2be:	455f      	cmp	r7, fp
 800d2c0:	463b      	mov	r3, r7
 800d2c2:	bf28      	it	cs
 800d2c4:	465b      	movcs	r3, fp
 800d2c6:	4288      	cmp	r0, r1
 800d2c8:	f240 80f5 	bls.w	800d4b6 <__sfvwrite_r+0x25a>
 800d2cc:	68a5      	ldr	r5, [r4, #8]
 800d2ce:	4415      	add	r5, r2
 800d2d0:	42ab      	cmp	r3, r5
 800d2d2:	f340 80f0 	ble.w	800d4b6 <__sfvwrite_r+0x25a>
 800d2d6:	4651      	mov	r1, sl
 800d2d8:	462a      	mov	r2, r5
 800d2da:	f000 fbed 	bl	800dab8 <memmove>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	442b      	add	r3, r5
 800d2e2:	6023      	str	r3, [r4, #0]
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	f002 ff84 	bl	80101f4 <_fflush_r>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d165      	bne.n	800d3bc <__sfvwrite_r+0x160>
 800d2f0:	1b7f      	subs	r7, r7, r5
 800d2f2:	f040 80fa 	bne.w	800d4ea <__sfvwrite_r+0x28e>
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	f002 ff7b 	bl	80101f4 <_fflush_r>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d15c      	bne.n	800d3bc <__sfvwrite_r+0x160>
 800d302:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d306:	44aa      	add	sl, r5
 800d308:	ebab 0b05 	sub.w	fp, fp, r5
 800d30c:	1b5d      	subs	r5, r3, r5
 800d30e:	f8c9 5008 	str.w	r5, [r9, #8]
 800d312:	2d00      	cmp	r5, #0
 800d314:	d1c0      	bne.n	800d298 <__sfvwrite_r+0x3c>
 800d316:	e7a8      	b.n	800d26a <__sfvwrite_r+0xe>
 800d318:	4621      	mov	r1, r4
 800d31a:	4640      	mov	r0, r8
 800d31c:	f002 f8b0 	bl	800f480 <__swsetup_r>
 800d320:	2800      	cmp	r0, #0
 800d322:	d0ac      	beq.n	800d27e <__sfvwrite_r+0x22>
 800d324:	f04f 30ff 	mov.w	r0, #4294967295
 800d328:	e7a0      	b.n	800d26c <__sfvwrite_r+0x10>
 800d32a:	e9d6 a700 	ldrd	sl, r7, [r6]
 800d32e:	3608      	adds	r6, #8
 800d330:	2f00      	cmp	r7, #0
 800d332:	d0fa      	beq.n	800d32a <__sfvwrite_r+0xce>
 800d334:	455f      	cmp	r7, fp
 800d336:	463b      	mov	r3, r7
 800d338:	4652      	mov	r2, sl
 800d33a:	bf28      	it	cs
 800d33c:	465b      	movcs	r3, fp
 800d33e:	69e1      	ldr	r1, [r4, #28]
 800d340:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d342:	4640      	mov	r0, r8
 800d344:	47a8      	blx	r5
 800d346:	2800      	cmp	r0, #0
 800d348:	dd38      	ble.n	800d3bc <__sfvwrite_r+0x160>
 800d34a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d34e:	4482      	add	sl, r0
 800d350:	1a3f      	subs	r7, r7, r0
 800d352:	1a18      	subs	r0, r3, r0
 800d354:	f8c9 0008 	str.w	r0, [r9, #8]
 800d358:	2800      	cmp	r0, #0
 800d35a:	d1e9      	bne.n	800d330 <__sfvwrite_r+0xd4>
 800d35c:	e785      	b.n	800d26a <__sfvwrite_r+0xe>
 800d35e:	f04f 0a00 	mov.w	sl, #0
 800d362:	4657      	mov	r7, sl
 800d364:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800d4f4 <__sfvwrite_r+0x298>
 800d368:	e7e2      	b.n	800d330 <__sfvwrite_r+0xd4>
 800d36a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800d36e:	3608      	adds	r6, #8
 800d370:	f1ba 0f00 	cmp.w	sl, #0
 800d374:	d0f9      	beq.n	800d36a <__sfvwrite_r+0x10e>
 800d376:	89a2      	ldrh	r2, [r4, #12]
 800d378:	68a3      	ldr	r3, [r4, #8]
 800d37a:	6820      	ldr	r0, [r4, #0]
 800d37c:	0591      	lsls	r1, r2, #22
 800d37e:	d564      	bpl.n	800d44a <__sfvwrite_r+0x1ee>
 800d380:	4553      	cmp	r3, sl
 800d382:	d836      	bhi.n	800d3f2 <__sfvwrite_r+0x196>
 800d384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d388:	d033      	beq.n	800d3f2 <__sfvwrite_r+0x196>
 800d38a:	6921      	ldr	r1, [r4, #16]
 800d38c:	6967      	ldr	r7, [r4, #20]
 800d38e:	eba0 0b01 	sub.w	fp, r0, r1
 800d392:	2302      	movs	r3, #2
 800d394:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800d398:	fb97 f7f3 	sdiv	r7, r7, r3
 800d39c:	f10b 0301 	add.w	r3, fp, #1
 800d3a0:	4453      	add	r3, sl
 800d3a2:	429f      	cmp	r7, r3
 800d3a4:	bf38      	it	cc
 800d3a6:	461f      	movcc	r7, r3
 800d3a8:	0553      	lsls	r3, r2, #21
 800d3aa:	d53e      	bpl.n	800d42a <__sfvwrite_r+0x1ce>
 800d3ac:	4639      	mov	r1, r7
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	f000 f932 	bl	800d618 <_malloc_r>
 800d3b4:	b948      	cbnz	r0, 800d3ca <__sfvwrite_r+0x16e>
 800d3b6:	230c      	movs	r3, #12
 800d3b8:	f8c8 3000 	str.w	r3, [r8]
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c2:	81a3      	strh	r3, [r4, #12]
 800d3c4:	e7ae      	b.n	800d324 <__sfvwrite_r+0xc8>
 800d3c6:	46aa      	mov	sl, r5
 800d3c8:	e7d2      	b.n	800d370 <__sfvwrite_r+0x114>
 800d3ca:	465a      	mov	r2, fp
 800d3cc:	6921      	ldr	r1, [r4, #16]
 800d3ce:	9001      	str	r0, [sp, #4]
 800d3d0:	f000 fb67 	bl	800daa2 <memcpy>
 800d3d4:	89a2      	ldrh	r2, [r4, #12]
 800d3d6:	9b01      	ldr	r3, [sp, #4]
 800d3d8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d3dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3e0:	81a2      	strh	r2, [r4, #12]
 800d3e2:	6123      	str	r3, [r4, #16]
 800d3e4:	6167      	str	r7, [r4, #20]
 800d3e6:	445b      	add	r3, fp
 800d3e8:	eba7 070b 	sub.w	r7, r7, fp
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	60a7      	str	r7, [r4, #8]
 800d3f0:	4653      	mov	r3, sl
 800d3f2:	4553      	cmp	r3, sl
 800d3f4:	bf28      	it	cs
 800d3f6:	4653      	movcs	r3, sl
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	6820      	ldr	r0, [r4, #0]
 800d3fe:	9301      	str	r3, [sp, #4]
 800d400:	f000 fb5a 	bl	800dab8 <memmove>
 800d404:	68a2      	ldr	r2, [r4, #8]
 800d406:	9b01      	ldr	r3, [sp, #4]
 800d408:	1ad2      	subs	r2, r2, r3
 800d40a:	60a2      	str	r2, [r4, #8]
 800d40c:	6822      	ldr	r2, [r4, #0]
 800d40e:	4413      	add	r3, r2
 800d410:	4657      	mov	r7, sl
 800d412:	6023      	str	r3, [r4, #0]
 800d414:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d418:	443d      	add	r5, r7
 800d41a:	ebaa 0a07 	sub.w	sl, sl, r7
 800d41e:	1bdf      	subs	r7, r3, r7
 800d420:	f8c9 7008 	str.w	r7, [r9, #8]
 800d424:	2f00      	cmp	r7, #0
 800d426:	d1a3      	bne.n	800d370 <__sfvwrite_r+0x114>
 800d428:	e71f      	b.n	800d26a <__sfvwrite_r+0xe>
 800d42a:	463a      	mov	r2, r7
 800d42c:	4640      	mov	r0, r8
 800d42e:	f000 fbad 	bl	800db8c <_realloc_r>
 800d432:	4603      	mov	r3, r0
 800d434:	2800      	cmp	r0, #0
 800d436:	d1d4      	bne.n	800d3e2 <__sfvwrite_r+0x186>
 800d438:	6921      	ldr	r1, [r4, #16]
 800d43a:	4640      	mov	r0, r8
 800d43c:	f002 ffd6 	bl	80103ec <_free_r>
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d446:	81a3      	strh	r3, [r4, #12]
 800d448:	e7b5      	b.n	800d3b6 <__sfvwrite_r+0x15a>
 800d44a:	6922      	ldr	r2, [r4, #16]
 800d44c:	4282      	cmp	r2, r0
 800d44e:	d302      	bcc.n	800d456 <__sfvwrite_r+0x1fa>
 800d450:	6962      	ldr	r2, [r4, #20]
 800d452:	4552      	cmp	r2, sl
 800d454:	d916      	bls.n	800d484 <__sfvwrite_r+0x228>
 800d456:	4553      	cmp	r3, sl
 800d458:	bf28      	it	cs
 800d45a:	4653      	movcs	r3, sl
 800d45c:	461a      	mov	r2, r3
 800d45e:	4629      	mov	r1, r5
 800d460:	461f      	mov	r7, r3
 800d462:	f000 fb29 	bl	800dab8 <memmove>
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	6822      	ldr	r2, [r4, #0]
 800d46a:	1bdb      	subs	r3, r3, r7
 800d46c:	443a      	add	r2, r7
 800d46e:	60a3      	str	r3, [r4, #8]
 800d470:	6022      	str	r2, [r4, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1ce      	bne.n	800d414 <__sfvwrite_r+0x1b8>
 800d476:	4621      	mov	r1, r4
 800d478:	4640      	mov	r0, r8
 800d47a:	f002 febb 	bl	80101f4 <_fflush_r>
 800d47e:	2800      	cmp	r0, #0
 800d480:	d0c8      	beq.n	800d414 <__sfvwrite_r+0x1b8>
 800d482:	e79b      	b.n	800d3bc <__sfvwrite_r+0x160>
 800d484:	4b1a      	ldr	r3, [pc, #104]	; (800d4f0 <__sfvwrite_r+0x294>)
 800d486:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800d488:	69e1      	ldr	r1, [r4, #28]
 800d48a:	459a      	cmp	sl, r3
 800d48c:	bf94      	ite	ls
 800d48e:	4653      	movls	r3, sl
 800d490:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800d494:	4640      	mov	r0, r8
 800d496:	fb93 f3f2 	sdiv	r3, r3, r2
 800d49a:	4353      	muls	r3, r2
 800d49c:	462a      	mov	r2, r5
 800d49e:	47b8      	blx	r7
 800d4a0:	1e07      	subs	r7, r0, #0
 800d4a2:	dcb7      	bgt.n	800d414 <__sfvwrite_r+0x1b8>
 800d4a4:	e78a      	b.n	800d3bc <__sfvwrite_r+0x160>
 800d4a6:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	3608      	adds	r6, #8
 800d4ae:	e6f3      	b.n	800d298 <__sfvwrite_r+0x3c>
 800d4b0:	f10b 0701 	add.w	r7, fp, #1
 800d4b4:	e700      	b.n	800d2b8 <__sfvwrite_r+0x5c>
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	dc09      	bgt.n	800d4ce <__sfvwrite_r+0x272>
 800d4ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d4bc:	69e1      	ldr	r1, [r4, #28]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	47a8      	blx	r5
 800d4c6:	1e05      	subs	r5, r0, #0
 800d4c8:	f73f af12 	bgt.w	800d2f0 <__sfvwrite_r+0x94>
 800d4cc:	e776      	b.n	800d3bc <__sfvwrite_r+0x160>
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	4651      	mov	r1, sl
 800d4d2:	9301      	str	r3, [sp, #4]
 800d4d4:	f000 faf0 	bl	800dab8 <memmove>
 800d4d8:	9b01      	ldr	r3, [sp, #4]
 800d4da:	68a2      	ldr	r2, [r4, #8]
 800d4dc:	1ad2      	subs	r2, r2, r3
 800d4de:	60a2      	str	r2, [r4, #8]
 800d4e0:	6822      	ldr	r2, [r4, #0]
 800d4e2:	441a      	add	r2, r3
 800d4e4:	6022      	str	r2, [r4, #0]
 800d4e6:	461d      	mov	r5, r3
 800d4e8:	e702      	b.n	800d2f0 <__sfvwrite_r+0x94>
 800d4ea:	2001      	movs	r0, #1
 800d4ec:	e709      	b.n	800d302 <__sfvwrite_r+0xa6>
 800d4ee:	bf00      	nop
 800d4f0:	7ffffffe 	.word	0x7ffffffe
 800d4f4:	7ffffc00 	.word	0x7ffffc00

0800d4f8 <_fwrite_r>:
 800d4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fc:	b086      	sub	sp, #24
 800d4fe:	fb02 f503 	mul.w	r5, r2, r3
 800d502:	461e      	mov	r6, r3
 800d504:	ab01      	add	r3, sp, #4
 800d506:	9303      	str	r3, [sp, #12]
 800d508:	2301      	movs	r3, #1
 800d50a:	4617      	mov	r7, r2
 800d50c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d50e:	9101      	str	r1, [sp, #4]
 800d510:	9502      	str	r5, [sp, #8]
 800d512:	9505      	str	r5, [sp, #20]
 800d514:	9304      	str	r3, [sp, #16]
 800d516:	4680      	mov	r8, r0
 800d518:	b118      	cbz	r0, 800d522 <_fwrite_r+0x2a>
 800d51a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d51c:	b90b      	cbnz	r3, 800d522 <_fwrite_r+0x2a>
 800d51e:	f002 fed5 	bl	80102cc <__sinit>
 800d522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d524:	07d8      	lsls	r0, r3, #31
 800d526:	d405      	bmi.n	800d534 <_fwrite_r+0x3c>
 800d528:	89a3      	ldrh	r3, [r4, #12]
 800d52a:	0599      	lsls	r1, r3, #22
 800d52c:	d402      	bmi.n	800d534 <_fwrite_r+0x3c>
 800d52e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d530:	f000 f860 	bl	800d5f4 <__retarget_lock_acquire_recursive>
 800d534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d538:	049a      	lsls	r2, r3, #18
 800d53a:	d406      	bmi.n	800d54a <_fwrite_r+0x52>
 800d53c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d548:	6663      	str	r3, [r4, #100]	; 0x64
 800d54a:	aa03      	add	r2, sp, #12
 800d54c:	4621      	mov	r1, r4
 800d54e:	4640      	mov	r0, r8
 800d550:	f7ff fe84 	bl	800d25c <__sfvwrite_r>
 800d554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d556:	b958      	cbnz	r0, 800d570 <_fwrite_r+0x78>
 800d558:	07d8      	lsls	r0, r3, #31
 800d55a:	d405      	bmi.n	800d568 <_fwrite_r+0x70>
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	0599      	lsls	r1, r3, #22
 800d560:	d402      	bmi.n	800d568 <_fwrite_r+0x70>
 800d562:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d564:	f000 f847 	bl	800d5f6 <__retarget_lock_release_recursive>
 800d568:	4630      	mov	r0, r6
 800d56a:	b006      	add	sp, #24
 800d56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d570:	07da      	lsls	r2, r3, #31
 800d572:	d405      	bmi.n	800d580 <_fwrite_r+0x88>
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	059b      	lsls	r3, r3, #22
 800d578:	d402      	bmi.n	800d580 <_fwrite_r+0x88>
 800d57a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d57c:	f000 f83b 	bl	800d5f6 <__retarget_lock_release_recursive>
 800d580:	9b05      	ldr	r3, [sp, #20]
 800d582:	1aed      	subs	r5, r5, r3
 800d584:	fbb5 f6f7 	udiv	r6, r5, r7
 800d588:	e7ee      	b.n	800d568 <_fwrite_r+0x70>
	...

0800d58c <fwrite>:
 800d58c:	b507      	push	{r0, r1, r2, lr}
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	4613      	mov	r3, r2
 800d592:	460a      	mov	r2, r1
 800d594:	4601      	mov	r1, r0
 800d596:	4803      	ldr	r0, [pc, #12]	; (800d5a4 <fwrite+0x18>)
 800d598:	6800      	ldr	r0, [r0, #0]
 800d59a:	f7ff ffad 	bl	800d4f8 <_fwrite_r>
 800d59e:	b003      	add	sp, #12
 800d5a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5a4:	20000014 	.word	0x20000014

0800d5a8 <__libc_init_array>:
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	4e0d      	ldr	r6, [pc, #52]	; (800d5e0 <__libc_init_array+0x38>)
 800d5ac:	4c0d      	ldr	r4, [pc, #52]	; (800d5e4 <__libc_init_array+0x3c>)
 800d5ae:	1ba4      	subs	r4, r4, r6
 800d5b0:	10a4      	asrs	r4, r4, #2
 800d5b2:	2500      	movs	r5, #0
 800d5b4:	42a5      	cmp	r5, r4
 800d5b6:	d109      	bne.n	800d5cc <__libc_init_array+0x24>
 800d5b8:	4e0b      	ldr	r6, [pc, #44]	; (800d5e8 <__libc_init_array+0x40>)
 800d5ba:	4c0c      	ldr	r4, [pc, #48]	; (800d5ec <__libc_init_array+0x44>)
 800d5bc:	f003 fd78 	bl	80110b0 <_init>
 800d5c0:	1ba4      	subs	r4, r4, r6
 800d5c2:	10a4      	asrs	r4, r4, #2
 800d5c4:	2500      	movs	r5, #0
 800d5c6:	42a5      	cmp	r5, r4
 800d5c8:	d105      	bne.n	800d5d6 <__libc_init_array+0x2e>
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
 800d5cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5d0:	4798      	blx	r3
 800d5d2:	3501      	adds	r5, #1
 800d5d4:	e7ee      	b.n	800d5b4 <__libc_init_array+0xc>
 800d5d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5da:	4798      	blx	r3
 800d5dc:	3501      	adds	r5, #1
 800d5de:	e7f2      	b.n	800d5c6 <__libc_init_array+0x1e>
 800d5e0:	08012b6c 	.word	0x08012b6c
 800d5e4:	08012b6c 	.word	0x08012b6c
 800d5e8:	08012b6c 	.word	0x08012b6c
 800d5ec:	08012b78 	.word	0x08012b78

0800d5f0 <__retarget_lock_init_recursive>:
 800d5f0:	4770      	bx	lr

0800d5f2 <__retarget_lock_close_recursive>:
 800d5f2:	4770      	bx	lr

0800d5f4 <__retarget_lock_acquire_recursive>:
 800d5f4:	4770      	bx	lr

0800d5f6 <__retarget_lock_release_recursive>:
 800d5f6:	4770      	bx	lr

0800d5f8 <malloc>:
 800d5f8:	4b02      	ldr	r3, [pc, #8]	; (800d604 <malloc+0xc>)
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	6818      	ldr	r0, [r3, #0]
 800d5fe:	f000 b80b 	b.w	800d618 <_malloc_r>
 800d602:	bf00      	nop
 800d604:	20000014 	.word	0x20000014

0800d608 <free>:
 800d608:	4b02      	ldr	r3, [pc, #8]	; (800d614 <free+0xc>)
 800d60a:	4601      	mov	r1, r0
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	f002 beed 	b.w	80103ec <_free_r>
 800d612:	bf00      	nop
 800d614:	20000014 	.word	0x20000014

0800d618 <_malloc_r>:
 800d618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	f101 050b 	add.w	r5, r1, #11
 800d620:	2d16      	cmp	r5, #22
 800d622:	4606      	mov	r6, r0
 800d624:	d906      	bls.n	800d634 <_malloc_r+0x1c>
 800d626:	f035 0507 	bics.w	r5, r5, #7
 800d62a:	d504      	bpl.n	800d636 <_malloc_r+0x1e>
 800d62c:	230c      	movs	r3, #12
 800d62e:	6033      	str	r3, [r6, #0]
 800d630:	2400      	movs	r4, #0
 800d632:	e1a8      	b.n	800d986 <_malloc_r+0x36e>
 800d634:	2510      	movs	r5, #16
 800d636:	428d      	cmp	r5, r1
 800d638:	d3f8      	bcc.n	800d62c <_malloc_r+0x14>
 800d63a:	4630      	mov	r0, r6
 800d63c:	f000 fa5e 	bl	800dafc <__malloc_lock>
 800d640:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800d644:	4fc0      	ldr	r7, [pc, #768]	; (800d948 <_malloc_r+0x330>)
 800d646:	d238      	bcs.n	800d6ba <_malloc_r+0xa2>
 800d648:	f105 0208 	add.w	r2, r5, #8
 800d64c:	443a      	add	r2, r7
 800d64e:	f1a2 0108 	sub.w	r1, r2, #8
 800d652:	6854      	ldr	r4, [r2, #4]
 800d654:	428c      	cmp	r4, r1
 800d656:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800d65a:	d102      	bne.n	800d662 <_malloc_r+0x4a>
 800d65c:	68d4      	ldr	r4, [r2, #12]
 800d65e:	42a2      	cmp	r2, r4
 800d660:	d010      	beq.n	800d684 <_malloc_r+0x6c>
 800d662:	6863      	ldr	r3, [r4, #4]
 800d664:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800d668:	f023 0303 	bic.w	r3, r3, #3
 800d66c:	60ca      	str	r2, [r1, #12]
 800d66e:	4423      	add	r3, r4
 800d670:	6091      	str	r1, [r2, #8]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	f042 0201 	orr.w	r2, r2, #1
 800d678:	605a      	str	r2, [r3, #4]
 800d67a:	4630      	mov	r0, r6
 800d67c:	f000 fa44 	bl	800db08 <__malloc_unlock>
 800d680:	3408      	adds	r4, #8
 800d682:	e180      	b.n	800d986 <_malloc_r+0x36e>
 800d684:	3302      	adds	r3, #2
 800d686:	4ab1      	ldr	r2, [pc, #708]	; (800d94c <_malloc_r+0x334>)
 800d688:	693c      	ldr	r4, [r7, #16]
 800d68a:	4294      	cmp	r4, r2
 800d68c:	4611      	mov	r1, r2
 800d68e:	d075      	beq.n	800d77c <_malloc_r+0x164>
 800d690:	6860      	ldr	r0, [r4, #4]
 800d692:	f020 0c03 	bic.w	ip, r0, #3
 800d696:	ebac 0005 	sub.w	r0, ip, r5
 800d69a:	280f      	cmp	r0, #15
 800d69c:	dd48      	ble.n	800d730 <_malloc_r+0x118>
 800d69e:	1963      	adds	r3, r4, r5
 800d6a0:	f045 0501 	orr.w	r5, r5, #1
 800d6a4:	6065      	str	r5, [r4, #4]
 800d6a6:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800d6aa:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800d6ae:	f040 0201 	orr.w	r2, r0, #1
 800d6b2:	605a      	str	r2, [r3, #4]
 800d6b4:	f844 000c 	str.w	r0, [r4, ip]
 800d6b8:	e7df      	b.n	800d67a <_malloc_r+0x62>
 800d6ba:	0a6b      	lsrs	r3, r5, #9
 800d6bc:	d02a      	beq.n	800d714 <_malloc_r+0xfc>
 800d6be:	2b04      	cmp	r3, #4
 800d6c0:	d812      	bhi.n	800d6e8 <_malloc_r+0xd0>
 800d6c2:	09ab      	lsrs	r3, r5, #6
 800d6c4:	3338      	adds	r3, #56	; 0x38
 800d6c6:	1c5a      	adds	r2, r3, #1
 800d6c8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800d6cc:	f1a2 0c08 	sub.w	ip, r2, #8
 800d6d0:	6854      	ldr	r4, [r2, #4]
 800d6d2:	4564      	cmp	r4, ip
 800d6d4:	d006      	beq.n	800d6e4 <_malloc_r+0xcc>
 800d6d6:	6862      	ldr	r2, [r4, #4]
 800d6d8:	f022 0203 	bic.w	r2, r2, #3
 800d6dc:	1b50      	subs	r0, r2, r5
 800d6de:	280f      	cmp	r0, #15
 800d6e0:	dd1c      	ble.n	800d71c <_malloc_r+0x104>
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	e7ce      	b.n	800d686 <_malloc_r+0x6e>
 800d6e8:	2b14      	cmp	r3, #20
 800d6ea:	d801      	bhi.n	800d6f0 <_malloc_r+0xd8>
 800d6ec:	335b      	adds	r3, #91	; 0x5b
 800d6ee:	e7ea      	b.n	800d6c6 <_malloc_r+0xae>
 800d6f0:	2b54      	cmp	r3, #84	; 0x54
 800d6f2:	d802      	bhi.n	800d6fa <_malloc_r+0xe2>
 800d6f4:	0b2b      	lsrs	r3, r5, #12
 800d6f6:	336e      	adds	r3, #110	; 0x6e
 800d6f8:	e7e5      	b.n	800d6c6 <_malloc_r+0xae>
 800d6fa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d6fe:	d802      	bhi.n	800d706 <_malloc_r+0xee>
 800d700:	0beb      	lsrs	r3, r5, #15
 800d702:	3377      	adds	r3, #119	; 0x77
 800d704:	e7df      	b.n	800d6c6 <_malloc_r+0xae>
 800d706:	f240 5254 	movw	r2, #1364	; 0x554
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d804      	bhi.n	800d718 <_malloc_r+0x100>
 800d70e:	0cab      	lsrs	r3, r5, #18
 800d710:	337c      	adds	r3, #124	; 0x7c
 800d712:	e7d8      	b.n	800d6c6 <_malloc_r+0xae>
 800d714:	233f      	movs	r3, #63	; 0x3f
 800d716:	e7d6      	b.n	800d6c6 <_malloc_r+0xae>
 800d718:	237e      	movs	r3, #126	; 0x7e
 800d71a:	e7d4      	b.n	800d6c6 <_malloc_r+0xae>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	68e1      	ldr	r1, [r4, #12]
 800d720:	db04      	blt.n	800d72c <_malloc_r+0x114>
 800d722:	68a3      	ldr	r3, [r4, #8]
 800d724:	60d9      	str	r1, [r3, #12]
 800d726:	608b      	str	r3, [r1, #8]
 800d728:	18a3      	adds	r3, r4, r2
 800d72a:	e7a2      	b.n	800d672 <_malloc_r+0x5a>
 800d72c:	460c      	mov	r4, r1
 800d72e:	e7d0      	b.n	800d6d2 <_malloc_r+0xba>
 800d730:	2800      	cmp	r0, #0
 800d732:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800d736:	db07      	blt.n	800d748 <_malloc_r+0x130>
 800d738:	44a4      	add	ip, r4
 800d73a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d73e:	f043 0301 	orr.w	r3, r3, #1
 800d742:	f8cc 3004 	str.w	r3, [ip, #4]
 800d746:	e798      	b.n	800d67a <_malloc_r+0x62>
 800d748:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f080 8099 	bcs.w	800d884 <_malloc_r+0x26c>
 800d752:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800d756:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800d75a:	2201      	movs	r2, #1
 800d75c:	f10c 0c01 	add.w	ip, ip, #1
 800d760:	fa02 f20e 	lsl.w	r2, r2, lr
 800d764:	4310      	orrs	r0, r2
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800d76c:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800d770:	3a08      	subs	r2, #8
 800d772:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800d776:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800d77a:	60c4      	str	r4, [r0, #12]
 800d77c:	2001      	movs	r0, #1
 800d77e:	109a      	asrs	r2, r3, #2
 800d780:	fa00 f202 	lsl.w	r2, r0, r2
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	4290      	cmp	r0, r2
 800d788:	d326      	bcc.n	800d7d8 <_malloc_r+0x1c0>
 800d78a:	4210      	tst	r0, r2
 800d78c:	d106      	bne.n	800d79c <_malloc_r+0x184>
 800d78e:	f023 0303 	bic.w	r3, r3, #3
 800d792:	0052      	lsls	r2, r2, #1
 800d794:	4210      	tst	r0, r2
 800d796:	f103 0304 	add.w	r3, r3, #4
 800d79a:	d0fa      	beq.n	800d792 <_malloc_r+0x17a>
 800d79c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800d7a0:	46e1      	mov	r9, ip
 800d7a2:	4698      	mov	r8, r3
 800d7a4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d7a8:	454c      	cmp	r4, r9
 800d7aa:	f040 80af 	bne.w	800d90c <_malloc_r+0x2f4>
 800d7ae:	f108 0801 	add.w	r8, r8, #1
 800d7b2:	f018 0f03 	tst.w	r8, #3
 800d7b6:	f109 0908 	add.w	r9, r9, #8
 800d7ba:	d1f3      	bne.n	800d7a4 <_malloc_r+0x18c>
 800d7bc:	0798      	lsls	r0, r3, #30
 800d7be:	f040 80e8 	bne.w	800d992 <_malloc_r+0x37a>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	ea23 0302 	bic.w	r3, r3, r2
 800d7c8:	607b      	str	r3, [r7, #4]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	0052      	lsls	r2, r2, #1
 800d7ce:	4290      	cmp	r0, r2
 800d7d0:	d302      	bcc.n	800d7d8 <_malloc_r+0x1c0>
 800d7d2:	2a00      	cmp	r2, #0
 800d7d4:	f040 80ec 	bne.w	800d9b0 <_malloc_r+0x398>
 800d7d8:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800d7dc:	f8da 4004 	ldr.w	r4, [sl, #4]
 800d7e0:	f024 0203 	bic.w	r2, r4, #3
 800d7e4:	42aa      	cmp	r2, r5
 800d7e6:	d303      	bcc.n	800d7f0 <_malloc_r+0x1d8>
 800d7e8:	1b53      	subs	r3, r2, r5
 800d7ea:	2b0f      	cmp	r3, #15
 800d7ec:	f300 8140 	bgt.w	800da70 <_malloc_r+0x458>
 800d7f0:	4b57      	ldr	r3, [pc, #348]	; (800d950 <_malloc_r+0x338>)
 800d7f2:	9200      	str	r2, [sp, #0]
 800d7f4:	2008      	movs	r0, #8
 800d7f6:	681c      	ldr	r4, [r3, #0]
 800d7f8:	f001 fdda 	bl	800f3b0 <sysconf>
 800d7fc:	4b55      	ldr	r3, [pc, #340]	; (800d954 <_malloc_r+0x33c>)
 800d7fe:	9a00      	ldr	r2, [sp, #0]
 800d800:	6819      	ldr	r1, [r3, #0]
 800d802:	3410      	adds	r4, #16
 800d804:	3101      	adds	r1, #1
 800d806:	442c      	add	r4, r5
 800d808:	bf1f      	itttt	ne
 800d80a:	f104 34ff 	addne.w	r4, r4, #4294967295
 800d80e:	1824      	addne	r4, r4, r0
 800d810:	4241      	negne	r1, r0
 800d812:	400c      	andne	r4, r1
 800d814:	4680      	mov	r8, r0
 800d816:	4621      	mov	r1, r4
 800d818:	4630      	mov	r0, r6
 800d81a:	e9cd 2300 	strd	r2, r3, [sp]
 800d81e:	f000 fb5d 	bl	800dedc <_sbrk_r>
 800d822:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d826:	4683      	mov	fp, r0
 800d828:	f000 80fb 	beq.w	800da22 <_malloc_r+0x40a>
 800d82c:	9a00      	ldr	r2, [sp, #0]
 800d82e:	9b01      	ldr	r3, [sp, #4]
 800d830:	eb0a 0102 	add.w	r1, sl, r2
 800d834:	4281      	cmp	r1, r0
 800d836:	d902      	bls.n	800d83e <_malloc_r+0x226>
 800d838:	45ba      	cmp	sl, r7
 800d83a:	f040 80f2 	bne.w	800da22 <_malloc_r+0x40a>
 800d83e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800d960 <_malloc_r+0x348>
 800d842:	f8d9 0000 	ldr.w	r0, [r9]
 800d846:	4559      	cmp	r1, fp
 800d848:	eb00 0e04 	add.w	lr, r0, r4
 800d84c:	f8c9 e000 	str.w	lr, [r9]
 800d850:	f108 3cff 	add.w	ip, r8, #4294967295
 800d854:	f040 80ae 	bne.w	800d9b4 <_malloc_r+0x39c>
 800d858:	ea11 0f0c 	tst.w	r1, ip
 800d85c:	f040 80aa 	bne.w	800d9b4 <_malloc_r+0x39c>
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	4414      	add	r4, r2
 800d864:	f044 0401 	orr.w	r4, r4, #1
 800d868:	605c      	str	r4, [r3, #4]
 800d86a:	4a3b      	ldr	r2, [pc, #236]	; (800d958 <_malloc_r+0x340>)
 800d86c:	f8d9 3000 	ldr.w	r3, [r9]
 800d870:	6811      	ldr	r1, [r2, #0]
 800d872:	428b      	cmp	r3, r1
 800d874:	bf88      	it	hi
 800d876:	6013      	strhi	r3, [r2, #0]
 800d878:	4a38      	ldr	r2, [pc, #224]	; (800d95c <_malloc_r+0x344>)
 800d87a:	6811      	ldr	r1, [r2, #0]
 800d87c:	428b      	cmp	r3, r1
 800d87e:	bf88      	it	hi
 800d880:	6013      	strhi	r3, [r2, #0]
 800d882:	e0ce      	b.n	800da22 <_malloc_r+0x40a>
 800d884:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800d888:	2a04      	cmp	r2, #4
 800d88a:	d818      	bhi.n	800d8be <_malloc_r+0x2a6>
 800d88c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800d890:	3238      	adds	r2, #56	; 0x38
 800d892:	f102 0e01 	add.w	lr, r2, #1
 800d896:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800d89a:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800d89e:	45f0      	cmp	r8, lr
 800d8a0:	d12b      	bne.n	800d8fa <_malloc_r+0x2e2>
 800d8a2:	1092      	asrs	r2, r2, #2
 800d8a4:	f04f 0c01 	mov.w	ip, #1
 800d8a8:	fa0c f202 	lsl.w	r2, ip, r2
 800d8ac:	4310      	orrs	r0, r2
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800d8b4:	f8c8 4008 	str.w	r4, [r8, #8]
 800d8b8:	f8ce 400c 	str.w	r4, [lr, #12]
 800d8bc:	e75e      	b.n	800d77c <_malloc_r+0x164>
 800d8be:	2a14      	cmp	r2, #20
 800d8c0:	d801      	bhi.n	800d8c6 <_malloc_r+0x2ae>
 800d8c2:	325b      	adds	r2, #91	; 0x5b
 800d8c4:	e7e5      	b.n	800d892 <_malloc_r+0x27a>
 800d8c6:	2a54      	cmp	r2, #84	; 0x54
 800d8c8:	d803      	bhi.n	800d8d2 <_malloc_r+0x2ba>
 800d8ca:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800d8ce:	326e      	adds	r2, #110	; 0x6e
 800d8d0:	e7df      	b.n	800d892 <_malloc_r+0x27a>
 800d8d2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d8d6:	d803      	bhi.n	800d8e0 <_malloc_r+0x2c8>
 800d8d8:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800d8dc:	3277      	adds	r2, #119	; 0x77
 800d8de:	e7d8      	b.n	800d892 <_malloc_r+0x27a>
 800d8e0:	f240 5e54 	movw	lr, #1364	; 0x554
 800d8e4:	4572      	cmp	r2, lr
 800d8e6:	bf9a      	itte	ls
 800d8e8:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800d8ec:	327c      	addls	r2, #124	; 0x7c
 800d8ee:	227e      	movhi	r2, #126	; 0x7e
 800d8f0:	e7cf      	b.n	800d892 <_malloc_r+0x27a>
 800d8f2:	f8de e008 	ldr.w	lr, [lr, #8]
 800d8f6:	45f0      	cmp	r8, lr
 800d8f8:	d005      	beq.n	800d906 <_malloc_r+0x2ee>
 800d8fa:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d8fe:	f022 0203 	bic.w	r2, r2, #3
 800d902:	4562      	cmp	r2, ip
 800d904:	d8f5      	bhi.n	800d8f2 <_malloc_r+0x2da>
 800d906:	f8de 800c 	ldr.w	r8, [lr, #12]
 800d90a:	e7d1      	b.n	800d8b0 <_malloc_r+0x298>
 800d90c:	6860      	ldr	r0, [r4, #4]
 800d90e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800d912:	f020 0003 	bic.w	r0, r0, #3
 800d916:	eba0 0a05 	sub.w	sl, r0, r5
 800d91a:	f1ba 0f0f 	cmp.w	sl, #15
 800d91e:	dd21      	ble.n	800d964 <_malloc_r+0x34c>
 800d920:	68a2      	ldr	r2, [r4, #8]
 800d922:	1963      	adds	r3, r4, r5
 800d924:	f045 0501 	orr.w	r5, r5, #1
 800d928:	6065      	str	r5, [r4, #4]
 800d92a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d92e:	f8ce 2008 	str.w	r2, [lr, #8]
 800d932:	f04a 0201 	orr.w	r2, sl, #1
 800d936:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800d93a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800d93e:	605a      	str	r2, [r3, #4]
 800d940:	f844 a000 	str.w	sl, [r4, r0]
 800d944:	e699      	b.n	800d67a <_malloc_r+0x62>
 800d946:	bf00      	nop
 800d948:	20000440 	.word	0x20000440
 800d94c:	20000448 	.word	0x20000448
 800d950:	20000a30 	.word	0x20000a30
 800d954:	20000848 	.word	0x20000848
 800d958:	20000a28 	.word	0x20000a28
 800d95c:	20000a2c 	.word	0x20000a2c
 800d960:	20000a00 	.word	0x20000a00
 800d964:	f1ba 0f00 	cmp.w	sl, #0
 800d968:	db11      	blt.n	800d98e <_malloc_r+0x376>
 800d96a:	4420      	add	r0, r4
 800d96c:	6843      	ldr	r3, [r0, #4]
 800d96e:	f043 0301 	orr.w	r3, r3, #1
 800d972:	6043      	str	r3, [r0, #4]
 800d974:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800d978:	4630      	mov	r0, r6
 800d97a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800d97e:	f8ce 3008 	str.w	r3, [lr, #8]
 800d982:	f000 f8c1 	bl	800db08 <__malloc_unlock>
 800d986:	4620      	mov	r0, r4
 800d988:	b003      	add	sp, #12
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	4674      	mov	r4, lr
 800d990:	e70a      	b.n	800d7a8 <_malloc_r+0x190>
 800d992:	f1ac 0008 	sub.w	r0, ip, #8
 800d996:	f8dc c000 	ldr.w	ip, [ip]
 800d99a:	4584      	cmp	ip, r0
 800d99c:	f103 33ff 	add.w	r3, r3, #4294967295
 800d9a0:	f43f af0c 	beq.w	800d7bc <_malloc_r+0x1a4>
 800d9a4:	e711      	b.n	800d7ca <_malloc_r+0x1b2>
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	0052      	lsls	r2, r2, #1
 800d9aa:	4210      	tst	r0, r2
 800d9ac:	d0fb      	beq.n	800d9a6 <_malloc_r+0x38e>
 800d9ae:	e6f5      	b.n	800d79c <_malloc_r+0x184>
 800d9b0:	4643      	mov	r3, r8
 800d9b2:	e7fa      	b.n	800d9aa <_malloc_r+0x392>
 800d9b4:	6818      	ldr	r0, [r3, #0]
 800d9b6:	9200      	str	r2, [sp, #0]
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	bf1b      	ittet	ne
 800d9bc:	ebab 0101 	subne.w	r1, fp, r1
 800d9c0:	4471      	addne	r1, lr
 800d9c2:	f8c3 b000 	streq.w	fp, [r3]
 800d9c6:	f8c9 1000 	strne.w	r1, [r9]
 800d9ca:	f01b 0307 	ands.w	r3, fp, #7
 800d9ce:	bf1c      	itt	ne
 800d9d0:	f1c3 0308 	rsbne	r3, r3, #8
 800d9d4:	449b      	addne	fp, r3
 800d9d6:	445c      	add	r4, fp
 800d9d8:	4498      	add	r8, r3
 800d9da:	ea04 030c 	and.w	r3, r4, ip
 800d9de:	eba8 0803 	sub.w	r8, r8, r3
 800d9e2:	4641      	mov	r1, r8
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f000 fa79 	bl	800dedc <_sbrk_r>
 800d9ea:	1c43      	adds	r3, r0, #1
 800d9ec:	bf04      	itt	eq
 800d9ee:	4658      	moveq	r0, fp
 800d9f0:	f04f 0800 	moveq.w	r8, #0
 800d9f4:	f8d9 3000 	ldr.w	r3, [r9]
 800d9f8:	f8c7 b008 	str.w	fp, [r7, #8]
 800d9fc:	eba0 000b 	sub.w	r0, r0, fp
 800da00:	4440      	add	r0, r8
 800da02:	4443      	add	r3, r8
 800da04:	f040 0001 	orr.w	r0, r0, #1
 800da08:	45ba      	cmp	sl, r7
 800da0a:	9a00      	ldr	r2, [sp, #0]
 800da0c:	f8c9 3000 	str.w	r3, [r9]
 800da10:	f8cb 0004 	str.w	r0, [fp, #4]
 800da14:	f43f af29 	beq.w	800d86a <_malloc_r+0x252>
 800da18:	2a0f      	cmp	r2, #15
 800da1a:	d810      	bhi.n	800da3e <_malloc_r+0x426>
 800da1c:	2301      	movs	r3, #1
 800da1e:	f8cb 3004 	str.w	r3, [fp, #4]
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	685a      	ldr	r2, [r3, #4]
 800da26:	f022 0203 	bic.w	r2, r2, #3
 800da2a:	42aa      	cmp	r2, r5
 800da2c:	eba2 0305 	sub.w	r3, r2, r5
 800da30:	d301      	bcc.n	800da36 <_malloc_r+0x41e>
 800da32:	2b0f      	cmp	r3, #15
 800da34:	dc1c      	bgt.n	800da70 <_malloc_r+0x458>
 800da36:	4630      	mov	r0, r6
 800da38:	f000 f866 	bl	800db08 <__malloc_unlock>
 800da3c:	e5f8      	b.n	800d630 <_malloc_r+0x18>
 800da3e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800da42:	f1a2 040c 	sub.w	r4, r2, #12
 800da46:	f024 0407 	bic.w	r4, r4, #7
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	4323      	orrs	r3, r4
 800da50:	f8ca 3004 	str.w	r3, [sl, #4]
 800da54:	2205      	movs	r2, #5
 800da56:	eb0a 0304 	add.w	r3, sl, r4
 800da5a:	2c0f      	cmp	r4, #15
 800da5c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800da60:	f67f af03 	bls.w	800d86a <_malloc_r+0x252>
 800da64:	f10a 0108 	add.w	r1, sl, #8
 800da68:	4630      	mov	r0, r6
 800da6a:	f002 fcbf 	bl	80103ec <_free_r>
 800da6e:	e6fc      	b.n	800d86a <_malloc_r+0x252>
 800da70:	68bc      	ldr	r4, [r7, #8]
 800da72:	f045 0201 	orr.w	r2, r5, #1
 800da76:	4425      	add	r5, r4
 800da78:	f043 0301 	orr.w	r3, r3, #1
 800da7c:	6062      	str	r2, [r4, #4]
 800da7e:	60bd      	str	r5, [r7, #8]
 800da80:	606b      	str	r3, [r5, #4]
 800da82:	e5fa      	b.n	800d67a <_malloc_r+0x62>

0800da84 <memcmp>:
 800da84:	b530      	push	{r4, r5, lr}
 800da86:	2400      	movs	r4, #0
 800da88:	42a2      	cmp	r2, r4
 800da8a:	d101      	bne.n	800da90 <memcmp+0xc>
 800da8c:	2000      	movs	r0, #0
 800da8e:	e007      	b.n	800daa0 <memcmp+0x1c>
 800da90:	5d03      	ldrb	r3, [r0, r4]
 800da92:	3401      	adds	r4, #1
 800da94:	190d      	adds	r5, r1, r4
 800da96:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800da9a:	42ab      	cmp	r3, r5
 800da9c:	d0f4      	beq.n	800da88 <memcmp+0x4>
 800da9e:	1b58      	subs	r0, r3, r5
 800daa0:	bd30      	pop	{r4, r5, pc}

0800daa2 <memcpy>:
 800daa2:	b510      	push	{r4, lr}
 800daa4:	1e43      	subs	r3, r0, #1
 800daa6:	440a      	add	r2, r1
 800daa8:	4291      	cmp	r1, r2
 800daaa:	d100      	bne.n	800daae <memcpy+0xc>
 800daac:	bd10      	pop	{r4, pc}
 800daae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dab6:	e7f7      	b.n	800daa8 <memcpy+0x6>

0800dab8 <memmove>:
 800dab8:	4288      	cmp	r0, r1
 800daba:	b510      	push	{r4, lr}
 800dabc:	eb01 0302 	add.w	r3, r1, r2
 800dac0:	d807      	bhi.n	800dad2 <memmove+0x1a>
 800dac2:	1e42      	subs	r2, r0, #1
 800dac4:	4299      	cmp	r1, r3
 800dac6:	d00a      	beq.n	800dade <memmove+0x26>
 800dac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dacc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dad0:	e7f8      	b.n	800dac4 <memmove+0xc>
 800dad2:	4283      	cmp	r3, r0
 800dad4:	d9f5      	bls.n	800dac2 <memmove+0xa>
 800dad6:	1881      	adds	r1, r0, r2
 800dad8:	1ad2      	subs	r2, r2, r3
 800dada:	42d3      	cmn	r3, r2
 800dadc:	d100      	bne.n	800dae0 <memmove+0x28>
 800dade:	bd10      	pop	{r4, pc}
 800dae0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dae4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dae8:	e7f7      	b.n	800dada <memmove+0x22>

0800daea <memset>:
 800daea:	4402      	add	r2, r0
 800daec:	4603      	mov	r3, r0
 800daee:	4293      	cmp	r3, r2
 800daf0:	d100      	bne.n	800daf4 <memset+0xa>
 800daf2:	4770      	bx	lr
 800daf4:	f803 1b01 	strb.w	r1, [r3], #1
 800daf8:	e7f9      	b.n	800daee <memset+0x4>
	...

0800dafc <__malloc_lock>:
 800dafc:	4801      	ldr	r0, [pc, #4]	; (800db04 <__malloc_lock+0x8>)
 800dafe:	f7ff bd79 	b.w	800d5f4 <__retarget_lock_acquire_recursive>
 800db02:	bf00      	nop
 800db04:	20000f08 	.word	0x20000f08

0800db08 <__malloc_unlock>:
 800db08:	4801      	ldr	r0, [pc, #4]	; (800db10 <__malloc_unlock+0x8>)
 800db0a:	f7ff bd74 	b.w	800d5f6 <__retarget_lock_release_recursive>
 800db0e:	bf00      	nop
 800db10:	20000f08 	.word	0x20000f08

0800db14 <_putc_r>:
 800db14:	b570      	push	{r4, r5, r6, lr}
 800db16:	460d      	mov	r5, r1
 800db18:	4614      	mov	r4, r2
 800db1a:	4606      	mov	r6, r0
 800db1c:	b118      	cbz	r0, 800db26 <_putc_r+0x12>
 800db1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800db20:	b90b      	cbnz	r3, 800db26 <_putc_r+0x12>
 800db22:	f002 fbd3 	bl	80102cc <__sinit>
 800db26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db28:	07d8      	lsls	r0, r3, #31
 800db2a:	d405      	bmi.n	800db38 <_putc_r+0x24>
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	0599      	lsls	r1, r3, #22
 800db30:	d402      	bmi.n	800db38 <_putc_r+0x24>
 800db32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db34:	f7ff fd5e 	bl	800d5f4 <__retarget_lock_acquire_recursive>
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	3b01      	subs	r3, #1
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	60a3      	str	r3, [r4, #8]
 800db40:	da05      	bge.n	800db4e <_putc_r+0x3a>
 800db42:	69a2      	ldr	r2, [r4, #24]
 800db44:	4293      	cmp	r3, r2
 800db46:	db12      	blt.n	800db6e <_putc_r+0x5a>
 800db48:	b2eb      	uxtb	r3, r5
 800db4a:	2b0a      	cmp	r3, #10
 800db4c:	d00f      	beq.n	800db6e <_putc_r+0x5a>
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	701d      	strb	r5, [r3, #0]
 800db56:	b2ed      	uxtb	r5, r5
 800db58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db5a:	07da      	lsls	r2, r3, #31
 800db5c:	d405      	bmi.n	800db6a <_putc_r+0x56>
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	059b      	lsls	r3, r3, #22
 800db62:	d402      	bmi.n	800db6a <_putc_r+0x56>
 800db64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db66:	f7ff fd46 	bl	800d5f6 <__retarget_lock_release_recursive>
 800db6a:	4628      	mov	r0, r5
 800db6c:	bd70      	pop	{r4, r5, r6, pc}
 800db6e:	4629      	mov	r1, r5
 800db70:	4622      	mov	r2, r4
 800db72:	4630      	mov	r0, r6
 800db74:	f001 fc29 	bl	800f3ca <__swbuf_r>
 800db78:	4605      	mov	r5, r0
 800db7a:	e7ed      	b.n	800db58 <_putc_r+0x44>

0800db7c <realloc>:
 800db7c:	4b02      	ldr	r3, [pc, #8]	; (800db88 <realloc+0xc>)
 800db7e:	460a      	mov	r2, r1
 800db80:	4601      	mov	r1, r0
 800db82:	6818      	ldr	r0, [r3, #0]
 800db84:	f000 b802 	b.w	800db8c <_realloc_r>
 800db88:	20000014 	.word	0x20000014

0800db8c <_realloc_r>:
 800db8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db90:	4682      	mov	sl, r0
 800db92:	460c      	mov	r4, r1
 800db94:	b929      	cbnz	r1, 800dba2 <_realloc_r+0x16>
 800db96:	4611      	mov	r1, r2
 800db98:	b003      	add	sp, #12
 800db9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9e:	f7ff bd3b 	b.w	800d618 <_malloc_r>
 800dba2:	9201      	str	r2, [sp, #4]
 800dba4:	f7ff ffaa 	bl	800dafc <__malloc_lock>
 800dba8:	9a01      	ldr	r2, [sp, #4]
 800dbaa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800dbae:	f102 080b 	add.w	r8, r2, #11
 800dbb2:	f1b8 0f16 	cmp.w	r8, #22
 800dbb6:	f1a4 0908 	sub.w	r9, r4, #8
 800dbba:	f025 0603 	bic.w	r6, r5, #3
 800dbbe:	d90b      	bls.n	800dbd8 <_realloc_r+0x4c>
 800dbc0:	f038 0807 	bics.w	r8, r8, #7
 800dbc4:	d50a      	bpl.n	800dbdc <_realloc_r+0x50>
 800dbc6:	230c      	movs	r3, #12
 800dbc8:	f8ca 3000 	str.w	r3, [sl]
 800dbcc:	f04f 0b00 	mov.w	fp, #0
 800dbd0:	4658      	mov	r0, fp
 800dbd2:	b003      	add	sp, #12
 800dbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd8:	f04f 0810 	mov.w	r8, #16
 800dbdc:	4590      	cmp	r8, r2
 800dbde:	d3f2      	bcc.n	800dbc6 <_realloc_r+0x3a>
 800dbe0:	45b0      	cmp	r8, r6
 800dbe2:	f340 8170 	ble.w	800dec6 <_realloc_r+0x33a>
 800dbe6:	49a9      	ldr	r1, [pc, #676]	; (800de8c <_realloc_r+0x300>)
 800dbe8:	9101      	str	r1, [sp, #4]
 800dbea:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800dbee:	eb09 0306 	add.w	r3, r9, r6
 800dbf2:	459c      	cmp	ip, r3
 800dbf4:	6858      	ldr	r0, [r3, #4]
 800dbf6:	d005      	beq.n	800dc04 <_realloc_r+0x78>
 800dbf8:	f020 0101 	bic.w	r1, r0, #1
 800dbfc:	4419      	add	r1, r3
 800dbfe:	6849      	ldr	r1, [r1, #4]
 800dc00:	07cf      	lsls	r7, r1, #31
 800dc02:	d447      	bmi.n	800dc94 <_realloc_r+0x108>
 800dc04:	f020 0003 	bic.w	r0, r0, #3
 800dc08:	459c      	cmp	ip, r3
 800dc0a:	eb06 0700 	add.w	r7, r6, r0
 800dc0e:	d119      	bne.n	800dc44 <_realloc_r+0xb8>
 800dc10:	f108 0110 	add.w	r1, r8, #16
 800dc14:	42b9      	cmp	r1, r7
 800dc16:	dc3f      	bgt.n	800dc98 <_realloc_r+0x10c>
 800dc18:	eb09 0308 	add.w	r3, r9, r8
 800dc1c:	9a01      	ldr	r2, [sp, #4]
 800dc1e:	eba7 0708 	sub.w	r7, r7, r8
 800dc22:	f047 0701 	orr.w	r7, r7, #1
 800dc26:	6093      	str	r3, [r2, #8]
 800dc28:	605f      	str	r7, [r3, #4]
 800dc2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	ea43 0308 	orr.w	r3, r3, r8
 800dc36:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	f7ff ff64 	bl	800db08 <__malloc_unlock>
 800dc40:	46a3      	mov	fp, r4
 800dc42:	e7c5      	b.n	800dbd0 <_realloc_r+0x44>
 800dc44:	45b8      	cmp	r8, r7
 800dc46:	dc27      	bgt.n	800dc98 <_realloc_r+0x10c>
 800dc48:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800dc4c:	60da      	str	r2, [r3, #12]
 800dc4e:	6093      	str	r3, [r2, #8]
 800dc50:	eba7 0008 	sub.w	r0, r7, r8
 800dc54:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800dc58:	280f      	cmp	r0, #15
 800dc5a:	f002 0201 	and.w	r2, r2, #1
 800dc5e:	eb09 0307 	add.w	r3, r9, r7
 800dc62:	f240 8132 	bls.w	800deca <_realloc_r+0x33e>
 800dc66:	eb09 0108 	add.w	r1, r9, r8
 800dc6a:	ea48 0202 	orr.w	r2, r8, r2
 800dc6e:	f040 0001 	orr.w	r0, r0, #1
 800dc72:	f8c9 2004 	str.w	r2, [r9, #4]
 800dc76:	6048      	str	r0, [r1, #4]
 800dc78:	685a      	ldr	r2, [r3, #4]
 800dc7a:	f042 0201 	orr.w	r2, r2, #1
 800dc7e:	605a      	str	r2, [r3, #4]
 800dc80:	3108      	adds	r1, #8
 800dc82:	4650      	mov	r0, sl
 800dc84:	f002 fbb2 	bl	80103ec <_free_r>
 800dc88:	4650      	mov	r0, sl
 800dc8a:	f7ff ff3d 	bl	800db08 <__malloc_unlock>
 800dc8e:	f109 0b08 	add.w	fp, r9, #8
 800dc92:	e79d      	b.n	800dbd0 <_realloc_r+0x44>
 800dc94:	2000      	movs	r0, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	07e9      	lsls	r1, r5, #31
 800dc9a:	f100 80c6 	bmi.w	800de2a <_realloc_r+0x29e>
 800dc9e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800dca2:	eba9 0505 	sub.w	r5, r9, r5
 800dca6:	6869      	ldr	r1, [r5, #4]
 800dca8:	f021 0103 	bic.w	r1, r1, #3
 800dcac:	eb01 0b06 	add.w	fp, r1, r6
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f000 8086 	beq.w	800ddc2 <_realloc_r+0x236>
 800dcb6:	459c      	cmp	ip, r3
 800dcb8:	eb00 070b 	add.w	r7, r0, fp
 800dcbc:	d149      	bne.n	800dd52 <_realloc_r+0x1c6>
 800dcbe:	f108 0310 	add.w	r3, r8, #16
 800dcc2:	42bb      	cmp	r3, r7
 800dcc4:	dc7d      	bgt.n	800ddc2 <_realloc_r+0x236>
 800dcc6:	46ab      	mov	fp, r5
 800dcc8:	68eb      	ldr	r3, [r5, #12]
 800dcca:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800dcce:	60d3      	str	r3, [r2, #12]
 800dcd0:	609a      	str	r2, [r3, #8]
 800dcd2:	1f32      	subs	r2, r6, #4
 800dcd4:	2a24      	cmp	r2, #36	; 0x24
 800dcd6:	d837      	bhi.n	800dd48 <_realloc_r+0x1bc>
 800dcd8:	2a13      	cmp	r2, #19
 800dcda:	d933      	bls.n	800dd44 <_realloc_r+0x1b8>
 800dcdc:	6823      	ldr	r3, [r4, #0]
 800dcde:	60ab      	str	r3, [r5, #8]
 800dce0:	6863      	ldr	r3, [r4, #4]
 800dce2:	60eb      	str	r3, [r5, #12]
 800dce4:	2a1b      	cmp	r2, #27
 800dce6:	d81b      	bhi.n	800dd20 <_realloc_r+0x194>
 800dce8:	3408      	adds	r4, #8
 800dcea:	f105 0310 	add.w	r3, r5, #16
 800dcee:	6822      	ldr	r2, [r4, #0]
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	6862      	ldr	r2, [r4, #4]
 800dcf4:	605a      	str	r2, [r3, #4]
 800dcf6:	68a2      	ldr	r2, [r4, #8]
 800dcf8:	609a      	str	r2, [r3, #8]
 800dcfa:	eb05 0308 	add.w	r3, r5, r8
 800dcfe:	9a01      	ldr	r2, [sp, #4]
 800dd00:	eba7 0708 	sub.w	r7, r7, r8
 800dd04:	f047 0701 	orr.w	r7, r7, #1
 800dd08:	6093      	str	r3, [r2, #8]
 800dd0a:	605f      	str	r7, [r3, #4]
 800dd0c:	686b      	ldr	r3, [r5, #4]
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	ea43 0308 	orr.w	r3, r3, r8
 800dd16:	606b      	str	r3, [r5, #4]
 800dd18:	4650      	mov	r0, sl
 800dd1a:	f7ff fef5 	bl	800db08 <__malloc_unlock>
 800dd1e:	e757      	b.n	800dbd0 <_realloc_r+0x44>
 800dd20:	68a3      	ldr	r3, [r4, #8]
 800dd22:	612b      	str	r3, [r5, #16]
 800dd24:	68e3      	ldr	r3, [r4, #12]
 800dd26:	616b      	str	r3, [r5, #20]
 800dd28:	2a24      	cmp	r2, #36	; 0x24
 800dd2a:	bf01      	itttt	eq
 800dd2c:	6923      	ldreq	r3, [r4, #16]
 800dd2e:	61ab      	streq	r3, [r5, #24]
 800dd30:	6962      	ldreq	r2, [r4, #20]
 800dd32:	61ea      	streq	r2, [r5, #28]
 800dd34:	bf19      	ittee	ne
 800dd36:	3410      	addne	r4, #16
 800dd38:	f105 0318 	addne.w	r3, r5, #24
 800dd3c:	f105 0320 	addeq.w	r3, r5, #32
 800dd40:	3418      	addeq	r4, #24
 800dd42:	e7d4      	b.n	800dcee <_realloc_r+0x162>
 800dd44:	465b      	mov	r3, fp
 800dd46:	e7d2      	b.n	800dcee <_realloc_r+0x162>
 800dd48:	4621      	mov	r1, r4
 800dd4a:	4658      	mov	r0, fp
 800dd4c:	f7ff feb4 	bl	800dab8 <memmove>
 800dd50:	e7d3      	b.n	800dcfa <_realloc_r+0x16e>
 800dd52:	45b8      	cmp	r8, r7
 800dd54:	dc35      	bgt.n	800ddc2 <_realloc_r+0x236>
 800dd56:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	60da      	str	r2, [r3, #12]
 800dd5e:	6093      	str	r3, [r2, #8]
 800dd60:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800dd64:	68eb      	ldr	r3, [r5, #12]
 800dd66:	60d3      	str	r3, [r2, #12]
 800dd68:	609a      	str	r2, [r3, #8]
 800dd6a:	1f32      	subs	r2, r6, #4
 800dd6c:	2a24      	cmp	r2, #36	; 0x24
 800dd6e:	d824      	bhi.n	800ddba <_realloc_r+0x22e>
 800dd70:	2a13      	cmp	r2, #19
 800dd72:	d908      	bls.n	800dd86 <_realloc_r+0x1fa>
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	60ab      	str	r3, [r5, #8]
 800dd78:	6863      	ldr	r3, [r4, #4]
 800dd7a:	60eb      	str	r3, [r5, #12]
 800dd7c:	2a1b      	cmp	r2, #27
 800dd7e:	d80a      	bhi.n	800dd96 <_realloc_r+0x20a>
 800dd80:	3408      	adds	r4, #8
 800dd82:	f105 0010 	add.w	r0, r5, #16
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	6003      	str	r3, [r0, #0]
 800dd8a:	6863      	ldr	r3, [r4, #4]
 800dd8c:	6043      	str	r3, [r0, #4]
 800dd8e:	68a3      	ldr	r3, [r4, #8]
 800dd90:	6083      	str	r3, [r0, #8]
 800dd92:	46a9      	mov	r9, r5
 800dd94:	e75c      	b.n	800dc50 <_realloc_r+0xc4>
 800dd96:	68a3      	ldr	r3, [r4, #8]
 800dd98:	612b      	str	r3, [r5, #16]
 800dd9a:	68e3      	ldr	r3, [r4, #12]
 800dd9c:	616b      	str	r3, [r5, #20]
 800dd9e:	2a24      	cmp	r2, #36	; 0x24
 800dda0:	bf01      	itttt	eq
 800dda2:	6923      	ldreq	r3, [r4, #16]
 800dda4:	61ab      	streq	r3, [r5, #24]
 800dda6:	6963      	ldreq	r3, [r4, #20]
 800dda8:	61eb      	streq	r3, [r5, #28]
 800ddaa:	bf19      	ittee	ne
 800ddac:	3410      	addne	r4, #16
 800ddae:	f105 0018 	addne.w	r0, r5, #24
 800ddb2:	f105 0020 	addeq.w	r0, r5, #32
 800ddb6:	3418      	addeq	r4, #24
 800ddb8:	e7e5      	b.n	800dd86 <_realloc_r+0x1fa>
 800ddba:	4621      	mov	r1, r4
 800ddbc:	f7ff fe7c 	bl	800dab8 <memmove>
 800ddc0:	e7e7      	b.n	800dd92 <_realloc_r+0x206>
 800ddc2:	45d8      	cmp	r8, fp
 800ddc4:	dc31      	bgt.n	800de2a <_realloc_r+0x29e>
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	68eb      	ldr	r3, [r5, #12]
 800ddca:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ddce:	60d3      	str	r3, [r2, #12]
 800ddd0:	609a      	str	r2, [r3, #8]
 800ddd2:	1f32      	subs	r2, r6, #4
 800ddd4:	2a24      	cmp	r2, #36	; 0x24
 800ddd6:	d824      	bhi.n	800de22 <_realloc_r+0x296>
 800ddd8:	2a13      	cmp	r2, #19
 800ddda:	d908      	bls.n	800ddee <_realloc_r+0x262>
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	60ab      	str	r3, [r5, #8]
 800dde0:	6863      	ldr	r3, [r4, #4]
 800dde2:	60eb      	str	r3, [r5, #12]
 800dde4:	2a1b      	cmp	r2, #27
 800dde6:	d80a      	bhi.n	800ddfe <_realloc_r+0x272>
 800dde8:	3408      	adds	r4, #8
 800ddea:	f105 0010 	add.w	r0, r5, #16
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	6003      	str	r3, [r0, #0]
 800ddf2:	6863      	ldr	r3, [r4, #4]
 800ddf4:	6043      	str	r3, [r0, #4]
 800ddf6:	68a3      	ldr	r3, [r4, #8]
 800ddf8:	6083      	str	r3, [r0, #8]
 800ddfa:	465f      	mov	r7, fp
 800ddfc:	e7c9      	b.n	800dd92 <_realloc_r+0x206>
 800ddfe:	68a3      	ldr	r3, [r4, #8]
 800de00:	612b      	str	r3, [r5, #16]
 800de02:	68e3      	ldr	r3, [r4, #12]
 800de04:	616b      	str	r3, [r5, #20]
 800de06:	2a24      	cmp	r2, #36	; 0x24
 800de08:	bf01      	itttt	eq
 800de0a:	6923      	ldreq	r3, [r4, #16]
 800de0c:	61ab      	streq	r3, [r5, #24]
 800de0e:	6963      	ldreq	r3, [r4, #20]
 800de10:	61eb      	streq	r3, [r5, #28]
 800de12:	bf19      	ittee	ne
 800de14:	3410      	addne	r4, #16
 800de16:	f105 0018 	addne.w	r0, r5, #24
 800de1a:	f105 0020 	addeq.w	r0, r5, #32
 800de1e:	3418      	addeq	r4, #24
 800de20:	e7e5      	b.n	800ddee <_realloc_r+0x262>
 800de22:	4621      	mov	r1, r4
 800de24:	f7ff fe48 	bl	800dab8 <memmove>
 800de28:	e7e7      	b.n	800ddfa <_realloc_r+0x26e>
 800de2a:	4611      	mov	r1, r2
 800de2c:	4650      	mov	r0, sl
 800de2e:	f7ff fbf3 	bl	800d618 <_malloc_r>
 800de32:	4683      	mov	fp, r0
 800de34:	2800      	cmp	r0, #0
 800de36:	f43f af6f 	beq.w	800dd18 <_realloc_r+0x18c>
 800de3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800de3e:	f023 0301 	bic.w	r3, r3, #1
 800de42:	444b      	add	r3, r9
 800de44:	f1a0 0208 	sub.w	r2, r0, #8
 800de48:	4293      	cmp	r3, r2
 800de4a:	d105      	bne.n	800de58 <_realloc_r+0x2cc>
 800de4c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800de50:	f027 0703 	bic.w	r7, r7, #3
 800de54:	4437      	add	r7, r6
 800de56:	e6fb      	b.n	800dc50 <_realloc_r+0xc4>
 800de58:	1f32      	subs	r2, r6, #4
 800de5a:	2a24      	cmp	r2, #36	; 0x24
 800de5c:	d82f      	bhi.n	800debe <_realloc_r+0x332>
 800de5e:	2a13      	cmp	r2, #19
 800de60:	d92a      	bls.n	800deb8 <_realloc_r+0x32c>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	6003      	str	r3, [r0, #0]
 800de66:	6863      	ldr	r3, [r4, #4]
 800de68:	6043      	str	r3, [r0, #4]
 800de6a:	2a1b      	cmp	r2, #27
 800de6c:	d810      	bhi.n	800de90 <_realloc_r+0x304>
 800de6e:	f104 0208 	add.w	r2, r4, #8
 800de72:	f100 0308 	add.w	r3, r0, #8
 800de76:	6811      	ldr	r1, [r2, #0]
 800de78:	6019      	str	r1, [r3, #0]
 800de7a:	6851      	ldr	r1, [r2, #4]
 800de7c:	6059      	str	r1, [r3, #4]
 800de7e:	6892      	ldr	r2, [r2, #8]
 800de80:	609a      	str	r2, [r3, #8]
 800de82:	4621      	mov	r1, r4
 800de84:	4650      	mov	r0, sl
 800de86:	f002 fab1 	bl	80103ec <_free_r>
 800de8a:	e745      	b.n	800dd18 <_realloc_r+0x18c>
 800de8c:	20000440 	.word	0x20000440
 800de90:	68a3      	ldr	r3, [r4, #8]
 800de92:	6083      	str	r3, [r0, #8]
 800de94:	68e3      	ldr	r3, [r4, #12]
 800de96:	60c3      	str	r3, [r0, #12]
 800de98:	2a24      	cmp	r2, #36	; 0x24
 800de9a:	bf01      	itttt	eq
 800de9c:	6923      	ldreq	r3, [r4, #16]
 800de9e:	6103      	streq	r3, [r0, #16]
 800dea0:	6961      	ldreq	r1, [r4, #20]
 800dea2:	6141      	streq	r1, [r0, #20]
 800dea4:	bf19      	ittee	ne
 800dea6:	f104 0210 	addne.w	r2, r4, #16
 800deaa:	f100 0310 	addne.w	r3, r0, #16
 800deae:	f104 0218 	addeq.w	r2, r4, #24
 800deb2:	f100 0318 	addeq.w	r3, r0, #24
 800deb6:	e7de      	b.n	800de76 <_realloc_r+0x2ea>
 800deb8:	4603      	mov	r3, r0
 800deba:	4622      	mov	r2, r4
 800debc:	e7db      	b.n	800de76 <_realloc_r+0x2ea>
 800debe:	4621      	mov	r1, r4
 800dec0:	f7ff fdfa 	bl	800dab8 <memmove>
 800dec4:	e7dd      	b.n	800de82 <_realloc_r+0x2f6>
 800dec6:	4637      	mov	r7, r6
 800dec8:	e6c2      	b.n	800dc50 <_realloc_r+0xc4>
 800deca:	4317      	orrs	r7, r2
 800decc:	f8c9 7004 	str.w	r7, [r9, #4]
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	f042 0201 	orr.w	r2, r2, #1
 800ded6:	605a      	str	r2, [r3, #4]
 800ded8:	e6d6      	b.n	800dc88 <_realloc_r+0xfc>
 800deda:	bf00      	nop

0800dedc <_sbrk_r>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	4c06      	ldr	r4, [pc, #24]	; (800def8 <_sbrk_r+0x1c>)
 800dee0:	2300      	movs	r3, #0
 800dee2:	4605      	mov	r5, r0
 800dee4:	4608      	mov	r0, r1
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	f7fd ff26 	bl	800bd38 <_sbrk>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d102      	bne.n	800def6 <_sbrk_r+0x1a>
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	b103      	cbz	r3, 800def6 <_sbrk_r+0x1a>
 800def4:	602b      	str	r3, [r5, #0]
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	20000f10 	.word	0x20000f10

0800defc <_raise_r>:
 800defc:	291f      	cmp	r1, #31
 800defe:	b538      	push	{r3, r4, r5, lr}
 800df00:	4604      	mov	r4, r0
 800df02:	460d      	mov	r5, r1
 800df04:	d904      	bls.n	800df10 <_raise_r+0x14>
 800df06:	2316      	movs	r3, #22
 800df08:	6003      	str	r3, [r0, #0]
 800df0a:	f04f 30ff 	mov.w	r0, #4294967295
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800df14:	b112      	cbz	r2, 800df1c <_raise_r+0x20>
 800df16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df1a:	b94b      	cbnz	r3, 800df30 <_raise_r+0x34>
 800df1c:	4620      	mov	r0, r4
 800df1e:	f000 f831 	bl	800df84 <_getpid_r>
 800df22:	462a      	mov	r2, r5
 800df24:	4601      	mov	r1, r0
 800df26:	4620      	mov	r0, r4
 800df28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df2c:	f000 b818 	b.w	800df60 <_kill_r>
 800df30:	2b01      	cmp	r3, #1
 800df32:	d00a      	beq.n	800df4a <_raise_r+0x4e>
 800df34:	1c59      	adds	r1, r3, #1
 800df36:	d103      	bne.n	800df40 <_raise_r+0x44>
 800df38:	2316      	movs	r3, #22
 800df3a:	6003      	str	r3, [r0, #0]
 800df3c:	2001      	movs	r0, #1
 800df3e:	e7e6      	b.n	800df0e <_raise_r+0x12>
 800df40:	2400      	movs	r4, #0
 800df42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df46:	4628      	mov	r0, r5
 800df48:	4798      	blx	r3
 800df4a:	2000      	movs	r0, #0
 800df4c:	e7df      	b.n	800df0e <_raise_r+0x12>
	...

0800df50 <raise>:
 800df50:	4b02      	ldr	r3, [pc, #8]	; (800df5c <raise+0xc>)
 800df52:	4601      	mov	r1, r0
 800df54:	6818      	ldr	r0, [r3, #0]
 800df56:	f7ff bfd1 	b.w	800defc <_raise_r>
 800df5a:	bf00      	nop
 800df5c:	20000014 	.word	0x20000014

0800df60 <_kill_r>:
 800df60:	b538      	push	{r3, r4, r5, lr}
 800df62:	4c07      	ldr	r4, [pc, #28]	; (800df80 <_kill_r+0x20>)
 800df64:	2300      	movs	r3, #0
 800df66:	4605      	mov	r5, r0
 800df68:	4608      	mov	r0, r1
 800df6a:	4611      	mov	r1, r2
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	f7fd fe5b 	bl	800bc28 <_kill>
 800df72:	1c43      	adds	r3, r0, #1
 800df74:	d102      	bne.n	800df7c <_kill_r+0x1c>
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	b103      	cbz	r3, 800df7c <_kill_r+0x1c>
 800df7a:	602b      	str	r3, [r5, #0]
 800df7c:	bd38      	pop	{r3, r4, r5, pc}
 800df7e:	bf00      	nop
 800df80:	20000f10 	.word	0x20000f10

0800df84 <_getpid_r>:
 800df84:	f7fd be48 	b.w	800bc18 <_getpid>

0800df88 <sprintf>:
 800df88:	b40e      	push	{r1, r2, r3}
 800df8a:	b500      	push	{lr}
 800df8c:	b09c      	sub	sp, #112	; 0x70
 800df8e:	ab1d      	add	r3, sp, #116	; 0x74
 800df90:	9002      	str	r0, [sp, #8]
 800df92:	9006      	str	r0, [sp, #24]
 800df94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df98:	4809      	ldr	r0, [pc, #36]	; (800dfc0 <sprintf+0x38>)
 800df9a:	9107      	str	r1, [sp, #28]
 800df9c:	9104      	str	r1, [sp, #16]
 800df9e:	4909      	ldr	r1, [pc, #36]	; (800dfc4 <sprintf+0x3c>)
 800dfa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfa4:	9105      	str	r1, [sp, #20]
 800dfa6:	6800      	ldr	r0, [r0, #0]
 800dfa8:	9301      	str	r3, [sp, #4]
 800dfaa:	a902      	add	r1, sp, #8
 800dfac:	f000 f820 	bl	800dff0 <_svfprintf_r>
 800dfb0:	9b02      	ldr	r3, [sp, #8]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	701a      	strb	r2, [r3, #0]
 800dfb6:	b01c      	add	sp, #112	; 0x70
 800dfb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfbc:	b003      	add	sp, #12
 800dfbe:	4770      	bx	lr
 800dfc0:	20000014 	.word	0x20000014
 800dfc4:	ffff0208 	.word	0xffff0208

0800dfc8 <strncmp>:
 800dfc8:	b510      	push	{r4, lr}
 800dfca:	b16a      	cbz	r2, 800dfe8 <strncmp+0x20>
 800dfcc:	3901      	subs	r1, #1
 800dfce:	1884      	adds	r4, r0, r2
 800dfd0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dfd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d103      	bne.n	800dfe4 <strncmp+0x1c>
 800dfdc:	42a0      	cmp	r0, r4
 800dfde:	d001      	beq.n	800dfe4 <strncmp+0x1c>
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1f5      	bne.n	800dfd0 <strncmp+0x8>
 800dfe4:	1a98      	subs	r0, r3, r2
 800dfe6:	bd10      	pop	{r4, pc}
 800dfe8:	4610      	mov	r0, r2
 800dfea:	e7fc      	b.n	800dfe6 <strncmp+0x1e>
 800dfec:	0000      	movs	r0, r0
	...

0800dff0 <_svfprintf_r>:
 800dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	ed2d 8b04 	vpush	{d8-d9}
 800dff8:	b0cb      	sub	sp, #300	; 0x12c
 800dffa:	468b      	mov	fp, r1
 800dffc:	4691      	mov	r9, r2
 800dffe:	461e      	mov	r6, r3
 800e000:	9002      	str	r0, [sp, #8]
 800e002:	f002 facd 	bl	80105a0 <_localeconv_r>
 800e006:	6803      	ldr	r3, [r0, #0]
 800e008:	930f      	str	r3, [sp, #60]	; 0x3c
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7f8 fee2 	bl	8006dd4 <strlen>
 800e010:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e014:	9009      	str	r0, [sp, #36]	; 0x24
 800e016:	0618      	lsls	r0, r3, #24
 800e018:	d51a      	bpl.n	800e050 <_svfprintf_r+0x60>
 800e01a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e01e:	b9bb      	cbnz	r3, 800e050 <_svfprintf_r+0x60>
 800e020:	2140      	movs	r1, #64	; 0x40
 800e022:	9802      	ldr	r0, [sp, #8]
 800e024:	f7ff faf8 	bl	800d618 <_malloc_r>
 800e028:	f8cb 0000 	str.w	r0, [fp]
 800e02c:	f8cb 0010 	str.w	r0, [fp, #16]
 800e030:	b958      	cbnz	r0, 800e04a <_svfprintf_r+0x5a>
 800e032:	9a02      	ldr	r2, [sp, #8]
 800e034:	230c      	movs	r3, #12
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	f04f 33ff 	mov.w	r3, #4294967295
 800e03c:	930a      	str	r3, [sp, #40]	; 0x28
 800e03e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e040:	b04b      	add	sp, #300	; 0x12c
 800e042:	ecbd 8b04 	vpop	{d8-d9}
 800e046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04a:	2340      	movs	r3, #64	; 0x40
 800e04c:	f8cb 3014 	str.w	r3, [fp, #20]
 800e050:	2300      	movs	r3, #0
 800e052:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 800e056:	ed9f 8bc6 	vldr	d8, [pc, #792]	; 800e370 <_svfprintf_r+0x380>
 800e05a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800e05e:	ac21      	add	r4, sp, #132	; 0x84
 800e060:	941e      	str	r4, [sp, #120]	; 0x78
 800e062:	9303      	str	r3, [sp, #12]
 800e064:	9307      	str	r3, [sp, #28]
 800e066:	930e      	str	r3, [sp, #56]	; 0x38
 800e068:	9312      	str	r3, [sp, #72]	; 0x48
 800e06a:	930a      	str	r3, [sp, #40]	; 0x28
 800e06c:	464d      	mov	r5, r9
 800e06e:	462b      	mov	r3, r5
 800e070:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e074:	b112      	cbz	r2, 800e07c <_svfprintf_r+0x8c>
 800e076:	2a25      	cmp	r2, #37	; 0x25
 800e078:	f040 80e4 	bne.w	800e244 <_svfprintf_r+0x254>
 800e07c:	ebb5 0709 	subs.w	r7, r5, r9
 800e080:	d00e      	beq.n	800e0a0 <_svfprintf_r+0xb0>
 800e082:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e084:	443b      	add	r3, r7
 800e086:	9320      	str	r3, [sp, #128]	; 0x80
 800e088:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e08a:	3301      	adds	r3, #1
 800e08c:	2b07      	cmp	r3, #7
 800e08e:	e9c4 9700 	strd	r9, r7, [r4]
 800e092:	931f      	str	r3, [sp, #124]	; 0x7c
 800e094:	f300 80d8 	bgt.w	800e248 <_svfprintf_r+0x258>
 800e098:	3408      	adds	r4, #8
 800e09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e09c:	443b      	add	r3, r7
 800e09e:	930a      	str	r3, [sp, #40]	; 0x28
 800e0a0:	782b      	ldrb	r3, [r5, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f001 8174 	beq.w	800f390 <_svfprintf_r+0x13a0>
 800e0a8:	1c6b      	adds	r3, r5, #1
 800e0aa:	9308      	str	r3, [sp, #32]
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e0b2:	f04f 38ff 	mov.w	r8, #4294967295
 800e0b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0b8:	461d      	mov	r5, r3
 800e0ba:	9b08      	ldr	r3, [sp, #32]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	9304      	str	r3, [sp, #16]
 800e0c0:	9b08      	ldr	r3, [sp, #32]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	9308      	str	r3, [sp, #32]
 800e0c6:	9b04      	ldr	r3, [sp, #16]
 800e0c8:	3b20      	subs	r3, #32
 800e0ca:	2b5a      	cmp	r3, #90	; 0x5a
 800e0cc:	f200 85e5 	bhi.w	800ec9a <_svfprintf_r+0xcaa>
 800e0d0:	a201      	add	r2, pc, #4	; (adr r2, 800e0d8 <_svfprintf_r+0xe8>)
 800e0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d6:	bf00      	nop
 800e0d8:	0800e2d7 	.word	0x0800e2d7
 800e0dc:	0800ec9b 	.word	0x0800ec9b
 800e0e0:	0800ec9b 	.word	0x0800ec9b
 800e0e4:	0800e2e9 	.word	0x0800e2e9
 800e0e8:	0800ec9b 	.word	0x0800ec9b
 800e0ec:	0800ec9b 	.word	0x0800ec9b
 800e0f0:	0800ec9b 	.word	0x0800ec9b
 800e0f4:	0800e29d 	.word	0x0800e29d
 800e0f8:	0800ec9b 	.word	0x0800ec9b
 800e0fc:	0800ec9b 	.word	0x0800ec9b
 800e100:	0800e2ef 	.word	0x0800e2ef
 800e104:	0800e307 	.word	0x0800e307
 800e108:	0800ec9b 	.word	0x0800ec9b
 800e10c:	0800e301 	.word	0x0800e301
 800e110:	0800e30b 	.word	0x0800e30b
 800e114:	0800ec9b 	.word	0x0800ec9b
 800e118:	0800e343 	.word	0x0800e343
 800e11c:	0800e349 	.word	0x0800e349
 800e120:	0800e349 	.word	0x0800e349
 800e124:	0800e349 	.word	0x0800e349
 800e128:	0800e349 	.word	0x0800e349
 800e12c:	0800e349 	.word	0x0800e349
 800e130:	0800e349 	.word	0x0800e349
 800e134:	0800e349 	.word	0x0800e349
 800e138:	0800e349 	.word	0x0800e349
 800e13c:	0800e349 	.word	0x0800e349
 800e140:	0800ec9b 	.word	0x0800ec9b
 800e144:	0800ec9b 	.word	0x0800ec9b
 800e148:	0800ec9b 	.word	0x0800ec9b
 800e14c:	0800ec9b 	.word	0x0800ec9b
 800e150:	0800ec9b 	.word	0x0800ec9b
 800e154:	0800ec9b 	.word	0x0800ec9b
 800e158:	0800ec9b 	.word	0x0800ec9b
 800e15c:	0800e443 	.word	0x0800e443
 800e160:	0800ec9b 	.word	0x0800ec9b
 800e164:	0800e3b1 	.word	0x0800e3b1
 800e168:	0800e3d5 	.word	0x0800e3d5
 800e16c:	0800e443 	.word	0x0800e443
 800e170:	0800e443 	.word	0x0800e443
 800e174:	0800e443 	.word	0x0800e443
 800e178:	0800ec9b 	.word	0x0800ec9b
 800e17c:	0800ec9b 	.word	0x0800ec9b
 800e180:	0800ec9b 	.word	0x0800ec9b
 800e184:	0800ec9b 	.word	0x0800ec9b
 800e188:	0800e36b 	.word	0x0800e36b
 800e18c:	0800ec9b 	.word	0x0800ec9b
 800e190:	0800ec9b 	.word	0x0800ec9b
 800e194:	0800e8b7 	.word	0x0800e8b7
 800e198:	0800ec9b 	.word	0x0800ec9b
 800e19c:	0800ec9b 	.word	0x0800ec9b
 800e1a0:	0800ec9b 	.word	0x0800ec9b
 800e1a4:	0800e93f 	.word	0x0800e93f
 800e1a8:	0800ec9b 	.word	0x0800ec9b
 800e1ac:	0800eb17 	.word	0x0800eb17
 800e1b0:	0800ec9b 	.word	0x0800ec9b
 800e1b4:	0800ec9b 	.word	0x0800ec9b
 800e1b8:	0800e261 	.word	0x0800e261
 800e1bc:	0800ec9b 	.word	0x0800ec9b
 800e1c0:	0800ec9b 	.word	0x0800ec9b
 800e1c4:	0800ec9b 	.word	0x0800ec9b
 800e1c8:	0800ec9b 	.word	0x0800ec9b
 800e1cc:	0800ec9b 	.word	0x0800ec9b
 800e1d0:	0800ec9b 	.word	0x0800ec9b
 800e1d4:	0800ec9b 	.word	0x0800ec9b
 800e1d8:	0800ec9b 	.word	0x0800ec9b
 800e1dc:	0800e443 	.word	0x0800e443
 800e1e0:	0800ec9b 	.word	0x0800ec9b
 800e1e4:	0800e3b1 	.word	0x0800e3b1
 800e1e8:	0800e3d9 	.word	0x0800e3d9
 800e1ec:	0800e443 	.word	0x0800e443
 800e1f0:	0800e443 	.word	0x0800e443
 800e1f4:	0800e443 	.word	0x0800e443
 800e1f8:	0800e37d 	.word	0x0800e37d
 800e1fc:	0800e3d9 	.word	0x0800e3d9
 800e200:	0800e3a5 	.word	0x0800e3a5
 800e204:	0800ec9b 	.word	0x0800ec9b
 800e208:	0800e397 	.word	0x0800e397
 800e20c:	0800ec9b 	.word	0x0800ec9b
 800e210:	0800e879 	.word	0x0800e879
 800e214:	0800e8bb 	.word	0x0800e8bb
 800e218:	0800e91f 	.word	0x0800e91f
 800e21c:	0800e3a5 	.word	0x0800e3a5
 800e220:	0800ec9b 	.word	0x0800ec9b
 800e224:	0800e93f 	.word	0x0800e93f
 800e228:	0800e0bb 	.word	0x0800e0bb
 800e22c:	0800eb1b 	.word	0x0800eb1b
 800e230:	0800ec9b 	.word	0x0800ec9b
 800e234:	0800ec9b 	.word	0x0800ec9b
 800e238:	0800eb51 	.word	0x0800eb51
 800e23c:	0800ec9b 	.word	0x0800ec9b
 800e240:	0800e0bb 	.word	0x0800e0bb
 800e244:	461d      	mov	r5, r3
 800e246:	e712      	b.n	800e06e <_svfprintf_r+0x7e>
 800e248:	aa1e      	add	r2, sp, #120	; 0x78
 800e24a:	4659      	mov	r1, fp
 800e24c:	9802      	ldr	r0, [sp, #8]
 800e24e:	f002 fd65 	bl	8010d1c <__ssprint_r>
 800e252:	2800      	cmp	r0, #0
 800e254:	f040 8150 	bne.w	800e4f8 <_svfprintf_r+0x508>
 800e258:	ac21      	add	r4, sp, #132	; 0x84
 800e25a:	e71e      	b.n	800e09a <_svfprintf_r+0xaa>
 800e25c:	461e      	mov	r6, r3
 800e25e:	e72c      	b.n	800e0ba <_svfprintf_r+0xca>
 800e260:	4b45      	ldr	r3, [pc, #276]	; (800e378 <_svfprintf_r+0x388>)
 800e262:	9311      	str	r3, [sp, #68]	; 0x44
 800e264:	06af      	lsls	r7, r5, #26
 800e266:	f140 8476 	bpl.w	800eb56 <_svfprintf_r+0xb66>
 800e26a:	3607      	adds	r6, #7
 800e26c:	f026 0607 	bic.w	r6, r6, #7
 800e270:	f106 0308 	add.w	r3, r6, #8
 800e274:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e278:	9306      	str	r3, [sp, #24]
 800e27a:	07eb      	lsls	r3, r5, #31
 800e27c:	d50a      	bpl.n	800e294 <_svfprintf_r+0x2a4>
 800e27e:	ea56 0307 	orrs.w	r3, r6, r7
 800e282:	d007      	beq.n	800e294 <_svfprintf_r+0x2a4>
 800e284:	2330      	movs	r3, #48	; 0x30
 800e286:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800e28a:	9b04      	ldr	r3, [sp, #16]
 800e28c:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800e290:	f045 0502 	orr.w	r5, r5, #2
 800e294:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800e298:	2302      	movs	r3, #2
 800e29a:	e31b      	b.n	800e8d4 <_svfprintf_r+0x8e4>
 800e29c:	9802      	ldr	r0, [sp, #8]
 800e29e:	f002 f97f 	bl	80105a0 <_localeconv_r>
 800e2a2:	6843      	ldr	r3, [r0, #4]
 800e2a4:	9312      	str	r3, [sp, #72]	; 0x48
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7f8 fd94 	bl	8006dd4 <strlen>
 800e2ac:	900e      	str	r0, [sp, #56]	; 0x38
 800e2ae:	9802      	ldr	r0, [sp, #8]
 800e2b0:	f002 f976 	bl	80105a0 <_localeconv_r>
 800e2b4:	6883      	ldr	r3, [r0, #8]
 800e2b6:	9307      	str	r3, [sp, #28]
 800e2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f43f aefd 	beq.w	800e0ba <_svfprintf_r+0xca>
 800e2c0:	9b07      	ldr	r3, [sp, #28]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f43f aef9 	beq.w	800e0ba <_svfprintf_r+0xca>
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f43f aef5 	beq.w	800e0ba <_svfprintf_r+0xca>
 800e2d0:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800e2d4:	e6f1      	b.n	800e0ba <_svfprintf_r+0xca>
 800e2d6:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	f47f aeed 	bne.w	800e0ba <_svfprintf_r+0xca>
 800e2e0:	2320      	movs	r3, #32
 800e2e2:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e2e6:	e6e8      	b.n	800e0ba <_svfprintf_r+0xca>
 800e2e8:	f045 0501 	orr.w	r5, r5, #1
 800e2ec:	e6e5      	b.n	800e0ba <_svfprintf_r+0xca>
 800e2ee:	6832      	ldr	r2, [r6, #0]
 800e2f0:	920b      	str	r2, [sp, #44]	; 0x2c
 800e2f2:	2a00      	cmp	r2, #0
 800e2f4:	f106 0304 	add.w	r3, r6, #4
 800e2f8:	dab0      	bge.n	800e25c <_svfprintf_r+0x26c>
 800e2fa:	4252      	negs	r2, r2
 800e2fc:	920b      	str	r2, [sp, #44]	; 0x2c
 800e2fe:	461e      	mov	r6, r3
 800e300:	f045 0504 	orr.w	r5, r5, #4
 800e304:	e6d9      	b.n	800e0ba <_svfprintf_r+0xca>
 800e306:	232b      	movs	r3, #43	; 0x2b
 800e308:	e7eb      	b.n	800e2e2 <_svfprintf_r+0x2f2>
 800e30a:	9a08      	ldr	r2, [sp, #32]
 800e30c:	9b08      	ldr	r3, [sp, #32]
 800e30e:	7812      	ldrb	r2, [r2, #0]
 800e310:	9204      	str	r2, [sp, #16]
 800e312:	2a2a      	cmp	r2, #42	; 0x2a
 800e314:	f103 0301 	add.w	r3, r3, #1
 800e318:	d110      	bne.n	800e33c <_svfprintf_r+0x34c>
 800e31a:	6832      	ldr	r2, [r6, #0]
 800e31c:	9308      	str	r3, [sp, #32]
 800e31e:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800e322:	3604      	adds	r6, #4
 800e324:	e6c9      	b.n	800e0ba <_svfprintf_r+0xca>
 800e326:	210a      	movs	r1, #10
 800e328:	fb01 2808 	mla	r8, r1, r8, r2
 800e32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e330:	9204      	str	r2, [sp, #16]
 800e332:	9a04      	ldr	r2, [sp, #16]
 800e334:	3a30      	subs	r2, #48	; 0x30
 800e336:	2a09      	cmp	r2, #9
 800e338:	d9f5      	bls.n	800e326 <_svfprintf_r+0x336>
 800e33a:	e6c3      	b.n	800e0c4 <_svfprintf_r+0xd4>
 800e33c:	f04f 0800 	mov.w	r8, #0
 800e340:	e7f7      	b.n	800e332 <_svfprintf_r+0x342>
 800e342:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800e346:	e6b8      	b.n	800e0ba <_svfprintf_r+0xca>
 800e348:	2200      	movs	r2, #0
 800e34a:	9b08      	ldr	r3, [sp, #32]
 800e34c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e34e:	9a04      	ldr	r2, [sp, #16]
 800e350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e352:	3a30      	subs	r2, #48	; 0x30
 800e354:	200a      	movs	r0, #10
 800e356:	fb00 2201 	mla	r2, r0, r1, r2
 800e35a:	920b      	str	r2, [sp, #44]	; 0x2c
 800e35c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e360:	9204      	str	r2, [sp, #16]
 800e362:	3a30      	subs	r2, #48	; 0x30
 800e364:	2a09      	cmp	r2, #9
 800e366:	d9f2      	bls.n	800e34e <_svfprintf_r+0x35e>
 800e368:	e6ac      	b.n	800e0c4 <_svfprintf_r+0xd4>
 800e36a:	f045 0508 	orr.w	r5, r5, #8
 800e36e:	e6a4      	b.n	800e0ba <_svfprintf_r+0xca>
	...
 800e378:	0801237d 	.word	0x0801237d
 800e37c:	9b08      	ldr	r3, [sp, #32]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b68      	cmp	r3, #104	; 0x68
 800e382:	bf01      	itttt	eq
 800e384:	9b08      	ldreq	r3, [sp, #32]
 800e386:	3301      	addeq	r3, #1
 800e388:	9308      	streq	r3, [sp, #32]
 800e38a:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 800e38e:	bf18      	it	ne
 800e390:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 800e394:	e691      	b.n	800e0ba <_svfprintf_r+0xca>
 800e396:	9b08      	ldr	r3, [sp, #32]
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	2b6c      	cmp	r3, #108	; 0x6c
 800e39c:	d105      	bne.n	800e3aa <_svfprintf_r+0x3ba>
 800e39e:	9b08      	ldr	r3, [sp, #32]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	9308      	str	r3, [sp, #32]
 800e3a4:	f045 0520 	orr.w	r5, r5, #32
 800e3a8:	e687      	b.n	800e0ba <_svfprintf_r+0xca>
 800e3aa:	f045 0510 	orr.w	r5, r5, #16
 800e3ae:	e684      	b.n	800e0ba <_svfprintf_r+0xca>
 800e3b0:	1d33      	adds	r3, r6, #4
 800e3b2:	9306      	str	r3, [sp, #24]
 800e3b4:	6833      	ldr	r3, [r6, #0]
 800e3b6:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e3c0:	469a      	mov	sl, r3
 800e3c2:	f04f 0801 	mov.w	r8, #1
 800e3c6:	930c      	str	r3, [sp, #48]	; 0x30
 800e3c8:	461f      	mov	r7, r3
 800e3ca:	9305      	str	r3, [sp, #20]
 800e3cc:	461e      	mov	r6, r3
 800e3ce:	f10d 09c4 	add.w	r9, sp, #196	; 0xc4
 800e3d2:	e2ce      	b.n	800e972 <_svfprintf_r+0x982>
 800e3d4:	f045 0510 	orr.w	r5, r5, #16
 800e3d8:	06a9      	lsls	r1, r5, #26
 800e3da:	d521      	bpl.n	800e420 <_svfprintf_r+0x430>
 800e3dc:	3607      	adds	r6, #7
 800e3de:	f026 0607 	bic.w	r6, r6, #7
 800e3e2:	f106 0308 	add.w	r3, r6, #8
 800e3e6:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e3ea:	9306      	str	r3, [sp, #24]
 800e3ec:	2e00      	cmp	r6, #0
 800e3ee:	f177 0300 	sbcs.w	r3, r7, #0
 800e3f2:	da06      	bge.n	800e402 <_svfprintf_r+0x412>
 800e3f4:	4276      	negs	r6, r6
 800e3f6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800e3fa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800e3fe:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e402:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e406:	f040 83b6 	bne.w	800eb76 <_svfprintf_r+0xb86>
 800e40a:	2f00      	cmp	r7, #0
 800e40c:	bf08      	it	eq
 800e40e:	2e0a      	cmpeq	r6, #10
 800e410:	f080 83e8 	bcs.w	800ebe4 <_svfprintf_r+0xbf4>
 800e414:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 800e418:	3630      	adds	r6, #48	; 0x30
 800e41a:	f809 6d01 	strb.w	r6, [r9, #-1]!
 800e41e:	e3cc      	b.n	800ebba <_svfprintf_r+0xbca>
 800e420:	1d33      	adds	r3, r6, #4
 800e422:	06ea      	lsls	r2, r5, #27
 800e424:	9306      	str	r3, [sp, #24]
 800e426:	d502      	bpl.n	800e42e <_svfprintf_r+0x43e>
 800e428:	6836      	ldr	r6, [r6, #0]
 800e42a:	17f7      	asrs	r7, r6, #31
 800e42c:	e7de      	b.n	800e3ec <_svfprintf_r+0x3fc>
 800e42e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e432:	6836      	ldr	r6, [r6, #0]
 800e434:	d001      	beq.n	800e43a <_svfprintf_r+0x44a>
 800e436:	b236      	sxth	r6, r6
 800e438:	e7f7      	b.n	800e42a <_svfprintf_r+0x43a>
 800e43a:	05ab      	lsls	r3, r5, #22
 800e43c:	bf48      	it	mi
 800e43e:	b276      	sxtbmi	r6, r6
 800e440:	e7f3      	b.n	800e42a <_svfprintf_r+0x43a>
 800e442:	3607      	adds	r6, #7
 800e444:	f026 0607 	bic.w	r6, r6, #7
 800e448:	ed96 8b00 	vldr	d8, [r6]
 800e44c:	ed9f 7bb0 	vldr	d7, [pc, #704]	; 800e710 <_svfprintf_r+0x720>
 800e450:	eeb0 6bc8 	vabs.f64	d6, d8
 800e454:	f106 0308 	add.w	r3, r6, #8
 800e458:	eeb4 6b47 	vcmp.f64	d6, d7
 800e45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e460:	9306      	str	r3, [sp, #24]
 800e462:	dd17      	ble.n	800e494 <_svfprintf_r+0x4a4>
 800e464:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46c:	d502      	bpl.n	800e474 <_svfprintf_r+0x484>
 800e46e:	232d      	movs	r3, #45	; 0x2d
 800e470:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e474:	4aa8      	ldr	r2, [pc, #672]	; (800e718 <_svfprintf_r+0x728>)
 800e476:	4ba9      	ldr	r3, [pc, #676]	; (800e71c <_svfprintf_r+0x72c>)
 800e478:	9904      	ldr	r1, [sp, #16]
 800e47a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800e47e:	2947      	cmp	r1, #71	; 0x47
 800e480:	bfcc      	ite	gt
 800e482:	4691      	movgt	r9, r2
 800e484:	4699      	movle	r9, r3
 800e486:	f04f 0a00 	mov.w	sl, #0
 800e48a:	f04f 0803 	mov.w	r8, #3
 800e48e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800e492:	e399      	b.n	800ebc8 <_svfprintf_r+0xbd8>
 800e494:	eeb4 8b48 	vcmp.f64	d8, d8
 800e498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49c:	d709      	bvc.n	800e4b2 <_svfprintf_r+0x4c2>
 800e49e:	ee18 3a90 	vmov	r3, s17
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	bfbc      	itt	lt
 800e4a6:	232d      	movlt	r3, #45	; 0x2d
 800e4a8:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 800e4ac:	4a9c      	ldr	r2, [pc, #624]	; (800e720 <_svfprintf_r+0x730>)
 800e4ae:	4b9d      	ldr	r3, [pc, #628]	; (800e724 <_svfprintf_r+0x734>)
 800e4b0:	e7e2      	b.n	800e478 <_svfprintf_r+0x488>
 800e4b2:	9b04      	ldr	r3, [sp, #16]
 800e4b4:	f023 0720 	bic.w	r7, r3, #32
 800e4b8:	2f41      	cmp	r7, #65	; 0x41
 800e4ba:	d126      	bne.n	800e50a <_svfprintf_r+0x51a>
 800e4bc:	2330      	movs	r3, #48	; 0x30
 800e4be:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800e4c2:	9b04      	ldr	r3, [sp, #16]
 800e4c4:	2b61      	cmp	r3, #97	; 0x61
 800e4c6:	bf14      	ite	ne
 800e4c8:	2358      	movne	r3, #88	; 0x58
 800e4ca:	2378      	moveq	r3, #120	; 0x78
 800e4cc:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800e4d0:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800e4d4:	f045 0502 	orr.w	r5, r5, #2
 800e4d8:	dd24      	ble.n	800e524 <_svfprintf_r+0x534>
 800e4da:	f108 0101 	add.w	r1, r8, #1
 800e4de:	9802      	ldr	r0, [sp, #8]
 800e4e0:	f7ff f89a 	bl	800d618 <_malloc_r>
 800e4e4:	4681      	mov	r9, r0
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	f040 80ec 	bne.w	800e6c4 <_svfprintf_r+0x6d4>
 800e4ec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e4f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4f4:	f8ab 300c 	strh.w	r3, [fp, #12]
 800e4f8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e4fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e502:	bf18      	it	ne
 800e504:	f04f 33ff 	movne.w	r3, #4294967295
 800e508:	e598      	b.n	800e03c <_svfprintf_r+0x4c>
 800e50a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e50e:	f000 80db 	beq.w	800e6c8 <_svfprintf_r+0x6d8>
 800e512:	2f47      	cmp	r7, #71	; 0x47
 800e514:	d103      	bne.n	800e51e <_svfprintf_r+0x52e>
 800e516:	f1b8 0f00 	cmp.w	r8, #0
 800e51a:	f000 80da 	beq.w	800e6d2 <_svfprintf_r+0x6e2>
 800e51e:	f04f 0a00 	mov.w	sl, #0
 800e522:	e003      	b.n	800e52c <_svfprintf_r+0x53c>
 800e524:	f04f 0a00 	mov.w	sl, #0
 800e528:	f10d 09c4 	add.w	r9, sp, #196	; 0xc4
 800e52c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800e530:	930c      	str	r3, [sp, #48]	; 0x30
 800e532:	ee18 3a90 	vmov	r3, s17
 800e536:	2b00      	cmp	r3, #0
 800e538:	f280 80cf 	bge.w	800e6da <_svfprintf_r+0x6ea>
 800e53c:	eeb1 9b48 	vneg.f64	d9, d8
 800e540:	232d      	movs	r3, #45	; 0x2d
 800e542:	2f41      	cmp	r7, #65	; 0x41
 800e544:	930d      	str	r3, [sp, #52]	; 0x34
 800e546:	f040 80d9 	bne.w	800e6fc <_svfprintf_r+0x70c>
 800e54a:	eeb0 0b49 	vmov.f64	d0, d9
 800e54e:	a818      	add	r0, sp, #96	; 0x60
 800e550:	f002 fb52 	bl	8010bf8 <frexp>
 800e554:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 800e558:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e55c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e564:	bf04      	itt	eq
 800e566:	2301      	moveq	r3, #1
 800e568:	9318      	streq	r3, [sp, #96]	; 0x60
 800e56a:	9a04      	ldr	r2, [sp, #16]
 800e56c:	4b6e      	ldr	r3, [pc, #440]	; (800e728 <_svfprintf_r+0x738>)
 800e56e:	496f      	ldr	r1, [pc, #444]	; (800e72c <_svfprintf_r+0x73c>)
 800e570:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 800e574:	2a61      	cmp	r2, #97	; 0x61
 800e576:	bf08      	it	eq
 800e578:	4619      	moveq	r1, r3
 800e57a:	f108 32ff 	add.w	r2, r8, #4294967295
 800e57e:	464b      	mov	r3, r9
 800e580:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e584:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800e588:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e58c:	ee16 0a90 	vmov	r0, s13
 800e590:	5c0e      	ldrb	r6, [r1, r0]
 800e592:	f803 6b01 	strb.w	r6, [r3], #1
 800e596:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e59a:	4616      	mov	r6, r2
 800e59c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e5a0:	d006      	beq.n	800e5b0 <_svfprintf_r+0x5c0>
 800e5a2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5aa:	f102 32ff 	add.w	r2, r2, #4294967295
 800e5ae:	d1e7      	bne.n	800e580 <_svfprintf_r+0x590>
 800e5b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e5b4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5bc:	dc08      	bgt.n	800e5d0 <_svfprintf_r+0x5e0>
 800e5be:	eeb4 0b47 	vcmp.f64	d0, d7
 800e5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c6:	f040 8095 	bne.w	800e6f4 <_svfprintf_r+0x704>
 800e5ca:	07c0      	lsls	r0, r0, #31
 800e5cc:	f140 8092 	bpl.w	800e6f4 <_svfprintf_r+0x704>
 800e5d0:	7bce      	ldrb	r6, [r1, #15]
 800e5d2:	931c      	str	r3, [sp, #112]	; 0x70
 800e5d4:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e5d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 800e5da:	1e42      	subs	r2, r0, #1
 800e5dc:	921c      	str	r2, [sp, #112]	; 0x70
 800e5de:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800e5e2:	42b2      	cmp	r2, r6
 800e5e4:	d07d      	beq.n	800e6e2 <_svfprintf_r+0x6f2>
 800e5e6:	2a39      	cmp	r2, #57	; 0x39
 800e5e8:	bf16      	itet	ne
 800e5ea:	3201      	addne	r2, #1
 800e5ec:	7a8a      	ldrbeq	r2, [r1, #10]
 800e5ee:	b2d2      	uxtbne	r2, r2
 800e5f0:	f800 2c01 	strb.w	r2, [r0, #-1]
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	eba2 0309 	sub.w	r3, r2, r9
 800e5fa:	2f47      	cmp	r7, #71	; 0x47
 800e5fc:	9303      	str	r3, [sp, #12]
 800e5fe:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800e600:	f040 80ce 	bne.w	800e7a0 <_svfprintf_r+0x7b0>
 800e604:	1cf2      	adds	r2, r6, #3
 800e606:	db02      	blt.n	800e60e <_svfprintf_r+0x61e>
 800e608:	45b0      	cmp	r8, r6
 800e60a:	f280 80f5 	bge.w	800e7f8 <_svfprintf_r+0x808>
 800e60e:	9b04      	ldr	r3, [sp, #16]
 800e610:	3b02      	subs	r3, #2
 800e612:	9304      	str	r3, [sp, #16]
 800e614:	9904      	ldr	r1, [sp, #16]
 800e616:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800e61a:	f021 0120 	bic.w	r1, r1, #32
 800e61e:	2941      	cmp	r1, #65	; 0x41
 800e620:	bf08      	it	eq
 800e622:	320f      	addeq	r2, #15
 800e624:	f106 33ff 	add.w	r3, r6, #4294967295
 800e628:	bf06      	itte	eq
 800e62a:	b2d2      	uxtbeq	r2, r2
 800e62c:	2101      	moveq	r1, #1
 800e62e:	2100      	movne	r1, #0
 800e630:	2b00      	cmp	r3, #0
 800e632:	9318      	str	r3, [sp, #96]	; 0x60
 800e634:	bfb8      	it	lt
 800e636:	f1c6 0301 	rsblt	r3, r6, #1
 800e63a:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 800e63e:	bfb4      	ite	lt
 800e640:	222d      	movlt	r2, #45	; 0x2d
 800e642:	222b      	movge	r2, #43	; 0x2b
 800e644:	2b09      	cmp	r3, #9
 800e646:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800e64a:	f340 80c0 	ble.w	800e7ce <_svfprintf_r+0x7de>
 800e64e:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 800e652:	260a      	movs	r6, #10
 800e654:	fb93 f0f6 	sdiv	r0, r3, r6
 800e658:	fb06 3310 	mls	r3, r6, r0, r3
 800e65c:	3330      	adds	r3, #48	; 0x30
 800e65e:	2809      	cmp	r0, #9
 800e660:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e664:	f102 31ff 	add.w	r1, r2, #4294967295
 800e668:	4603      	mov	r3, r0
 800e66a:	f300 80a9 	bgt.w	800e7c0 <_svfprintf_r+0x7d0>
 800e66e:	3330      	adds	r3, #48	; 0x30
 800e670:	f801 3c01 	strb.w	r3, [r1, #-1]
 800e674:	3a02      	subs	r2, #2
 800e676:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 800e67a:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 800e67e:	4282      	cmp	r2, r0
 800e680:	4619      	mov	r1, r3
 800e682:	f0c0 809f 	bcc.w	800e7c4 <_svfprintf_r+0x7d4>
 800e686:	9a03      	ldr	r2, [sp, #12]
 800e688:	ab1a      	add	r3, sp, #104	; 0x68
 800e68a:	1acb      	subs	r3, r1, r3
 800e68c:	2a01      	cmp	r2, #1
 800e68e:	9310      	str	r3, [sp, #64]	; 0x40
 800e690:	eb03 0802 	add.w	r8, r3, r2
 800e694:	dc01      	bgt.n	800e69a <_svfprintf_r+0x6aa>
 800e696:	07eb      	lsls	r3, r5, #31
 800e698:	d501      	bpl.n	800e69e <_svfprintf_r+0x6ae>
 800e69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e69c:	4498      	add	r8, r3
 800e69e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800e6a2:	2700      	movs	r7, #0
 800e6a4:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800e6a8:	930c      	str	r3, [sp, #48]	; 0x30
 800e6aa:	9705      	str	r7, [sp, #20]
 800e6ac:	463e      	mov	r6, r7
 800e6ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 82fe 	beq.w	800ecb2 <_svfprintf_r+0xcc2>
 800e6b6:	232d      	movs	r3, #45	; 0x2d
 800e6b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e6ba:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800e6be:	2300      	movs	r3, #0
 800e6c0:	930c      	str	r3, [sp, #48]	; 0x30
 800e6c2:	e156      	b.n	800e972 <_svfprintf_r+0x982>
 800e6c4:	4682      	mov	sl, r0
 800e6c6:	e731      	b.n	800e52c <_svfprintf_r+0x53c>
 800e6c8:	f04f 0a00 	mov.w	sl, #0
 800e6cc:	f04f 0806 	mov.w	r8, #6
 800e6d0:	e72c      	b.n	800e52c <_svfprintf_r+0x53c>
 800e6d2:	46c2      	mov	sl, r8
 800e6d4:	f04f 0801 	mov.w	r8, #1
 800e6d8:	e728      	b.n	800e52c <_svfprintf_r+0x53c>
 800e6da:	eeb0 9b48 	vmov.f64	d9, d8
 800e6de:	2300      	movs	r3, #0
 800e6e0:	e72f      	b.n	800e542 <_svfprintf_r+0x552>
 800e6e2:	f800 cc01 	strb.w	ip, [r0, #-1]
 800e6e6:	e777      	b.n	800e5d8 <_svfprintf_r+0x5e8>
 800e6e8:	f802 0b01 	strb.w	r0, [r2], #1
 800e6ec:	1a99      	subs	r1, r3, r2
 800e6ee:	2900      	cmp	r1, #0
 800e6f0:	dafa      	bge.n	800e6e8 <_svfprintf_r+0x6f8>
 800e6f2:	e780      	b.n	800e5f6 <_svfprintf_r+0x606>
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	2030      	movs	r0, #48	; 0x30
 800e6f8:	4433      	add	r3, r6
 800e6fa:	e7f7      	b.n	800e6ec <_svfprintf_r+0x6fc>
 800e6fc:	2f46      	cmp	r7, #70	; 0x46
 800e6fe:	d017      	beq.n	800e730 <_svfprintf_r+0x740>
 800e700:	2f45      	cmp	r7, #69	; 0x45
 800e702:	d146      	bne.n	800e792 <_svfprintf_r+0x7a2>
 800e704:	f108 0601 	add.w	r6, r8, #1
 800e708:	2102      	movs	r1, #2
 800e70a:	e013      	b.n	800e734 <_svfprintf_r+0x744>
 800e70c:	f3af 8000 	nop.w
 800e710:	ffffffff 	.word	0xffffffff
 800e714:	7fefffff 	.word	0x7fefffff
 800e718:	08012360 	.word	0x08012360
 800e71c:	0801235c 	.word	0x0801235c
 800e720:	08012368 	.word	0x08012368
 800e724:	08012364 	.word	0x08012364
 800e728:	0801236c 	.word	0x0801236c
 800e72c:	0801237d 	.word	0x0801237d
 800e730:	4646      	mov	r6, r8
 800e732:	2103      	movs	r1, #3
 800e734:	ab1c      	add	r3, sp, #112	; 0x70
 800e736:	9301      	str	r3, [sp, #4]
 800e738:	ab19      	add	r3, sp, #100	; 0x64
 800e73a:	9300      	str	r3, [sp, #0]
 800e73c:	4632      	mov	r2, r6
 800e73e:	ab18      	add	r3, sp, #96	; 0x60
 800e740:	eeb0 0b49 	vmov.f64	d0, d9
 800e744:	9802      	ldr	r0, [sp, #8]
 800e746:	f000 ff8f 	bl	800f668 <_dtoa_r>
 800e74a:	2f47      	cmp	r7, #71	; 0x47
 800e74c:	4681      	mov	r9, r0
 800e74e:	d101      	bne.n	800e754 <_svfprintf_r+0x764>
 800e750:	07e9      	lsls	r1, r5, #31
 800e752:	d521      	bpl.n	800e798 <_svfprintf_r+0x7a8>
 800e754:	2f46      	cmp	r7, #70	; 0x46
 800e756:	eb09 0306 	add.w	r3, r9, r6
 800e75a:	d10d      	bne.n	800e778 <_svfprintf_r+0x788>
 800e75c:	f899 2000 	ldrb.w	r2, [r9]
 800e760:	2a30      	cmp	r2, #48	; 0x30
 800e762:	d107      	bne.n	800e774 <_svfprintf_r+0x784>
 800e764:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800e768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76c:	bf1c      	itt	ne
 800e76e:	f1c6 0601 	rsbne	r6, r6, #1
 800e772:	9618      	strne	r6, [sp, #96]	; 0x60
 800e774:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e776:	4413      	add	r3, r2
 800e778:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800e77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e780:	d009      	beq.n	800e796 <_svfprintf_r+0x7a6>
 800e782:	2130      	movs	r1, #48	; 0x30
 800e784:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e786:	4293      	cmp	r3, r2
 800e788:	d906      	bls.n	800e798 <_svfprintf_r+0x7a8>
 800e78a:	1c50      	adds	r0, r2, #1
 800e78c:	901c      	str	r0, [sp, #112]	; 0x70
 800e78e:	7011      	strb	r1, [r2, #0]
 800e790:	e7f8      	b.n	800e784 <_svfprintf_r+0x794>
 800e792:	4646      	mov	r6, r8
 800e794:	e7b8      	b.n	800e708 <_svfprintf_r+0x718>
 800e796:	931c      	str	r3, [sp, #112]	; 0x70
 800e798:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e79a:	eba3 0309 	sub.w	r3, r3, r9
 800e79e:	e72c      	b.n	800e5fa <_svfprintf_r+0x60a>
 800e7a0:	2f46      	cmp	r7, #70	; 0x46
 800e7a2:	f47f af37 	bne.w	800e614 <_svfprintf_r+0x624>
 800e7a6:	2e00      	cmp	r6, #0
 800e7a8:	dd1e      	ble.n	800e7e8 <_svfprintf_r+0x7f8>
 800e7aa:	f1b8 0f00 	cmp.w	r8, #0
 800e7ae:	d101      	bne.n	800e7b4 <_svfprintf_r+0x7c4>
 800e7b0:	07ef      	lsls	r7, r5, #31
 800e7b2:	d535      	bpl.n	800e820 <_svfprintf_r+0x830>
 800e7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b6:	18f3      	adds	r3, r6, r3
 800e7b8:	4498      	add	r8, r3
 800e7ba:	2366      	movs	r3, #102	; 0x66
 800e7bc:	9304      	str	r3, [sp, #16]
 800e7be:	e035      	b.n	800e82c <_svfprintf_r+0x83c>
 800e7c0:	460a      	mov	r2, r1
 800e7c2:	e746      	b.n	800e652 <_svfprintf_r+0x662>
 800e7c4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e7c8:	f803 1b01 	strb.w	r1, [r3], #1
 800e7cc:	e757      	b.n	800e67e <_svfprintf_r+0x68e>
 800e7ce:	b941      	cbnz	r1, 800e7e2 <_svfprintf_r+0x7f2>
 800e7d0:	2230      	movs	r2, #48	; 0x30
 800e7d2:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 800e7d6:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800e7da:	3330      	adds	r3, #48	; 0x30
 800e7dc:	1c51      	adds	r1, r2, #1
 800e7de:	7013      	strb	r3, [r2, #0]
 800e7e0:	e751      	b.n	800e686 <_svfprintf_r+0x696>
 800e7e2:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800e7e6:	e7f8      	b.n	800e7da <_svfprintf_r+0x7ea>
 800e7e8:	f1b8 0f00 	cmp.w	r8, #0
 800e7ec:	d101      	bne.n	800e7f2 <_svfprintf_r+0x802>
 800e7ee:	07e8      	lsls	r0, r5, #31
 800e7f0:	d518      	bpl.n	800e824 <_svfprintf_r+0x834>
 800e7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	e7df      	b.n	800e7b8 <_svfprintf_r+0x7c8>
 800e7f8:	9b03      	ldr	r3, [sp, #12]
 800e7fa:	42b3      	cmp	r3, r6
 800e7fc:	dc06      	bgt.n	800e80c <_svfprintf_r+0x81c>
 800e7fe:	07e9      	lsls	r1, r5, #31
 800e800:	d527      	bpl.n	800e852 <_svfprintf_r+0x862>
 800e802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e804:	eb06 0803 	add.w	r8, r6, r3
 800e808:	2367      	movs	r3, #103	; 0x67
 800e80a:	e7d7      	b.n	800e7bc <_svfprintf_r+0x7cc>
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e810:	2e00      	cmp	r6, #0
 800e812:	eb03 0802 	add.w	r8, r3, r2
 800e816:	dcf7      	bgt.n	800e808 <_svfprintf_r+0x818>
 800e818:	f1c6 0301 	rsb	r3, r6, #1
 800e81c:	4498      	add	r8, r3
 800e81e:	e7f3      	b.n	800e808 <_svfprintf_r+0x818>
 800e820:	46b0      	mov	r8, r6
 800e822:	e7ca      	b.n	800e7ba <_svfprintf_r+0x7ca>
 800e824:	2366      	movs	r3, #102	; 0x66
 800e826:	9304      	str	r3, [sp, #16]
 800e828:	f04f 0801 	mov.w	r8, #1
 800e82c:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 800e830:	9305      	str	r3, [sp, #20]
 800e832:	d01f      	beq.n	800e874 <_svfprintf_r+0x884>
 800e834:	2700      	movs	r7, #0
 800e836:	2e00      	cmp	r6, #0
 800e838:	9705      	str	r7, [sp, #20]
 800e83a:	f77f af38 	ble.w	800e6ae <_svfprintf_r+0x6be>
 800e83e:	9b07      	ldr	r3, [sp, #28]
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	2bff      	cmp	r3, #255	; 0xff
 800e844:	d107      	bne.n	800e856 <_svfprintf_r+0x866>
 800e846:	9b05      	ldr	r3, [sp, #20]
 800e848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e84a:	443b      	add	r3, r7
 800e84c:	fb02 8803 	mla	r8, r2, r3, r8
 800e850:	e72d      	b.n	800e6ae <_svfprintf_r+0x6be>
 800e852:	46b0      	mov	r8, r6
 800e854:	e7d8      	b.n	800e808 <_svfprintf_r+0x818>
 800e856:	42b3      	cmp	r3, r6
 800e858:	daf5      	bge.n	800e846 <_svfprintf_r+0x856>
 800e85a:	1af6      	subs	r6, r6, r3
 800e85c:	9b07      	ldr	r3, [sp, #28]
 800e85e:	785b      	ldrb	r3, [r3, #1]
 800e860:	b133      	cbz	r3, 800e870 <_svfprintf_r+0x880>
 800e862:	9b05      	ldr	r3, [sp, #20]
 800e864:	3301      	adds	r3, #1
 800e866:	9305      	str	r3, [sp, #20]
 800e868:	9b07      	ldr	r3, [sp, #28]
 800e86a:	3301      	adds	r3, #1
 800e86c:	9307      	str	r3, [sp, #28]
 800e86e:	e7e6      	b.n	800e83e <_svfprintf_r+0x84e>
 800e870:	3701      	adds	r7, #1
 800e872:	e7e4      	b.n	800e83e <_svfprintf_r+0x84e>
 800e874:	9f05      	ldr	r7, [sp, #20]
 800e876:	e71a      	b.n	800e6ae <_svfprintf_r+0x6be>
 800e878:	4632      	mov	r2, r6
 800e87a:	f852 3b04 	ldr.w	r3, [r2], #4
 800e87e:	9206      	str	r2, [sp, #24]
 800e880:	06aa      	lsls	r2, r5, #26
 800e882:	d509      	bpl.n	800e898 <_svfprintf_r+0x8a8>
 800e884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e886:	4610      	mov	r0, r2
 800e888:	17d1      	asrs	r1, r2, #31
 800e88a:	e9c3 0100 	strd	r0, r1, [r3]
 800e88e:	9e06      	ldr	r6, [sp, #24]
 800e890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e894:	f7ff bbea 	b.w	800e06c <_svfprintf_r+0x7c>
 800e898:	06ef      	lsls	r7, r5, #27
 800e89a:	d502      	bpl.n	800e8a2 <_svfprintf_r+0x8b2>
 800e89c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e89e:	601a      	str	r2, [r3, #0]
 800e8a0:	e7f5      	b.n	800e88e <_svfprintf_r+0x89e>
 800e8a2:	066e      	lsls	r6, r5, #25
 800e8a4:	d502      	bpl.n	800e8ac <_svfprintf_r+0x8bc>
 800e8a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8a8:	801a      	strh	r2, [r3, #0]
 800e8aa:	e7f0      	b.n	800e88e <_svfprintf_r+0x89e>
 800e8ac:	05a8      	lsls	r0, r5, #22
 800e8ae:	d5f5      	bpl.n	800e89c <_svfprintf_r+0x8ac>
 800e8b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8b2:	701a      	strb	r2, [r3, #0]
 800e8b4:	e7eb      	b.n	800e88e <_svfprintf_r+0x89e>
 800e8b6:	f045 0510 	orr.w	r5, r5, #16
 800e8ba:	06a9      	lsls	r1, r5, #26
 800e8bc:	d520      	bpl.n	800e900 <_svfprintf_r+0x910>
 800e8be:	3607      	adds	r6, #7
 800e8c0:	f026 0607 	bic.w	r6, r6, #7
 800e8c4:	f106 0308 	add.w	r3, r6, #8
 800e8c8:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e8cc:	9306      	str	r3, [sp, #24]
 800e8ce:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e8da:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 800e8de:	f000 814d 	beq.w	800eb7c <_svfprintf_r+0xb8c>
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	ea56 0107 	orrs.w	r1, r6, r7
 800e8e8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800e8ec:	f040 8146 	bne.w	800eb7c <_svfprintf_r+0xb8c>
 800e8f0:	f1b8 0f00 	cmp.w	r8, #0
 800e8f4:	f000 81c7 	beq.w	800ec86 <_svfprintf_r+0xc96>
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	f040 8142 	bne.w	800eb82 <_svfprintf_r+0xb92>
 800e8fe:	e589      	b.n	800e414 <_svfprintf_r+0x424>
 800e900:	1d33      	adds	r3, r6, #4
 800e902:	06ea      	lsls	r2, r5, #27
 800e904:	9306      	str	r3, [sp, #24]
 800e906:	d501      	bpl.n	800e90c <_svfprintf_r+0x91c>
 800e908:	6836      	ldr	r6, [r6, #0]
 800e90a:	e002      	b.n	800e912 <_svfprintf_r+0x922>
 800e90c:	066b      	lsls	r3, r5, #25
 800e90e:	d502      	bpl.n	800e916 <_svfprintf_r+0x926>
 800e910:	8836      	ldrh	r6, [r6, #0]
 800e912:	2700      	movs	r7, #0
 800e914:	e7db      	b.n	800e8ce <_svfprintf_r+0x8de>
 800e916:	05af      	lsls	r7, r5, #22
 800e918:	d5f6      	bpl.n	800e908 <_svfprintf_r+0x918>
 800e91a:	7836      	ldrb	r6, [r6, #0]
 800e91c:	e7f9      	b.n	800e912 <_svfprintf_r+0x922>
 800e91e:	1d33      	adds	r3, r6, #4
 800e920:	9306      	str	r3, [sp, #24]
 800e922:	f647 0330 	movw	r3, #30768	; 0x7830
 800e926:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 800e92a:	2278      	movs	r2, #120	; 0x78
 800e92c:	4baa      	ldr	r3, [pc, #680]	; (800ebd8 <_svfprintf_r+0xbe8>)
 800e92e:	9311      	str	r3, [sp, #68]	; 0x44
 800e930:	6836      	ldr	r6, [r6, #0]
 800e932:	9204      	str	r2, [sp, #16]
 800e934:	2700      	movs	r7, #0
 800e936:	f045 0502 	orr.w	r5, r5, #2
 800e93a:	2302      	movs	r3, #2
 800e93c:	e7ca      	b.n	800e8d4 <_svfprintf_r+0x8e4>
 800e93e:	1d33      	adds	r3, r6, #4
 800e940:	f8d6 9000 	ldr.w	r9, [r6]
 800e944:	9306      	str	r3, [sp, #24]
 800e946:	2600      	movs	r6, #0
 800e948:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e94c:	f88d 605b 	strb.w	r6, [sp, #91]	; 0x5b
 800e950:	f000 80db 	beq.w	800eb0a <_svfprintf_r+0xb1a>
 800e954:	4642      	mov	r2, r8
 800e956:	4631      	mov	r1, r6
 800e958:	4648      	mov	r0, r9
 800e95a:	f7f8 f9e1 	bl	8006d20 <memchr>
 800e95e:	4682      	mov	sl, r0
 800e960:	2800      	cmp	r0, #0
 800e962:	f43f ad94 	beq.w	800e48e <_svfprintf_r+0x49e>
 800e966:	eba0 0809 	sub.w	r8, r0, r9
 800e96a:	46b2      	mov	sl, r6
 800e96c:	960c      	str	r6, [sp, #48]	; 0x30
 800e96e:	4637      	mov	r7, r6
 800e970:	9605      	str	r6, [sp, #20]
 800e972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e974:	4543      	cmp	r3, r8
 800e976:	bfb8      	it	lt
 800e978:	4643      	movlt	r3, r8
 800e97a:	930d      	str	r3, [sp, #52]	; 0x34
 800e97c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800e980:	b113      	cbz	r3, 800e988 <_svfprintf_r+0x998>
 800e982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e984:	3301      	adds	r3, #1
 800e986:	930d      	str	r3, [sp, #52]	; 0x34
 800e988:	f015 0302 	ands.w	r3, r5, #2
 800e98c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e98e:	bf1e      	ittt	ne
 800e990:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 800e992:	3302      	addne	r3, #2
 800e994:	930d      	strne	r3, [sp, #52]	; 0x34
 800e996:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800e99a:	9314      	str	r3, [sp, #80]	; 0x50
 800e99c:	d120      	bne.n	800e9e0 <_svfprintf_r+0x9f0>
 800e99e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9a2:	1a9b      	subs	r3, r3, r2
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	dd1b      	ble.n	800e9e0 <_svfprintf_r+0x9f0>
 800e9a8:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800e9ac:	498b      	ldr	r1, [pc, #556]	; (800ebdc <_svfprintf_r+0xbec>)
 800e9ae:	6021      	str	r1, [r4, #0]
 800e9b0:	2b10      	cmp	r3, #16
 800e9b2:	f102 0201 	add.w	r2, r2, #1
 800e9b6:	f104 0008 	add.w	r0, r4, #8
 800e9ba:	f300 817d 	bgt.w	800ecb8 <_svfprintf_r+0xcc8>
 800e9be:	eb0c 0103 	add.w	r1, ip, r3
 800e9c2:	2a07      	cmp	r2, #7
 800e9c4:	6063      	str	r3, [r4, #4]
 800e9c6:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800e9ca:	f340 818a 	ble.w	800ece2 <_svfprintf_r+0xcf2>
 800e9ce:	aa1e      	add	r2, sp, #120	; 0x78
 800e9d0:	4659      	mov	r1, fp
 800e9d2:	9802      	ldr	r0, [sp, #8]
 800e9d4:	f002 f9a2 	bl	8010d1c <__ssprint_r>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	f040 84b7 	bne.w	800f34c <_svfprintf_r+0x135c>
 800e9de:	ac21      	add	r4, sp, #132	; 0x84
 800e9e0:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800e9e4:	b173      	cbz	r3, 800ea04 <_svfprintf_r+0xa14>
 800e9e6:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 800e9ea:	6023      	str	r3, [r4, #0]
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	6063      	str	r3, [r4, #4]
 800e9f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	9320      	str	r3, [sp, #128]	; 0x80
 800e9f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	2b07      	cmp	r3, #7
 800e9fc:	931f      	str	r3, [sp, #124]	; 0x7c
 800e9fe:	f300 8172 	bgt.w	800ece6 <_svfprintf_r+0xcf6>
 800ea02:	3408      	adds	r4, #8
 800ea04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea06:	b16b      	cbz	r3, 800ea24 <_svfprintf_r+0xa34>
 800ea08:	ab17      	add	r3, sp, #92	; 0x5c
 800ea0a:	6023      	str	r3, [r4, #0]
 800ea0c:	2302      	movs	r3, #2
 800ea0e:	6063      	str	r3, [r4, #4]
 800ea10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea12:	3302      	adds	r3, #2
 800ea14:	9320      	str	r3, [sp, #128]	; 0x80
 800ea16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea18:	3301      	adds	r3, #1
 800ea1a:	2b07      	cmp	r3, #7
 800ea1c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ea1e:	f300 816c 	bgt.w	800ecfa <_svfprintf_r+0xd0a>
 800ea22:	3408      	adds	r4, #8
 800ea24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea26:	2b80      	cmp	r3, #128	; 0x80
 800ea28:	d120      	bne.n	800ea6c <_svfprintf_r+0xa7c>
 800ea2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea2e:	1a9b      	subs	r3, r3, r2
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	dd1b      	ble.n	800ea6c <_svfprintf_r+0xa7c>
 800ea34:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 800ea38:	4969      	ldr	r1, [pc, #420]	; (800ebe0 <_svfprintf_r+0xbf0>)
 800ea3a:	6021      	str	r1, [r4, #0]
 800ea3c:	2b10      	cmp	r3, #16
 800ea3e:	f102 0201 	add.w	r2, r2, #1
 800ea42:	f104 0008 	add.w	r0, r4, #8
 800ea46:	f300 8162 	bgt.w	800ed0e <_svfprintf_r+0xd1e>
 800ea4a:	eb0c 0103 	add.w	r1, ip, r3
 800ea4e:	2a07      	cmp	r2, #7
 800ea50:	6063      	str	r3, [r4, #4]
 800ea52:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800ea56:	f340 816f 	ble.w	800ed38 <_svfprintf_r+0xd48>
 800ea5a:	aa1e      	add	r2, sp, #120	; 0x78
 800ea5c:	4659      	mov	r1, fp
 800ea5e:	9802      	ldr	r0, [sp, #8]
 800ea60:	f002 f95c 	bl	8010d1c <__ssprint_r>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	f040 8471 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ea6a:	ac21      	add	r4, sp, #132	; 0x84
 800ea6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea6e:	eba3 0308 	sub.w	r3, r3, r8
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	930c      	str	r3, [sp, #48]	; 0x30
 800ea76:	dd1c      	ble.n	800eab2 <_svfprintf_r+0xac2>
 800ea78:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ea7a:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 800ea7e:	2810      	cmp	r0, #16
 800ea80:	4857      	ldr	r0, [pc, #348]	; (800ebe0 <_svfprintf_r+0xbf0>)
 800ea82:	6020      	str	r0, [r4, #0]
 800ea84:	f102 0201 	add.w	r2, r2, #1
 800ea88:	f104 0108 	add.w	r1, r4, #8
 800ea8c:	f300 8156 	bgt.w	800ed3c <_svfprintf_r+0xd4c>
 800ea90:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ea92:	6060      	str	r0, [r4, #4]
 800ea94:	4403      	add	r3, r0
 800ea96:	2a07      	cmp	r2, #7
 800ea98:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800ea9c:	f340 8163 	ble.w	800ed66 <_svfprintf_r+0xd76>
 800eaa0:	aa1e      	add	r2, sp, #120	; 0x78
 800eaa2:	4659      	mov	r1, fp
 800eaa4:	9802      	ldr	r0, [sp, #8]
 800eaa6:	f002 f939 	bl	8010d1c <__ssprint_r>
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	f040 844e 	bne.w	800f34c <_svfprintf_r+0x135c>
 800eab0:	ac21      	add	r4, sp, #132	; 0x84
 800eab2:	05e8      	lsls	r0, r5, #23
 800eab4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eab6:	f100 8158 	bmi.w	800ed6a <_svfprintf_r+0xd7a>
 800eaba:	4443      	add	r3, r8
 800eabc:	9320      	str	r3, [sp, #128]	; 0x80
 800eabe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eac0:	3301      	adds	r3, #1
 800eac2:	2b07      	cmp	r3, #7
 800eac4:	e9c4 9800 	strd	r9, r8, [r4]
 800eac8:	931f      	str	r3, [sp, #124]	; 0x7c
 800eaca:	f300 8190 	bgt.w	800edee <_svfprintf_r+0xdfe>
 800eace:	3408      	adds	r4, #8
 800ead0:	076b      	lsls	r3, r5, #29
 800ead2:	f100 841d 	bmi.w	800f310 <_svfprintf_r+0x1320>
 800ead6:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 800eada:	990d      	ldr	r1, [sp, #52]	; 0x34
 800eadc:	428a      	cmp	r2, r1
 800eade:	bfac      	ite	ge
 800eae0:	189b      	addge	r3, r3, r2
 800eae2:	185b      	addlt	r3, r3, r1
 800eae4:	930a      	str	r3, [sp, #40]	; 0x28
 800eae6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eae8:	b13b      	cbz	r3, 800eafa <_svfprintf_r+0xb0a>
 800eaea:	aa1e      	add	r2, sp, #120	; 0x78
 800eaec:	4659      	mov	r1, fp
 800eaee:	9802      	ldr	r0, [sp, #8]
 800eaf0:	f002 f914 	bl	8010d1c <__ssprint_r>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	f040 8429 	bne.w	800f34c <_svfprintf_r+0x135c>
 800eafa:	2300      	movs	r3, #0
 800eafc:	931f      	str	r3, [sp, #124]	; 0x7c
 800eafe:	f1ba 0f00 	cmp.w	sl, #0
 800eb02:	f040 843f 	bne.w	800f384 <_svfprintf_r+0x1394>
 800eb06:	ac21      	add	r4, sp, #132	; 0x84
 800eb08:	e6c1      	b.n	800e88e <_svfprintf_r+0x89e>
 800eb0a:	4648      	mov	r0, r9
 800eb0c:	f7f8 f962 	bl	8006dd4 <strlen>
 800eb10:	46b2      	mov	sl, r6
 800eb12:	4680      	mov	r8, r0
 800eb14:	e4bb      	b.n	800e48e <_svfprintf_r+0x49e>
 800eb16:	f045 0510 	orr.w	r5, r5, #16
 800eb1a:	06a8      	lsls	r0, r5, #26
 800eb1c:	d509      	bpl.n	800eb32 <_svfprintf_r+0xb42>
 800eb1e:	3607      	adds	r6, #7
 800eb20:	f026 0607 	bic.w	r6, r6, #7
 800eb24:	f106 0308 	add.w	r3, r6, #8
 800eb28:	e9d6 6700 	ldrd	r6, r7, [r6]
 800eb2c:	9306      	str	r3, [sp, #24]
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e6d0      	b.n	800e8d4 <_svfprintf_r+0x8e4>
 800eb32:	1d33      	adds	r3, r6, #4
 800eb34:	06e9      	lsls	r1, r5, #27
 800eb36:	9306      	str	r3, [sp, #24]
 800eb38:	d501      	bpl.n	800eb3e <_svfprintf_r+0xb4e>
 800eb3a:	6836      	ldr	r6, [r6, #0]
 800eb3c:	e002      	b.n	800eb44 <_svfprintf_r+0xb54>
 800eb3e:	066a      	lsls	r2, r5, #25
 800eb40:	d502      	bpl.n	800eb48 <_svfprintf_r+0xb58>
 800eb42:	8836      	ldrh	r6, [r6, #0]
 800eb44:	2700      	movs	r7, #0
 800eb46:	e7f2      	b.n	800eb2e <_svfprintf_r+0xb3e>
 800eb48:	05ab      	lsls	r3, r5, #22
 800eb4a:	d5f6      	bpl.n	800eb3a <_svfprintf_r+0xb4a>
 800eb4c:	7836      	ldrb	r6, [r6, #0]
 800eb4e:	e7f9      	b.n	800eb44 <_svfprintf_r+0xb54>
 800eb50:	4b21      	ldr	r3, [pc, #132]	; (800ebd8 <_svfprintf_r+0xbe8>)
 800eb52:	f7ff bb86 	b.w	800e262 <_svfprintf_r+0x272>
 800eb56:	1d33      	adds	r3, r6, #4
 800eb58:	06e8      	lsls	r0, r5, #27
 800eb5a:	9306      	str	r3, [sp, #24]
 800eb5c:	d501      	bpl.n	800eb62 <_svfprintf_r+0xb72>
 800eb5e:	6836      	ldr	r6, [r6, #0]
 800eb60:	e002      	b.n	800eb68 <_svfprintf_r+0xb78>
 800eb62:	0669      	lsls	r1, r5, #25
 800eb64:	d503      	bpl.n	800eb6e <_svfprintf_r+0xb7e>
 800eb66:	8836      	ldrh	r6, [r6, #0]
 800eb68:	2700      	movs	r7, #0
 800eb6a:	f7ff bb86 	b.w	800e27a <_svfprintf_r+0x28a>
 800eb6e:	05aa      	lsls	r2, r5, #22
 800eb70:	d5f5      	bpl.n	800eb5e <_svfprintf_r+0xb6e>
 800eb72:	7836      	ldrb	r6, [r6, #0]
 800eb74:	e7f8      	b.n	800eb68 <_svfprintf_r+0xb78>
 800eb76:	462a      	mov	r2, r5
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e6b3      	b.n	800e8e4 <_svfprintf_r+0x8f4>
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	f43f ac44 	beq.w	800e40a <_svfprintf_r+0x41a>
 800eb82:	2b02      	cmp	r3, #2
 800eb84:	d06d      	beq.n	800ec62 <_svfprintf_r+0xc72>
 800eb86:	ab4a      	add	r3, sp, #296	; 0x128
 800eb88:	08f1      	lsrs	r1, r6, #3
 800eb8a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800eb8e:	08f8      	lsrs	r0, r7, #3
 800eb90:	f006 0207 	and.w	r2, r6, #7
 800eb94:	4607      	mov	r7, r0
 800eb96:	460e      	mov	r6, r1
 800eb98:	3230      	adds	r2, #48	; 0x30
 800eb9a:	ea56 0107 	orrs.w	r1, r6, r7
 800eb9e:	f103 39ff 	add.w	r9, r3, #4294967295
 800eba2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800eba6:	d114      	bne.n	800ebd2 <_svfprintf_r+0xbe2>
 800eba8:	07ef      	lsls	r7, r5, #31
 800ebaa:	d506      	bpl.n	800ebba <_svfprintf_r+0xbca>
 800ebac:	2a30      	cmp	r2, #48	; 0x30
 800ebae:	d004      	beq.n	800ebba <_svfprintf_r+0xbca>
 800ebb0:	2230      	movs	r2, #48	; 0x30
 800ebb2:	f809 2c01 	strb.w	r2, [r9, #-1]
 800ebb6:	f1a3 0902 	sub.w	r9, r3, #2
 800ebba:	ab4a      	add	r3, sp, #296	; 0x128
 800ebbc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800ebc0:	f04f 0a00 	mov.w	sl, #0
 800ebc4:	eba3 0809 	sub.w	r8, r3, r9
 800ebc8:	4657      	mov	r7, sl
 800ebca:	f8cd a014 	str.w	sl, [sp, #20]
 800ebce:	4656      	mov	r6, sl
 800ebd0:	e6cf      	b.n	800e972 <_svfprintf_r+0x982>
 800ebd2:	464b      	mov	r3, r9
 800ebd4:	e7d8      	b.n	800eb88 <_svfprintf_r+0xb98>
 800ebd6:	bf00      	nop
 800ebd8:	0801236c 	.word	0x0801236c
 800ebdc:	08012390 	.word	0x08012390
 800ebe0:	080123a0 	.word	0x080123a0
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	9303      	str	r3, [sp, #12]
 800ebe8:	f405 6380 	and.w	r3, r5, #1024	; 0x400
 800ebec:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800ebf0:	9305      	str	r3, [sp, #20]
 800ebf2:	220a      	movs	r2, #10
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	f7f8 f8f3 	bl	8006de4 <__aeabi_uldivmod>
 800ebfe:	9b03      	ldr	r3, [sp, #12]
 800ec00:	3301      	adds	r3, #1
 800ec02:	9303      	str	r3, [sp, #12]
 800ec04:	9b05      	ldr	r3, [sp, #20]
 800ec06:	3230      	adds	r2, #48	; 0x30
 800ec08:	f10a 39ff 	add.w	r9, sl, #4294967295
 800ec0c:	f80a 2c01 	strb.w	r2, [sl, #-1]
 800ec10:	b1d3      	cbz	r3, 800ec48 <_svfprintf_r+0xc58>
 800ec12:	9b07      	ldr	r3, [sp, #28]
 800ec14:	9a03      	ldr	r2, [sp, #12]
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d115      	bne.n	800ec48 <_svfprintf_r+0xc58>
 800ec1c:	2aff      	cmp	r2, #255	; 0xff
 800ec1e:	d013      	beq.n	800ec48 <_svfprintf_r+0xc58>
 800ec20:	2f00      	cmp	r7, #0
 800ec22:	bf08      	it	eq
 800ec24:	2e0a      	cmpeq	r6, #10
 800ec26:	d30f      	bcc.n	800ec48 <_svfprintf_r+0xc58>
 800ec28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec2a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec2c:	eba9 0903 	sub.w	r9, r9, r3
 800ec30:	461a      	mov	r2, r3
 800ec32:	4648      	mov	r0, r9
 800ec34:	f002 f85d 	bl	8010cf2 <strncpy>
 800ec38:	9b07      	ldr	r3, [sp, #28]
 800ec3a:	785b      	ldrb	r3, [r3, #1]
 800ec3c:	b11b      	cbz	r3, 800ec46 <_svfprintf_r+0xc56>
 800ec3e:	9b07      	ldr	r3, [sp, #28]
 800ec40:	3301      	adds	r3, #1
 800ec42:	9307      	str	r3, [sp, #28]
 800ec44:	2300      	movs	r3, #0
 800ec46:	9303      	str	r3, [sp, #12]
 800ec48:	2300      	movs	r3, #0
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	4639      	mov	r1, r7
 800ec4e:	220a      	movs	r2, #10
 800ec50:	f7f8 f8c8 	bl	8006de4 <__aeabi_uldivmod>
 800ec54:	4606      	mov	r6, r0
 800ec56:	460f      	mov	r7, r1
 800ec58:	ea56 0307 	orrs.w	r3, r6, r7
 800ec5c:	d0ad      	beq.n	800ebba <_svfprintf_r+0xbca>
 800ec5e:	46ca      	mov	sl, r9
 800ec60:	e7c7      	b.n	800ebf2 <_svfprintf_r+0xc02>
 800ec62:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 800ec66:	f006 030f 	and.w	r3, r6, #15
 800ec6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ec6c:	5cd3      	ldrb	r3, [r2, r3]
 800ec6e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ec72:	0933      	lsrs	r3, r6, #4
 800ec74:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800ec78:	093a      	lsrs	r2, r7, #4
 800ec7a:	461e      	mov	r6, r3
 800ec7c:	4617      	mov	r7, r2
 800ec7e:	ea56 0307 	orrs.w	r3, r6, r7
 800ec82:	d1f0      	bne.n	800ec66 <_svfprintf_r+0xc76>
 800ec84:	e799      	b.n	800ebba <_svfprintf_r+0xbca>
 800ec86:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d195      	bne.n	800ebba <_svfprintf_r+0xbca>
 800ec8e:	07d6      	lsls	r6, r2, #31
 800ec90:	bf44      	itt	mi
 800ec92:	2330      	movmi	r3, #48	; 0x30
 800ec94:	f809 3d01 	strbmi.w	r3, [r9, #-1]!
 800ec98:	e78f      	b.n	800ebba <_svfprintf_r+0xbca>
 800ec9a:	9b04      	ldr	r3, [sp, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 8377 	beq.w	800f390 <_svfprintf_r+0x13a0>
 800eca2:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800eca6:	2300      	movs	r3, #0
 800eca8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800ecac:	9606      	str	r6, [sp, #24]
 800ecae:	f7ff bb87 	b.w	800e3c0 <_svfprintf_r+0x3d0>
 800ecb2:	e9dd 530c 	ldrd	r5, r3, [sp, #48]	; 0x30
 800ecb6:	e503      	b.n	800e6c0 <_svfprintf_r+0x6d0>
 800ecb8:	2110      	movs	r1, #16
 800ecba:	6061      	str	r1, [r4, #4]
 800ecbc:	2a07      	cmp	r2, #7
 800ecbe:	4461      	add	r1, ip
 800ecc0:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800ecc4:	dd0a      	ble.n	800ecdc <_svfprintf_r+0xcec>
 800ecc6:	aa1e      	add	r2, sp, #120	; 0x78
 800ecc8:	4659      	mov	r1, fp
 800ecca:	9802      	ldr	r0, [sp, #8]
 800eccc:	9315      	str	r3, [sp, #84]	; 0x54
 800ecce:	f002 f825 	bl	8010d1c <__ssprint_r>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	f040 833a 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ecd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecda:	a821      	add	r0, sp, #132	; 0x84
 800ecdc:	3b10      	subs	r3, #16
 800ecde:	4604      	mov	r4, r0
 800ece0:	e662      	b.n	800e9a8 <_svfprintf_r+0x9b8>
 800ece2:	4604      	mov	r4, r0
 800ece4:	e67c      	b.n	800e9e0 <_svfprintf_r+0x9f0>
 800ece6:	aa1e      	add	r2, sp, #120	; 0x78
 800ece8:	4659      	mov	r1, fp
 800ecea:	9802      	ldr	r0, [sp, #8]
 800ecec:	f002 f816 	bl	8010d1c <__ssprint_r>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	f040 832b 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ecf6:	ac21      	add	r4, sp, #132	; 0x84
 800ecf8:	e684      	b.n	800ea04 <_svfprintf_r+0xa14>
 800ecfa:	aa1e      	add	r2, sp, #120	; 0x78
 800ecfc:	4659      	mov	r1, fp
 800ecfe:	9802      	ldr	r0, [sp, #8]
 800ed00:	f002 f80c 	bl	8010d1c <__ssprint_r>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	f040 8321 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ed0a:	ac21      	add	r4, sp, #132	; 0x84
 800ed0c:	e68a      	b.n	800ea24 <_svfprintf_r+0xa34>
 800ed0e:	2110      	movs	r1, #16
 800ed10:	6061      	str	r1, [r4, #4]
 800ed12:	2a07      	cmp	r2, #7
 800ed14:	4461      	add	r1, ip
 800ed16:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800ed1a:	dd0a      	ble.n	800ed32 <_svfprintf_r+0xd42>
 800ed1c:	aa1e      	add	r2, sp, #120	; 0x78
 800ed1e:	4659      	mov	r1, fp
 800ed20:	9802      	ldr	r0, [sp, #8]
 800ed22:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed24:	f001 fffa 	bl	8010d1c <__ssprint_r>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	f040 830f 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ed2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed30:	a821      	add	r0, sp, #132	; 0x84
 800ed32:	3b10      	subs	r3, #16
 800ed34:	4604      	mov	r4, r0
 800ed36:	e67d      	b.n	800ea34 <_svfprintf_r+0xa44>
 800ed38:	4604      	mov	r4, r0
 800ed3a:	e697      	b.n	800ea6c <_svfprintf_r+0xa7c>
 800ed3c:	2010      	movs	r0, #16
 800ed3e:	4403      	add	r3, r0
 800ed40:	2a07      	cmp	r2, #7
 800ed42:	6060      	str	r0, [r4, #4]
 800ed44:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800ed48:	dd08      	ble.n	800ed5c <_svfprintf_r+0xd6c>
 800ed4a:	aa1e      	add	r2, sp, #120	; 0x78
 800ed4c:	4659      	mov	r1, fp
 800ed4e:	9802      	ldr	r0, [sp, #8]
 800ed50:	f001 ffe4 	bl	8010d1c <__ssprint_r>
 800ed54:	2800      	cmp	r0, #0
 800ed56:	f040 82f9 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ed5a:	a921      	add	r1, sp, #132	; 0x84
 800ed5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed5e:	3b10      	subs	r3, #16
 800ed60:	930c      	str	r3, [sp, #48]	; 0x30
 800ed62:	460c      	mov	r4, r1
 800ed64:	e688      	b.n	800ea78 <_svfprintf_r+0xa88>
 800ed66:	460c      	mov	r4, r1
 800ed68:	e6a3      	b.n	800eab2 <_svfprintf_r+0xac2>
 800ed6a:	9a04      	ldr	r2, [sp, #16]
 800ed6c:	2a65      	cmp	r2, #101	; 0x65
 800ed6e:	f340 8243 	ble.w	800f1f8 <_svfprintf_r+0x1208>
 800ed72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ed76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed7a:	d169      	bne.n	800ee50 <_svfprintf_r+0xe60>
 800ed7c:	4a72      	ldr	r2, [pc, #456]	; (800ef48 <_svfprintf_r+0xf58>)
 800ed7e:	6022      	str	r2, [r4, #0]
 800ed80:	2201      	movs	r2, #1
 800ed82:	4413      	add	r3, r2
 800ed84:	9320      	str	r3, [sp, #128]	; 0x80
 800ed86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ed88:	6062      	str	r2, [r4, #4]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	2b07      	cmp	r3, #7
 800ed8e:	931f      	str	r3, [sp, #124]	; 0x7c
 800ed90:	dc37      	bgt.n	800ee02 <_svfprintf_r+0xe12>
 800ed92:	3408      	adds	r4, #8
 800ed94:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ed96:	9a03      	ldr	r2, [sp, #12]
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	db02      	blt.n	800eda2 <_svfprintf_r+0xdb2>
 800ed9c:	07e9      	lsls	r1, r5, #31
 800ed9e:	f57f ae97 	bpl.w	800ead0 <_svfprintf_r+0xae0>
 800eda2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eda4:	6023      	str	r3, [r4, #0]
 800eda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eda8:	6063      	str	r3, [r4, #4]
 800edaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800edae:	4413      	add	r3, r2
 800edb0:	9320      	str	r3, [sp, #128]	; 0x80
 800edb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800edb4:	3301      	adds	r3, #1
 800edb6:	2b07      	cmp	r3, #7
 800edb8:	931f      	str	r3, [sp, #124]	; 0x7c
 800edba:	dc2c      	bgt.n	800ee16 <_svfprintf_r+0xe26>
 800edbc:	3408      	adds	r4, #8
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	1e5e      	subs	r6, r3, #1
 800edc2:	2e00      	cmp	r6, #0
 800edc4:	f77f ae84 	ble.w	800ead0 <_svfprintf_r+0xae0>
 800edc8:	4f60      	ldr	r7, [pc, #384]	; (800ef4c <_svfprintf_r+0xf5c>)
 800edca:	f04f 0810 	mov.w	r8, #16
 800edce:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800edd2:	2e10      	cmp	r6, #16
 800edd4:	f103 0301 	add.w	r3, r3, #1
 800edd8:	f104 0108 	add.w	r1, r4, #8
 800eddc:	6027      	str	r7, [r4, #0]
 800edde:	dc24      	bgt.n	800ee2a <_svfprintf_r+0xe3a>
 800ede0:	6066      	str	r6, [r4, #4]
 800ede2:	2b07      	cmp	r3, #7
 800ede4:	4416      	add	r6, r2
 800ede6:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800edea:	f340 828e 	ble.w	800f30a <_svfprintf_r+0x131a>
 800edee:	aa1e      	add	r2, sp, #120	; 0x78
 800edf0:	4659      	mov	r1, fp
 800edf2:	9802      	ldr	r0, [sp, #8]
 800edf4:	f001 ff92 	bl	8010d1c <__ssprint_r>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	f040 82a7 	bne.w	800f34c <_svfprintf_r+0x135c>
 800edfe:	ac21      	add	r4, sp, #132	; 0x84
 800ee00:	e666      	b.n	800ead0 <_svfprintf_r+0xae0>
 800ee02:	aa1e      	add	r2, sp, #120	; 0x78
 800ee04:	4659      	mov	r1, fp
 800ee06:	9802      	ldr	r0, [sp, #8]
 800ee08:	f001 ff88 	bl	8010d1c <__ssprint_r>
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	f040 829d 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ee12:	ac21      	add	r4, sp, #132	; 0x84
 800ee14:	e7be      	b.n	800ed94 <_svfprintf_r+0xda4>
 800ee16:	aa1e      	add	r2, sp, #120	; 0x78
 800ee18:	4659      	mov	r1, fp
 800ee1a:	9802      	ldr	r0, [sp, #8]
 800ee1c:	f001 ff7e 	bl	8010d1c <__ssprint_r>
 800ee20:	2800      	cmp	r0, #0
 800ee22:	f040 8293 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ee26:	ac21      	add	r4, sp, #132	; 0x84
 800ee28:	e7c9      	b.n	800edbe <_svfprintf_r+0xdce>
 800ee2a:	3210      	adds	r2, #16
 800ee2c:	2b07      	cmp	r3, #7
 800ee2e:	f8c4 8004 	str.w	r8, [r4, #4]
 800ee32:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800ee36:	dd08      	ble.n	800ee4a <_svfprintf_r+0xe5a>
 800ee38:	aa1e      	add	r2, sp, #120	; 0x78
 800ee3a:	4659      	mov	r1, fp
 800ee3c:	9802      	ldr	r0, [sp, #8]
 800ee3e:	f001 ff6d 	bl	8010d1c <__ssprint_r>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	f040 8282 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ee48:	a921      	add	r1, sp, #132	; 0x84
 800ee4a:	3e10      	subs	r6, #16
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	e7be      	b.n	800edce <_svfprintf_r+0xdde>
 800ee50:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ee52:	2a00      	cmp	r2, #0
 800ee54:	dc7c      	bgt.n	800ef50 <_svfprintf_r+0xf60>
 800ee56:	4a3c      	ldr	r2, [pc, #240]	; (800ef48 <_svfprintf_r+0xf58>)
 800ee58:	6022      	str	r2, [r4, #0]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	4413      	add	r3, r2
 800ee5e:	9320      	str	r3, [sp, #128]	; 0x80
 800ee60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee62:	6062      	str	r2, [r4, #4]
 800ee64:	4413      	add	r3, r2
 800ee66:	2b07      	cmp	r3, #7
 800ee68:	931f      	str	r3, [sp, #124]	; 0x7c
 800ee6a:	dc46      	bgt.n	800eefa <_svfprintf_r+0xf0a>
 800ee6c:	3408      	adds	r4, #8
 800ee6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ee70:	b923      	cbnz	r3, 800ee7c <_svfprintf_r+0xe8c>
 800ee72:	9b03      	ldr	r3, [sp, #12]
 800ee74:	b913      	cbnz	r3, 800ee7c <_svfprintf_r+0xe8c>
 800ee76:	07ea      	lsls	r2, r5, #31
 800ee78:	f57f ae2a 	bpl.w	800ead0 <_svfprintf_r+0xae0>
 800ee7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee7e:	6023      	str	r3, [r4, #0]
 800ee80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee82:	6063      	str	r3, [r4, #4]
 800ee84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ee88:	4413      	add	r3, r2
 800ee8a:	9320      	str	r3, [sp, #128]	; 0x80
 800ee8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee8e:	3301      	adds	r3, #1
 800ee90:	2b07      	cmp	r3, #7
 800ee92:	931f      	str	r3, [sp, #124]	; 0x7c
 800ee94:	dc3b      	bgt.n	800ef0e <_svfprintf_r+0xf1e>
 800ee96:	f104 0308 	add.w	r3, r4, #8
 800ee9a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ee9c:	2e00      	cmp	r6, #0
 800ee9e:	da1b      	bge.n	800eed8 <_svfprintf_r+0xee8>
 800eea0:	4f2a      	ldr	r7, [pc, #168]	; (800ef4c <_svfprintf_r+0xf5c>)
 800eea2:	4276      	negs	r6, r6
 800eea4:	461a      	mov	r2, r3
 800eea6:	2410      	movs	r4, #16
 800eea8:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 800eeac:	2e10      	cmp	r6, #16
 800eeae:	f101 0101 	add.w	r1, r1, #1
 800eeb2:	f103 0308 	add.w	r3, r3, #8
 800eeb6:	6017      	str	r7, [r2, #0]
 800eeb8:	dc33      	bgt.n	800ef22 <_svfprintf_r+0xf32>
 800eeba:	6056      	str	r6, [r2, #4]
 800eebc:	2907      	cmp	r1, #7
 800eebe:	4406      	add	r6, r0
 800eec0:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 800eec4:	dd08      	ble.n	800eed8 <_svfprintf_r+0xee8>
 800eec6:	aa1e      	add	r2, sp, #120	; 0x78
 800eec8:	4659      	mov	r1, fp
 800eeca:	9802      	ldr	r0, [sp, #8]
 800eecc:	f001 ff26 	bl	8010d1c <__ssprint_r>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	f040 823b 	bne.w	800f34c <_svfprintf_r+0x135c>
 800eed6:	ab21      	add	r3, sp, #132	; 0x84
 800eed8:	9a03      	ldr	r2, [sp, #12]
 800eeda:	605a      	str	r2, [r3, #4]
 800eedc:	9903      	ldr	r1, [sp, #12]
 800eede:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eee0:	f8c3 9000 	str.w	r9, [r3]
 800eee4:	440a      	add	r2, r1
 800eee6:	9220      	str	r2, [sp, #128]	; 0x80
 800eee8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eeea:	3201      	adds	r2, #1
 800eeec:	2a07      	cmp	r2, #7
 800eeee:	921f      	str	r2, [sp, #124]	; 0x7c
 800eef0:	f73f af7d 	bgt.w	800edee <_svfprintf_r+0xdfe>
 800eef4:	f103 0408 	add.w	r4, r3, #8
 800eef8:	e5ea      	b.n	800ead0 <_svfprintf_r+0xae0>
 800eefa:	aa1e      	add	r2, sp, #120	; 0x78
 800eefc:	4659      	mov	r1, fp
 800eefe:	9802      	ldr	r0, [sp, #8]
 800ef00:	f001 ff0c 	bl	8010d1c <__ssprint_r>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	f040 8221 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ef0a:	ac21      	add	r4, sp, #132	; 0x84
 800ef0c:	e7af      	b.n	800ee6e <_svfprintf_r+0xe7e>
 800ef0e:	aa1e      	add	r2, sp, #120	; 0x78
 800ef10:	4659      	mov	r1, fp
 800ef12:	9802      	ldr	r0, [sp, #8]
 800ef14:	f001 ff02 	bl	8010d1c <__ssprint_r>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	f040 8217 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ef1e:	ab21      	add	r3, sp, #132	; 0x84
 800ef20:	e7bb      	b.n	800ee9a <_svfprintf_r+0xeaa>
 800ef22:	3010      	adds	r0, #16
 800ef24:	2907      	cmp	r1, #7
 800ef26:	6054      	str	r4, [r2, #4]
 800ef28:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 800ef2c:	dd08      	ble.n	800ef40 <_svfprintf_r+0xf50>
 800ef2e:	aa1e      	add	r2, sp, #120	; 0x78
 800ef30:	4659      	mov	r1, fp
 800ef32:	9802      	ldr	r0, [sp, #8]
 800ef34:	f001 fef2 	bl	8010d1c <__ssprint_r>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	f040 8207 	bne.w	800f34c <_svfprintf_r+0x135c>
 800ef3e:	ab21      	add	r3, sp, #132	; 0x84
 800ef40:	3e10      	subs	r6, #16
 800ef42:	461a      	mov	r2, r3
 800ef44:	e7b0      	b.n	800eea8 <_svfprintf_r+0xeb8>
 800ef46:	bf00      	nop
 800ef48:	0801238e 	.word	0x0801238e
 800ef4c:	080123a0 	.word	0x080123a0
 800ef50:	9a03      	ldr	r2, [sp, #12]
 800ef52:	42b2      	cmp	r2, r6
 800ef54:	bfa8      	it	ge
 800ef56:	4632      	movge	r2, r6
 800ef58:	2a00      	cmp	r2, #0
 800ef5a:	4690      	mov	r8, r2
 800ef5c:	dd0a      	ble.n	800ef74 <_svfprintf_r+0xf84>
 800ef5e:	4413      	add	r3, r2
 800ef60:	9320      	str	r3, [sp, #128]	; 0x80
 800ef62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef64:	3301      	adds	r3, #1
 800ef66:	2b07      	cmp	r3, #7
 800ef68:	e9c4 9200 	strd	r9, r2, [r4]
 800ef6c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ef6e:	f300 808a 	bgt.w	800f086 <_svfprintf_r+0x1096>
 800ef72:	3408      	adds	r4, #8
 800ef74:	f1b8 0f00 	cmp.w	r8, #0
 800ef78:	bfac      	ite	ge
 800ef7a:	eba6 0808 	subge.w	r8, r6, r8
 800ef7e:	46b0      	movlt	r8, r6
 800ef80:	f1b8 0f00 	cmp.w	r8, #0
 800ef84:	dd1b      	ble.n	800efbe <_svfprintf_r+0xfce>
 800ef86:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 800ef8a:	489a      	ldr	r0, [pc, #616]	; (800f1f4 <_svfprintf_r+0x1204>)
 800ef8c:	6020      	str	r0, [r4, #0]
 800ef8e:	f1b8 0f10 	cmp.w	r8, #16
 800ef92:	f102 0201 	add.w	r2, r2, #1
 800ef96:	f104 0108 	add.w	r1, r4, #8
 800ef9a:	dc7e      	bgt.n	800f09a <_svfprintf_r+0x10aa>
 800ef9c:	4443      	add	r3, r8
 800ef9e:	2a07      	cmp	r2, #7
 800efa0:	f8c4 8004 	str.w	r8, [r4, #4]
 800efa4:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800efa8:	f340 808b 	ble.w	800f0c2 <_svfprintf_r+0x10d2>
 800efac:	aa1e      	add	r2, sp, #120	; 0x78
 800efae:	4659      	mov	r1, fp
 800efb0:	9802      	ldr	r0, [sp, #8]
 800efb2:	f001 feb3 	bl	8010d1c <__ssprint_r>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	f040 81c8 	bne.w	800f34c <_svfprintf_r+0x135c>
 800efbc:	ac21      	add	r4, sp, #132	; 0x84
 800efbe:	056b      	lsls	r3, r5, #21
 800efc0:	444e      	add	r6, r9
 800efc2:	d509      	bpl.n	800efd8 <_svfprintf_r+0xfe8>
 800efc4:	9b05      	ldr	r3, [sp, #20]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d17d      	bne.n	800f0c6 <_svfprintf_r+0x10d6>
 800efca:	2f00      	cmp	r7, #0
 800efcc:	d17d      	bne.n	800f0ca <_svfprintf_r+0x10da>
 800efce:	9b03      	ldr	r3, [sp, #12]
 800efd0:	444b      	add	r3, r9
 800efd2:	429e      	cmp	r6, r3
 800efd4:	bf28      	it	cs
 800efd6:	461e      	movcs	r6, r3
 800efd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efda:	9a03      	ldr	r2, [sp, #12]
 800efdc:	4293      	cmp	r3, r2
 800efde:	db01      	blt.n	800efe4 <_svfprintf_r+0xff4>
 800efe0:	07ef      	lsls	r7, r5, #31
 800efe2:	d50e      	bpl.n	800f002 <_svfprintf_r+0x1012>
 800efe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efe6:	6023      	str	r3, [r4, #0]
 800efe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efea:	6063      	str	r3, [r4, #4]
 800efec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eff0:	4413      	add	r3, r2
 800eff2:	9320      	str	r3, [sp, #128]	; 0x80
 800eff4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eff6:	3301      	adds	r3, #1
 800eff8:	2b07      	cmp	r3, #7
 800effa:	931f      	str	r3, [sp, #124]	; 0x7c
 800effc:	f300 80e5 	bgt.w	800f1ca <_svfprintf_r+0x11da>
 800f000:	3408      	adds	r4, #8
 800f002:	9b03      	ldr	r3, [sp, #12]
 800f004:	9a03      	ldr	r2, [sp, #12]
 800f006:	eb09 0703 	add.w	r7, r9, r3
 800f00a:	1bbb      	subs	r3, r7, r6
 800f00c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800f00e:	1bd7      	subs	r7, r2, r7
 800f010:	429f      	cmp	r7, r3
 800f012:	bfa8      	it	ge
 800f014:	461f      	movge	r7, r3
 800f016:	2f00      	cmp	r7, #0
 800f018:	dd0b      	ble.n	800f032 <_svfprintf_r+0x1042>
 800f01a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f01c:	443b      	add	r3, r7
 800f01e:	9320      	str	r3, [sp, #128]	; 0x80
 800f020:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f022:	3301      	adds	r3, #1
 800f024:	2b07      	cmp	r3, #7
 800f026:	e9c4 6700 	strd	r6, r7, [r4]
 800f02a:	931f      	str	r3, [sp, #124]	; 0x7c
 800f02c:	f300 80d7 	bgt.w	800f1de <_svfprintf_r+0x11ee>
 800f030:	3408      	adds	r4, #8
 800f032:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f034:	9b03      	ldr	r3, [sp, #12]
 800f036:	2f00      	cmp	r7, #0
 800f038:	eba3 0606 	sub.w	r6, r3, r6
 800f03c:	bfa8      	it	ge
 800f03e:	1bf6      	subge	r6, r6, r7
 800f040:	2e00      	cmp	r6, #0
 800f042:	f77f ad45 	ble.w	800ead0 <_svfprintf_r+0xae0>
 800f046:	4f6b      	ldr	r7, [pc, #428]	; (800f1f4 <_svfprintf_r+0x1204>)
 800f048:	f04f 0810 	mov.w	r8, #16
 800f04c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800f050:	2e10      	cmp	r6, #16
 800f052:	f103 0301 	add.w	r3, r3, #1
 800f056:	f104 0108 	add.w	r1, r4, #8
 800f05a:	6027      	str	r7, [r4, #0]
 800f05c:	f77f aec0 	ble.w	800ede0 <_svfprintf_r+0xdf0>
 800f060:	3210      	adds	r2, #16
 800f062:	2b07      	cmp	r3, #7
 800f064:	f8c4 8004 	str.w	r8, [r4, #4]
 800f068:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800f06c:	dd08      	ble.n	800f080 <_svfprintf_r+0x1090>
 800f06e:	aa1e      	add	r2, sp, #120	; 0x78
 800f070:	4659      	mov	r1, fp
 800f072:	9802      	ldr	r0, [sp, #8]
 800f074:	f001 fe52 	bl	8010d1c <__ssprint_r>
 800f078:	2800      	cmp	r0, #0
 800f07a:	f040 8167 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f07e:	a921      	add	r1, sp, #132	; 0x84
 800f080:	3e10      	subs	r6, #16
 800f082:	460c      	mov	r4, r1
 800f084:	e7e2      	b.n	800f04c <_svfprintf_r+0x105c>
 800f086:	aa1e      	add	r2, sp, #120	; 0x78
 800f088:	4659      	mov	r1, fp
 800f08a:	9802      	ldr	r0, [sp, #8]
 800f08c:	f001 fe46 	bl	8010d1c <__ssprint_r>
 800f090:	2800      	cmp	r0, #0
 800f092:	f040 815b 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f096:	ac21      	add	r4, sp, #132	; 0x84
 800f098:	e76c      	b.n	800ef74 <_svfprintf_r+0xf84>
 800f09a:	2010      	movs	r0, #16
 800f09c:	4403      	add	r3, r0
 800f09e:	2a07      	cmp	r2, #7
 800f0a0:	6060      	str	r0, [r4, #4]
 800f0a2:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800f0a6:	dd08      	ble.n	800f0ba <_svfprintf_r+0x10ca>
 800f0a8:	aa1e      	add	r2, sp, #120	; 0x78
 800f0aa:	4659      	mov	r1, fp
 800f0ac:	9802      	ldr	r0, [sp, #8]
 800f0ae:	f001 fe35 	bl	8010d1c <__ssprint_r>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	f040 814a 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f0b8:	a921      	add	r1, sp, #132	; 0x84
 800f0ba:	f1a8 0810 	sub.w	r8, r8, #16
 800f0be:	460c      	mov	r4, r1
 800f0c0:	e761      	b.n	800ef86 <_svfprintf_r+0xf96>
 800f0c2:	460c      	mov	r4, r1
 800f0c4:	e77b      	b.n	800efbe <_svfprintf_r+0xfce>
 800f0c6:	2f00      	cmp	r7, #0
 800f0c8:	d04e      	beq.n	800f168 <_svfprintf_r+0x1178>
 800f0ca:	3f01      	subs	r7, #1
 800f0cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0ce:	6023      	str	r3, [r4, #0]
 800f0d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0d2:	6063      	str	r3, [r4, #4]
 800f0d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f0d8:	4413      	add	r3, r2
 800f0da:	9320      	str	r3, [sp, #128]	; 0x80
 800f0dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f0de:	3301      	adds	r3, #1
 800f0e0:	2b07      	cmp	r3, #7
 800f0e2:	931f      	str	r3, [sp, #124]	; 0x7c
 800f0e4:	dc47      	bgt.n	800f176 <_svfprintf_r+0x1186>
 800f0e6:	3408      	adds	r4, #8
 800f0e8:	9b03      	ldr	r3, [sp, #12]
 800f0ea:	444b      	add	r3, r9
 800f0ec:	1b9a      	subs	r2, r3, r6
 800f0ee:	9b07      	ldr	r3, [sp, #28]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	bfa8      	it	ge
 800f0f6:	4613      	movge	r3, r2
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	4698      	mov	r8, r3
 800f0fc:	dd0a      	ble.n	800f114 <_svfprintf_r+0x1124>
 800f0fe:	e9c4 6300 	strd	r6, r3, [r4]
 800f102:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f104:	4443      	add	r3, r8
 800f106:	9320      	str	r3, [sp, #128]	; 0x80
 800f108:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f10a:	3301      	adds	r3, #1
 800f10c:	2b07      	cmp	r3, #7
 800f10e:	931f      	str	r3, [sp, #124]	; 0x7c
 800f110:	dc3b      	bgt.n	800f18a <_svfprintf_r+0x119a>
 800f112:	3408      	adds	r4, #8
 800f114:	9b07      	ldr	r3, [sp, #28]
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	f1b8 0f00 	cmp.w	r8, #0
 800f11c:	bfac      	ite	ge
 800f11e:	eba3 0808 	subge.w	r8, r3, r8
 800f122:	4698      	movlt	r8, r3
 800f124:	f1b8 0f00 	cmp.w	r8, #0
 800f128:	dd1a      	ble.n	800f160 <_svfprintf_r+0x1170>
 800f12a:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 800f12e:	4831      	ldr	r0, [pc, #196]	; (800f1f4 <_svfprintf_r+0x1204>)
 800f130:	6020      	str	r0, [r4, #0]
 800f132:	f1b8 0f10 	cmp.w	r8, #16
 800f136:	f102 0201 	add.w	r2, r2, #1
 800f13a:	f104 0108 	add.w	r1, r4, #8
 800f13e:	dc2e      	bgt.n	800f19e <_svfprintf_r+0x11ae>
 800f140:	4443      	add	r3, r8
 800f142:	2a07      	cmp	r2, #7
 800f144:	f8c4 8004 	str.w	r8, [r4, #4]
 800f148:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800f14c:	dd3b      	ble.n	800f1c6 <_svfprintf_r+0x11d6>
 800f14e:	aa1e      	add	r2, sp, #120	; 0x78
 800f150:	4659      	mov	r1, fp
 800f152:	9802      	ldr	r0, [sp, #8]
 800f154:	f001 fde2 	bl	8010d1c <__ssprint_r>
 800f158:	2800      	cmp	r0, #0
 800f15a:	f040 80f7 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f15e:	ac21      	add	r4, sp, #132	; 0x84
 800f160:	9b07      	ldr	r3, [sp, #28]
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	441e      	add	r6, r3
 800f166:	e72d      	b.n	800efc4 <_svfprintf_r+0xfd4>
 800f168:	9b07      	ldr	r3, [sp, #28]
 800f16a:	3b01      	subs	r3, #1
 800f16c:	9307      	str	r3, [sp, #28]
 800f16e:	9b05      	ldr	r3, [sp, #20]
 800f170:	3b01      	subs	r3, #1
 800f172:	9305      	str	r3, [sp, #20]
 800f174:	e7aa      	b.n	800f0cc <_svfprintf_r+0x10dc>
 800f176:	aa1e      	add	r2, sp, #120	; 0x78
 800f178:	4659      	mov	r1, fp
 800f17a:	9802      	ldr	r0, [sp, #8]
 800f17c:	f001 fdce 	bl	8010d1c <__ssprint_r>
 800f180:	2800      	cmp	r0, #0
 800f182:	f040 80e3 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f186:	ac21      	add	r4, sp, #132	; 0x84
 800f188:	e7ae      	b.n	800f0e8 <_svfprintf_r+0x10f8>
 800f18a:	aa1e      	add	r2, sp, #120	; 0x78
 800f18c:	4659      	mov	r1, fp
 800f18e:	9802      	ldr	r0, [sp, #8]
 800f190:	f001 fdc4 	bl	8010d1c <__ssprint_r>
 800f194:	2800      	cmp	r0, #0
 800f196:	f040 80d9 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f19a:	ac21      	add	r4, sp, #132	; 0x84
 800f19c:	e7ba      	b.n	800f114 <_svfprintf_r+0x1124>
 800f19e:	2010      	movs	r0, #16
 800f1a0:	4403      	add	r3, r0
 800f1a2:	2a07      	cmp	r2, #7
 800f1a4:	6060      	str	r0, [r4, #4]
 800f1a6:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800f1aa:	dd08      	ble.n	800f1be <_svfprintf_r+0x11ce>
 800f1ac:	aa1e      	add	r2, sp, #120	; 0x78
 800f1ae:	4659      	mov	r1, fp
 800f1b0:	9802      	ldr	r0, [sp, #8]
 800f1b2:	f001 fdb3 	bl	8010d1c <__ssprint_r>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	f040 80c8 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f1bc:	a921      	add	r1, sp, #132	; 0x84
 800f1be:	f1a8 0810 	sub.w	r8, r8, #16
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	e7b1      	b.n	800f12a <_svfprintf_r+0x113a>
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	e7ca      	b.n	800f160 <_svfprintf_r+0x1170>
 800f1ca:	aa1e      	add	r2, sp, #120	; 0x78
 800f1cc:	4659      	mov	r1, fp
 800f1ce:	9802      	ldr	r0, [sp, #8]
 800f1d0:	f001 fda4 	bl	8010d1c <__ssprint_r>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	f040 80b9 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f1da:	ac21      	add	r4, sp, #132	; 0x84
 800f1dc:	e711      	b.n	800f002 <_svfprintf_r+0x1012>
 800f1de:	aa1e      	add	r2, sp, #120	; 0x78
 800f1e0:	4659      	mov	r1, fp
 800f1e2:	9802      	ldr	r0, [sp, #8]
 800f1e4:	f001 fd9a 	bl	8010d1c <__ssprint_r>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	f040 80af 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f1ee:	ac21      	add	r4, sp, #132	; 0x84
 800f1f0:	e71f      	b.n	800f032 <_svfprintf_r+0x1042>
 800f1f2:	bf00      	nop
 800f1f4:	080123a0 	.word	0x080123a0
 800f1f8:	9803      	ldr	r0, [sp, #12]
 800f1fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800f1fc:	2801      	cmp	r0, #1
 800f1fe:	f103 0201 	add.w	r2, r3, #1
 800f202:	f101 0101 	add.w	r1, r1, #1
 800f206:	f104 0308 	add.w	r3, r4, #8
 800f20a:	dc01      	bgt.n	800f210 <_svfprintf_r+0x1220>
 800f20c:	07e8      	lsls	r0, r5, #31
 800f20e:	d571      	bpl.n	800f2f4 <_svfprintf_r+0x1304>
 800f210:	2001      	movs	r0, #1
 800f212:	2907      	cmp	r1, #7
 800f214:	f8c4 9000 	str.w	r9, [r4]
 800f218:	6060      	str	r0, [r4, #4]
 800f21a:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800f21e:	dd08      	ble.n	800f232 <_svfprintf_r+0x1242>
 800f220:	aa1e      	add	r2, sp, #120	; 0x78
 800f222:	4659      	mov	r1, fp
 800f224:	9802      	ldr	r0, [sp, #8]
 800f226:	f001 fd79 	bl	8010d1c <__ssprint_r>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	f040 808e 	bne.w	800f34c <_svfprintf_r+0x135c>
 800f230:	ab21      	add	r3, sp, #132	; 0x84
 800f232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f238:	605a      	str	r2, [r3, #4]
 800f23a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f23c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f23e:	440a      	add	r2, r1
 800f240:	9220      	str	r2, [sp, #128]	; 0x80
 800f242:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f244:	3201      	adds	r2, #1
 800f246:	2a07      	cmp	r2, #7
 800f248:	921f      	str	r2, [sp, #124]	; 0x7c
 800f24a:	dc25      	bgt.n	800f298 <_svfprintf_r+0x12a8>
 800f24c:	3308      	adds	r3, #8
 800f24e:	9a03      	ldr	r2, [sp, #12]
 800f250:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f258:	f102 34ff 	add.w	r4, r2, #4294967295
 800f25c:	d025      	beq.n	800f2aa <_svfprintf_r+0x12ba>
 800f25e:	f109 0201 	add.w	r2, r9, #1
 800f262:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800f264:	9803      	ldr	r0, [sp, #12]
 800f266:	e9c3 2400 	strd	r2, r4, [r3]
 800f26a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f26c:	3101      	adds	r1, #1
 800f26e:	3a01      	subs	r2, #1
 800f270:	4402      	add	r2, r0
 800f272:	2907      	cmp	r1, #7
 800f274:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800f278:	dd45      	ble.n	800f306 <_svfprintf_r+0x1316>
 800f27a:	aa1e      	add	r2, sp, #120	; 0x78
 800f27c:	4659      	mov	r1, fp
 800f27e:	9802      	ldr	r0, [sp, #8]
 800f280:	f001 fd4c 	bl	8010d1c <__ssprint_r>
 800f284:	2800      	cmp	r0, #0
 800f286:	d161      	bne.n	800f34c <_svfprintf_r+0x135c>
 800f288:	ab21      	add	r3, sp, #132	; 0x84
 800f28a:	aa1a      	add	r2, sp, #104	; 0x68
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f290:	605a      	str	r2, [r3, #4]
 800f292:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f294:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f296:	e625      	b.n	800eee4 <_svfprintf_r+0xef4>
 800f298:	aa1e      	add	r2, sp, #120	; 0x78
 800f29a:	4659      	mov	r1, fp
 800f29c:	9802      	ldr	r0, [sp, #8]
 800f29e:	f001 fd3d 	bl	8010d1c <__ssprint_r>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	d152      	bne.n	800f34c <_svfprintf_r+0x135c>
 800f2a6:	ab21      	add	r3, sp, #132	; 0x84
 800f2a8:	e7d1      	b.n	800f24e <_svfprintf_r+0x125e>
 800f2aa:	2c00      	cmp	r4, #0
 800f2ac:	dded      	ble.n	800f28a <_svfprintf_r+0x129a>
 800f2ae:	4e3e      	ldr	r6, [pc, #248]	; (800f3a8 <_svfprintf_r+0x13b8>)
 800f2b0:	2710      	movs	r7, #16
 800f2b2:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 800f2b6:	2c10      	cmp	r4, #16
 800f2b8:	f102 0201 	add.w	r2, r2, #1
 800f2bc:	f103 0008 	add.w	r0, r3, #8
 800f2c0:	601e      	str	r6, [r3, #0]
 800f2c2:	dc07      	bgt.n	800f2d4 <_svfprintf_r+0x12e4>
 800f2c4:	605c      	str	r4, [r3, #4]
 800f2c6:	2a07      	cmp	r2, #7
 800f2c8:	440c      	add	r4, r1
 800f2ca:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 800f2ce:	dcd4      	bgt.n	800f27a <_svfprintf_r+0x128a>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	e7da      	b.n	800f28a <_svfprintf_r+0x129a>
 800f2d4:	3110      	adds	r1, #16
 800f2d6:	2a07      	cmp	r2, #7
 800f2d8:	605f      	str	r7, [r3, #4]
 800f2da:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800f2de:	dd06      	ble.n	800f2ee <_svfprintf_r+0x12fe>
 800f2e0:	aa1e      	add	r2, sp, #120	; 0x78
 800f2e2:	4659      	mov	r1, fp
 800f2e4:	9802      	ldr	r0, [sp, #8]
 800f2e6:	f001 fd19 	bl	8010d1c <__ssprint_r>
 800f2ea:	bb78      	cbnz	r0, 800f34c <_svfprintf_r+0x135c>
 800f2ec:	a821      	add	r0, sp, #132	; 0x84
 800f2ee:	3c10      	subs	r4, #16
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	e7de      	b.n	800f2b2 <_svfprintf_r+0x12c2>
 800f2f4:	2001      	movs	r0, #1
 800f2f6:	2907      	cmp	r1, #7
 800f2f8:	f8c4 9000 	str.w	r9, [r4]
 800f2fc:	6060      	str	r0, [r4, #4]
 800f2fe:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800f302:	ddc2      	ble.n	800f28a <_svfprintf_r+0x129a>
 800f304:	e7b9      	b.n	800f27a <_svfprintf_r+0x128a>
 800f306:	3308      	adds	r3, #8
 800f308:	e7bf      	b.n	800f28a <_svfprintf_r+0x129a>
 800f30a:	460c      	mov	r4, r1
 800f30c:	f7ff bbe0 	b.w	800ead0 <_svfprintf_r+0xae0>
 800f310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f312:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f314:	1a9d      	subs	r5, r3, r2
 800f316:	2d00      	cmp	r5, #0
 800f318:	f77f abdd 	ble.w	800ead6 <_svfprintf_r+0xae6>
 800f31c:	4e23      	ldr	r6, [pc, #140]	; (800f3ac <_svfprintf_r+0x13bc>)
 800f31e:	2710      	movs	r7, #16
 800f320:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800f324:	2d10      	cmp	r5, #16
 800f326:	f103 0301 	add.w	r3, r3, #1
 800f32a:	6026      	str	r6, [r4, #0]
 800f32c:	dc18      	bgt.n	800f360 <_svfprintf_r+0x1370>
 800f32e:	6065      	str	r5, [r4, #4]
 800f330:	2b07      	cmp	r3, #7
 800f332:	4415      	add	r5, r2
 800f334:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 800f338:	f77f abcd 	ble.w	800ead6 <_svfprintf_r+0xae6>
 800f33c:	aa1e      	add	r2, sp, #120	; 0x78
 800f33e:	4659      	mov	r1, fp
 800f340:	9802      	ldr	r0, [sp, #8]
 800f342:	f001 fceb 	bl	8010d1c <__ssprint_r>
 800f346:	2800      	cmp	r0, #0
 800f348:	f43f abc5 	beq.w	800ead6 <_svfprintf_r+0xae6>
 800f34c:	f1ba 0f00 	cmp.w	sl, #0
 800f350:	f43f a8d2 	beq.w	800e4f8 <_svfprintf_r+0x508>
 800f354:	4651      	mov	r1, sl
 800f356:	9802      	ldr	r0, [sp, #8]
 800f358:	f001 f848 	bl	80103ec <_free_r>
 800f35c:	f7ff b8cc 	b.w	800e4f8 <_svfprintf_r+0x508>
 800f360:	3210      	adds	r2, #16
 800f362:	2b07      	cmp	r3, #7
 800f364:	6067      	str	r7, [r4, #4]
 800f366:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800f36a:	dc02      	bgt.n	800f372 <_svfprintf_r+0x1382>
 800f36c:	3408      	adds	r4, #8
 800f36e:	3d10      	subs	r5, #16
 800f370:	e7d6      	b.n	800f320 <_svfprintf_r+0x1330>
 800f372:	aa1e      	add	r2, sp, #120	; 0x78
 800f374:	4659      	mov	r1, fp
 800f376:	9802      	ldr	r0, [sp, #8]
 800f378:	f001 fcd0 	bl	8010d1c <__ssprint_r>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d1e5      	bne.n	800f34c <_svfprintf_r+0x135c>
 800f380:	ac21      	add	r4, sp, #132	; 0x84
 800f382:	e7f4      	b.n	800f36e <_svfprintf_r+0x137e>
 800f384:	4651      	mov	r1, sl
 800f386:	9802      	ldr	r0, [sp, #8]
 800f388:	f001 f830 	bl	80103ec <_free_r>
 800f38c:	f7ff bbbb 	b.w	800eb06 <_svfprintf_r+0xb16>
 800f390:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f392:	2b00      	cmp	r3, #0
 800f394:	f43f a8b0 	beq.w	800e4f8 <_svfprintf_r+0x508>
 800f398:	aa1e      	add	r2, sp, #120	; 0x78
 800f39a:	4659      	mov	r1, fp
 800f39c:	9802      	ldr	r0, [sp, #8]
 800f39e:	f001 fcbd 	bl	8010d1c <__ssprint_r>
 800f3a2:	f7ff b8a9 	b.w	800e4f8 <_svfprintf_r+0x508>
 800f3a6:	bf00      	nop
 800f3a8:	080123a0 	.word	0x080123a0
 800f3ac:	08012390 	.word	0x08012390

0800f3b0 <sysconf>:
 800f3b0:	2808      	cmp	r0, #8
 800f3b2:	b508      	push	{r3, lr}
 800f3b4:	d006      	beq.n	800f3c4 <sysconf+0x14>
 800f3b6:	f7fd fedd 	bl	800d174 <__errno>
 800f3ba:	2316      	movs	r3, #22
 800f3bc:	6003      	str	r3, [r0, #0]
 800f3be:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c2:	bd08      	pop	{r3, pc}
 800f3c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f3c8:	e7fb      	b.n	800f3c2 <sysconf+0x12>

0800f3ca <__swbuf_r>:
 800f3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3cc:	460d      	mov	r5, r1
 800f3ce:	4614      	mov	r4, r2
 800f3d0:	4606      	mov	r6, r0
 800f3d2:	b118      	cbz	r0, 800f3dc <__swbuf_r+0x12>
 800f3d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f3d6:	b90b      	cbnz	r3, 800f3dc <__swbuf_r+0x12>
 800f3d8:	f000 ff78 	bl	80102cc <__sinit>
 800f3dc:	69a3      	ldr	r3, [r4, #24]
 800f3de:	60a3      	str	r3, [r4, #8]
 800f3e0:	89a3      	ldrh	r3, [r4, #12]
 800f3e2:	0719      	lsls	r1, r3, #28
 800f3e4:	d528      	bpl.n	800f438 <__swbuf_r+0x6e>
 800f3e6:	6923      	ldr	r3, [r4, #16]
 800f3e8:	b333      	cbz	r3, 800f438 <__swbuf_r+0x6e>
 800f3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ee:	b2ed      	uxtb	r5, r5
 800f3f0:	049a      	lsls	r2, r3, #18
 800f3f2:	462f      	mov	r7, r5
 800f3f4:	d52a      	bpl.n	800f44c <__swbuf_r+0x82>
 800f3f6:	6923      	ldr	r3, [r4, #16]
 800f3f8:	6820      	ldr	r0, [r4, #0]
 800f3fa:	1ac0      	subs	r0, r0, r3
 800f3fc:	6963      	ldr	r3, [r4, #20]
 800f3fe:	4283      	cmp	r3, r0
 800f400:	dc04      	bgt.n	800f40c <__swbuf_r+0x42>
 800f402:	4621      	mov	r1, r4
 800f404:	4630      	mov	r0, r6
 800f406:	f000 fef5 	bl	80101f4 <_fflush_r>
 800f40a:	b9d8      	cbnz	r0, 800f444 <__swbuf_r+0x7a>
 800f40c:	68a3      	ldr	r3, [r4, #8]
 800f40e:	3b01      	subs	r3, #1
 800f410:	60a3      	str	r3, [r4, #8]
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	1c5a      	adds	r2, r3, #1
 800f416:	6022      	str	r2, [r4, #0]
 800f418:	701d      	strb	r5, [r3, #0]
 800f41a:	6963      	ldr	r3, [r4, #20]
 800f41c:	3001      	adds	r0, #1
 800f41e:	4283      	cmp	r3, r0
 800f420:	d004      	beq.n	800f42c <__swbuf_r+0x62>
 800f422:	89a3      	ldrh	r3, [r4, #12]
 800f424:	07db      	lsls	r3, r3, #31
 800f426:	d50f      	bpl.n	800f448 <__swbuf_r+0x7e>
 800f428:	2d0a      	cmp	r5, #10
 800f42a:	d10d      	bne.n	800f448 <__swbuf_r+0x7e>
 800f42c:	4621      	mov	r1, r4
 800f42e:	4630      	mov	r0, r6
 800f430:	f000 fee0 	bl	80101f4 <_fflush_r>
 800f434:	b140      	cbz	r0, 800f448 <__swbuf_r+0x7e>
 800f436:	e005      	b.n	800f444 <__swbuf_r+0x7a>
 800f438:	4621      	mov	r1, r4
 800f43a:	4630      	mov	r0, r6
 800f43c:	f000 f820 	bl	800f480 <__swsetup_r>
 800f440:	2800      	cmp	r0, #0
 800f442:	d0d2      	beq.n	800f3ea <__swbuf_r+0x20>
 800f444:	f04f 37ff 	mov.w	r7, #4294967295
 800f448:	4638      	mov	r0, r7
 800f44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f44c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f450:	81a3      	strh	r3, [r4, #12]
 800f452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f458:	6663      	str	r3, [r4, #100]	; 0x64
 800f45a:	e7cc      	b.n	800f3f6 <__swbuf_r+0x2c>

0800f45c <_write_r>:
 800f45c:	b538      	push	{r3, r4, r5, lr}
 800f45e:	4c07      	ldr	r4, [pc, #28]	; (800f47c <_write_r+0x20>)
 800f460:	4605      	mov	r5, r0
 800f462:	4608      	mov	r0, r1
 800f464:	4611      	mov	r1, r2
 800f466:	2200      	movs	r2, #0
 800f468:	6022      	str	r2, [r4, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	f7fc fc13 	bl	800bc96 <_write>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	d102      	bne.n	800f47a <_write_r+0x1e>
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	b103      	cbz	r3, 800f47a <_write_r+0x1e>
 800f478:	602b      	str	r3, [r5, #0]
 800f47a:	bd38      	pop	{r3, r4, r5, pc}
 800f47c:	20000f10 	.word	0x20000f10

0800f480 <__swsetup_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	4b2a      	ldr	r3, [pc, #168]	; (800f52c <__swsetup_r+0xac>)
 800f484:	4605      	mov	r5, r0
 800f486:	6818      	ldr	r0, [r3, #0]
 800f488:	460c      	mov	r4, r1
 800f48a:	b118      	cbz	r0, 800f494 <__swsetup_r+0x14>
 800f48c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f48e:	b90b      	cbnz	r3, 800f494 <__swsetup_r+0x14>
 800f490:	f000 ff1c 	bl	80102cc <__sinit>
 800f494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f498:	b29a      	uxth	r2, r3
 800f49a:	0711      	lsls	r1, r2, #28
 800f49c:	d422      	bmi.n	800f4e4 <__swsetup_r+0x64>
 800f49e:	06d0      	lsls	r0, r2, #27
 800f4a0:	d407      	bmi.n	800f4b2 <__swsetup_r+0x32>
 800f4a2:	2209      	movs	r2, #9
 800f4a4:	602a      	str	r2, [r5, #0]
 800f4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4aa:	81a3      	strh	r3, [r4, #12]
 800f4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b0:	e034      	b.n	800f51c <__swsetup_r+0x9c>
 800f4b2:	0751      	lsls	r1, r2, #29
 800f4b4:	d512      	bpl.n	800f4dc <__swsetup_r+0x5c>
 800f4b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f4b8:	b141      	cbz	r1, 800f4cc <__swsetup_r+0x4c>
 800f4ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f4be:	4299      	cmp	r1, r3
 800f4c0:	d002      	beq.n	800f4c8 <__swsetup_r+0x48>
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	f000 ff92 	bl	80103ec <_free_r>
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	6323      	str	r3, [r4, #48]	; 0x30
 800f4cc:	89a3      	ldrh	r3, [r4, #12]
 800f4ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4d2:	81a3      	strh	r3, [r4, #12]
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	6063      	str	r3, [r4, #4]
 800f4d8:	6923      	ldr	r3, [r4, #16]
 800f4da:	6023      	str	r3, [r4, #0]
 800f4dc:	89a3      	ldrh	r3, [r4, #12]
 800f4de:	f043 0308 	orr.w	r3, r3, #8
 800f4e2:	81a3      	strh	r3, [r4, #12]
 800f4e4:	6923      	ldr	r3, [r4, #16]
 800f4e6:	b94b      	cbnz	r3, 800f4fc <__swsetup_r+0x7c>
 800f4e8:	89a3      	ldrh	r3, [r4, #12]
 800f4ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4f2:	d003      	beq.n	800f4fc <__swsetup_r+0x7c>
 800f4f4:	4621      	mov	r1, r4
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f001 f88c 	bl	8010614 <__smakebuf_r>
 800f4fc:	89a2      	ldrh	r2, [r4, #12]
 800f4fe:	f012 0301 	ands.w	r3, r2, #1
 800f502:	d00c      	beq.n	800f51e <__swsetup_r+0x9e>
 800f504:	2300      	movs	r3, #0
 800f506:	60a3      	str	r3, [r4, #8]
 800f508:	6963      	ldr	r3, [r4, #20]
 800f50a:	425b      	negs	r3, r3
 800f50c:	61a3      	str	r3, [r4, #24]
 800f50e:	6923      	ldr	r3, [r4, #16]
 800f510:	b953      	cbnz	r3, 800f528 <__swsetup_r+0xa8>
 800f512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f516:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f51a:	d1c4      	bne.n	800f4a6 <__swsetup_r+0x26>
 800f51c:	bd38      	pop	{r3, r4, r5, pc}
 800f51e:	0792      	lsls	r2, r2, #30
 800f520:	bf58      	it	pl
 800f522:	6963      	ldrpl	r3, [r4, #20]
 800f524:	60a3      	str	r3, [r4, #8]
 800f526:	e7f2      	b.n	800f50e <__swsetup_r+0x8e>
 800f528:	2000      	movs	r0, #0
 800f52a:	e7f7      	b.n	800f51c <__swsetup_r+0x9c>
 800f52c:	20000014 	.word	0x20000014

0800f530 <register_fini>:
 800f530:	4b02      	ldr	r3, [pc, #8]	; (800f53c <register_fini+0xc>)
 800f532:	b113      	cbz	r3, 800f53a <register_fini+0xa>
 800f534:	4802      	ldr	r0, [pc, #8]	; (800f540 <register_fini+0x10>)
 800f536:	f000 b805 	b.w	800f544 <atexit>
 800f53a:	4770      	bx	lr
 800f53c:	00000000 	.word	0x00000000
 800f540:	0801031d 	.word	0x0801031d

0800f544 <atexit>:
 800f544:	2300      	movs	r3, #0
 800f546:	4601      	mov	r1, r0
 800f548:	461a      	mov	r2, r3
 800f54a:	4618      	mov	r0, r3
 800f54c:	f001 bc5e 	b.w	8010e0c <__register_exitproc>

0800f550 <quorem>:
 800f550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	6903      	ldr	r3, [r0, #16]
 800f556:	690c      	ldr	r4, [r1, #16]
 800f558:	42a3      	cmp	r3, r4
 800f55a:	4680      	mov	r8, r0
 800f55c:	f2c0 8082 	blt.w	800f664 <quorem+0x114>
 800f560:	3c01      	subs	r4, #1
 800f562:	f101 0714 	add.w	r7, r1, #20
 800f566:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f56a:	f100 0614 	add.w	r6, r0, #20
 800f56e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f572:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f576:	eb06 030c 	add.w	r3, r6, ip
 800f57a:	3501      	adds	r5, #1
 800f57c:	eb07 090c 	add.w	r9, r7, ip
 800f580:	9301      	str	r3, [sp, #4]
 800f582:	fbb0 f5f5 	udiv	r5, r0, r5
 800f586:	b395      	cbz	r5, 800f5ee <quorem+0x9e>
 800f588:	f04f 0a00 	mov.w	sl, #0
 800f58c:	4638      	mov	r0, r7
 800f58e:	46b6      	mov	lr, r6
 800f590:	46d3      	mov	fp, sl
 800f592:	f850 2b04 	ldr.w	r2, [r0], #4
 800f596:	b293      	uxth	r3, r2
 800f598:	fb05 a303 	mla	r3, r5, r3, sl
 800f59c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	ebab 0303 	sub.w	r3, fp, r3
 800f5a6:	0c12      	lsrs	r2, r2, #16
 800f5a8:	f8de b000 	ldr.w	fp, [lr]
 800f5ac:	fb05 a202 	mla	r2, r5, r2, sl
 800f5b0:	fa13 f38b 	uxtah	r3, r3, fp
 800f5b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f5b8:	fa1f fb82 	uxth.w	fp, r2
 800f5bc:	f8de 2000 	ldr.w	r2, [lr]
 800f5c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f5c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5ce:	4581      	cmp	r9, r0
 800f5d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f5d4:	f84e 3b04 	str.w	r3, [lr], #4
 800f5d8:	d2db      	bcs.n	800f592 <quorem+0x42>
 800f5da:	f856 300c 	ldr.w	r3, [r6, ip]
 800f5de:	b933      	cbnz	r3, 800f5ee <quorem+0x9e>
 800f5e0:	9b01      	ldr	r3, [sp, #4]
 800f5e2:	3b04      	subs	r3, #4
 800f5e4:	429e      	cmp	r6, r3
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	d330      	bcc.n	800f64c <quorem+0xfc>
 800f5ea:	f8c8 4010 	str.w	r4, [r8, #16]
 800f5ee:	4640      	mov	r0, r8
 800f5f0:	f001 fa3a 	bl	8010a68 <__mcmp>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	db25      	blt.n	800f644 <quorem+0xf4>
 800f5f8:	3501      	adds	r5, #1
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f04f 0c00 	mov.w	ip, #0
 800f600:	f857 2b04 	ldr.w	r2, [r7], #4
 800f604:	f8d0 e000 	ldr.w	lr, [r0]
 800f608:	b293      	uxth	r3, r2
 800f60a:	ebac 0303 	sub.w	r3, ip, r3
 800f60e:	0c12      	lsrs	r2, r2, #16
 800f610:	fa13 f38e 	uxtah	r3, r3, lr
 800f614:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f618:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f622:	45b9      	cmp	r9, r7
 800f624:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f628:	f840 3b04 	str.w	r3, [r0], #4
 800f62c:	d2e8      	bcs.n	800f600 <quorem+0xb0>
 800f62e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f632:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f636:	b92a      	cbnz	r2, 800f644 <quorem+0xf4>
 800f638:	3b04      	subs	r3, #4
 800f63a:	429e      	cmp	r6, r3
 800f63c:	461a      	mov	r2, r3
 800f63e:	d30b      	bcc.n	800f658 <quorem+0x108>
 800f640:	f8c8 4010 	str.w	r4, [r8, #16]
 800f644:	4628      	mov	r0, r5
 800f646:	b003      	add	sp, #12
 800f648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64c:	6812      	ldr	r2, [r2, #0]
 800f64e:	3b04      	subs	r3, #4
 800f650:	2a00      	cmp	r2, #0
 800f652:	d1ca      	bne.n	800f5ea <quorem+0x9a>
 800f654:	3c01      	subs	r4, #1
 800f656:	e7c5      	b.n	800f5e4 <quorem+0x94>
 800f658:	6812      	ldr	r2, [r2, #0]
 800f65a:	3b04      	subs	r3, #4
 800f65c:	2a00      	cmp	r2, #0
 800f65e:	d1ef      	bne.n	800f640 <quorem+0xf0>
 800f660:	3c01      	subs	r4, #1
 800f662:	e7ea      	b.n	800f63a <quorem+0xea>
 800f664:	2000      	movs	r0, #0
 800f666:	e7ee      	b.n	800f646 <quorem+0xf6>

0800f668 <_dtoa_r>:
 800f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66c:	b095      	sub	sp, #84	; 0x54
 800f66e:	ec57 6b10 	vmov	r6, r7, d0
 800f672:	9108      	str	r1, [sp, #32]
 800f674:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800f676:	920a      	str	r2, [sp, #40]	; 0x28
 800f678:	4604      	mov	r4, r0
 800f67a:	9311      	str	r3, [sp, #68]	; 0x44
 800f67c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800f67e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f682:	b141      	cbz	r1, 800f696 <_dtoa_r+0x2e>
 800f684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f686:	604a      	str	r2, [r1, #4]
 800f688:	2301      	movs	r3, #1
 800f68a:	4093      	lsls	r3, r2
 800f68c:	608b      	str	r3, [r1, #8]
 800f68e:	f001 f826 	bl	80106de <_Bfree>
 800f692:	2300      	movs	r3, #0
 800f694:	6423      	str	r3, [r4, #64]	; 0x40
 800f696:	1e3b      	subs	r3, r7, #0
 800f698:	bfbb      	ittet	lt
 800f69a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f69e:	9305      	strlt	r3, [sp, #20]
 800f6a0:	2300      	movge	r3, #0
 800f6a2:	2201      	movlt	r2, #1
 800f6a4:	bfac      	ite	ge
 800f6a6:	602b      	strge	r3, [r5, #0]
 800f6a8:	602a      	strlt	r2, [r5, #0]
 800f6aa:	4ba9      	ldr	r3, [pc, #676]	; (800f950 <_dtoa_r+0x2e8>)
 800f6ac:	9d05      	ldr	r5, [sp, #20]
 800f6ae:	43ab      	bics	r3, r5
 800f6b0:	d11b      	bne.n	800f6ea <_dtoa_r+0x82>
 800f6b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f6b4:	f242 730f 	movw	r3, #9999	; 0x270f
 800f6b8:	6013      	str	r3, [r2, #0]
 800f6ba:	9b04      	ldr	r3, [sp, #16]
 800f6bc:	b923      	cbnz	r3, 800f6c8 <_dtoa_r+0x60>
 800f6be:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f6c2:	2d00      	cmp	r5, #0
 800f6c4:	f000 84d9 	beq.w	801007a <_dtoa_r+0xa12>
 800f6c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f6ca:	b90b      	cbnz	r3, 800f6d0 <_dtoa_r+0x68>
 800f6cc:	4ba1      	ldr	r3, [pc, #644]	; (800f954 <_dtoa_r+0x2ec>)
 800f6ce:	e020      	b.n	800f712 <_dtoa_r+0xaa>
 800f6d0:	4ba0      	ldr	r3, [pc, #640]	; (800f954 <_dtoa_r+0x2ec>)
 800f6d2:	9302      	str	r3, [sp, #8]
 800f6d4:	3303      	adds	r3, #3
 800f6d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f6d8:	6013      	str	r3, [r2, #0]
 800f6da:	9802      	ldr	r0, [sp, #8]
 800f6dc:	b015      	add	sp, #84	; 0x54
 800f6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6e2:	4b9d      	ldr	r3, [pc, #628]	; (800f958 <_dtoa_r+0x2f0>)
 800f6e4:	9302      	str	r3, [sp, #8]
 800f6e6:	3308      	adds	r3, #8
 800f6e8:	e7f5      	b.n	800f6d6 <_dtoa_r+0x6e>
 800f6ea:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f6ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6fa:	d10c      	bne.n	800f716 <_dtoa_r+0xae>
 800f6fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f6fe:	2301      	movs	r3, #1
 800f700:	6013      	str	r3, [r2, #0]
 800f702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f704:	2b00      	cmp	r3, #0
 800f706:	f000 84b5 	beq.w	8010074 <_dtoa_r+0xa0c>
 800f70a:	4b94      	ldr	r3, [pc, #592]	; (800f95c <_dtoa_r+0x2f4>)
 800f70c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f70e:	6013      	str	r3, [r2, #0]
 800f710:	3b01      	subs	r3, #1
 800f712:	9302      	str	r3, [sp, #8]
 800f714:	e7e1      	b.n	800f6da <_dtoa_r+0x72>
 800f716:	a913      	add	r1, sp, #76	; 0x4c
 800f718:	aa12      	add	r2, sp, #72	; 0x48
 800f71a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f71e:	4620      	mov	r0, r4
 800f720:	f001 fa19 	bl	8010b56 <__d2b>
 800f724:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800f728:	9001      	str	r0, [sp, #4]
 800f72a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f72c:	2e00      	cmp	r6, #0
 800f72e:	d046      	beq.n	800f7be <_dtoa_r+0x156>
 800f730:	9803      	ldr	r0, [sp, #12]
 800f732:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800f736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f73a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800f73e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f742:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800f746:	2700      	movs	r7, #0
 800f748:	ee07 aa90 	vmov	s15, sl
 800f74c:	ec43 2b16 	vmov	d6, r2, r3
 800f750:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f754:	ed9f 4b78 	vldr	d4, [pc, #480]	; 800f938 <_dtoa_r+0x2d0>
 800f758:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f75c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f760:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f940 <_dtoa_r+0x2d8>
 800f764:	eea7 6b04 	vfma.f64	d6, d7, d4
 800f768:	eeb0 7b46 	vmov.f64	d7, d6
 800f76c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800f948 <_dtoa_r+0x2e0>
 800f770:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f774:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f778:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f780:	ee16 ba90 	vmov	fp, s13
 800f784:	d508      	bpl.n	800f798 <_dtoa_r+0x130>
 800f786:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f78a:	eeb4 6b47 	vcmp.f64	d6, d7
 800f78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f792:	bf18      	it	ne
 800f794:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f798:	f1bb 0f16 	cmp.w	fp, #22
 800f79c:	d834      	bhi.n	800f808 <_dtoa_r+0x1a0>
 800f79e:	4b70      	ldr	r3, [pc, #448]	; (800f960 <_dtoa_r+0x2f8>)
 800f7a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f7a4:	ed93 7b00 	vldr	d7, [r3]
 800f7a8:	ed9d 6b04 	vldr	d6, [sp, #16]
 800f7ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b4:	dd01      	ble.n	800f7ba <_dtoa_r+0x152>
 800f7b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	e025      	b.n	800f80a <_dtoa_r+0x1a2>
 800f7be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f7c0:	eb01 0a03 	add.w	sl, r1, r3
 800f7c4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800f7c8:	2b20      	cmp	r3, #32
 800f7ca:	dd17      	ble.n	800f7fc <_dtoa_r+0x194>
 800f7cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800f7d0:	9a04      	ldr	r2, [sp, #16]
 800f7d2:	409d      	lsls	r5, r3
 800f7d4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800f7d8:	fa22 f303 	lsr.w	r3, r2, r3
 800f7dc:	432b      	orrs	r3, r5
 800f7de:	ee07 3a90 	vmov	s15, r3
 800f7e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f7e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7ee:	9803      	ldr	r0, [sp, #12]
 800f7f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7f4:	2701      	movs	r7, #1
 800f7f6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800f7fa:	e7a5      	b.n	800f748 <_dtoa_r+0xe0>
 800f7fc:	9a04      	ldr	r2, [sp, #16]
 800f7fe:	f1c3 0320 	rsb	r3, r3, #32
 800f802:	fa02 f303 	lsl.w	r3, r2, r3
 800f806:	e7ea      	b.n	800f7de <_dtoa_r+0x176>
 800f808:	2301      	movs	r3, #1
 800f80a:	eba1 0a0a 	sub.w	sl, r1, sl
 800f80e:	9310      	str	r3, [sp, #64]	; 0x40
 800f810:	f1ba 0301 	subs.w	r3, sl, #1
 800f814:	9307      	str	r3, [sp, #28]
 800f816:	bf43      	ittte	mi
 800f818:	2300      	movmi	r3, #0
 800f81a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800f81e:	9307      	strmi	r3, [sp, #28]
 800f820:	f04f 0a00 	movpl.w	sl, #0
 800f824:	f1bb 0f00 	cmp.w	fp, #0
 800f828:	db19      	blt.n	800f85e <_dtoa_r+0x1f6>
 800f82a:	9b07      	ldr	r3, [sp, #28]
 800f82c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f830:	445b      	add	r3, fp
 800f832:	9307      	str	r3, [sp, #28]
 800f834:	f04f 0800 	mov.w	r8, #0
 800f838:	9b08      	ldr	r3, [sp, #32]
 800f83a:	2b09      	cmp	r3, #9
 800f83c:	d863      	bhi.n	800f906 <_dtoa_r+0x29e>
 800f83e:	2b05      	cmp	r3, #5
 800f840:	bfc4      	itt	gt
 800f842:	3b04      	subgt	r3, #4
 800f844:	9308      	strgt	r3, [sp, #32]
 800f846:	9b08      	ldr	r3, [sp, #32]
 800f848:	f1a3 0302 	sub.w	r3, r3, #2
 800f84c:	bfcc      	ite	gt
 800f84e:	2500      	movgt	r5, #0
 800f850:	2501      	movle	r5, #1
 800f852:	2b03      	cmp	r3, #3
 800f854:	d863      	bhi.n	800f91e <_dtoa_r+0x2b6>
 800f856:	e8df f003 	tbb	[pc, r3]
 800f85a:	5452      	.short	0x5452
 800f85c:	4609      	.short	0x4609
 800f85e:	2300      	movs	r3, #0
 800f860:	ebaa 0a0b 	sub.w	sl, sl, fp
 800f864:	f1cb 0800 	rsb	r8, fp, #0
 800f868:	930b      	str	r3, [sp, #44]	; 0x2c
 800f86a:	e7e5      	b.n	800f838 <_dtoa_r+0x1d0>
 800f86c:	2301      	movs	r3, #1
 800f86e:	9309      	str	r3, [sp, #36]	; 0x24
 800f870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f872:	2b00      	cmp	r3, #0
 800f874:	dd56      	ble.n	800f924 <_dtoa_r+0x2bc>
 800f876:	9306      	str	r3, [sp, #24]
 800f878:	4699      	mov	r9, r3
 800f87a:	2200      	movs	r2, #0
 800f87c:	6462      	str	r2, [r4, #68]	; 0x44
 800f87e:	2204      	movs	r2, #4
 800f880:	f102 0014 	add.w	r0, r2, #20
 800f884:	4298      	cmp	r0, r3
 800f886:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f888:	d951      	bls.n	800f92e <_dtoa_r+0x2c6>
 800f88a:	4620      	mov	r0, r4
 800f88c:	f000 ff02 	bl	8010694 <_Balloc>
 800f890:	f1b9 0f0e 	cmp.w	r9, #14
 800f894:	9002      	str	r0, [sp, #8]
 800f896:	6420      	str	r0, [r4, #64]	; 0x40
 800f898:	f200 80c1 	bhi.w	800fa1e <_dtoa_r+0x3b6>
 800f89c:	2d00      	cmp	r5, #0
 800f89e:	f000 80be 	beq.w	800fa1e <_dtoa_r+0x3b6>
 800f8a2:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f8a6:	f1bb 0f00 	cmp.w	fp, #0
 800f8aa:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800f8ae:	f340 80e5 	ble.w	800fa7c <_dtoa_r+0x414>
 800f8b2:	4a2b      	ldr	r2, [pc, #172]	; (800f960 <_dtoa_r+0x2f8>)
 800f8b4:	f00b 030f 	and.w	r3, fp, #15
 800f8b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f8bc:	ed93 7b00 	vldr	d7, [r3]
 800f8c0:	ea4f 132b 	mov.w	r3, fp, asr #4
 800f8c4:	06da      	lsls	r2, r3, #27
 800f8c6:	f140 80d7 	bpl.w	800fa78 <_dtoa_r+0x410>
 800f8ca:	4a26      	ldr	r2, [pc, #152]	; (800f964 <_dtoa_r+0x2fc>)
 800f8cc:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800f8d0:	ed92 6b08 	vldr	d6, [r2, #32]
 800f8d4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800f8d8:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f8dc:	f003 030f 	and.w	r3, r3, #15
 800f8e0:	2203      	movs	r2, #3
 800f8e2:	4920      	ldr	r1, [pc, #128]	; (800f964 <_dtoa_r+0x2fc>)
 800f8e4:	e049      	b.n	800f97a <_dtoa_r+0x312>
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ec:	445b      	add	r3, fp
 800f8ee:	f103 0901 	add.w	r9, r3, #1
 800f8f2:	9306      	str	r3, [sp, #24]
 800f8f4:	464b      	mov	r3, r9
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	bfb8      	it	lt
 800f8fa:	2301      	movlt	r3, #1
 800f8fc:	e7bd      	b.n	800f87a <_dtoa_r+0x212>
 800f8fe:	2300      	movs	r3, #0
 800f900:	e7b5      	b.n	800f86e <_dtoa_r+0x206>
 800f902:	2300      	movs	r3, #0
 800f904:	e7f0      	b.n	800f8e8 <_dtoa_r+0x280>
 800f906:	2501      	movs	r5, #1
 800f908:	2300      	movs	r3, #0
 800f90a:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800f90e:	f04f 33ff 	mov.w	r3, #4294967295
 800f912:	9306      	str	r3, [sp, #24]
 800f914:	4699      	mov	r9, r3
 800f916:	2200      	movs	r2, #0
 800f918:	2312      	movs	r3, #18
 800f91a:	920a      	str	r2, [sp, #40]	; 0x28
 800f91c:	e7ad      	b.n	800f87a <_dtoa_r+0x212>
 800f91e:	2301      	movs	r3, #1
 800f920:	9309      	str	r3, [sp, #36]	; 0x24
 800f922:	e7f4      	b.n	800f90e <_dtoa_r+0x2a6>
 800f924:	2301      	movs	r3, #1
 800f926:	9306      	str	r3, [sp, #24]
 800f928:	4699      	mov	r9, r3
 800f92a:	461a      	mov	r2, r3
 800f92c:	e7f5      	b.n	800f91a <_dtoa_r+0x2b2>
 800f92e:	3101      	adds	r1, #1
 800f930:	6461      	str	r1, [r4, #68]	; 0x44
 800f932:	0052      	lsls	r2, r2, #1
 800f934:	e7a4      	b.n	800f880 <_dtoa_r+0x218>
 800f936:	bf00      	nop
 800f938:	636f4361 	.word	0x636f4361
 800f93c:	3fd287a7 	.word	0x3fd287a7
 800f940:	8b60c8b3 	.word	0x8b60c8b3
 800f944:	3fc68a28 	.word	0x3fc68a28
 800f948:	509f79fb 	.word	0x509f79fb
 800f94c:	3fd34413 	.word	0x3fd34413
 800f950:	7ff00000 	.word	0x7ff00000
 800f954:	080123b9 	.word	0x080123b9
 800f958:	080123b0 	.word	0x080123b0
 800f95c:	0801238f 	.word	0x0801238f
 800f960:	080123e8 	.word	0x080123e8
 800f964:	080123c0 	.word	0x080123c0
 800f968:	07de      	lsls	r6, r3, #31
 800f96a:	d504      	bpl.n	800f976 <_dtoa_r+0x30e>
 800f96c:	ed91 6b00 	vldr	d6, [r1]
 800f970:	3201      	adds	r2, #1
 800f972:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f976:	105b      	asrs	r3, r3, #1
 800f978:	3108      	adds	r1, #8
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d1f4      	bne.n	800f968 <_dtoa_r+0x300>
 800f97e:	ed9d 6b04 	vldr	d6, [sp, #16]
 800f982:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f986:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f98a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f000 80a7 	beq.w	800fae0 <_dtoa_r+0x478>
 800f992:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f996:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f99a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a2:	f140 809d 	bpl.w	800fae0 <_dtoa_r+0x478>
 800f9a6:	f1b9 0f00 	cmp.w	r9, #0
 800f9aa:	f000 8099 	beq.w	800fae0 <_dtoa_r+0x478>
 800f9ae:	9b06      	ldr	r3, [sp, #24]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	dd30      	ble.n	800fa16 <_dtoa_r+0x3ae>
 800f9b4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f9b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f9bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f9c0:	9d06      	ldr	r5, [sp, #24]
 800f9c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f9c6:	3201      	adds	r2, #1
 800f9c8:	ed9d 6b04 	vldr	d6, [sp, #16]
 800f9cc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f9d0:	ee07 2a90 	vmov	s15, r2
 800f9d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f9d8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f9dc:	ed8d 5b04 	vstr	d5, [sp, #16]
 800f9e0:	9a05      	ldr	r2, [sp, #20]
 800f9e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9e6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800f9ea:	2d00      	cmp	r5, #0
 800f9ec:	d17b      	bne.n	800fae6 <_dtoa_r+0x47e>
 800f9ee:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f9f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f9f6:	ec41 0b17 	vmov	d7, r0, r1
 800f9fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa02:	f300 8253 	bgt.w	800feac <_dtoa_r+0x844>
 800fa06:	eeb1 7b47 	vneg.f64	d7, d7
 800fa0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa12:	f100 8249 	bmi.w	800fea8 <_dtoa_r+0x840>
 800fa16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fa1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f2c0 8119 	blt.w	800fc58 <_dtoa_r+0x5f0>
 800fa26:	f1bb 0f0e 	cmp.w	fp, #14
 800fa2a:	f300 8115 	bgt.w	800fc58 <_dtoa_r+0x5f0>
 800fa2e:	4bc3      	ldr	r3, [pc, #780]	; (800fd3c <_dtoa_r+0x6d4>)
 800fa30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa34:	ed93 6b00 	vldr	d6, [r3]
 800fa38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f280 80ba 	bge.w	800fbb4 <_dtoa_r+0x54c>
 800fa40:	f1b9 0f00 	cmp.w	r9, #0
 800fa44:	f300 80b6 	bgt.w	800fbb4 <_dtoa_r+0x54c>
 800fa48:	f040 822d 	bne.w	800fea6 <_dtoa_r+0x83e>
 800fa4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800fa50:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fa54:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fa5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa60:	464d      	mov	r5, r9
 800fa62:	464f      	mov	r7, r9
 800fa64:	f280 8204 	bge.w	800fe70 <_dtoa_r+0x808>
 800fa68:	9b02      	ldr	r3, [sp, #8]
 800fa6a:	9a02      	ldr	r2, [sp, #8]
 800fa6c:	1c5e      	adds	r6, r3, #1
 800fa6e:	2331      	movs	r3, #49	; 0x31
 800fa70:	7013      	strb	r3, [r2, #0]
 800fa72:	f10b 0b01 	add.w	fp, fp, #1
 800fa76:	e1ff      	b.n	800fe78 <_dtoa_r+0x810>
 800fa78:	2202      	movs	r2, #2
 800fa7a:	e732      	b.n	800f8e2 <_dtoa_r+0x27a>
 800fa7c:	d02e      	beq.n	800fadc <_dtoa_r+0x474>
 800fa7e:	f1cb 0300 	rsb	r3, fp, #0
 800fa82:	4aae      	ldr	r2, [pc, #696]	; (800fd3c <_dtoa_r+0x6d4>)
 800fa84:	f003 010f 	and.w	r1, r3, #15
 800fa88:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fa8c:	ed92 7b00 	vldr	d7, [r2]
 800fa90:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800fa94:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fa98:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800fa9c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800faa0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800faa4:	49a6      	ldr	r1, [pc, #664]	; (800fd40 <_dtoa_r+0x6d8>)
 800faa6:	111b      	asrs	r3, r3, #4
 800faa8:	2000      	movs	r0, #0
 800faaa:	2202      	movs	r2, #2
 800faac:	b93b      	cbnz	r3, 800fabe <_dtoa_r+0x456>
 800faae:	2800      	cmp	r0, #0
 800fab0:	f43f af6b 	beq.w	800f98a <_dtoa_r+0x322>
 800fab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fabc:	e765      	b.n	800f98a <_dtoa_r+0x322>
 800fabe:	07dd      	lsls	r5, r3, #31
 800fac0:	d509      	bpl.n	800fad6 <_dtoa_r+0x46e>
 800fac2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800fac6:	ed91 7b00 	vldr	d7, [r1]
 800faca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800face:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800fad2:	3201      	adds	r2, #1
 800fad4:	2001      	movs	r0, #1
 800fad6:	105b      	asrs	r3, r3, #1
 800fad8:	3108      	adds	r1, #8
 800fada:	e7e7      	b.n	800faac <_dtoa_r+0x444>
 800fadc:	2202      	movs	r2, #2
 800fade:	e754      	b.n	800f98a <_dtoa_r+0x322>
 800fae0:	465b      	mov	r3, fp
 800fae2:	464d      	mov	r5, r9
 800fae4:	e770      	b.n	800f9c8 <_dtoa_r+0x360>
 800fae6:	4a95      	ldr	r2, [pc, #596]	; (800fd3c <_dtoa_r+0x6d4>)
 800fae8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800faec:	ed12 4b02 	vldr	d4, [r2, #-8]
 800faf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faf2:	ec41 0b17 	vmov	d7, r0, r1
 800faf6:	b35a      	cbz	r2, 800fb50 <_dtoa_r+0x4e8>
 800faf8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800fafc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800fb00:	9e02      	ldr	r6, [sp, #8]
 800fb02:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fb06:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800fb0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fb0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fb12:	ee14 2a90 	vmov	r2, s9
 800fb16:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fb1a:	3230      	adds	r2, #48	; 0x30
 800fb1c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fb20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb28:	f806 2b01 	strb.w	r2, [r6], #1
 800fb2c:	d43b      	bmi.n	800fba6 <_dtoa_r+0x53e>
 800fb2e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fb32:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb3a:	d472      	bmi.n	800fc22 <_dtoa_r+0x5ba>
 800fb3c:	9a02      	ldr	r2, [sp, #8]
 800fb3e:	1ab2      	subs	r2, r6, r2
 800fb40:	4295      	cmp	r5, r2
 800fb42:	f77f af68 	ble.w	800fa16 <_dtoa_r+0x3ae>
 800fb46:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fb4a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fb4e:	e7de      	b.n	800fb0e <_dtoa_r+0x4a6>
 800fb50:	9a02      	ldr	r2, [sp, #8]
 800fb52:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fb56:	1956      	adds	r6, r2, r5
 800fb58:	4611      	mov	r1, r2
 800fb5a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800fb5e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fb62:	ee14 2a90 	vmov	r2, s9
 800fb66:	3230      	adds	r2, #48	; 0x30
 800fb68:	f801 2b01 	strb.w	r2, [r1], #1
 800fb6c:	42b1      	cmp	r1, r6
 800fb6e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fb72:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fb76:	d11a      	bne.n	800fbae <_dtoa_r+0x546>
 800fb78:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fb7c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800fb80:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800fb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb88:	dc4b      	bgt.n	800fc22 <_dtoa_r+0x5ba>
 800fb8a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fb8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb96:	f57f af3e 	bpl.w	800fa16 <_dtoa_r+0x3ae>
 800fb9a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb9e:	2a30      	cmp	r2, #48	; 0x30
 800fba0:	f106 31ff 	add.w	r1, r6, #4294967295
 800fba4:	d001      	beq.n	800fbaa <_dtoa_r+0x542>
 800fba6:	469b      	mov	fp, r3
 800fba8:	e02a      	b.n	800fc00 <_dtoa_r+0x598>
 800fbaa:	460e      	mov	r6, r1
 800fbac:	e7f5      	b.n	800fb9a <_dtoa_r+0x532>
 800fbae:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fbb2:	e7d4      	b.n	800fb5e <_dtoa_r+0x4f6>
 800fbb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fbb8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800fbbc:	9e02      	ldr	r6, [sp, #8]
 800fbbe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fbc2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fbc6:	ee15 3a10 	vmov	r3, s10
 800fbca:	3330      	adds	r3, #48	; 0x30
 800fbcc:	f806 3b01 	strb.w	r3, [r6], #1
 800fbd0:	9b02      	ldr	r3, [sp, #8]
 800fbd2:	1af3      	subs	r3, r6, r3
 800fbd4:	4599      	cmp	r9, r3
 800fbd6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fbda:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fbde:	d133      	bne.n	800fc48 <_dtoa_r+0x5e0>
 800fbe0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fbe4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbec:	dc18      	bgt.n	800fc20 <_dtoa_r+0x5b8>
 800fbee:	eeb4 7b46 	vcmp.f64	d7, d6
 800fbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf6:	d103      	bne.n	800fc00 <_dtoa_r+0x598>
 800fbf8:	ee15 3a10 	vmov	r3, s10
 800fbfc:	07db      	lsls	r3, r3, #31
 800fbfe:	d40f      	bmi.n	800fc20 <_dtoa_r+0x5b8>
 800fc00:	9901      	ldr	r1, [sp, #4]
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 fd6b 	bl	80106de <_Bfree>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fc0c:	7033      	strb	r3, [r6, #0]
 800fc0e:	f10b 0301 	add.w	r3, fp, #1
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f43f ad5f 	beq.w	800f6da <_dtoa_r+0x72>
 800fc1c:	601e      	str	r6, [r3, #0]
 800fc1e:	e55c      	b.n	800f6da <_dtoa_r+0x72>
 800fc20:	465b      	mov	r3, fp
 800fc22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc26:	2939      	cmp	r1, #57	; 0x39
 800fc28:	f106 32ff 	add.w	r2, r6, #4294967295
 800fc2c:	d106      	bne.n	800fc3c <_dtoa_r+0x5d4>
 800fc2e:	9902      	ldr	r1, [sp, #8]
 800fc30:	4291      	cmp	r1, r2
 800fc32:	d107      	bne.n	800fc44 <_dtoa_r+0x5dc>
 800fc34:	2230      	movs	r2, #48	; 0x30
 800fc36:	700a      	strb	r2, [r1, #0]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	460a      	mov	r2, r1
 800fc3c:	7811      	ldrb	r1, [r2, #0]
 800fc3e:	3101      	adds	r1, #1
 800fc40:	7011      	strb	r1, [r2, #0]
 800fc42:	e7b0      	b.n	800fba6 <_dtoa_r+0x53e>
 800fc44:	4616      	mov	r6, r2
 800fc46:	e7ec      	b.n	800fc22 <_dtoa_r+0x5ba>
 800fc48:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fc4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc54:	d1b3      	bne.n	800fbbe <_dtoa_r+0x556>
 800fc56:	e7d3      	b.n	800fc00 <_dtoa_r+0x598>
 800fc58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc5a:	2a00      	cmp	r2, #0
 800fc5c:	f000 808d 	beq.w	800fd7a <_dtoa_r+0x712>
 800fc60:	9a08      	ldr	r2, [sp, #32]
 800fc62:	2a01      	cmp	r2, #1
 800fc64:	dc72      	bgt.n	800fd4c <_dtoa_r+0x6e4>
 800fc66:	2f00      	cmp	r7, #0
 800fc68:	d06c      	beq.n	800fd44 <_dtoa_r+0x6dc>
 800fc6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc6e:	4645      	mov	r5, r8
 800fc70:	4656      	mov	r6, sl
 800fc72:	9a07      	ldr	r2, [sp, #28]
 800fc74:	2101      	movs	r1, #1
 800fc76:	441a      	add	r2, r3
 800fc78:	4620      	mov	r0, r4
 800fc7a:	449a      	add	sl, r3
 800fc7c:	9207      	str	r2, [sp, #28]
 800fc7e:	f000 fdc0 	bl	8010802 <__i2b>
 800fc82:	4607      	mov	r7, r0
 800fc84:	2e00      	cmp	r6, #0
 800fc86:	dd0b      	ble.n	800fca0 <_dtoa_r+0x638>
 800fc88:	9b07      	ldr	r3, [sp, #28]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	dd08      	ble.n	800fca0 <_dtoa_r+0x638>
 800fc8e:	42b3      	cmp	r3, r6
 800fc90:	9a07      	ldr	r2, [sp, #28]
 800fc92:	bfa8      	it	ge
 800fc94:	4633      	movge	r3, r6
 800fc96:	ebaa 0a03 	sub.w	sl, sl, r3
 800fc9a:	1af6      	subs	r6, r6, r3
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	9307      	str	r3, [sp, #28]
 800fca0:	f1b8 0f00 	cmp.w	r8, #0
 800fca4:	d01d      	beq.n	800fce2 <_dtoa_r+0x67a>
 800fca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d06a      	beq.n	800fd82 <_dtoa_r+0x71a>
 800fcac:	b18d      	cbz	r5, 800fcd2 <_dtoa_r+0x66a>
 800fcae:	4639      	mov	r1, r7
 800fcb0:	462a      	mov	r2, r5
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	f000 fe44 	bl	8010940 <__pow5mult>
 800fcb8:	9a01      	ldr	r2, [sp, #4]
 800fcba:	4601      	mov	r1, r0
 800fcbc:	4607      	mov	r7, r0
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f000 fda8 	bl	8010814 <__multiply>
 800fcc4:	9901      	ldr	r1, [sp, #4]
 800fcc6:	900c      	str	r0, [sp, #48]	; 0x30
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f000 fd08 	bl	80106de <_Bfree>
 800fcce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	ebb8 0205 	subs.w	r2, r8, r5
 800fcd6:	d004      	beq.n	800fce2 <_dtoa_r+0x67a>
 800fcd8:	9901      	ldr	r1, [sp, #4]
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f000 fe30 	bl	8010940 <__pow5mult>
 800fce0:	9001      	str	r0, [sp, #4]
 800fce2:	2101      	movs	r1, #1
 800fce4:	4620      	mov	r0, r4
 800fce6:	f000 fd8c 	bl	8010802 <__i2b>
 800fcea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcec:	4605      	mov	r5, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 81ca 	beq.w	8010088 <_dtoa_r+0xa20>
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	4601      	mov	r1, r0
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f000 fe21 	bl	8010940 <__pow5mult>
 800fcfe:	9b08      	ldr	r3, [sp, #32]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	4605      	mov	r5, r0
 800fd04:	dc44      	bgt.n	800fd90 <_dtoa_r+0x728>
 800fd06:	9b04      	ldr	r3, [sp, #16]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d13c      	bne.n	800fd86 <_dtoa_r+0x71e>
 800fd0c:	9b05      	ldr	r3, [sp, #20]
 800fd0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d137      	bne.n	800fd86 <_dtoa_r+0x71e>
 800fd16:	9b05      	ldr	r3, [sp, #20]
 800fd18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd1c:	0d1b      	lsrs	r3, r3, #20
 800fd1e:	051b      	lsls	r3, r3, #20
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d033      	beq.n	800fd8c <_dtoa_r+0x724>
 800fd24:	9b07      	ldr	r3, [sp, #28]
 800fd26:	3301      	adds	r3, #1
 800fd28:	f10a 0a01 	add.w	sl, sl, #1
 800fd2c:	9307      	str	r3, [sp, #28]
 800fd2e:	f04f 0801 	mov.w	r8, #1
 800fd32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd34:	bb73      	cbnz	r3, 800fd94 <_dtoa_r+0x72c>
 800fd36:	2001      	movs	r0, #1
 800fd38:	e034      	b.n	800fda4 <_dtoa_r+0x73c>
 800fd3a:	bf00      	nop
 800fd3c:	080123e8 	.word	0x080123e8
 800fd40:	080123c0 	.word	0x080123c0
 800fd44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fd46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fd4a:	e790      	b.n	800fc6e <_dtoa_r+0x606>
 800fd4c:	f109 35ff 	add.w	r5, r9, #4294967295
 800fd50:	45a8      	cmp	r8, r5
 800fd52:	bfbf      	itttt	lt
 800fd54:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800fd56:	eba5 0808 	sublt.w	r8, r5, r8
 800fd5a:	4443      	addlt	r3, r8
 800fd5c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800fd5e:	bfb6      	itet	lt
 800fd60:	46a8      	movlt	r8, r5
 800fd62:	eba8 0505 	subge.w	r5, r8, r5
 800fd66:	2500      	movlt	r5, #0
 800fd68:	f1b9 0f00 	cmp.w	r9, #0
 800fd6c:	bfb9      	ittee	lt
 800fd6e:	ebaa 0609 	sublt.w	r6, sl, r9
 800fd72:	2300      	movlt	r3, #0
 800fd74:	4656      	movge	r6, sl
 800fd76:	464b      	movge	r3, r9
 800fd78:	e77b      	b.n	800fc72 <_dtoa_r+0x60a>
 800fd7a:	4645      	mov	r5, r8
 800fd7c:	4656      	mov	r6, sl
 800fd7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fd80:	e780      	b.n	800fc84 <_dtoa_r+0x61c>
 800fd82:	4642      	mov	r2, r8
 800fd84:	e7a8      	b.n	800fcd8 <_dtoa_r+0x670>
 800fd86:	f04f 0800 	mov.w	r8, #0
 800fd8a:	e7d2      	b.n	800fd32 <_dtoa_r+0x6ca>
 800fd8c:	4698      	mov	r8, r3
 800fd8e:	e7d0      	b.n	800fd32 <_dtoa_r+0x6ca>
 800fd90:	f04f 0800 	mov.w	r8, #0
 800fd94:	692b      	ldr	r3, [r5, #16]
 800fd96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fd9a:	6918      	ldr	r0, [r3, #16]
 800fd9c:	f000 fce3 	bl	8010766 <__hi0bits>
 800fda0:	f1c0 0020 	rsb	r0, r0, #32
 800fda4:	9b07      	ldr	r3, [sp, #28]
 800fda6:	4418      	add	r0, r3
 800fda8:	f010 001f 	ands.w	r0, r0, #31
 800fdac:	d047      	beq.n	800fe3e <_dtoa_r+0x7d6>
 800fdae:	f1c0 0320 	rsb	r3, r0, #32
 800fdb2:	2b04      	cmp	r3, #4
 800fdb4:	dd3b      	ble.n	800fe2e <_dtoa_r+0x7c6>
 800fdb6:	9b07      	ldr	r3, [sp, #28]
 800fdb8:	f1c0 001c 	rsb	r0, r0, #28
 800fdbc:	4482      	add	sl, r0
 800fdbe:	4406      	add	r6, r0
 800fdc0:	4403      	add	r3, r0
 800fdc2:	9307      	str	r3, [sp, #28]
 800fdc4:	f1ba 0f00 	cmp.w	sl, #0
 800fdc8:	dd05      	ble.n	800fdd6 <_dtoa_r+0x76e>
 800fdca:	4652      	mov	r2, sl
 800fdcc:	9901      	ldr	r1, [sp, #4]
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f000 fdf6 	bl	80109c0 <__lshift>
 800fdd4:	9001      	str	r0, [sp, #4]
 800fdd6:	9b07      	ldr	r3, [sp, #28]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dd05      	ble.n	800fde8 <_dtoa_r+0x780>
 800fddc:	4629      	mov	r1, r5
 800fdde:	461a      	mov	r2, r3
 800fde0:	4620      	mov	r0, r4
 800fde2:	f000 fded 	bl	80109c0 <__lshift>
 800fde6:	4605      	mov	r5, r0
 800fde8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fdea:	b353      	cbz	r3, 800fe42 <_dtoa_r+0x7da>
 800fdec:	4629      	mov	r1, r5
 800fdee:	9801      	ldr	r0, [sp, #4]
 800fdf0:	f000 fe3a 	bl	8010a68 <__mcmp>
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	da24      	bge.n	800fe42 <_dtoa_r+0x7da>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	220a      	movs	r2, #10
 800fdfc:	9901      	ldr	r1, [sp, #4]
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f000 fc76 	bl	80106f0 <__multadd>
 800fe04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe06:	9001      	str	r0, [sp, #4]
 800fe08:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f000 8142 	beq.w	8010096 <_dtoa_r+0xa2e>
 800fe12:	2300      	movs	r3, #0
 800fe14:	4639      	mov	r1, r7
 800fe16:	220a      	movs	r2, #10
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f000 fc69 	bl	80106f0 <__multadd>
 800fe1e:	9b06      	ldr	r3, [sp, #24]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	4607      	mov	r7, r0
 800fe24:	dc4b      	bgt.n	800febe <_dtoa_r+0x856>
 800fe26:	9b08      	ldr	r3, [sp, #32]
 800fe28:	2b02      	cmp	r3, #2
 800fe2a:	dd48      	ble.n	800febe <_dtoa_r+0x856>
 800fe2c:	e011      	b.n	800fe52 <_dtoa_r+0x7ea>
 800fe2e:	d0c9      	beq.n	800fdc4 <_dtoa_r+0x75c>
 800fe30:	9a07      	ldr	r2, [sp, #28]
 800fe32:	331c      	adds	r3, #28
 800fe34:	441a      	add	r2, r3
 800fe36:	449a      	add	sl, r3
 800fe38:	441e      	add	r6, r3
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	e7c1      	b.n	800fdc2 <_dtoa_r+0x75a>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	e7f6      	b.n	800fe30 <_dtoa_r+0x7c8>
 800fe42:	f1b9 0f00 	cmp.w	r9, #0
 800fe46:	dc34      	bgt.n	800feb2 <_dtoa_r+0x84a>
 800fe48:	9b08      	ldr	r3, [sp, #32]
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	dd31      	ble.n	800feb2 <_dtoa_r+0x84a>
 800fe4e:	f8cd 9018 	str.w	r9, [sp, #24]
 800fe52:	9b06      	ldr	r3, [sp, #24]
 800fe54:	b963      	cbnz	r3, 800fe70 <_dtoa_r+0x808>
 800fe56:	4629      	mov	r1, r5
 800fe58:	2205      	movs	r2, #5
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 fc48 	bl	80106f0 <__multadd>
 800fe60:	4601      	mov	r1, r0
 800fe62:	4605      	mov	r5, r0
 800fe64:	9801      	ldr	r0, [sp, #4]
 800fe66:	f000 fdff 	bl	8010a68 <__mcmp>
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	f73f adfc 	bgt.w	800fa68 <_dtoa_r+0x400>
 800fe70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe72:	9e02      	ldr	r6, [sp, #8]
 800fe74:	ea6f 0b03 	mvn.w	fp, r3
 800fe78:	f04f 0900 	mov.w	r9, #0
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f000 fc2d 	bl	80106de <_Bfree>
 800fe84:	2f00      	cmp	r7, #0
 800fe86:	f43f aebb 	beq.w	800fc00 <_dtoa_r+0x598>
 800fe8a:	f1b9 0f00 	cmp.w	r9, #0
 800fe8e:	d005      	beq.n	800fe9c <_dtoa_r+0x834>
 800fe90:	45b9      	cmp	r9, r7
 800fe92:	d003      	beq.n	800fe9c <_dtoa_r+0x834>
 800fe94:	4649      	mov	r1, r9
 800fe96:	4620      	mov	r0, r4
 800fe98:	f000 fc21 	bl	80106de <_Bfree>
 800fe9c:	4639      	mov	r1, r7
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f000 fc1d 	bl	80106de <_Bfree>
 800fea4:	e6ac      	b.n	800fc00 <_dtoa_r+0x598>
 800fea6:	2500      	movs	r5, #0
 800fea8:	462f      	mov	r7, r5
 800feaa:	e7e1      	b.n	800fe70 <_dtoa_r+0x808>
 800feac:	469b      	mov	fp, r3
 800feae:	462f      	mov	r7, r5
 800feb0:	e5da      	b.n	800fa68 <_dtoa_r+0x400>
 800feb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feb4:	f8cd 9018 	str.w	r9, [sp, #24]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 80f3 	beq.w	80100a4 <_dtoa_r+0xa3c>
 800febe:	2e00      	cmp	r6, #0
 800fec0:	dd05      	ble.n	800fece <_dtoa_r+0x866>
 800fec2:	4639      	mov	r1, r7
 800fec4:	4632      	mov	r2, r6
 800fec6:	4620      	mov	r0, r4
 800fec8:	f000 fd7a 	bl	80109c0 <__lshift>
 800fecc:	4607      	mov	r7, r0
 800fece:	f1b8 0f00 	cmp.w	r8, #0
 800fed2:	d04c      	beq.n	800ff6e <_dtoa_r+0x906>
 800fed4:	6879      	ldr	r1, [r7, #4]
 800fed6:	4620      	mov	r0, r4
 800fed8:	f000 fbdc 	bl	8010694 <_Balloc>
 800fedc:	693a      	ldr	r2, [r7, #16]
 800fede:	3202      	adds	r2, #2
 800fee0:	4606      	mov	r6, r0
 800fee2:	0092      	lsls	r2, r2, #2
 800fee4:	f107 010c 	add.w	r1, r7, #12
 800fee8:	300c      	adds	r0, #12
 800feea:	f7fd fdda 	bl	800daa2 <memcpy>
 800feee:	2201      	movs	r2, #1
 800fef0:	4631      	mov	r1, r6
 800fef2:	4620      	mov	r0, r4
 800fef4:	f000 fd64 	bl	80109c0 <__lshift>
 800fef8:	9b04      	ldr	r3, [sp, #16]
 800fefa:	f8dd a008 	ldr.w	sl, [sp, #8]
 800fefe:	f003 0301 	and.w	r3, r3, #1
 800ff02:	46b9      	mov	r9, r7
 800ff04:	9307      	str	r3, [sp, #28]
 800ff06:	4607      	mov	r7, r0
 800ff08:	4629      	mov	r1, r5
 800ff0a:	9801      	ldr	r0, [sp, #4]
 800ff0c:	f7ff fb20 	bl	800f550 <quorem>
 800ff10:	4649      	mov	r1, r9
 800ff12:	4606      	mov	r6, r0
 800ff14:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ff18:	9801      	ldr	r0, [sp, #4]
 800ff1a:	f000 fda5 	bl	8010a68 <__mcmp>
 800ff1e:	463a      	mov	r2, r7
 800ff20:	9004      	str	r0, [sp, #16]
 800ff22:	4629      	mov	r1, r5
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 fdb9 	bl	8010a9c <__mdiff>
 800ff2a:	68c3      	ldr	r3, [r0, #12]
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	bb03      	cbnz	r3, 800ff72 <_dtoa_r+0x90a>
 800ff30:	4601      	mov	r1, r0
 800ff32:	9009      	str	r0, [sp, #36]	; 0x24
 800ff34:	9801      	ldr	r0, [sp, #4]
 800ff36:	f000 fd97 	bl	8010a68 <__mcmp>
 800ff3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4620      	mov	r0, r4
 800ff42:	9309      	str	r3, [sp, #36]	; 0x24
 800ff44:	f000 fbcb 	bl	80106de <_Bfree>
 800ff48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff4a:	b9a3      	cbnz	r3, 800ff76 <_dtoa_r+0x90e>
 800ff4c:	9a08      	ldr	r2, [sp, #32]
 800ff4e:	b992      	cbnz	r2, 800ff76 <_dtoa_r+0x90e>
 800ff50:	9a07      	ldr	r2, [sp, #28]
 800ff52:	b982      	cbnz	r2, 800ff76 <_dtoa_r+0x90e>
 800ff54:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff58:	d029      	beq.n	800ffae <_dtoa_r+0x946>
 800ff5a:	9b04      	ldr	r3, [sp, #16]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	dd01      	ble.n	800ff64 <_dtoa_r+0x8fc>
 800ff60:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800ff64:	f10a 0601 	add.w	r6, sl, #1
 800ff68:	f88a 8000 	strb.w	r8, [sl]
 800ff6c:	e786      	b.n	800fe7c <_dtoa_r+0x814>
 800ff6e:	4638      	mov	r0, r7
 800ff70:	e7c2      	b.n	800fef8 <_dtoa_r+0x890>
 800ff72:	2301      	movs	r3, #1
 800ff74:	e7e3      	b.n	800ff3e <_dtoa_r+0x8d6>
 800ff76:	9a04      	ldr	r2, [sp, #16]
 800ff78:	2a00      	cmp	r2, #0
 800ff7a:	db04      	blt.n	800ff86 <_dtoa_r+0x91e>
 800ff7c:	d124      	bne.n	800ffc8 <_dtoa_r+0x960>
 800ff7e:	9a08      	ldr	r2, [sp, #32]
 800ff80:	bb12      	cbnz	r2, 800ffc8 <_dtoa_r+0x960>
 800ff82:	9a07      	ldr	r2, [sp, #28]
 800ff84:	bb02      	cbnz	r2, 800ffc8 <_dtoa_r+0x960>
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	ddec      	ble.n	800ff64 <_dtoa_r+0x8fc>
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	9901      	ldr	r1, [sp, #4]
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f000 fd16 	bl	80109c0 <__lshift>
 800ff94:	4629      	mov	r1, r5
 800ff96:	9001      	str	r0, [sp, #4]
 800ff98:	f000 fd66 	bl	8010a68 <__mcmp>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	dc03      	bgt.n	800ffa8 <_dtoa_r+0x940>
 800ffa0:	d1e0      	bne.n	800ff64 <_dtoa_r+0x8fc>
 800ffa2:	f018 0f01 	tst.w	r8, #1
 800ffa6:	d0dd      	beq.n	800ff64 <_dtoa_r+0x8fc>
 800ffa8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ffac:	d1d8      	bne.n	800ff60 <_dtoa_r+0x8f8>
 800ffae:	2339      	movs	r3, #57	; 0x39
 800ffb0:	f10a 0601 	add.w	r6, sl, #1
 800ffb4:	f88a 3000 	strb.w	r3, [sl]
 800ffb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ffbc:	2b39      	cmp	r3, #57	; 0x39
 800ffbe:	f106 32ff 	add.w	r2, r6, #4294967295
 800ffc2:	d04c      	beq.n	801005e <_dtoa_r+0x9f6>
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	e051      	b.n	801006c <_dtoa_r+0xa04>
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f10a 0601 	add.w	r6, sl, #1
 800ffce:	dd05      	ble.n	800ffdc <_dtoa_r+0x974>
 800ffd0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ffd4:	d0eb      	beq.n	800ffae <_dtoa_r+0x946>
 800ffd6:	f108 0801 	add.w	r8, r8, #1
 800ffda:	e7c5      	b.n	800ff68 <_dtoa_r+0x900>
 800ffdc:	9b02      	ldr	r3, [sp, #8]
 800ffde:	9a06      	ldr	r2, [sp, #24]
 800ffe0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800ffe4:	1af3      	subs	r3, r6, r3
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d021      	beq.n	801002e <_dtoa_r+0x9c6>
 800ffea:	2300      	movs	r3, #0
 800ffec:	220a      	movs	r2, #10
 800ffee:	9901      	ldr	r1, [sp, #4]
 800fff0:	4620      	mov	r0, r4
 800fff2:	f000 fb7d 	bl	80106f0 <__multadd>
 800fff6:	45b9      	cmp	r9, r7
 800fff8:	9001      	str	r0, [sp, #4]
 800fffa:	f04f 0300 	mov.w	r3, #0
 800fffe:	f04f 020a 	mov.w	r2, #10
 8010002:	4649      	mov	r1, r9
 8010004:	4620      	mov	r0, r4
 8010006:	d105      	bne.n	8010014 <_dtoa_r+0x9ac>
 8010008:	f000 fb72 	bl	80106f0 <__multadd>
 801000c:	4681      	mov	r9, r0
 801000e:	4607      	mov	r7, r0
 8010010:	46b2      	mov	sl, r6
 8010012:	e779      	b.n	800ff08 <_dtoa_r+0x8a0>
 8010014:	f000 fb6c 	bl	80106f0 <__multadd>
 8010018:	4639      	mov	r1, r7
 801001a:	4681      	mov	r9, r0
 801001c:	2300      	movs	r3, #0
 801001e:	220a      	movs	r2, #10
 8010020:	4620      	mov	r0, r4
 8010022:	f000 fb65 	bl	80106f0 <__multadd>
 8010026:	4607      	mov	r7, r0
 8010028:	e7f2      	b.n	8010010 <_dtoa_r+0x9a8>
 801002a:	f04f 0900 	mov.w	r9, #0
 801002e:	2201      	movs	r2, #1
 8010030:	9901      	ldr	r1, [sp, #4]
 8010032:	4620      	mov	r0, r4
 8010034:	f000 fcc4 	bl	80109c0 <__lshift>
 8010038:	4629      	mov	r1, r5
 801003a:	9001      	str	r0, [sp, #4]
 801003c:	f000 fd14 	bl	8010a68 <__mcmp>
 8010040:	2800      	cmp	r0, #0
 8010042:	dcb9      	bgt.n	800ffb8 <_dtoa_r+0x950>
 8010044:	d102      	bne.n	801004c <_dtoa_r+0x9e4>
 8010046:	f018 0f01 	tst.w	r8, #1
 801004a:	d1b5      	bne.n	800ffb8 <_dtoa_r+0x950>
 801004c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010050:	2b30      	cmp	r3, #48	; 0x30
 8010052:	f106 32ff 	add.w	r2, r6, #4294967295
 8010056:	f47f af11 	bne.w	800fe7c <_dtoa_r+0x814>
 801005a:	4616      	mov	r6, r2
 801005c:	e7f6      	b.n	801004c <_dtoa_r+0x9e4>
 801005e:	9b02      	ldr	r3, [sp, #8]
 8010060:	4293      	cmp	r3, r2
 8010062:	d105      	bne.n	8010070 <_dtoa_r+0xa08>
 8010064:	9a02      	ldr	r2, [sp, #8]
 8010066:	f10b 0b01 	add.w	fp, fp, #1
 801006a:	2331      	movs	r3, #49	; 0x31
 801006c:	7013      	strb	r3, [r2, #0]
 801006e:	e705      	b.n	800fe7c <_dtoa_r+0x814>
 8010070:	4616      	mov	r6, r2
 8010072:	e7a1      	b.n	800ffb8 <_dtoa_r+0x950>
 8010074:	4b16      	ldr	r3, [pc, #88]	; (80100d0 <_dtoa_r+0xa68>)
 8010076:	f7ff bb4c 	b.w	800f712 <_dtoa_r+0xaa>
 801007a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801007c:	2b00      	cmp	r3, #0
 801007e:	f47f ab30 	bne.w	800f6e2 <_dtoa_r+0x7a>
 8010082:	4b14      	ldr	r3, [pc, #80]	; (80100d4 <_dtoa_r+0xa6c>)
 8010084:	f7ff bb45 	b.w	800f712 <_dtoa_r+0xaa>
 8010088:	9b08      	ldr	r3, [sp, #32]
 801008a:	2b01      	cmp	r3, #1
 801008c:	f77f ae3b 	ble.w	800fd06 <_dtoa_r+0x69e>
 8010090:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8010094:	e64f      	b.n	800fd36 <_dtoa_r+0x6ce>
 8010096:	9b06      	ldr	r3, [sp, #24]
 8010098:	2b00      	cmp	r3, #0
 801009a:	dc03      	bgt.n	80100a4 <_dtoa_r+0xa3c>
 801009c:	9b08      	ldr	r3, [sp, #32]
 801009e:	2b02      	cmp	r3, #2
 80100a0:	f73f aed7 	bgt.w	800fe52 <_dtoa_r+0x7ea>
 80100a4:	9e02      	ldr	r6, [sp, #8]
 80100a6:	9801      	ldr	r0, [sp, #4]
 80100a8:	4629      	mov	r1, r5
 80100aa:	f7ff fa51 	bl	800f550 <quorem>
 80100ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80100b2:	f806 8b01 	strb.w	r8, [r6], #1
 80100b6:	9b02      	ldr	r3, [sp, #8]
 80100b8:	9a06      	ldr	r2, [sp, #24]
 80100ba:	1af3      	subs	r3, r6, r3
 80100bc:	429a      	cmp	r2, r3
 80100be:	ddb4      	ble.n	801002a <_dtoa_r+0x9c2>
 80100c0:	2300      	movs	r3, #0
 80100c2:	220a      	movs	r2, #10
 80100c4:	9901      	ldr	r1, [sp, #4]
 80100c6:	4620      	mov	r0, r4
 80100c8:	f000 fb12 	bl	80106f0 <__multadd>
 80100cc:	9001      	str	r0, [sp, #4]
 80100ce:	e7ea      	b.n	80100a6 <_dtoa_r+0xa3e>
 80100d0:	0801238e 	.word	0x0801238e
 80100d4:	080123b0 	.word	0x080123b0

080100d8 <__sflush_r>:
 80100d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100dc:	b293      	uxth	r3, r2
 80100de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e2:	4605      	mov	r5, r0
 80100e4:	0718      	lsls	r0, r3, #28
 80100e6:	460c      	mov	r4, r1
 80100e8:	d45f      	bmi.n	80101aa <__sflush_r+0xd2>
 80100ea:	684b      	ldr	r3, [r1, #4]
 80100ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	818a      	strh	r2, [r1, #12]
 80100f4:	dc05      	bgt.n	8010102 <__sflush_r+0x2a>
 80100f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	dc02      	bgt.n	8010102 <__sflush_r+0x2a>
 80100fc:	2000      	movs	r0, #0
 80100fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010104:	2e00      	cmp	r6, #0
 8010106:	d0f9      	beq.n	80100fc <__sflush_r+0x24>
 8010108:	2300      	movs	r3, #0
 801010a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801010e:	682f      	ldr	r7, [r5, #0]
 8010110:	69e1      	ldr	r1, [r4, #28]
 8010112:	602b      	str	r3, [r5, #0]
 8010114:	d036      	beq.n	8010184 <__sflush_r+0xac>
 8010116:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010118:	89a3      	ldrh	r3, [r4, #12]
 801011a:	075a      	lsls	r2, r3, #29
 801011c:	d505      	bpl.n	801012a <__sflush_r+0x52>
 801011e:	6863      	ldr	r3, [r4, #4]
 8010120:	1ac0      	subs	r0, r0, r3
 8010122:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010124:	b10b      	cbz	r3, 801012a <__sflush_r+0x52>
 8010126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010128:	1ac0      	subs	r0, r0, r3
 801012a:	2300      	movs	r3, #0
 801012c:	4602      	mov	r2, r0
 801012e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010130:	69e1      	ldr	r1, [r4, #28]
 8010132:	4628      	mov	r0, r5
 8010134:	47b0      	blx	r6
 8010136:	1c43      	adds	r3, r0, #1
 8010138:	89a3      	ldrh	r3, [r4, #12]
 801013a:	d106      	bne.n	801014a <__sflush_r+0x72>
 801013c:	6829      	ldr	r1, [r5, #0]
 801013e:	291d      	cmp	r1, #29
 8010140:	d84c      	bhi.n	80101dc <__sflush_r+0x104>
 8010142:	4a2b      	ldr	r2, [pc, #172]	; (80101f0 <__sflush_r+0x118>)
 8010144:	40ca      	lsrs	r2, r1
 8010146:	07d6      	lsls	r6, r2, #31
 8010148:	d548      	bpl.n	80101dc <__sflush_r+0x104>
 801014a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801014e:	b21b      	sxth	r3, r3
 8010150:	2200      	movs	r2, #0
 8010152:	6062      	str	r2, [r4, #4]
 8010154:	04d9      	lsls	r1, r3, #19
 8010156:	6922      	ldr	r2, [r4, #16]
 8010158:	81a3      	strh	r3, [r4, #12]
 801015a:	6022      	str	r2, [r4, #0]
 801015c:	d504      	bpl.n	8010168 <__sflush_r+0x90>
 801015e:	1c42      	adds	r2, r0, #1
 8010160:	d101      	bne.n	8010166 <__sflush_r+0x8e>
 8010162:	682b      	ldr	r3, [r5, #0]
 8010164:	b903      	cbnz	r3, 8010168 <__sflush_r+0x90>
 8010166:	6520      	str	r0, [r4, #80]	; 0x50
 8010168:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801016a:	602f      	str	r7, [r5, #0]
 801016c:	2900      	cmp	r1, #0
 801016e:	d0c5      	beq.n	80100fc <__sflush_r+0x24>
 8010170:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010174:	4299      	cmp	r1, r3
 8010176:	d002      	beq.n	801017e <__sflush_r+0xa6>
 8010178:	4628      	mov	r0, r5
 801017a:	f000 f937 	bl	80103ec <_free_r>
 801017e:	2000      	movs	r0, #0
 8010180:	6320      	str	r0, [r4, #48]	; 0x30
 8010182:	e7bc      	b.n	80100fe <__sflush_r+0x26>
 8010184:	2301      	movs	r3, #1
 8010186:	4628      	mov	r0, r5
 8010188:	47b0      	blx	r6
 801018a:	1c41      	adds	r1, r0, #1
 801018c:	d1c4      	bne.n	8010118 <__sflush_r+0x40>
 801018e:	682b      	ldr	r3, [r5, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d0c1      	beq.n	8010118 <__sflush_r+0x40>
 8010194:	2b1d      	cmp	r3, #29
 8010196:	d001      	beq.n	801019c <__sflush_r+0xc4>
 8010198:	2b16      	cmp	r3, #22
 801019a:	d101      	bne.n	80101a0 <__sflush_r+0xc8>
 801019c:	602f      	str	r7, [r5, #0]
 801019e:	e7ad      	b.n	80100fc <__sflush_r+0x24>
 80101a0:	89a3      	ldrh	r3, [r4, #12]
 80101a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101a6:	81a3      	strh	r3, [r4, #12]
 80101a8:	e7a9      	b.n	80100fe <__sflush_r+0x26>
 80101aa:	690f      	ldr	r7, [r1, #16]
 80101ac:	2f00      	cmp	r7, #0
 80101ae:	d0a5      	beq.n	80100fc <__sflush_r+0x24>
 80101b0:	079b      	lsls	r3, r3, #30
 80101b2:	680e      	ldr	r6, [r1, #0]
 80101b4:	bf08      	it	eq
 80101b6:	694b      	ldreq	r3, [r1, #20]
 80101b8:	600f      	str	r7, [r1, #0]
 80101ba:	bf18      	it	ne
 80101bc:	2300      	movne	r3, #0
 80101be:	eba6 0807 	sub.w	r8, r6, r7
 80101c2:	608b      	str	r3, [r1, #8]
 80101c4:	f1b8 0f00 	cmp.w	r8, #0
 80101c8:	dd98      	ble.n	80100fc <__sflush_r+0x24>
 80101ca:	4643      	mov	r3, r8
 80101cc:	463a      	mov	r2, r7
 80101ce:	69e1      	ldr	r1, [r4, #28]
 80101d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80101d2:	4628      	mov	r0, r5
 80101d4:	47b0      	blx	r6
 80101d6:	2800      	cmp	r0, #0
 80101d8:	dc06      	bgt.n	80101e8 <__sflush_r+0x110>
 80101da:	89a3      	ldrh	r3, [r4, #12]
 80101dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101e0:	81a3      	strh	r3, [r4, #12]
 80101e2:	f04f 30ff 	mov.w	r0, #4294967295
 80101e6:	e78a      	b.n	80100fe <__sflush_r+0x26>
 80101e8:	4407      	add	r7, r0
 80101ea:	eba8 0800 	sub.w	r8, r8, r0
 80101ee:	e7e9      	b.n	80101c4 <__sflush_r+0xec>
 80101f0:	20400001 	.word	0x20400001

080101f4 <_fflush_r>:
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	460c      	mov	r4, r1
 80101f8:	4605      	mov	r5, r0
 80101fa:	b118      	cbz	r0, 8010204 <_fflush_r+0x10>
 80101fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80101fe:	b90b      	cbnz	r3, 8010204 <_fflush_r+0x10>
 8010200:	f000 f864 	bl	80102cc <__sinit>
 8010204:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8010208:	b1b8      	cbz	r0, 801023a <_fflush_r+0x46>
 801020a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801020c:	07db      	lsls	r3, r3, #31
 801020e:	d404      	bmi.n	801021a <_fflush_r+0x26>
 8010210:	0581      	lsls	r1, r0, #22
 8010212:	d402      	bmi.n	801021a <_fflush_r+0x26>
 8010214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010216:	f7fd f9ed 	bl	800d5f4 <__retarget_lock_acquire_recursive>
 801021a:	4628      	mov	r0, r5
 801021c:	4621      	mov	r1, r4
 801021e:	f7ff ff5b 	bl	80100d8 <__sflush_r>
 8010222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010224:	07da      	lsls	r2, r3, #31
 8010226:	4605      	mov	r5, r0
 8010228:	d405      	bmi.n	8010236 <_fflush_r+0x42>
 801022a:	89a3      	ldrh	r3, [r4, #12]
 801022c:	059b      	lsls	r3, r3, #22
 801022e:	d402      	bmi.n	8010236 <_fflush_r+0x42>
 8010230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010232:	f7fd f9e0 	bl	800d5f6 <__retarget_lock_release_recursive>
 8010236:	4628      	mov	r0, r5
 8010238:	bd38      	pop	{r3, r4, r5, pc}
 801023a:	4605      	mov	r5, r0
 801023c:	e7fb      	b.n	8010236 <_fflush_r+0x42>
	...

08010240 <std>:
 8010240:	2300      	movs	r3, #0
 8010242:	b510      	push	{r4, lr}
 8010244:	4604      	mov	r4, r0
 8010246:	e9c0 3300 	strd	r3, r3, [r0]
 801024a:	6083      	str	r3, [r0, #8]
 801024c:	8181      	strh	r1, [r0, #12]
 801024e:	6643      	str	r3, [r0, #100]	; 0x64
 8010250:	81c2      	strh	r2, [r0, #14]
 8010252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010256:	6183      	str	r3, [r0, #24]
 8010258:	4619      	mov	r1, r3
 801025a:	2208      	movs	r2, #8
 801025c:	305c      	adds	r0, #92	; 0x5c
 801025e:	f7fd fc44 	bl	800daea <memset>
 8010262:	4b07      	ldr	r3, [pc, #28]	; (8010280 <std+0x40>)
 8010264:	6223      	str	r3, [r4, #32]
 8010266:	4b07      	ldr	r3, [pc, #28]	; (8010284 <std+0x44>)
 8010268:	6263      	str	r3, [r4, #36]	; 0x24
 801026a:	4b07      	ldr	r3, [pc, #28]	; (8010288 <std+0x48>)
 801026c:	62a3      	str	r3, [r4, #40]	; 0x28
 801026e:	4b07      	ldr	r3, [pc, #28]	; (801028c <std+0x4c>)
 8010270:	61e4      	str	r4, [r4, #28]
 8010272:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010274:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801027c:	f7fd b9b8 	b.w	800d5f0 <__retarget_lock_init_recursive>
 8010280:	08010c6d 	.word	0x08010c6d
 8010284:	08010c8f 	.word	0x08010c8f
 8010288:	08010cc7 	.word	0x08010cc7
 801028c:	08010ceb 	.word	0x08010ceb

08010290 <_cleanup_r>:
 8010290:	4901      	ldr	r1, [pc, #4]	; (8010298 <_cleanup_r+0x8>)
 8010292:	f000 b967 	b.w	8010564 <_fwalk_reent>
 8010296:	bf00      	nop
 8010298:	08010f35 	.word	0x08010f35

0801029c <__sfp_lock_acquire>:
 801029c:	4801      	ldr	r0, [pc, #4]	; (80102a4 <__sfp_lock_acquire+0x8>)
 801029e:	f7fd b9a9 	b.w	800d5f4 <__retarget_lock_acquire_recursive>
 80102a2:	bf00      	nop
 80102a4:	20000f0c 	.word	0x20000f0c

080102a8 <__sfp_lock_release>:
 80102a8:	4801      	ldr	r0, [pc, #4]	; (80102b0 <__sfp_lock_release+0x8>)
 80102aa:	f7fd b9a4 	b.w	800d5f6 <__retarget_lock_release_recursive>
 80102ae:	bf00      	nop
 80102b0:	20000f0c 	.word	0x20000f0c

080102b4 <__sinit_lock_acquire>:
 80102b4:	4801      	ldr	r0, [pc, #4]	; (80102bc <__sinit_lock_acquire+0x8>)
 80102b6:	f7fd b99d 	b.w	800d5f4 <__retarget_lock_acquire_recursive>
 80102ba:	bf00      	nop
 80102bc:	20000f07 	.word	0x20000f07

080102c0 <__sinit_lock_release>:
 80102c0:	4801      	ldr	r0, [pc, #4]	; (80102c8 <__sinit_lock_release+0x8>)
 80102c2:	f7fd b998 	b.w	800d5f6 <__retarget_lock_release_recursive>
 80102c6:	bf00      	nop
 80102c8:	20000f07 	.word	0x20000f07

080102cc <__sinit>:
 80102cc:	b510      	push	{r4, lr}
 80102ce:	4604      	mov	r4, r0
 80102d0:	f7ff fff0 	bl	80102b4 <__sinit_lock_acquire>
 80102d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80102d6:	b11a      	cbz	r2, 80102e0 <__sinit+0x14>
 80102d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102dc:	f7ff bff0 	b.w	80102c0 <__sinit_lock_release>
 80102e0:	4b0d      	ldr	r3, [pc, #52]	; (8010318 <__sinit+0x4c>)
 80102e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80102e4:	2303      	movs	r3, #3
 80102e6:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80102ea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80102ee:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80102f2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80102f6:	2104      	movs	r1, #4
 80102f8:	6860      	ldr	r0, [r4, #4]
 80102fa:	f7ff ffa1 	bl	8010240 <std>
 80102fe:	2201      	movs	r2, #1
 8010300:	2109      	movs	r1, #9
 8010302:	68a0      	ldr	r0, [r4, #8]
 8010304:	f7ff ff9c 	bl	8010240 <std>
 8010308:	2202      	movs	r2, #2
 801030a:	2112      	movs	r1, #18
 801030c:	68e0      	ldr	r0, [r4, #12]
 801030e:	f7ff ff97 	bl	8010240 <std>
 8010312:	2301      	movs	r3, #1
 8010314:	63a3      	str	r3, [r4, #56]	; 0x38
 8010316:	e7df      	b.n	80102d8 <__sinit+0xc>
 8010318:	08010291 	.word	0x08010291

0801031c <__libc_fini_array>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	4d07      	ldr	r5, [pc, #28]	; (801033c <__libc_fini_array+0x20>)
 8010320:	4c07      	ldr	r4, [pc, #28]	; (8010340 <__libc_fini_array+0x24>)
 8010322:	1b64      	subs	r4, r4, r5
 8010324:	10a4      	asrs	r4, r4, #2
 8010326:	b91c      	cbnz	r4, 8010330 <__libc_fini_array+0x14>
 8010328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801032c:	f000 bec6 	b.w	80110bc <_fini>
 8010330:	3c01      	subs	r4, #1
 8010332:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010336:	4798      	blx	r3
 8010338:	e7f5      	b.n	8010326 <__libc_fini_array+0xa>
 801033a:	bf00      	nop
 801033c:	08012b78 	.word	0x08012b78
 8010340:	08012b7c 	.word	0x08012b7c

08010344 <_malloc_trim_r>:
 8010344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010348:	4605      	mov	r5, r0
 801034a:	2008      	movs	r0, #8
 801034c:	460c      	mov	r4, r1
 801034e:	f7ff f82f 	bl	800f3b0 <sysconf>
 8010352:	4f23      	ldr	r7, [pc, #140]	; (80103e0 <_malloc_trim_r+0x9c>)
 8010354:	4680      	mov	r8, r0
 8010356:	4628      	mov	r0, r5
 8010358:	f7fd fbd0 	bl	800dafc <__malloc_lock>
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	685e      	ldr	r6, [r3, #4]
 8010360:	f026 0603 	bic.w	r6, r6, #3
 8010364:	1b34      	subs	r4, r6, r4
 8010366:	3c11      	subs	r4, #17
 8010368:	4444      	add	r4, r8
 801036a:	fbb4 f4f8 	udiv	r4, r4, r8
 801036e:	3c01      	subs	r4, #1
 8010370:	fb08 f404 	mul.w	r4, r8, r4
 8010374:	45a0      	cmp	r8, r4
 8010376:	dd05      	ble.n	8010384 <_malloc_trim_r+0x40>
 8010378:	4628      	mov	r0, r5
 801037a:	f7fd fbc5 	bl	800db08 <__malloc_unlock>
 801037e:	2000      	movs	r0, #0
 8010380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010384:	2100      	movs	r1, #0
 8010386:	4628      	mov	r0, r5
 8010388:	f7fd fda8 	bl	800dedc <_sbrk_r>
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	4433      	add	r3, r6
 8010390:	4298      	cmp	r0, r3
 8010392:	d1f1      	bne.n	8010378 <_malloc_trim_r+0x34>
 8010394:	4261      	negs	r1, r4
 8010396:	4628      	mov	r0, r5
 8010398:	f7fd fda0 	bl	800dedc <_sbrk_r>
 801039c:	3001      	adds	r0, #1
 801039e:	d110      	bne.n	80103c2 <_malloc_trim_r+0x7e>
 80103a0:	2100      	movs	r1, #0
 80103a2:	4628      	mov	r0, r5
 80103a4:	f7fd fd9a 	bl	800dedc <_sbrk_r>
 80103a8:	68ba      	ldr	r2, [r7, #8]
 80103aa:	1a83      	subs	r3, r0, r2
 80103ac:	2b0f      	cmp	r3, #15
 80103ae:	dde3      	ble.n	8010378 <_malloc_trim_r+0x34>
 80103b0:	490c      	ldr	r1, [pc, #48]	; (80103e4 <_malloc_trim_r+0xa0>)
 80103b2:	6809      	ldr	r1, [r1, #0]
 80103b4:	1a40      	subs	r0, r0, r1
 80103b6:	490c      	ldr	r1, [pc, #48]	; (80103e8 <_malloc_trim_r+0xa4>)
 80103b8:	f043 0301 	orr.w	r3, r3, #1
 80103bc:	6008      	str	r0, [r1, #0]
 80103be:	6053      	str	r3, [r2, #4]
 80103c0:	e7da      	b.n	8010378 <_malloc_trim_r+0x34>
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	4a08      	ldr	r2, [pc, #32]	; (80103e8 <_malloc_trim_r+0xa4>)
 80103c6:	1b36      	subs	r6, r6, r4
 80103c8:	f046 0601 	orr.w	r6, r6, #1
 80103cc:	605e      	str	r6, [r3, #4]
 80103ce:	6813      	ldr	r3, [r2, #0]
 80103d0:	4628      	mov	r0, r5
 80103d2:	1b1c      	subs	r4, r3, r4
 80103d4:	6014      	str	r4, [r2, #0]
 80103d6:	f7fd fb97 	bl	800db08 <__malloc_unlock>
 80103da:	2001      	movs	r0, #1
 80103dc:	e7d0      	b.n	8010380 <_malloc_trim_r+0x3c>
 80103de:	bf00      	nop
 80103e0:	20000440 	.word	0x20000440
 80103e4:	20000848 	.word	0x20000848
 80103e8:	20000a00 	.word	0x20000a00

080103ec <_free_r>:
 80103ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f0:	4604      	mov	r4, r0
 80103f2:	4688      	mov	r8, r1
 80103f4:	2900      	cmp	r1, #0
 80103f6:	f000 80ab 	beq.w	8010550 <_free_r+0x164>
 80103fa:	f7fd fb7f 	bl	800dafc <__malloc_lock>
 80103fe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8010402:	4d54      	ldr	r5, [pc, #336]	; (8010554 <_free_r+0x168>)
 8010404:	f022 0001 	bic.w	r0, r2, #1
 8010408:	f1a8 0308 	sub.w	r3, r8, #8
 801040c:	181f      	adds	r7, r3, r0
 801040e:	68a9      	ldr	r1, [r5, #8]
 8010410:	687e      	ldr	r6, [r7, #4]
 8010412:	42b9      	cmp	r1, r7
 8010414:	f026 0603 	bic.w	r6, r6, #3
 8010418:	f002 0201 	and.w	r2, r2, #1
 801041c:	d11b      	bne.n	8010456 <_free_r+0x6a>
 801041e:	4430      	add	r0, r6
 8010420:	b93a      	cbnz	r2, 8010432 <_free_r+0x46>
 8010422:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8010426:	1a9b      	subs	r3, r3, r2
 8010428:	4410      	add	r0, r2
 801042a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801042e:	60ca      	str	r2, [r1, #12]
 8010430:	6091      	str	r1, [r2, #8]
 8010432:	f040 0201 	orr.w	r2, r0, #1
 8010436:	605a      	str	r2, [r3, #4]
 8010438:	60ab      	str	r3, [r5, #8]
 801043a:	4b47      	ldr	r3, [pc, #284]	; (8010558 <_free_r+0x16c>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4283      	cmp	r3, r0
 8010440:	d804      	bhi.n	801044c <_free_r+0x60>
 8010442:	4b46      	ldr	r3, [pc, #280]	; (801055c <_free_r+0x170>)
 8010444:	4620      	mov	r0, r4
 8010446:	6819      	ldr	r1, [r3, #0]
 8010448:	f7ff ff7c 	bl	8010344 <_malloc_trim_r>
 801044c:	4620      	mov	r0, r4
 801044e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010452:	f7fd bb59 	b.w	800db08 <__malloc_unlock>
 8010456:	607e      	str	r6, [r7, #4]
 8010458:	2a00      	cmp	r2, #0
 801045a:	d139      	bne.n	80104d0 <_free_r+0xe4>
 801045c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8010460:	1a5b      	subs	r3, r3, r1
 8010462:	4408      	add	r0, r1
 8010464:	6899      	ldr	r1, [r3, #8]
 8010466:	f105 0c08 	add.w	ip, r5, #8
 801046a:	4561      	cmp	r1, ip
 801046c:	d032      	beq.n	80104d4 <_free_r+0xe8>
 801046e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010472:	f8c1 c00c 	str.w	ip, [r1, #12]
 8010476:	f8cc 1008 	str.w	r1, [ip, #8]
 801047a:	19b9      	adds	r1, r7, r6
 801047c:	6849      	ldr	r1, [r1, #4]
 801047e:	07c9      	lsls	r1, r1, #31
 8010480:	d40a      	bmi.n	8010498 <_free_r+0xac>
 8010482:	4430      	add	r0, r6
 8010484:	68b9      	ldr	r1, [r7, #8]
 8010486:	bb3a      	cbnz	r2, 80104d8 <_free_r+0xec>
 8010488:	4e35      	ldr	r6, [pc, #212]	; (8010560 <_free_r+0x174>)
 801048a:	42b1      	cmp	r1, r6
 801048c:	d124      	bne.n	80104d8 <_free_r+0xec>
 801048e:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8010492:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8010496:	2201      	movs	r2, #1
 8010498:	f040 0101 	orr.w	r1, r0, #1
 801049c:	6059      	str	r1, [r3, #4]
 801049e:	5018      	str	r0, [r3, r0]
 80104a0:	2a00      	cmp	r2, #0
 80104a2:	d1d3      	bne.n	801044c <_free_r+0x60>
 80104a4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80104a8:	d21a      	bcs.n	80104e0 <_free_r+0xf4>
 80104aa:	08c0      	lsrs	r0, r0, #3
 80104ac:	1081      	asrs	r1, r0, #2
 80104ae:	2201      	movs	r2, #1
 80104b0:	408a      	lsls	r2, r1
 80104b2:	6869      	ldr	r1, [r5, #4]
 80104b4:	3001      	adds	r0, #1
 80104b6:	430a      	orrs	r2, r1
 80104b8:	606a      	str	r2, [r5, #4]
 80104ba:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80104be:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80104c2:	3a08      	subs	r2, #8
 80104c4:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80104c8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80104cc:	60cb      	str	r3, [r1, #12]
 80104ce:	e7bd      	b.n	801044c <_free_r+0x60>
 80104d0:	2200      	movs	r2, #0
 80104d2:	e7d2      	b.n	801047a <_free_r+0x8e>
 80104d4:	2201      	movs	r2, #1
 80104d6:	e7d0      	b.n	801047a <_free_r+0x8e>
 80104d8:	68fe      	ldr	r6, [r7, #12]
 80104da:	60ce      	str	r6, [r1, #12]
 80104dc:	60b1      	str	r1, [r6, #8]
 80104de:	e7db      	b.n	8010498 <_free_r+0xac>
 80104e0:	0a42      	lsrs	r2, r0, #9
 80104e2:	2a04      	cmp	r2, #4
 80104e4:	d813      	bhi.n	801050e <_free_r+0x122>
 80104e6:	0982      	lsrs	r2, r0, #6
 80104e8:	3238      	adds	r2, #56	; 0x38
 80104ea:	1c51      	adds	r1, r2, #1
 80104ec:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80104f0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80104f4:	428e      	cmp	r6, r1
 80104f6:	d124      	bne.n	8010542 <_free_r+0x156>
 80104f8:	2001      	movs	r0, #1
 80104fa:	1092      	asrs	r2, r2, #2
 80104fc:	fa00 f202 	lsl.w	r2, r0, r2
 8010500:	6868      	ldr	r0, [r5, #4]
 8010502:	4302      	orrs	r2, r0
 8010504:	606a      	str	r2, [r5, #4]
 8010506:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801050a:	60b3      	str	r3, [r6, #8]
 801050c:	e7de      	b.n	80104cc <_free_r+0xe0>
 801050e:	2a14      	cmp	r2, #20
 8010510:	d801      	bhi.n	8010516 <_free_r+0x12a>
 8010512:	325b      	adds	r2, #91	; 0x5b
 8010514:	e7e9      	b.n	80104ea <_free_r+0xfe>
 8010516:	2a54      	cmp	r2, #84	; 0x54
 8010518:	d802      	bhi.n	8010520 <_free_r+0x134>
 801051a:	0b02      	lsrs	r2, r0, #12
 801051c:	326e      	adds	r2, #110	; 0x6e
 801051e:	e7e4      	b.n	80104ea <_free_r+0xfe>
 8010520:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8010524:	d802      	bhi.n	801052c <_free_r+0x140>
 8010526:	0bc2      	lsrs	r2, r0, #15
 8010528:	3277      	adds	r2, #119	; 0x77
 801052a:	e7de      	b.n	80104ea <_free_r+0xfe>
 801052c:	f240 5154 	movw	r1, #1364	; 0x554
 8010530:	428a      	cmp	r2, r1
 8010532:	bf9a      	itte	ls
 8010534:	0c82      	lsrls	r2, r0, #18
 8010536:	327c      	addls	r2, #124	; 0x7c
 8010538:	227e      	movhi	r2, #126	; 0x7e
 801053a:	e7d6      	b.n	80104ea <_free_r+0xfe>
 801053c:	6889      	ldr	r1, [r1, #8]
 801053e:	428e      	cmp	r6, r1
 8010540:	d004      	beq.n	801054c <_free_r+0x160>
 8010542:	684a      	ldr	r2, [r1, #4]
 8010544:	f022 0203 	bic.w	r2, r2, #3
 8010548:	4282      	cmp	r2, r0
 801054a:	d8f7      	bhi.n	801053c <_free_r+0x150>
 801054c:	68ce      	ldr	r6, [r1, #12]
 801054e:	e7da      	b.n	8010506 <_free_r+0x11a>
 8010550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010554:	20000440 	.word	0x20000440
 8010558:	2000084c 	.word	0x2000084c
 801055c:	20000a30 	.word	0x20000a30
 8010560:	20000448 	.word	0x20000448

08010564 <_fwalk_reent>:
 8010564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010568:	4680      	mov	r8, r0
 801056a:	4689      	mov	r9, r1
 801056c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8010570:	2600      	movs	r6, #0
 8010572:	b914      	cbnz	r4, 801057a <_fwalk_reent+0x16>
 8010574:	4630      	mov	r0, r6
 8010576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801057a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801057e:	3f01      	subs	r7, #1
 8010580:	d501      	bpl.n	8010586 <_fwalk_reent+0x22>
 8010582:	6824      	ldr	r4, [r4, #0]
 8010584:	e7f5      	b.n	8010572 <_fwalk_reent+0xe>
 8010586:	89ab      	ldrh	r3, [r5, #12]
 8010588:	2b01      	cmp	r3, #1
 801058a:	d907      	bls.n	801059c <_fwalk_reent+0x38>
 801058c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010590:	3301      	adds	r3, #1
 8010592:	d003      	beq.n	801059c <_fwalk_reent+0x38>
 8010594:	4629      	mov	r1, r5
 8010596:	4640      	mov	r0, r8
 8010598:	47c8      	blx	r9
 801059a:	4306      	orrs	r6, r0
 801059c:	3568      	adds	r5, #104	; 0x68
 801059e:	e7ee      	b.n	801057e <_fwalk_reent+0x1a>

080105a0 <_localeconv_r>:
 80105a0:	4b04      	ldr	r3, [pc, #16]	; (80105b4 <_localeconv_r+0x14>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80105a6:	4b04      	ldr	r3, [pc, #16]	; (80105b8 <_localeconv_r+0x18>)
 80105a8:	2800      	cmp	r0, #0
 80105aa:	bf08      	it	eq
 80105ac:	4618      	moveq	r0, r3
 80105ae:	30f0      	adds	r0, #240	; 0xf0
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop
 80105b4:	20000014 	.word	0x20000014
 80105b8:	20000854 	.word	0x20000854

080105bc <__swhatbuf_r>:
 80105bc:	b570      	push	{r4, r5, r6, lr}
 80105be:	460e      	mov	r6, r1
 80105c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105c4:	2900      	cmp	r1, #0
 80105c6:	b096      	sub	sp, #88	; 0x58
 80105c8:	4614      	mov	r4, r2
 80105ca:	461d      	mov	r5, r3
 80105cc:	da09      	bge.n	80105e2 <__swhatbuf_r+0x26>
 80105ce:	89b3      	ldrh	r3, [r6, #12]
 80105d0:	2200      	movs	r2, #0
 80105d2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80105d6:	602a      	str	r2, [r5, #0]
 80105d8:	d116      	bne.n	8010608 <__swhatbuf_r+0x4c>
 80105da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105de:	6023      	str	r3, [r4, #0]
 80105e0:	e015      	b.n	801060e <__swhatbuf_r+0x52>
 80105e2:	466a      	mov	r2, sp
 80105e4:	f000 fcfe 	bl	8010fe4 <_fstat_r>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	dbf0      	blt.n	80105ce <__swhatbuf_r+0x12>
 80105ec:	9a01      	ldr	r2, [sp, #4]
 80105ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105f6:	425a      	negs	r2, r3
 80105f8:	415a      	adcs	r2, r3
 80105fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105fe:	602a      	str	r2, [r5, #0]
 8010600:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010604:	6023      	str	r3, [r4, #0]
 8010606:	e002      	b.n	801060e <__swhatbuf_r+0x52>
 8010608:	2340      	movs	r3, #64	; 0x40
 801060a:	6023      	str	r3, [r4, #0]
 801060c:	4610      	mov	r0, r2
 801060e:	b016      	add	sp, #88	; 0x58
 8010610:	bd70      	pop	{r4, r5, r6, pc}
	...

08010614 <__smakebuf_r>:
 8010614:	898b      	ldrh	r3, [r1, #12]
 8010616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010618:	079d      	lsls	r5, r3, #30
 801061a:	4606      	mov	r6, r0
 801061c:	460c      	mov	r4, r1
 801061e:	d507      	bpl.n	8010630 <__smakebuf_r+0x1c>
 8010620:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8010624:	6023      	str	r3, [r4, #0]
 8010626:	6123      	str	r3, [r4, #16]
 8010628:	2301      	movs	r3, #1
 801062a:	6163      	str	r3, [r4, #20]
 801062c:	b002      	add	sp, #8
 801062e:	bd70      	pop	{r4, r5, r6, pc}
 8010630:	ab01      	add	r3, sp, #4
 8010632:	466a      	mov	r2, sp
 8010634:	f7ff ffc2 	bl	80105bc <__swhatbuf_r>
 8010638:	9900      	ldr	r1, [sp, #0]
 801063a:	4605      	mov	r5, r0
 801063c:	4630      	mov	r0, r6
 801063e:	f7fc ffeb 	bl	800d618 <_malloc_r>
 8010642:	b948      	cbnz	r0, 8010658 <__smakebuf_r+0x44>
 8010644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010648:	059a      	lsls	r2, r3, #22
 801064a:	d4ef      	bmi.n	801062c <__smakebuf_r+0x18>
 801064c:	f023 0303 	bic.w	r3, r3, #3
 8010650:	f043 0302 	orr.w	r3, r3, #2
 8010654:	81a3      	strh	r3, [r4, #12]
 8010656:	e7e3      	b.n	8010620 <__smakebuf_r+0xc>
 8010658:	4b0d      	ldr	r3, [pc, #52]	; (8010690 <__smakebuf_r+0x7c>)
 801065a:	63f3      	str	r3, [r6, #60]	; 0x3c
 801065c:	89a3      	ldrh	r3, [r4, #12]
 801065e:	6020      	str	r0, [r4, #0]
 8010660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010664:	81a3      	strh	r3, [r4, #12]
 8010666:	9b00      	ldr	r3, [sp, #0]
 8010668:	6163      	str	r3, [r4, #20]
 801066a:	9b01      	ldr	r3, [sp, #4]
 801066c:	6120      	str	r0, [r4, #16]
 801066e:	b15b      	cbz	r3, 8010688 <__smakebuf_r+0x74>
 8010670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010674:	4630      	mov	r0, r6
 8010676:	f000 fcc7 	bl	8011008 <_isatty_r>
 801067a:	b128      	cbz	r0, 8010688 <__smakebuf_r+0x74>
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	f023 0303 	bic.w	r3, r3, #3
 8010682:	f043 0301 	orr.w	r3, r3, #1
 8010686:	81a3      	strh	r3, [r4, #12]
 8010688:	89a3      	ldrh	r3, [r4, #12]
 801068a:	431d      	orrs	r5, r3
 801068c:	81a5      	strh	r5, [r4, #12]
 801068e:	e7cd      	b.n	801062c <__smakebuf_r+0x18>
 8010690:	08010291 	.word	0x08010291

08010694 <_Balloc>:
 8010694:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010696:	b570      	push	{r4, r5, r6, lr}
 8010698:	4605      	mov	r5, r0
 801069a:	460c      	mov	r4, r1
 801069c:	b17b      	cbz	r3, 80106be <_Balloc+0x2a>
 801069e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80106a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80106a4:	b9a0      	cbnz	r0, 80106d0 <_Balloc+0x3c>
 80106a6:	2101      	movs	r1, #1
 80106a8:	fa01 f604 	lsl.w	r6, r1, r4
 80106ac:	1d72      	adds	r2, r6, #5
 80106ae:	0092      	lsls	r2, r2, #2
 80106b0:	4628      	mov	r0, r5
 80106b2:	f000 fc01 	bl	8010eb8 <_calloc_r>
 80106b6:	b148      	cbz	r0, 80106cc <_Balloc+0x38>
 80106b8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80106bc:	e00b      	b.n	80106d6 <_Balloc+0x42>
 80106be:	2221      	movs	r2, #33	; 0x21
 80106c0:	2104      	movs	r1, #4
 80106c2:	f000 fbf9 	bl	8010eb8 <_calloc_r>
 80106c6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80106c8:	2800      	cmp	r0, #0
 80106ca:	d1e8      	bne.n	801069e <_Balloc+0xa>
 80106cc:	2000      	movs	r0, #0
 80106ce:	bd70      	pop	{r4, r5, r6, pc}
 80106d0:	6802      	ldr	r2, [r0, #0]
 80106d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80106d6:	2300      	movs	r3, #0
 80106d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106dc:	e7f7      	b.n	80106ce <_Balloc+0x3a>

080106de <_Bfree>:
 80106de:	b131      	cbz	r1, 80106ee <_Bfree+0x10>
 80106e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80106e2:	684a      	ldr	r2, [r1, #4]
 80106e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80106e8:	6008      	str	r0, [r1, #0]
 80106ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80106ee:	4770      	bx	lr

080106f0 <__multadd>:
 80106f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106f4:	690d      	ldr	r5, [r1, #16]
 80106f6:	461f      	mov	r7, r3
 80106f8:	4606      	mov	r6, r0
 80106fa:	460c      	mov	r4, r1
 80106fc:	f101 0c14 	add.w	ip, r1, #20
 8010700:	2300      	movs	r3, #0
 8010702:	f8dc 0000 	ldr.w	r0, [ip]
 8010706:	b281      	uxth	r1, r0
 8010708:	fb02 7101 	mla	r1, r2, r1, r7
 801070c:	0c0f      	lsrs	r7, r1, #16
 801070e:	0c00      	lsrs	r0, r0, #16
 8010710:	fb02 7000 	mla	r0, r2, r0, r7
 8010714:	b289      	uxth	r1, r1
 8010716:	3301      	adds	r3, #1
 8010718:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801071c:	429d      	cmp	r5, r3
 801071e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010722:	f84c 1b04 	str.w	r1, [ip], #4
 8010726:	dcec      	bgt.n	8010702 <__multadd+0x12>
 8010728:	b1d7      	cbz	r7, 8010760 <__multadd+0x70>
 801072a:	68a3      	ldr	r3, [r4, #8]
 801072c:	42ab      	cmp	r3, r5
 801072e:	dc12      	bgt.n	8010756 <__multadd+0x66>
 8010730:	6861      	ldr	r1, [r4, #4]
 8010732:	4630      	mov	r0, r6
 8010734:	3101      	adds	r1, #1
 8010736:	f7ff ffad 	bl	8010694 <_Balloc>
 801073a:	6922      	ldr	r2, [r4, #16]
 801073c:	3202      	adds	r2, #2
 801073e:	f104 010c 	add.w	r1, r4, #12
 8010742:	4680      	mov	r8, r0
 8010744:	0092      	lsls	r2, r2, #2
 8010746:	300c      	adds	r0, #12
 8010748:	f7fd f9ab 	bl	800daa2 <memcpy>
 801074c:	4621      	mov	r1, r4
 801074e:	4630      	mov	r0, r6
 8010750:	f7ff ffc5 	bl	80106de <_Bfree>
 8010754:	4644      	mov	r4, r8
 8010756:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801075a:	3501      	adds	r5, #1
 801075c:	615f      	str	r7, [r3, #20]
 801075e:	6125      	str	r5, [r4, #16]
 8010760:	4620      	mov	r0, r4
 8010762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010766 <__hi0bits>:
 8010766:	0c02      	lsrs	r2, r0, #16
 8010768:	0412      	lsls	r2, r2, #16
 801076a:	4603      	mov	r3, r0
 801076c:	b9b2      	cbnz	r2, 801079c <__hi0bits+0x36>
 801076e:	0403      	lsls	r3, r0, #16
 8010770:	2010      	movs	r0, #16
 8010772:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010776:	bf04      	itt	eq
 8010778:	021b      	lsleq	r3, r3, #8
 801077a:	3008      	addeq	r0, #8
 801077c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010780:	bf04      	itt	eq
 8010782:	011b      	lsleq	r3, r3, #4
 8010784:	3004      	addeq	r0, #4
 8010786:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801078a:	bf04      	itt	eq
 801078c:	009b      	lsleq	r3, r3, #2
 801078e:	3002      	addeq	r0, #2
 8010790:	2b00      	cmp	r3, #0
 8010792:	db06      	blt.n	80107a2 <__hi0bits+0x3c>
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	d503      	bpl.n	80107a0 <__hi0bits+0x3a>
 8010798:	3001      	adds	r0, #1
 801079a:	4770      	bx	lr
 801079c:	2000      	movs	r0, #0
 801079e:	e7e8      	b.n	8010772 <__hi0bits+0xc>
 80107a0:	2020      	movs	r0, #32
 80107a2:	4770      	bx	lr

080107a4 <__lo0bits>:
 80107a4:	6803      	ldr	r3, [r0, #0]
 80107a6:	f013 0207 	ands.w	r2, r3, #7
 80107aa:	4601      	mov	r1, r0
 80107ac:	d00b      	beq.n	80107c6 <__lo0bits+0x22>
 80107ae:	07da      	lsls	r2, r3, #31
 80107b0:	d423      	bmi.n	80107fa <__lo0bits+0x56>
 80107b2:	0798      	lsls	r0, r3, #30
 80107b4:	bf49      	itett	mi
 80107b6:	085b      	lsrmi	r3, r3, #1
 80107b8:	089b      	lsrpl	r3, r3, #2
 80107ba:	2001      	movmi	r0, #1
 80107bc:	600b      	strmi	r3, [r1, #0]
 80107be:	bf5c      	itt	pl
 80107c0:	600b      	strpl	r3, [r1, #0]
 80107c2:	2002      	movpl	r0, #2
 80107c4:	4770      	bx	lr
 80107c6:	b298      	uxth	r0, r3
 80107c8:	b9a8      	cbnz	r0, 80107f6 <__lo0bits+0x52>
 80107ca:	0c1b      	lsrs	r3, r3, #16
 80107cc:	2010      	movs	r0, #16
 80107ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80107d2:	bf04      	itt	eq
 80107d4:	0a1b      	lsreq	r3, r3, #8
 80107d6:	3008      	addeq	r0, #8
 80107d8:	071a      	lsls	r2, r3, #28
 80107da:	bf04      	itt	eq
 80107dc:	091b      	lsreq	r3, r3, #4
 80107de:	3004      	addeq	r0, #4
 80107e0:	079a      	lsls	r2, r3, #30
 80107e2:	bf04      	itt	eq
 80107e4:	089b      	lsreq	r3, r3, #2
 80107e6:	3002      	addeq	r0, #2
 80107e8:	07da      	lsls	r2, r3, #31
 80107ea:	d402      	bmi.n	80107f2 <__lo0bits+0x4e>
 80107ec:	085b      	lsrs	r3, r3, #1
 80107ee:	d006      	beq.n	80107fe <__lo0bits+0x5a>
 80107f0:	3001      	adds	r0, #1
 80107f2:	600b      	str	r3, [r1, #0]
 80107f4:	4770      	bx	lr
 80107f6:	4610      	mov	r0, r2
 80107f8:	e7e9      	b.n	80107ce <__lo0bits+0x2a>
 80107fa:	2000      	movs	r0, #0
 80107fc:	4770      	bx	lr
 80107fe:	2020      	movs	r0, #32
 8010800:	4770      	bx	lr

08010802 <__i2b>:
 8010802:	b510      	push	{r4, lr}
 8010804:	460c      	mov	r4, r1
 8010806:	2101      	movs	r1, #1
 8010808:	f7ff ff44 	bl	8010694 <_Balloc>
 801080c:	2201      	movs	r2, #1
 801080e:	6144      	str	r4, [r0, #20]
 8010810:	6102      	str	r2, [r0, #16]
 8010812:	bd10      	pop	{r4, pc}

08010814 <__multiply>:
 8010814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010818:	4614      	mov	r4, r2
 801081a:	690a      	ldr	r2, [r1, #16]
 801081c:	6923      	ldr	r3, [r4, #16]
 801081e:	429a      	cmp	r2, r3
 8010820:	bfb8      	it	lt
 8010822:	460b      	movlt	r3, r1
 8010824:	4688      	mov	r8, r1
 8010826:	bfbc      	itt	lt
 8010828:	46a0      	movlt	r8, r4
 801082a:	461c      	movlt	r4, r3
 801082c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010830:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010838:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801083c:	eb07 0609 	add.w	r6, r7, r9
 8010840:	42b3      	cmp	r3, r6
 8010842:	bfb8      	it	lt
 8010844:	3101      	addlt	r1, #1
 8010846:	f7ff ff25 	bl	8010694 <_Balloc>
 801084a:	f100 0514 	add.w	r5, r0, #20
 801084e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010852:	462b      	mov	r3, r5
 8010854:	2200      	movs	r2, #0
 8010856:	4573      	cmp	r3, lr
 8010858:	d316      	bcc.n	8010888 <__multiply+0x74>
 801085a:	f104 0214 	add.w	r2, r4, #20
 801085e:	f108 0114 	add.w	r1, r8, #20
 8010862:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010866:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	9b00      	ldr	r3, [sp, #0]
 801086e:	9201      	str	r2, [sp, #4]
 8010870:	4293      	cmp	r3, r2
 8010872:	d80c      	bhi.n	801088e <__multiply+0x7a>
 8010874:	2e00      	cmp	r6, #0
 8010876:	dd03      	ble.n	8010880 <__multiply+0x6c>
 8010878:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801087c:	2b00      	cmp	r3, #0
 801087e:	d05d      	beq.n	801093c <__multiply+0x128>
 8010880:	6106      	str	r6, [r0, #16]
 8010882:	b003      	add	sp, #12
 8010884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010888:	f843 2b04 	str.w	r2, [r3], #4
 801088c:	e7e3      	b.n	8010856 <__multiply+0x42>
 801088e:	f8b2 b000 	ldrh.w	fp, [r2]
 8010892:	f1bb 0f00 	cmp.w	fp, #0
 8010896:	d023      	beq.n	80108e0 <__multiply+0xcc>
 8010898:	4689      	mov	r9, r1
 801089a:	46ac      	mov	ip, r5
 801089c:	f04f 0800 	mov.w	r8, #0
 80108a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80108a4:	f8dc a000 	ldr.w	sl, [ip]
 80108a8:	b2a3      	uxth	r3, r4
 80108aa:	fa1f fa8a 	uxth.w	sl, sl
 80108ae:	fb0b a303 	mla	r3, fp, r3, sl
 80108b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80108b6:	f8dc 4000 	ldr.w	r4, [ip]
 80108ba:	4443      	add	r3, r8
 80108bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80108c0:	fb0b 840a 	mla	r4, fp, sl, r8
 80108c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80108c8:	46e2      	mov	sl, ip
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80108d0:	454f      	cmp	r7, r9
 80108d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80108d6:	f84a 3b04 	str.w	r3, [sl], #4
 80108da:	d82b      	bhi.n	8010934 <__multiply+0x120>
 80108dc:	f8cc 8004 	str.w	r8, [ip, #4]
 80108e0:	9b01      	ldr	r3, [sp, #4]
 80108e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80108e6:	3204      	adds	r2, #4
 80108e8:	f1ba 0f00 	cmp.w	sl, #0
 80108ec:	d020      	beq.n	8010930 <__multiply+0x11c>
 80108ee:	682b      	ldr	r3, [r5, #0]
 80108f0:	4689      	mov	r9, r1
 80108f2:	46a8      	mov	r8, r5
 80108f4:	f04f 0b00 	mov.w	fp, #0
 80108f8:	f8b9 c000 	ldrh.w	ip, [r9]
 80108fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010900:	fb0a 440c 	mla	r4, sl, ip, r4
 8010904:	445c      	add	r4, fp
 8010906:	46c4      	mov	ip, r8
 8010908:	b29b      	uxth	r3, r3
 801090a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801090e:	f84c 3b04 	str.w	r3, [ip], #4
 8010912:	f859 3b04 	ldr.w	r3, [r9], #4
 8010916:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801091a:	0c1b      	lsrs	r3, r3, #16
 801091c:	fb0a b303 	mla	r3, sl, r3, fp
 8010920:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010924:	454f      	cmp	r7, r9
 8010926:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801092a:	d805      	bhi.n	8010938 <__multiply+0x124>
 801092c:	f8c8 3004 	str.w	r3, [r8, #4]
 8010930:	3504      	adds	r5, #4
 8010932:	e79b      	b.n	801086c <__multiply+0x58>
 8010934:	46d4      	mov	ip, sl
 8010936:	e7b3      	b.n	80108a0 <__multiply+0x8c>
 8010938:	46e0      	mov	r8, ip
 801093a:	e7dd      	b.n	80108f8 <__multiply+0xe4>
 801093c:	3e01      	subs	r6, #1
 801093e:	e799      	b.n	8010874 <__multiply+0x60>

08010940 <__pow5mult>:
 8010940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010944:	4615      	mov	r5, r2
 8010946:	f012 0203 	ands.w	r2, r2, #3
 801094a:	4606      	mov	r6, r0
 801094c:	460f      	mov	r7, r1
 801094e:	d007      	beq.n	8010960 <__pow5mult+0x20>
 8010950:	3a01      	subs	r2, #1
 8010952:	4c1a      	ldr	r4, [pc, #104]	; (80109bc <__pow5mult+0x7c>)
 8010954:	2300      	movs	r3, #0
 8010956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801095a:	f7ff fec9 	bl	80106f0 <__multadd>
 801095e:	4607      	mov	r7, r0
 8010960:	10ad      	asrs	r5, r5, #2
 8010962:	d027      	beq.n	80109b4 <__pow5mult+0x74>
 8010964:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8010966:	b944      	cbnz	r4, 801097a <__pow5mult+0x3a>
 8010968:	f240 2171 	movw	r1, #625	; 0x271
 801096c:	4630      	mov	r0, r6
 801096e:	f7ff ff48 	bl	8010802 <__i2b>
 8010972:	2300      	movs	r3, #0
 8010974:	64b0      	str	r0, [r6, #72]	; 0x48
 8010976:	4604      	mov	r4, r0
 8010978:	6003      	str	r3, [r0, #0]
 801097a:	f04f 0800 	mov.w	r8, #0
 801097e:	07eb      	lsls	r3, r5, #31
 8010980:	d50a      	bpl.n	8010998 <__pow5mult+0x58>
 8010982:	4639      	mov	r1, r7
 8010984:	4622      	mov	r2, r4
 8010986:	4630      	mov	r0, r6
 8010988:	f7ff ff44 	bl	8010814 <__multiply>
 801098c:	4639      	mov	r1, r7
 801098e:	4681      	mov	r9, r0
 8010990:	4630      	mov	r0, r6
 8010992:	f7ff fea4 	bl	80106de <_Bfree>
 8010996:	464f      	mov	r7, r9
 8010998:	106d      	asrs	r5, r5, #1
 801099a:	d00b      	beq.n	80109b4 <__pow5mult+0x74>
 801099c:	6820      	ldr	r0, [r4, #0]
 801099e:	b938      	cbnz	r0, 80109b0 <__pow5mult+0x70>
 80109a0:	4622      	mov	r2, r4
 80109a2:	4621      	mov	r1, r4
 80109a4:	4630      	mov	r0, r6
 80109a6:	f7ff ff35 	bl	8010814 <__multiply>
 80109aa:	6020      	str	r0, [r4, #0]
 80109ac:	f8c0 8000 	str.w	r8, [r0]
 80109b0:	4604      	mov	r4, r0
 80109b2:	e7e4      	b.n	801097e <__pow5mult+0x3e>
 80109b4:	4638      	mov	r0, r7
 80109b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109ba:	bf00      	nop
 80109bc:	080124b0 	.word	0x080124b0

080109c0 <__lshift>:
 80109c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109c4:	460c      	mov	r4, r1
 80109c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80109ca:	6923      	ldr	r3, [r4, #16]
 80109cc:	6849      	ldr	r1, [r1, #4]
 80109ce:	eb0a 0903 	add.w	r9, sl, r3
 80109d2:	68a3      	ldr	r3, [r4, #8]
 80109d4:	4607      	mov	r7, r0
 80109d6:	4616      	mov	r6, r2
 80109d8:	f109 0501 	add.w	r5, r9, #1
 80109dc:	42ab      	cmp	r3, r5
 80109de:	db32      	blt.n	8010a46 <__lshift+0x86>
 80109e0:	4638      	mov	r0, r7
 80109e2:	f7ff fe57 	bl	8010694 <_Balloc>
 80109e6:	2300      	movs	r3, #0
 80109e8:	4680      	mov	r8, r0
 80109ea:	f100 0114 	add.w	r1, r0, #20
 80109ee:	461a      	mov	r2, r3
 80109f0:	4553      	cmp	r3, sl
 80109f2:	db2b      	blt.n	8010a4c <__lshift+0x8c>
 80109f4:	6920      	ldr	r0, [r4, #16]
 80109f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109fa:	f104 0314 	add.w	r3, r4, #20
 80109fe:	f016 021f 	ands.w	r2, r6, #31
 8010a02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a0a:	d025      	beq.n	8010a58 <__lshift+0x98>
 8010a0c:	f1c2 0e20 	rsb	lr, r2, #32
 8010a10:	2000      	movs	r0, #0
 8010a12:	681e      	ldr	r6, [r3, #0]
 8010a14:	468a      	mov	sl, r1
 8010a16:	4096      	lsls	r6, r2
 8010a18:	4330      	orrs	r0, r6
 8010a1a:	f84a 0b04 	str.w	r0, [sl], #4
 8010a1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010a22:	459c      	cmp	ip, r3
 8010a24:	fa20 f00e 	lsr.w	r0, r0, lr
 8010a28:	d814      	bhi.n	8010a54 <__lshift+0x94>
 8010a2a:	6048      	str	r0, [r1, #4]
 8010a2c:	b108      	cbz	r0, 8010a32 <__lshift+0x72>
 8010a2e:	f109 0502 	add.w	r5, r9, #2
 8010a32:	3d01      	subs	r5, #1
 8010a34:	4638      	mov	r0, r7
 8010a36:	f8c8 5010 	str.w	r5, [r8, #16]
 8010a3a:	4621      	mov	r1, r4
 8010a3c:	f7ff fe4f 	bl	80106de <_Bfree>
 8010a40:	4640      	mov	r0, r8
 8010a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a46:	3101      	adds	r1, #1
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	e7c7      	b.n	80109dc <__lshift+0x1c>
 8010a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010a50:	3301      	adds	r3, #1
 8010a52:	e7cd      	b.n	80109f0 <__lshift+0x30>
 8010a54:	4651      	mov	r1, sl
 8010a56:	e7dc      	b.n	8010a12 <__lshift+0x52>
 8010a58:	3904      	subs	r1, #4
 8010a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a5e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a62:	459c      	cmp	ip, r3
 8010a64:	d8f9      	bhi.n	8010a5a <__lshift+0x9a>
 8010a66:	e7e4      	b.n	8010a32 <__lshift+0x72>

08010a68 <__mcmp>:
 8010a68:	6903      	ldr	r3, [r0, #16]
 8010a6a:	690a      	ldr	r2, [r1, #16]
 8010a6c:	1a9b      	subs	r3, r3, r2
 8010a6e:	b530      	push	{r4, r5, lr}
 8010a70:	d10c      	bne.n	8010a8c <__mcmp+0x24>
 8010a72:	0092      	lsls	r2, r2, #2
 8010a74:	3014      	adds	r0, #20
 8010a76:	3114      	adds	r1, #20
 8010a78:	1884      	adds	r4, r0, r2
 8010a7a:	4411      	add	r1, r2
 8010a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010a84:	4295      	cmp	r5, r2
 8010a86:	d003      	beq.n	8010a90 <__mcmp+0x28>
 8010a88:	d305      	bcc.n	8010a96 <__mcmp+0x2e>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	bd30      	pop	{r4, r5, pc}
 8010a90:	42a0      	cmp	r0, r4
 8010a92:	d3f3      	bcc.n	8010a7c <__mcmp+0x14>
 8010a94:	e7fa      	b.n	8010a8c <__mcmp+0x24>
 8010a96:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9a:	e7f7      	b.n	8010a8c <__mcmp+0x24>

08010a9c <__mdiff>:
 8010a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa0:	460d      	mov	r5, r1
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	4611      	mov	r1, r2
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	4614      	mov	r4, r2
 8010aaa:	f7ff ffdd 	bl	8010a68 <__mcmp>
 8010aae:	1e06      	subs	r6, r0, #0
 8010ab0:	d108      	bne.n	8010ac4 <__mdiff+0x28>
 8010ab2:	4631      	mov	r1, r6
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f7ff fded 	bl	8010694 <_Balloc>
 8010aba:	2301      	movs	r3, #1
 8010abc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ac4:	bfa4      	itt	ge
 8010ac6:	4623      	movge	r3, r4
 8010ac8:	462c      	movge	r4, r5
 8010aca:	4638      	mov	r0, r7
 8010acc:	6861      	ldr	r1, [r4, #4]
 8010ace:	bfa6      	itte	ge
 8010ad0:	461d      	movge	r5, r3
 8010ad2:	2600      	movge	r6, #0
 8010ad4:	2601      	movlt	r6, #1
 8010ad6:	f7ff fddd 	bl	8010694 <_Balloc>
 8010ada:	692b      	ldr	r3, [r5, #16]
 8010adc:	60c6      	str	r6, [r0, #12]
 8010ade:	6926      	ldr	r6, [r4, #16]
 8010ae0:	f105 0914 	add.w	r9, r5, #20
 8010ae4:	f104 0214 	add.w	r2, r4, #20
 8010ae8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010aec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010af0:	f100 0514 	add.w	r5, r0, #20
 8010af4:	f04f 0e00 	mov.w	lr, #0
 8010af8:	f852 ab04 	ldr.w	sl, [r2], #4
 8010afc:	f859 4b04 	ldr.w	r4, [r9], #4
 8010b00:	fa1e f18a 	uxtah	r1, lr, sl
 8010b04:	b2a3      	uxth	r3, r4
 8010b06:	1ac9      	subs	r1, r1, r3
 8010b08:	0c23      	lsrs	r3, r4, #16
 8010b0a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010b0e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010b12:	b289      	uxth	r1, r1
 8010b14:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010b18:	45c8      	cmp	r8, r9
 8010b1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010b1e:	4694      	mov	ip, r2
 8010b20:	f845 3b04 	str.w	r3, [r5], #4
 8010b24:	d8e8      	bhi.n	8010af8 <__mdiff+0x5c>
 8010b26:	45bc      	cmp	ip, r7
 8010b28:	d304      	bcc.n	8010b34 <__mdiff+0x98>
 8010b2a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010b2e:	b183      	cbz	r3, 8010b52 <__mdiff+0xb6>
 8010b30:	6106      	str	r6, [r0, #16]
 8010b32:	e7c5      	b.n	8010ac0 <__mdiff+0x24>
 8010b34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010b38:	fa1e f381 	uxtah	r3, lr, r1
 8010b3c:	141a      	asrs	r2, r3, #16
 8010b3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b48:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010b4c:	f845 3b04 	str.w	r3, [r5], #4
 8010b50:	e7e9      	b.n	8010b26 <__mdiff+0x8a>
 8010b52:	3e01      	subs	r6, #1
 8010b54:	e7e9      	b.n	8010b2a <__mdiff+0x8e>

08010b56 <__d2b>:
 8010b56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b5a:	460e      	mov	r6, r1
 8010b5c:	2101      	movs	r1, #1
 8010b5e:	ec59 8b10 	vmov	r8, r9, d0
 8010b62:	4615      	mov	r5, r2
 8010b64:	f7ff fd96 	bl	8010694 <_Balloc>
 8010b68:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010b6c:	4607      	mov	r7, r0
 8010b6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b72:	bb34      	cbnz	r4, 8010bc2 <__d2b+0x6c>
 8010b74:	9301      	str	r3, [sp, #4]
 8010b76:	f1b8 0300 	subs.w	r3, r8, #0
 8010b7a:	d027      	beq.n	8010bcc <__d2b+0x76>
 8010b7c:	a802      	add	r0, sp, #8
 8010b7e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010b82:	f7ff fe0f 	bl	80107a4 <__lo0bits>
 8010b86:	9900      	ldr	r1, [sp, #0]
 8010b88:	b1f0      	cbz	r0, 8010bc8 <__d2b+0x72>
 8010b8a:	9a01      	ldr	r2, [sp, #4]
 8010b8c:	f1c0 0320 	rsb	r3, r0, #32
 8010b90:	fa02 f303 	lsl.w	r3, r2, r3
 8010b94:	430b      	orrs	r3, r1
 8010b96:	40c2      	lsrs	r2, r0
 8010b98:	617b      	str	r3, [r7, #20]
 8010b9a:	9201      	str	r2, [sp, #4]
 8010b9c:	9b01      	ldr	r3, [sp, #4]
 8010b9e:	61bb      	str	r3, [r7, #24]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	bf14      	ite	ne
 8010ba4:	2102      	movne	r1, #2
 8010ba6:	2101      	moveq	r1, #1
 8010ba8:	6139      	str	r1, [r7, #16]
 8010baa:	b1c4      	cbz	r4, 8010bde <__d2b+0x88>
 8010bac:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010bb0:	4404      	add	r4, r0
 8010bb2:	6034      	str	r4, [r6, #0]
 8010bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010bb8:	6028      	str	r0, [r5, #0]
 8010bba:	4638      	mov	r0, r7
 8010bbc:	b003      	add	sp, #12
 8010bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010bc6:	e7d5      	b.n	8010b74 <__d2b+0x1e>
 8010bc8:	6179      	str	r1, [r7, #20]
 8010bca:	e7e7      	b.n	8010b9c <__d2b+0x46>
 8010bcc:	a801      	add	r0, sp, #4
 8010bce:	f7ff fde9 	bl	80107a4 <__lo0bits>
 8010bd2:	9b01      	ldr	r3, [sp, #4]
 8010bd4:	617b      	str	r3, [r7, #20]
 8010bd6:	2101      	movs	r1, #1
 8010bd8:	6139      	str	r1, [r7, #16]
 8010bda:	3020      	adds	r0, #32
 8010bdc:	e7e5      	b.n	8010baa <__d2b+0x54>
 8010bde:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010be2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010be6:	6030      	str	r0, [r6, #0]
 8010be8:	6918      	ldr	r0, [r3, #16]
 8010bea:	f7ff fdbc 	bl	8010766 <__hi0bits>
 8010bee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010bf2:	e7e1      	b.n	8010bb8 <__d2b+0x62>
 8010bf4:	0000      	movs	r0, r0
	...

08010bf8 <frexp>:
 8010bf8:	b082      	sub	sp, #8
 8010bfa:	ed8d 0b00 	vstr	d0, [sp]
 8010bfe:	2100      	movs	r1, #0
 8010c00:	9a01      	ldr	r2, [sp, #4]
 8010c02:	6001      	str	r1, [r0, #0]
 8010c04:	4918      	ldr	r1, [pc, #96]	; (8010c68 <frexp+0x70>)
 8010c06:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010c0a:	428b      	cmp	r3, r1
 8010c0c:	dc23      	bgt.n	8010c56 <frexp+0x5e>
 8010c0e:	9900      	ldr	r1, [sp, #0]
 8010c10:	4319      	orrs	r1, r3
 8010c12:	d020      	beq.n	8010c56 <frexp+0x5e>
 8010c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c18:	da0b      	bge.n	8010c32 <frexp+0x3a>
 8010c1a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8010c60 <frexp+0x68>
 8010c1e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010c22:	ed8d 7b00 	vstr	d7, [sp]
 8010c26:	9a01      	ldr	r2, [sp, #4]
 8010c28:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8010c2c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010c30:	6001      	str	r1, [r0, #0]
 8010c32:	6801      	ldr	r1, [r0, #0]
 8010c34:	151b      	asrs	r3, r3, #20
 8010c36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010c3a:	440b      	add	r3, r1
 8010c3c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8010c40:	6003      	str	r3, [r0, #0]
 8010c42:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8010c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c4a:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
 8010c4e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8010c52:	e9cd 0100 	strd	r0, r1, [sp]
 8010c56:	ed9d 0b00 	vldr	d0, [sp]
 8010c5a:	b002      	add	sp, #8
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	00000000 	.word	0x00000000
 8010c64:	43500000 	.word	0x43500000
 8010c68:	7fefffff 	.word	0x7fefffff

08010c6c <__sread>:
 8010c6c:	b510      	push	{r4, lr}
 8010c6e:	460c      	mov	r4, r1
 8010c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c74:	f000 f9fc 	bl	8011070 <_read_r>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	bfab      	itete	ge
 8010c7c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8010c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8010c80:	181b      	addge	r3, r3, r0
 8010c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010c86:	bfac      	ite	ge
 8010c88:	6523      	strge	r3, [r4, #80]	; 0x50
 8010c8a:	81a3      	strhlt	r3, [r4, #12]
 8010c8c:	bd10      	pop	{r4, pc}

08010c8e <__swrite>:
 8010c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c92:	461f      	mov	r7, r3
 8010c94:	898b      	ldrh	r3, [r1, #12]
 8010c96:	05db      	lsls	r3, r3, #23
 8010c98:	4605      	mov	r5, r0
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	4616      	mov	r6, r2
 8010c9e:	d505      	bpl.n	8010cac <__swrite+0x1e>
 8010ca0:	2302      	movs	r3, #2
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ca8:	f000 f9be 	bl	8011028 <_lseek_r>
 8010cac:	89a3      	ldrh	r3, [r4, #12]
 8010cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cb6:	81a3      	strh	r3, [r4, #12]
 8010cb8:	4632      	mov	r2, r6
 8010cba:	463b      	mov	r3, r7
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc2:	f7fe bbcb 	b.w	800f45c <_write_r>

08010cc6 <__sseek>:
 8010cc6:	b510      	push	{r4, lr}
 8010cc8:	460c      	mov	r4, r1
 8010cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cce:	f000 f9ab 	bl	8011028 <_lseek_r>
 8010cd2:	1c43      	adds	r3, r0, #1
 8010cd4:	89a3      	ldrh	r3, [r4, #12]
 8010cd6:	bf15      	itete	ne
 8010cd8:	6520      	strne	r0, [r4, #80]	; 0x50
 8010cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ce2:	81a3      	strheq	r3, [r4, #12]
 8010ce4:	bf18      	it	ne
 8010ce6:	81a3      	strhne	r3, [r4, #12]
 8010ce8:	bd10      	pop	{r4, pc}

08010cea <__sclose>:
 8010cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cee:	f000 b911 	b.w	8010f14 <_close_r>

08010cf2 <strncpy>:
 8010cf2:	b570      	push	{r4, r5, r6, lr}
 8010cf4:	3901      	subs	r1, #1
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	b902      	cbnz	r2, 8010cfc <strncpy+0xa>
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
 8010cfc:	4623      	mov	r3, r4
 8010cfe:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8010d02:	f803 5b01 	strb.w	r5, [r3], #1
 8010d06:	1e56      	subs	r6, r2, #1
 8010d08:	b92d      	cbnz	r5, 8010d16 <strncpy+0x24>
 8010d0a:	4414      	add	r4, r2
 8010d0c:	42a3      	cmp	r3, r4
 8010d0e:	d0f4      	beq.n	8010cfa <strncpy+0x8>
 8010d10:	f803 5b01 	strb.w	r5, [r3], #1
 8010d14:	e7fa      	b.n	8010d0c <strncpy+0x1a>
 8010d16:	461c      	mov	r4, r3
 8010d18:	4632      	mov	r2, r6
 8010d1a:	e7ed      	b.n	8010cf8 <strncpy+0x6>

08010d1c <__ssprint_r>:
 8010d1c:	6893      	ldr	r3, [r2, #8]
 8010d1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d22:	4681      	mov	r9, r0
 8010d24:	460c      	mov	r4, r1
 8010d26:	4616      	mov	r6, r2
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d05e      	beq.n	8010dea <__ssprint_r+0xce>
 8010d2c:	f04f 0b00 	mov.w	fp, #0
 8010d30:	f8d2 a000 	ldr.w	sl, [r2]
 8010d34:	465f      	mov	r7, fp
 8010d36:	b357      	cbz	r7, 8010d8e <__ssprint_r+0x72>
 8010d38:	68a3      	ldr	r3, [r4, #8]
 8010d3a:	429f      	cmp	r7, r3
 8010d3c:	d340      	bcc.n	8010dc0 <__ssprint_r+0xa4>
 8010d3e:	89a2      	ldrh	r2, [r4, #12]
 8010d40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d44:	d03c      	beq.n	8010dc0 <__ssprint_r+0xa4>
 8010d46:	6825      	ldr	r5, [r4, #0]
 8010d48:	6921      	ldr	r1, [r4, #16]
 8010d4a:	eba5 0801 	sub.w	r8, r5, r1
 8010d4e:	6965      	ldr	r5, [r4, #20]
 8010d50:	2302      	movs	r3, #2
 8010d52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d56:	fb95 f5f3 	sdiv	r5, r5, r3
 8010d5a:	f108 0301 	add.w	r3, r8, #1
 8010d5e:	443b      	add	r3, r7
 8010d60:	429d      	cmp	r5, r3
 8010d62:	bf38      	it	cc
 8010d64:	461d      	movcc	r5, r3
 8010d66:	0553      	lsls	r3, r2, #21
 8010d68:	d544      	bpl.n	8010df4 <__ssprint_r+0xd8>
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	4648      	mov	r0, r9
 8010d6e:	f7fc fc53 	bl	800d618 <_malloc_r>
 8010d72:	b988      	cbnz	r0, 8010d98 <__ssprint_r+0x7c>
 8010d74:	230c      	movs	r3, #12
 8010d76:	f8c9 3000 	str.w	r3, [r9]
 8010d7a:	89a3      	ldrh	r3, [r4, #12]
 8010d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d80:	81a3      	strh	r3, [r4, #12]
 8010d82:	2300      	movs	r3, #0
 8010d84:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010d88:	f04f 30ff 	mov.w	r0, #4294967295
 8010d8c:	e02f      	b.n	8010dee <__ssprint_r+0xd2>
 8010d8e:	e9da b700 	ldrd	fp, r7, [sl]
 8010d92:	f10a 0a08 	add.w	sl, sl, #8
 8010d96:	e7ce      	b.n	8010d36 <__ssprint_r+0x1a>
 8010d98:	4642      	mov	r2, r8
 8010d9a:	6921      	ldr	r1, [r4, #16]
 8010d9c:	9001      	str	r0, [sp, #4]
 8010d9e:	f7fc fe80 	bl	800daa2 <memcpy>
 8010da2:	89a2      	ldrh	r2, [r4, #12]
 8010da4:	9b01      	ldr	r3, [sp, #4]
 8010da6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8010daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010dae:	81a2      	strh	r2, [r4, #12]
 8010db0:	6123      	str	r3, [r4, #16]
 8010db2:	6165      	str	r5, [r4, #20]
 8010db4:	4443      	add	r3, r8
 8010db6:	eba5 0508 	sub.w	r5, r5, r8
 8010dba:	6023      	str	r3, [r4, #0]
 8010dbc:	60a5      	str	r5, [r4, #8]
 8010dbe:	463b      	mov	r3, r7
 8010dc0:	42bb      	cmp	r3, r7
 8010dc2:	bf28      	it	cs
 8010dc4:	463b      	movcs	r3, r7
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	4659      	mov	r1, fp
 8010dca:	6820      	ldr	r0, [r4, #0]
 8010dcc:	9301      	str	r3, [sp, #4]
 8010dce:	f7fc fe73 	bl	800dab8 <memmove>
 8010dd2:	68a2      	ldr	r2, [r4, #8]
 8010dd4:	9b01      	ldr	r3, [sp, #4]
 8010dd6:	1ad2      	subs	r2, r2, r3
 8010dd8:	60a2      	str	r2, [r4, #8]
 8010dda:	6822      	ldr	r2, [r4, #0]
 8010ddc:	4413      	add	r3, r2
 8010dde:	6023      	str	r3, [r4, #0]
 8010de0:	68b3      	ldr	r3, [r6, #8]
 8010de2:	1bdf      	subs	r7, r3, r7
 8010de4:	60b7      	str	r7, [r6, #8]
 8010de6:	2f00      	cmp	r7, #0
 8010de8:	d1d1      	bne.n	8010d8e <__ssprint_r+0x72>
 8010dea:	2000      	movs	r0, #0
 8010dec:	6070      	str	r0, [r6, #4]
 8010dee:	b003      	add	sp, #12
 8010df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df4:	462a      	mov	r2, r5
 8010df6:	4648      	mov	r0, r9
 8010df8:	f7fc fec8 	bl	800db8c <_realloc_r>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d1d6      	bne.n	8010db0 <__ssprint_r+0x94>
 8010e02:	6921      	ldr	r1, [r4, #16]
 8010e04:	4648      	mov	r0, r9
 8010e06:	f7ff faf1 	bl	80103ec <_free_r>
 8010e0a:	e7b3      	b.n	8010d74 <__ssprint_r+0x58>

08010e0c <__register_exitproc>:
 8010e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e10:	4c26      	ldr	r4, [pc, #152]	; (8010eac <__register_exitproc+0xa0>)
 8010e12:	4606      	mov	r6, r0
 8010e14:	6820      	ldr	r0, [r4, #0]
 8010e16:	4698      	mov	r8, r3
 8010e18:	460f      	mov	r7, r1
 8010e1a:	4691      	mov	r9, r2
 8010e1c:	f7fc fbea 	bl	800d5f4 <__retarget_lock_acquire_recursive>
 8010e20:	4b23      	ldr	r3, [pc, #140]	; (8010eb0 <__register_exitproc+0xa4>)
 8010e22:	681d      	ldr	r5, [r3, #0]
 8010e24:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8010e28:	b918      	cbnz	r0, 8010e32 <__register_exitproc+0x26>
 8010e2a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8010e2e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8010e32:	6843      	ldr	r3, [r0, #4]
 8010e34:	2b1f      	cmp	r3, #31
 8010e36:	dd19      	ble.n	8010e6c <__register_exitproc+0x60>
 8010e38:	4b1e      	ldr	r3, [pc, #120]	; (8010eb4 <__register_exitproc+0xa8>)
 8010e3a:	b933      	cbnz	r3, 8010e4a <__register_exitproc+0x3e>
 8010e3c:	6820      	ldr	r0, [r4, #0]
 8010e3e:	f7fc fbda 	bl	800d5f6 <__retarget_lock_release_recursive>
 8010e42:	f04f 30ff 	mov.w	r0, #4294967295
 8010e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e4a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010e4e:	f7fc fbd3 	bl	800d5f8 <malloc>
 8010e52:	2800      	cmp	r0, #0
 8010e54:	d0f2      	beq.n	8010e3c <__register_exitproc+0x30>
 8010e56:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8010e5a:	6003      	str	r3, [r0, #0]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	6042      	str	r2, [r0, #4]
 8010e60:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8010e64:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8010e68:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8010e6c:	6843      	ldr	r3, [r0, #4]
 8010e6e:	b19e      	cbz	r6, 8010e98 <__register_exitproc+0x8c>
 8010e70:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8010e74:	2201      	movs	r2, #1
 8010e76:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8010e7a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8010e7e:	409a      	lsls	r2, r3
 8010e80:	4311      	orrs	r1, r2
 8010e82:	2e02      	cmp	r6, #2
 8010e84:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8010e88:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8010e8c:	bf02      	ittt	eq
 8010e8e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8010e92:	430a      	orreq	r2, r1
 8010e94:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	3302      	adds	r3, #2
 8010e9c:	6042      	str	r2, [r0, #4]
 8010e9e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8010ea2:	6820      	ldr	r0, [r4, #0]
 8010ea4:	f7fc fba7 	bl	800d5f6 <__retarget_lock_release_recursive>
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	e7cc      	b.n	8010e46 <__register_exitproc+0x3a>
 8010eac:	20000850 	.word	0x20000850
 8010eb0:	08012358 	.word	0x08012358
 8010eb4:	0800d5f9 	.word	0x0800d5f9

08010eb8 <_calloc_r>:
 8010eb8:	b510      	push	{r4, lr}
 8010eba:	4351      	muls	r1, r2
 8010ebc:	f7fc fbac 	bl	800d618 <_malloc_r>
 8010ec0:	4604      	mov	r4, r0
 8010ec2:	b198      	cbz	r0, 8010eec <_calloc_r+0x34>
 8010ec4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010ec8:	f022 0203 	bic.w	r2, r2, #3
 8010ecc:	3a04      	subs	r2, #4
 8010ece:	2a24      	cmp	r2, #36	; 0x24
 8010ed0:	d81b      	bhi.n	8010f0a <_calloc_r+0x52>
 8010ed2:	2a13      	cmp	r2, #19
 8010ed4:	d917      	bls.n	8010f06 <_calloc_r+0x4e>
 8010ed6:	2100      	movs	r1, #0
 8010ed8:	2a1b      	cmp	r2, #27
 8010eda:	e9c0 1100 	strd	r1, r1, [r0]
 8010ede:	d807      	bhi.n	8010ef0 <_calloc_r+0x38>
 8010ee0:	f100 0308 	add.w	r3, r0, #8
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	e9c3 2200 	strd	r2, r2, [r3]
 8010eea:	609a      	str	r2, [r3, #8]
 8010eec:	4620      	mov	r0, r4
 8010eee:	bd10      	pop	{r4, pc}
 8010ef0:	2a24      	cmp	r2, #36	; 0x24
 8010ef2:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8010ef6:	bf11      	iteee	ne
 8010ef8:	f100 0310 	addne.w	r3, r0, #16
 8010efc:	6101      	streq	r1, [r0, #16]
 8010efe:	f100 0318 	addeq.w	r3, r0, #24
 8010f02:	6141      	streq	r1, [r0, #20]
 8010f04:	e7ee      	b.n	8010ee4 <_calloc_r+0x2c>
 8010f06:	4603      	mov	r3, r0
 8010f08:	e7ec      	b.n	8010ee4 <_calloc_r+0x2c>
 8010f0a:	2100      	movs	r1, #0
 8010f0c:	f7fc fded 	bl	800daea <memset>
 8010f10:	e7ec      	b.n	8010eec <_calloc_r+0x34>
	...

08010f14 <_close_r>:
 8010f14:	b538      	push	{r3, r4, r5, lr}
 8010f16:	4c06      	ldr	r4, [pc, #24]	; (8010f30 <_close_r+0x1c>)
 8010f18:	2300      	movs	r3, #0
 8010f1a:	4605      	mov	r5, r0
 8010f1c:	4608      	mov	r0, r1
 8010f1e:	6023      	str	r3, [r4, #0]
 8010f20:	f7fa fed5 	bl	800bcce <_close>
 8010f24:	1c43      	adds	r3, r0, #1
 8010f26:	d102      	bne.n	8010f2e <_close_r+0x1a>
 8010f28:	6823      	ldr	r3, [r4, #0]
 8010f2a:	b103      	cbz	r3, 8010f2e <_close_r+0x1a>
 8010f2c:	602b      	str	r3, [r5, #0]
 8010f2e:	bd38      	pop	{r3, r4, r5, pc}
 8010f30:	20000f10 	.word	0x20000f10

08010f34 <_fclose_r>:
 8010f34:	b570      	push	{r4, r5, r6, lr}
 8010f36:	4606      	mov	r6, r0
 8010f38:	460c      	mov	r4, r1
 8010f3a:	b911      	cbnz	r1, 8010f42 <_fclose_r+0xe>
 8010f3c:	2500      	movs	r5, #0
 8010f3e:	4628      	mov	r0, r5
 8010f40:	bd70      	pop	{r4, r5, r6, pc}
 8010f42:	b118      	cbz	r0, 8010f4c <_fclose_r+0x18>
 8010f44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010f46:	b90b      	cbnz	r3, 8010f4c <_fclose_r+0x18>
 8010f48:	f7ff f9c0 	bl	80102cc <__sinit>
 8010f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f4e:	07d8      	lsls	r0, r3, #31
 8010f50:	d405      	bmi.n	8010f5e <_fclose_r+0x2a>
 8010f52:	89a3      	ldrh	r3, [r4, #12]
 8010f54:	0599      	lsls	r1, r3, #22
 8010f56:	d402      	bmi.n	8010f5e <_fclose_r+0x2a>
 8010f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f5a:	f7fc fb4b 	bl	800d5f4 <__retarget_lock_acquire_recursive>
 8010f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f62:	b93b      	cbnz	r3, 8010f74 <_fclose_r+0x40>
 8010f64:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010f66:	f015 0501 	ands.w	r5, r5, #1
 8010f6a:	d1e7      	bne.n	8010f3c <_fclose_r+0x8>
 8010f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f6e:	f7fc fb42 	bl	800d5f6 <__retarget_lock_release_recursive>
 8010f72:	e7e4      	b.n	8010f3e <_fclose_r+0xa>
 8010f74:	4621      	mov	r1, r4
 8010f76:	4630      	mov	r0, r6
 8010f78:	f7ff f8ae 	bl	80100d8 <__sflush_r>
 8010f7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010f7e:	4605      	mov	r5, r0
 8010f80:	b133      	cbz	r3, 8010f90 <_fclose_r+0x5c>
 8010f82:	69e1      	ldr	r1, [r4, #28]
 8010f84:	4630      	mov	r0, r6
 8010f86:	4798      	blx	r3
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	bfb8      	it	lt
 8010f8c:	f04f 35ff 	movlt.w	r5, #4294967295
 8010f90:	89a3      	ldrh	r3, [r4, #12]
 8010f92:	061a      	lsls	r2, r3, #24
 8010f94:	d503      	bpl.n	8010f9e <_fclose_r+0x6a>
 8010f96:	6921      	ldr	r1, [r4, #16]
 8010f98:	4630      	mov	r0, r6
 8010f9a:	f7ff fa27 	bl	80103ec <_free_r>
 8010f9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010fa0:	b141      	cbz	r1, 8010fb4 <_fclose_r+0x80>
 8010fa2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010fa6:	4299      	cmp	r1, r3
 8010fa8:	d002      	beq.n	8010fb0 <_fclose_r+0x7c>
 8010faa:	4630      	mov	r0, r6
 8010fac:	f7ff fa1e 	bl	80103ec <_free_r>
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8010fb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010fb6:	b121      	cbz	r1, 8010fc2 <_fclose_r+0x8e>
 8010fb8:	4630      	mov	r0, r6
 8010fba:	f7ff fa17 	bl	80103ec <_free_r>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	6463      	str	r3, [r4, #68]	; 0x44
 8010fc2:	f7ff f96b 	bl	801029c <__sfp_lock_acquire>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	81a3      	strh	r3, [r4, #12]
 8010fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fcc:	07db      	lsls	r3, r3, #31
 8010fce:	d402      	bmi.n	8010fd6 <_fclose_r+0xa2>
 8010fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fd2:	f7fc fb10 	bl	800d5f6 <__retarget_lock_release_recursive>
 8010fd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fd8:	f7fc fb0b 	bl	800d5f2 <__retarget_lock_close_recursive>
 8010fdc:	f7ff f964 	bl	80102a8 <__sfp_lock_release>
 8010fe0:	e7ad      	b.n	8010f3e <_fclose_r+0xa>
	...

08010fe4 <_fstat_r>:
 8010fe4:	b538      	push	{r3, r4, r5, lr}
 8010fe6:	4c07      	ldr	r4, [pc, #28]	; (8011004 <_fstat_r+0x20>)
 8010fe8:	2300      	movs	r3, #0
 8010fea:	4605      	mov	r5, r0
 8010fec:	4608      	mov	r0, r1
 8010fee:	4611      	mov	r1, r2
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	f7fa fe78 	bl	800bce6 <_fstat>
 8010ff6:	1c43      	adds	r3, r0, #1
 8010ff8:	d102      	bne.n	8011000 <_fstat_r+0x1c>
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	b103      	cbz	r3, 8011000 <_fstat_r+0x1c>
 8010ffe:	602b      	str	r3, [r5, #0]
 8011000:	bd38      	pop	{r3, r4, r5, pc}
 8011002:	bf00      	nop
 8011004:	20000f10 	.word	0x20000f10

08011008 <_isatty_r>:
 8011008:	b538      	push	{r3, r4, r5, lr}
 801100a:	4c06      	ldr	r4, [pc, #24]	; (8011024 <_isatty_r+0x1c>)
 801100c:	2300      	movs	r3, #0
 801100e:	4605      	mov	r5, r0
 8011010:	4608      	mov	r0, r1
 8011012:	6023      	str	r3, [r4, #0]
 8011014:	f7fa fe77 	bl	800bd06 <_isatty>
 8011018:	1c43      	adds	r3, r0, #1
 801101a:	d102      	bne.n	8011022 <_isatty_r+0x1a>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	b103      	cbz	r3, 8011022 <_isatty_r+0x1a>
 8011020:	602b      	str	r3, [r5, #0]
 8011022:	bd38      	pop	{r3, r4, r5, pc}
 8011024:	20000f10 	.word	0x20000f10

08011028 <_lseek_r>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	4c07      	ldr	r4, [pc, #28]	; (8011048 <_lseek_r+0x20>)
 801102c:	4605      	mov	r5, r0
 801102e:	4608      	mov	r0, r1
 8011030:	4611      	mov	r1, r2
 8011032:	2200      	movs	r2, #0
 8011034:	6022      	str	r2, [r4, #0]
 8011036:	461a      	mov	r2, r3
 8011038:	f7fa fe70 	bl	800bd1c <_lseek>
 801103c:	1c43      	adds	r3, r0, #1
 801103e:	d102      	bne.n	8011046 <_lseek_r+0x1e>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	b103      	cbz	r3, 8011046 <_lseek_r+0x1e>
 8011044:	602b      	str	r3, [r5, #0]
 8011046:	bd38      	pop	{r3, r4, r5, pc}
 8011048:	20000f10 	.word	0x20000f10

0801104c <__ascii_mbtowc>:
 801104c:	b082      	sub	sp, #8
 801104e:	b901      	cbnz	r1, 8011052 <__ascii_mbtowc+0x6>
 8011050:	a901      	add	r1, sp, #4
 8011052:	b142      	cbz	r2, 8011066 <__ascii_mbtowc+0x1a>
 8011054:	b14b      	cbz	r3, 801106a <__ascii_mbtowc+0x1e>
 8011056:	7813      	ldrb	r3, [r2, #0]
 8011058:	600b      	str	r3, [r1, #0]
 801105a:	7812      	ldrb	r2, [r2, #0]
 801105c:	1c10      	adds	r0, r2, #0
 801105e:	bf18      	it	ne
 8011060:	2001      	movne	r0, #1
 8011062:	b002      	add	sp, #8
 8011064:	4770      	bx	lr
 8011066:	4610      	mov	r0, r2
 8011068:	e7fb      	b.n	8011062 <__ascii_mbtowc+0x16>
 801106a:	f06f 0001 	mvn.w	r0, #1
 801106e:	e7f8      	b.n	8011062 <__ascii_mbtowc+0x16>

08011070 <_read_r>:
 8011070:	b538      	push	{r3, r4, r5, lr}
 8011072:	4c07      	ldr	r4, [pc, #28]	; (8011090 <_read_r+0x20>)
 8011074:	4605      	mov	r5, r0
 8011076:	4608      	mov	r0, r1
 8011078:	4611      	mov	r1, r2
 801107a:	2200      	movs	r2, #0
 801107c:	6022      	str	r2, [r4, #0]
 801107e:	461a      	mov	r2, r3
 8011080:	f7fa fdec 	bl	800bc5c <_read>
 8011084:	1c43      	adds	r3, r0, #1
 8011086:	d102      	bne.n	801108e <_read_r+0x1e>
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	b103      	cbz	r3, 801108e <_read_r+0x1e>
 801108c:	602b      	str	r3, [r5, #0]
 801108e:	bd38      	pop	{r3, r4, r5, pc}
 8011090:	20000f10 	.word	0x20000f10

08011094 <__ascii_wctomb>:
 8011094:	b149      	cbz	r1, 80110aa <__ascii_wctomb+0x16>
 8011096:	2aff      	cmp	r2, #255	; 0xff
 8011098:	bf85      	ittet	hi
 801109a:	238a      	movhi	r3, #138	; 0x8a
 801109c:	6003      	strhi	r3, [r0, #0]
 801109e:	700a      	strbls	r2, [r1, #0]
 80110a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80110a4:	bf98      	it	ls
 80110a6:	2001      	movls	r0, #1
 80110a8:	4770      	bx	lr
 80110aa:	4608      	mov	r0, r1
 80110ac:	4770      	bx	lr
	...

080110b0 <_init>:
 80110b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b2:	bf00      	nop
 80110b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110b6:	bc08      	pop	{r3}
 80110b8:	469e      	mov	lr, r3
 80110ba:	4770      	bx	lr

080110bc <_fini>:
 80110bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110be:	bf00      	nop
 80110c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110c2:	bc08      	pop	{r3}
 80110c4:	469e      	mov	lr, r3
 80110c6:	4770      	bx	lr
